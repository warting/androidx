// The resources for a layout.
syntax = "proto3";

package androidx.wear.protolayout.proto;

import "animation_parameters.proto";
import "color.proto";
import "dynamic.proto";
import "trigger.proto";

option java_package = "androidx.wear.protolayout.proto";
option java_outer_classname = "ResourceProto";

// Format describing the contents of an image data byte array.
enum ImageFormat {
  // An undefined image format.
  IMAGE_FORMAT_UNDEFINED = 0;

  // An image format where each pixel is stored on 2 bytes, with red using 5
  // bits, green using 6 bits and blue using 5 bits of precision.
  IMAGE_FORMAT_RGB_565 = 1;

  // An image format where each pixel is stored on 4 bytes.
  // RGB and alpha (for translucency) is stored with 8 bits of precision.
  IMAGE_FORMAT_ARGB_8888 = 2;
}

// An image resource which maps to an Android drawable by resource ID.
message AndroidImageResourceByResId {
  // The Android resource ID of this image. This must refer to a drawable under
  // R.drawable.
  int32 resource_id = 1;
}

// An image resource which maps to an Android drawable by name.
message AndroidImageResourceByName {
  // The name of the drawable. An Android drawable by this name (i.e.
  // R.drawable.<name>) must exist in the app which provides this layout to the
  // system.
  string name = 1;
}

// An image resource whose data is fully inlined, with no dependency on a
// system or app resource.
message InlineImageResource {
  // The byte array representing the image.
  bytes data = 1;

  // The native width of the image, in pixels. Only required for formats
  // (e.g. IMAGE_FORMAT_RGB_565) where the image data does not include size.
  int32 width_px = 2;

  // The native height of the image, in pixels. Only required for formats
  // (e.g. IMAGE_FORMAT_RGB_565) where the image data does not include size.
  int32 height_px = 3;

  // The format of the byte array data representing the image. May be left
  // unspecified or set to IMAGE_FORMAT_UNDEFINED in which case the platform
  // will attempt to extract this from the raw image data. If the platform does
  // not support the format, the image will not be decoded or displayed.
  ImageFormat format = 4;
}

// An image to be loaded from an HTTP source. May not be supported on all
// platforms.
message HttpImageResource {
  // The URL from which the image will be fetched.
  string url = 1;

  // The native width of the image, in pixels. Only required for formats
  // (e.g. IMAGE_FORMAT_RGB_565) where the image data does not include size.
  int32 width_px = 2;

  // The native height of the image, in pixels. Only required for formats
  // (e.g. IMAGE_FORMAT_RGB_565) where the image data does not include size.
  int32 height_px = 3;

  // The format of the image to be fetched. May be left unspecified or set to
  // IMAGE_FORMAT_UNDEFINED in which case the platform will attempt to extract
  // this from the raw image data. If the platform does not support the format,
  // the image will not be decoded or displayed.
  ImageFormat format = 4;

  // Resource ID to look up in Resources#id_to_image to provide a placeholder
  // image. The placeholder image will be drawn in the Image or SpanImage
  // element which references this resource while the HTTP image is loading.
  // Note that this must not point to another HttpImageResource; it should point
  // to an image resource which can be immediately loaded.
  //
  // If this is empty, no placeholder image will be used (i.e. the Image or
  // SpanImage will remain transparent until the image has loaded).
  string placeholder_image_resource_id = 5;
}

// An image to be loaded from a ContentProvider, by content URI.
message AndroidImageResourceByContentUri {
  // The content URI to use, on the format content://authority/resource.
  string content_uri = 1;
}

// Format describing the contents of an animated image.
enum AnimatedImageFormat {
  // An undefined image format.
  ANIMATED_IMAGE_FORMAT_UNDEFINED = 0;

  // Android AnimatedVectorDrawable.
  ANIMATED_IMAGE_FORMAT_AVD = 1;
}

// A non-seekable animated image resource that maps to an Android drawable by
// resource ID. The animation is started with given trigger, fire and forget.
message AndroidAnimatedImageResourceByResId {
  // The format for the animated image.
  AnimatedImageFormat animated_image_format = 1;

  // The Android resource ID, e.g. R.drawable.foo.
  int32 resource_id = 2;

  // The trigger to start the animation.
  Trigger start_trigger = 3;
}

// A seekable animated image resource that maps to an Android drawable by
// resource ID. The animation progress is bound to the provided dynamic float.
message AndroidSeekableAnimatedImageResourceByResId {
  // The format for the animated image.
  AnimatedImageFormat animated_image_format = 1;

  // The Android resource ID, e.g. R.drawable.foo
  int32 resource_id = 2;

  // A DynamicFloat, normally transformed from certain states with the data
  // binding pipeline to control the progress of the animation. Its value is
  // required to fall in the range of [0.0, 1.0]. Any values outside this range
  // would be clamped. When the first value of the DynamicFloat arrives, the
  // animation starts from progress 0 to that value. After that it plays from
  // current progress to the new value on subsequent updates. If not set, the
  // animation will play on load (similar to a non-seekable animated).
  androidx.wear.protolayout.expression.proto.DynamicFloat progress = 3;
}

// A Lottie resource that is read from a raw Android resource ID.
message AndroidLottieResourceByResId {
  // The Android resource ID, e.g. R.raw.foo
  int32 raw_resource_id = 1;

  // A DynamicFloat, normally transformed from certain states with the data
  // binding pipeline to control the progress of the animation.
  //
  // <setter>Its value is required to fall in the range of [0.0, 1.0]. Any
  // values outside this range would be clamped.
  //
  // When the first value of the DynamicFloat arrives, the animation starts from
  // progress 0 to that value. After that it plays from current progress to the
  // new value on subsequent updates.
  //
  // If not set, the animation will play on load.</setter>
  androidx.wear.protolayout.expression.proto.DynamicFloat progress = 2;

  // The trigger to start the animation.
  Trigger start_trigger = 3;

  // The collection of properties to customize Lottie further.
  //
  // There shouldn't be more than 10 of properties in this collection. Each property can be applied
  // to one or more elements in Lottie file.
  repeated LottieProperty properties = 4;
}

// A single point of customization in a Lottie file.
//
// Property can be applicable to one or more elements.
message LottieProperty {
  oneof inner {
    // A single point of customization for Lottie file, that applies given color on all slots with
    // the specified slot ID.
    LottieSlotColorFilter slot_color = 1;
  }
}

// A single point of customization for Lottie file, that applies given color on all slots with the
// specified slot ID.
message LottieSlotColorFilter {
  // The slot ID to which color filter should be applied. The same ID can correspond to multiple
  // slots, however, for each of those, all parents in the path should have names.
  string sid = 1;
  // The color to be applied on slots with this slot ID.
  ColorProp color = 2;
}

// An image resource, which can be used by layouts. This holds multiple
// underlying resource types, which the underlying runtime will pick according
// to what it thinks is appropriate.
message ImageResource {
  // An image resource that maps to an Android drawable by resource ID.
  AndroidImageResourceByResId android_resource_by_res_id = 1;

  // An image resource that contains the image data inline.
  InlineImageResource inline_resource = 2;

  // An image resource that maps to an Android drawable by name.
  AndroidImageResourceByName android_resource_by_name = 3;

  // An image resource that contains a URL to a http image.
  HttpImageResource http_resource = 4;

  // An image which loads its drawable via an Android Content URI.
  AndroidImageResourceByContentUri android_content_uri = 5;

  // A non-seekable animated image resource that maps to an Android drawable by
  // resource ID. The animation is started with given trigger, fire and forget.
  AndroidAnimatedImageResourceByResId android_animated_resource_by_res_id = 6;

  // A seekable animated image resource that maps to an Android drawable by
  // resource ID. The animation progress is bound to the provided dynamic float.
  AndroidSeekableAnimatedImageResourceByResId
      android_seekable_animated_resource_by_res_id = 7;

  // A Lottie resource that is read from a raw Android resource ID.
  AndroidLottieResourceByResId android_lottie_resource_by_res_id = 8;
}

// The resources for a layout.
message Resources {
  // The version of this Resources instance.
  //
  // Each layout specifies the version of resources it requires. After fetching
  // a layout, the renderer will use the resources version specified by the
  // layout to separately fetch the resources.
  //
  // This value must match the version of the resources required by the layout
  // for the layout to render successfully, and must match the resource version
  // specified in ResourcesRequest which triggered this request.
  string version = 1;

  // A map of resource_ids to images, which can be used by layouts.
  map<string, ImageResource> id_to_image = 2;
}
