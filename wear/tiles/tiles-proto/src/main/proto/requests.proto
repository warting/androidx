// Request messages used to fetch tiles and resources
syntax = "proto3";

package androidx.wear.tiles.proto;

import "device_parameters.proto";
import "state.proto";

option java_package = "androidx.wear.tiles.proto";
option java_outer_classname = "RequestProto";

// Parameters passed to a Tile Service when the renderer is requesting a new
// version of the tile.
message TileRequest {
  // The DeviceParameters object describing the device requesting the tile
  // update. If not set, a default empty instance is used.
  androidx.wear.protolayout.proto.DeviceParameters device_configuration = 1;

  // The State that should be used when building the tile.
  androidx.wear.protolayout.proto.State current_state = 2;

  // The ID of the tile being requested.
  uint32 tile_id = 3;

  // The timestamp of the last time the tile was visible.
  uint64 last_visible_millis = 4;

  // The version of the resources that are currently cached in the renderer.
  //
  // If this is empty, the renderer does not have any resources cached.
  string last_resources_version = 5;
}

// Parameters passed to a Tile Service when the renderer is requesting a
// specific resource version.
message ResourcesRequest {
  // The version of the resources being fetched. This is the same as the
  // requested resource version, passed in Tile.
  string version = 1;

  // Requested resource IDs. This specifies which tile resources should be
  // returned in the Resources response. If not specified, all resources for the
  // given version must be provided in the response.
  //
  // Note that resource IDs here correspond to tile resources (i.e. keys that
  // would be used in Resources.idToImage), not Android resource names or
  // similar.
  repeated string resource_ids = 2;

  // The DeviceParameters object describing the device requesting the resources.
  androidx.wear.protolayout.proto.DeviceParameters device_configuration = 3;

  // The ID of the tile for which resources are being requested.
  uint32 tile_id = 4;
}

// Parameters passed to UpdateRequesterService when an update is being requested.
message TileUpdateRequest {
  oneof optional_tile_id {
    // The ID of the tile for which the update is being requested.
    uint32 tile_id = 1;
  }
}
