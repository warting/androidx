// Signature format: 4.0
package androidx.wear.compose.navigation {

  public final class NavGraphBuilderKt {
    method public static void composable(androidx.navigation.NavGraphBuilder, String route, optional java.util.List<androidx.navigation.NamedNavArgument> arguments, optional java.util.List<androidx.navigation.NavDeepLink> deepLinks, kotlin.jvm.functions.Function1<? super androidx.navigation.NavBackStackEntry,kotlin.Unit> content);
    method @BytecodeOnly public static void composable(androidx.navigation.NavGraphBuilder, String, java.util.List<androidx.navigation.NamedNavArgument!>, java.util.List<androidx.navigation.NavDeepLink!>, kotlin.jvm.functions.Function3<? super androidx.navigation.NavBackStackEntry!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
  }

  public final class SwipeDismissableNavHostControllerKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<androidx.navigation.NavBackStackEntry?> currentBackStackEntryAsState(androidx.navigation.NavController);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<androidx.navigation.NavBackStackEntry!> currentBackStackEntryAsState(androidx.navigation.NavController, androidx.compose.runtime.Composer?, int);
    method @androidx.compose.runtime.Composable public static androidx.navigation.NavHostController rememberSwipeDismissableNavController();
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.navigation.NavHostController rememberSwipeDismissableNavController(androidx.compose.runtime.Composer?, int);
  }

  public final class SwipeDismissableNavHostKt {
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void SwipeDismissableNavHost(androidx.navigation.NavHostController!, androidx.navigation.NavGraph!, androidx.compose.ui.Modifier!, androidx.wear.compose.navigation.SwipeDismissableNavHostState!, androidx.compose.runtime.Composer!, int, int);
    method @androidx.compose.runtime.Composable public static void SwipeDismissableNavHost(androidx.navigation.NavHostController navController, androidx.navigation.NavGraph graph, optional androidx.compose.ui.Modifier modifier, optional boolean userSwipeEnabled, optional androidx.wear.compose.navigation.SwipeDismissableNavHostState state);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void SwipeDismissableNavHost(androidx.navigation.NavHostController, androidx.navigation.NavGraph, androidx.compose.ui.Modifier?, boolean, androidx.wear.compose.navigation.SwipeDismissableNavHostState?, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void SwipeDismissableNavHost(androidx.navigation.NavHostController!, String!, androidx.compose.ui.Modifier!, androidx.wear.compose.navigation.SwipeDismissableNavHostState!, String!, kotlin.jvm.functions.Function1!, androidx.compose.runtime.Composer!, int, int);
    method @androidx.compose.runtime.Composable public static void SwipeDismissableNavHost(androidx.navigation.NavHostController navController, String startDestination, optional androidx.compose.ui.Modifier modifier, optional boolean userSwipeEnabled, optional androidx.wear.compose.navigation.SwipeDismissableNavHostState state, optional String? route, kotlin.jvm.functions.Function1<? super androidx.navigation.NavGraphBuilder,kotlin.Unit> builder);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void SwipeDismissableNavHost(androidx.navigation.NavHostController, String, androidx.compose.ui.Modifier?, boolean, androidx.wear.compose.navigation.SwipeDismissableNavHostState?, String?, kotlin.jvm.functions.Function1<? super androidx.navigation.NavGraphBuilder!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.navigation.SwipeDismissableNavHostState rememberSwipeDismissableNavHostState(optional androidx.wear.compose.foundation.SwipeToDismissBoxState swipeToDismissBoxState);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.wear.compose.navigation.SwipeDismissableNavHostState rememberSwipeDismissableNavHostState(androidx.wear.compose.foundation.SwipeToDismissBoxState?, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public static androidx.wear.compose.navigation.SwipeDismissableNavHostState! rememberSwipeDismissableNavHostState(androidx.wear.compose.material.SwipeToDismissBoxState!, androidx.compose.runtime.Composer!, int, int);
  }

  public final class SwipeDismissableNavHostState {
    ctor public SwipeDismissableNavHostState(androidx.wear.compose.foundation.SwipeToDismissBoxState swipeToDismissBoxState);
    ctor @Deprecated public SwipeDismissableNavHostState(androidx.wear.compose.material.SwipeToDismissBoxState swipeToDismissBoxState);
  }

  @androidx.navigation.Navigator.Name("wear-navigator") public final class WearNavigator extends androidx.navigation.Navigator<androidx.wear.compose.navigation.WearNavigator.Destination> {
    ctor public WearNavigator();
    method public androidx.wear.compose.navigation.WearNavigator.Destination createDestination();
  }

  @androidx.navigation.NavDestination.ClassType(Composable::class) public static final class WearNavigator.Destination extends androidx.navigation.NavDestination {
    ctor public WearNavigator.Destination(androidx.wear.compose.navigation.WearNavigator navigator, kotlin.jvm.functions.Function1<? super androidx.navigation.NavBackStackEntry,kotlin.Unit> content);
    ctor @BytecodeOnly public WearNavigator.Destination(androidx.wear.compose.navigation.WearNavigator, kotlin.jvm.functions.Function3<? super androidx.navigation.NavBackStackEntry!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
  }

}

