<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.11.0-alpha10" type="baseline" client="gradle" dependencies="false" name="AGP (8.11.0-alpha10)" variant="all" version="8.11.0-alpha10">

    <issue
        id="ComposableLambdaParameterNaming"
        message="Composable lambda parameter should be named `content`"
        errorLine1="        icon: @Composable () -> Unit = { Icon(SwipeToRevealDefaults.MoreOptions, &quot;More Options&quot;) },"
        errorLine2="        ~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealTest.kt"/>
    </issue>

    <issue
        id="ComposableLambdaParameterNaming"
        message="Composable lambda parameter should be named `content`"
        errorLine1="        label: @Composable () -> Unit = { Text(&quot;Undo&quot;) },"
        errorLine2="        ~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealTest.kt"/>
    </issue>

    <issue
        id="ComposableLambdaParameterNaming"
        message="Composable lambda parameter should be named `content`"
        errorLine1="        toggleControl: @Composable () -> Unit = {"
        errorLine2="        ~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/ToggleChipScreenshotTest.kt"/>
    </issue>

    <issue
        id="ComposableLambdaParameterPosition"
        message="Composable lambda parameter should be the last parameter so it can be used as a trailing lambda"
        errorLine1="        icon: @Composable () -> Unit = { Icon(SwipeToRevealDefaults.MoreOptions, &quot;More Options&quot;) },"
        errorLine2="        ~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealTest.kt"/>
    </issue>

    <issue
        id="ComposableLambdaParameterPosition"
        message="Composable lambda parameter should be the last parameter so it can be used as a trailing lambda"
        errorLine1="        label: @Composable () -> Unit = { Text(&quot;Undo&quot;) },"
        errorLine2="        ~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun sampleAppCard(enabled: Boolean = true) {"
        errorLine2="                ~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/CardScreenshotTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun sampleTitleCard("
        errorLine2="                ~~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/CardScreenshotTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun sampleChip("
        errorLine2="                ~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/ChipScreenshotTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun sampleOutlinedChip("
        errorLine2="                ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/ChipScreenshotTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun sampleCompactChip(enabled: Boolean = true) {"
        errorLine2="                ~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/ChipScreenshotTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun samplePickerGroup(pickerCount: Int = 2, autoCenter: Boolean = false) {"
        errorLine2="                ~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/PickerGroupScreenshotTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun BoxScope.boxContent(isBackground: Boolean) {"
        errorLine2="                         ~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToDismissBoxScreenshotTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    fun toggleScreen(saveableStateHolder: SaveableStateHolder) {"
        errorLine2="        ~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToDismissBoxTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    fun counterScreen(saveableStateHolder: SaveableStateHolder) {"
        errorLine2="        ~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToDismissBoxTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun messageContent() {"
        errorLine2="                ~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToDismissBoxTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun nestedScrollContent("
        errorLine2="                ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToDismissBoxTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun swipeToRevealCard("
        errorLine2="                ~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealScreenshotTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun swipeToRevealChip("
        errorLine2="                ~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealScreenshotTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun swipeToRevealWithDefaults("
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun getBoxContent(onClick: () -> Unit = {}, modifier: Modifier = Modifier) {"
        errorLine2="                ~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun actionContent(modifier: Modifier = Modifier) {"
        errorLine2="                ~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun getAction("
        errorLine2="                ~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun swipeToRevealChipDefault("
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun swipeToRevealCardDefault("
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun sampleToggleChip("
        errorLine2="                ~~~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/ToggleChipScreenshotTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun sampleSplitToggleChip(enabled: Boolean = true) {"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/ToggleChipScreenshotTest.kt"/>
    </issue>

    <issue
        id="CoroutineCreationDuringComposition"
        message="Calls to launch should happen inside a LaunchedEffect and not composition"
        errorLine1="            coroutineScope.launch { revealState.animateTo(RevealValue.RightRevealed) }"
        errorLine2="                           ~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealScreenshotTest.kt"/>
    </issue>

    <issue
        id="CoroutineCreationDuringComposition"
        message="Calls to launch should happen inside a LaunchedEffect and not composition"
        errorLine1="            coroutineScope.launch { revealState.animateTo(RevealValue.RightRevealed) }"
        errorLine2="                           ~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealScreenshotTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="    private fun testBackgroundModifier(): Modifier ="
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/ToggleControlScreenshotTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="fun TestImage(iconLabel: String = &quot;TestIcon&quot;, modifier: Modifier = Modifier) {"
        errorLine2="                                              ~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/MaterialTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="        modifier: Modifier = Modifier,"
        errorLine2="        ~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="    private fun getBoxContent(onClick: () -> Unit = {}, modifier: Modifier = Modifier) {"
        errorLine2="                                                        ~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="        modifier: Modifier = Modifier,"
        errorLine2="        ~~~~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/SwipeToRevealTest.kt"/>
    </issue>

    <issue
        id="AutoboxingStateValueProperty"
        message="Assigning `value` will cause an autoboxing operation. Use `longValue` to avoid unnecessary allocations."
        errorLine1="        frameMillis.value += timeToAdd"
        errorLine2="                    ~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/PlaceholderTest.kt"/>
    </issue>

    <issue
        id="AutoboxingStateValueProperty"
        message="Assigning `value` will cause an autoboxing operation. Use `longValue` to avoid unnecessary allocations."
        errorLine1="        frameMillis.value += PLACEHOLDER_SHIMMER_DURATION_MS"
        errorLine2="                    ~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/PlaceholderTest.kt"/>
    </issue>

    <issue
        id="AutoboxingStateValueProperty"
        message="Assigning `value` will cause an autoboxing operation. Use `longValue` to avoid unnecessary allocations."
        errorLine1="        frameMillis.value = currentTime"
        errorLine2="                    ~~~~~">
        <location
            file="src/androidTest/kotlin/androidx/wear/compose/material/PlaceholderTest.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="constructor FortyFiveDegreeLinearGradient has parameter colors with type List&lt;Color>: replace with LongList"
        errorLine1="    private val colors: List&lt;Color>,"
        errorLine2="                        ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Card.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field colors with type List&lt;Color>: replace with LongList"
        errorLine1="    private val colors: List&lt;Color>,"
        errorLine2="                        ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Card.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="constructor FortyFiveDegreeLinearGradient has parameter stops with type List&lt;Float>: replace with FloatList"
        errorLine1="    private val stops: List&lt;Float>? = null,"
        errorLine2="                       ~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Card.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field stops with type List&lt;Float>: replace with FloatList"
        errorLine1="    private val stops: List&lt;Float>? = null,"
        errorLine2="                       ~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Card.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable backgroundColors with type List&lt;? extends Color>: replace with LongList"
        errorLine1="        val backgroundColors: List&lt;Color>"
        errorLine2="                              ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Chip.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable disabledBackgroundColors with type List&lt;? extends Color>: replace with LongList"
        errorLine1="        val disabledBackgroundColors: List&lt;Color>"
        errorLine2="                                      ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Chip.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method setAnchors$compose_material has parameter anchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="    internal var anchors by mutableStateOf(emptyMap&lt;Float, T>())"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;Float, T> of getAnchors$compose_material: replace with FloatObjectMap"
        errorLine1="    internal var anchors by mutableStateOf(emptyMap&lt;Float, T>())"
        errorLine2="                 ~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method ensureInit$compose_material has parameter newAnchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="    internal fun ensureInit(newAnchors: Map&lt;Float, T>) {"
        errorLine2="                                        ~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method processNewAnchors$compose_material has parameter newAnchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="    internal suspend fun processNewAnchors(oldAnchors: Map&lt;Float, T>, newAnchors: Map&lt;Float, T>) {"
        errorLine2="                                                                                  ~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method processNewAnchors$compose_material has parameter oldAnchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="    internal suspend fun processNewAnchors(oldAnchors: Map&lt;Float, T>, newAnchors: Map&lt;Float, T>) {"
        errorLine2="                                                       ~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable bounds with type List&lt;? extends Float>: replace with FloatList"
        errorLine1="            val bounds = findBounds(offset.value, anchors.keys)"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method swipeable has parameter anchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="    anchors: Map&lt;Float, T>,"
        errorLine2="             ~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable oldAnchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="            val oldAnchors = state.anchors"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method findBounds has parameter anchors with type Set&lt;Float>: replace with FloatSet"
        errorLine1="private fun findBounds(offset: Float, anchors: Set&lt;Float>): List&lt;Float> {"
        errorLine2="                                               ~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Float> of findBounds: replace with FloatList"
        errorLine1="private fun findBounds(offset: Float, anchors: Set&lt;Float>): List&lt;Float> {"
        errorLine2="                                                            ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method computeTarget has parameter anchors with type Set&lt;Float>: replace with FloatSet"
        errorLine1="    anchors: Set&lt;Float>,"
        errorLine2="             ~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable bounds with type List&lt;? extends Float>: replace with FloatList"
        errorLine1="    val bounds = findBounds(offset, anchors)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method getOffset has parameter $this$getOffset with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="private fun &lt;T> Map&lt;Float, T>.getOffset(state: T): Float? {"
        errorLine2="                ~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method resistanceConfig has parameter anchors with type Set&lt;Float>: replace with FloatSet"
        errorLine1="        anchors: Set&lt;Float>,"
        errorLine2="                 ~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable checkedBackgroundColors with type List&lt;? extends Color>: replace with LongList"
        errorLine1="        val checkedBackgroundColors: List&lt;Color>"
        errorLine2="                                     ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/ToggleChip.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable disabledCheckedBackgroundColors with type List&lt;? extends Color>: replace with LongList"
        errorLine1="        val disabledCheckedBackgroundColors: List&lt;Color>"
        errorLine2="                                             ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/ToggleChip.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable uncheckedBackgroundColors with type List&lt;? extends Color>: replace with LongList"
        errorLine1="        val uncheckedBackgroundColors: List&lt;Color>"
        errorLine2="                                       ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/ToggleChip.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable disabledUncheckedBackgroundColors with type List&lt;? extends Color>: replace with LongList"
        errorLine1="        val disabledUncheckedBackgroundColors: List&lt;Color>"
        errorLine2="                                               ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/wear/compose/material/ToggleChip.kt"/>
    </issue>

</issues>
