// Signature format: 4.0
package androidx.wear.compose.material3 {

  public final class AlertDialogDefaults {
    method @androidx.compose.runtime.Composable public void ConfirmButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.IconButtonColors colors, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public void DismissButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.IconButtonColors colors, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public void EdgeButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ButtonColors colors, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public void GroupSeparator();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.layout.PaddingValues confirmDismissContentPadding();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.layout.PaddingValues confirmDismissWithIconContentPadding();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.layout.PaddingValues contentPadding();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.layout.PaddingValues contentWithIconPadding();
    method public kotlin.jvm.functions.Function1<androidx.compose.foundation.layout.RowScope,kotlin.Unit> getConfirmIcon();
    method public kotlin.jvm.functions.Function1<androidx.compose.foundation.layout.RowScope,kotlin.Unit> getDismissIcon();
    method public androidx.compose.foundation.layout.Arrangement.Vertical getVerticalArrangement();
    property public kotlin.jvm.functions.Function1<androidx.compose.foundation.layout.RowScope,kotlin.Unit> ConfirmIcon;
    property public kotlin.jvm.functions.Function1<androidx.compose.foundation.layout.RowScope,kotlin.Unit> DismissIcon;
    property public androidx.compose.foundation.layout.Arrangement.Vertical VerticalArrangement;
    field public static final androidx.wear.compose.material3.AlertDialogDefaults INSTANCE;
  }

  public final class AlertDialogKt {
    method @androidx.compose.runtime.Composable public static void AlertDialog(boolean visible, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function0<kotlin.Unit> title, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? icon, optional kotlin.jvm.functions.Function0<kotlin.Unit>? text, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.ui.window.DialogProperties properties, optional kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit>? content);
    method @androidx.compose.runtime.Composable public static void AlertDialog(boolean visible, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> edgeButton, kotlin.jvm.functions.Function0<kotlin.Unit> title, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? icon, optional kotlin.jvm.functions.Function0<kotlin.Unit>? text, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.ui.window.DialogProperties properties, optional kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit>? content);
    method @androidx.compose.runtime.Composable public static void AlertDialog(boolean visible, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> confirmButton, kotlin.jvm.functions.Function0<kotlin.Unit> title, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> dismissButton, optional kotlin.jvm.functions.Function0<kotlin.Unit>? icon, optional kotlin.jvm.functions.Function0<kotlin.Unit>? text, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.ui.window.DialogProperties properties, optional kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit>? content);
    method @androidx.compose.runtime.Composable public static void AlertDialogContent(kotlin.jvm.functions.Function0<kotlin.Unit> title, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? icon, optional kotlin.jvm.functions.Function0<kotlin.Unit>? text, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit>? content);
    method @androidx.compose.runtime.Composable public static void AlertDialogContent(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> edgeButton, kotlin.jvm.functions.Function0<kotlin.Unit> title, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? icon, optional kotlin.jvm.functions.Function0<kotlin.Unit>? text, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit>? content);
    method @androidx.compose.runtime.Composable public static void AlertDialogContent(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> confirmButton, kotlin.jvm.functions.Function0<kotlin.Unit> title, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> dismissButton, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? icon, optional kotlin.jvm.functions.Function0<kotlin.Unit>? text, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit>? content);
  }

  @kotlin.jvm.JvmInline public final value class AngularDirection {
    field public static final androidx.wear.compose.material3.AngularDirection.Companion Companion;
  }

  public static final class AngularDirection.Companion {
    method public int getClockwise();
    method public int getCounterClockwise();
    property public int Clockwise;
    property public int CounterClockwise;
  }

  @RequiresApi(31) public final class AnimatedTextDefaults {
    method public int getCacheSize();
    property public int CacheSize;
    field public static final androidx.wear.compose.material3.AnimatedTextDefaults INSTANCE;
  }

  @RequiresApi(31) public final class AnimatedTextFontRegistry {
    ctor public AnimatedTextFontRegistry(androidx.compose.ui.text.TextStyle textStyle, androidx.compose.ui.text.font.FontVariation.Settings startFontVariationSettings, androidx.compose.ui.text.font.FontVariation.Settings endFontVariationSettings, long startFontSize, long endFontSize, androidx.compose.ui.unit.Density density, androidx.compose.ui.text.font.FontFamily.Resolver fontFamilyResolver, optional long contentColor, optional int cacheSize);
  }

  public final class AnimatedTextKt {
    method @RequiresApi(31) @androidx.compose.runtime.Composable public static void AnimatedText(String text, androidx.wear.compose.material3.AnimatedTextFontRegistry fontRegistry, kotlin.jvm.functions.Function0<java.lang.Float> progressFraction, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.Alignment contentAlignment);
    method @RequiresApi(31) @androidx.compose.runtime.Composable public static androidx.wear.compose.material3.AnimatedTextFontRegistry rememberAnimatedTextFontRegistry(androidx.compose.ui.text.font.FontVariation.Settings startFontVariationSettings, androidx.compose.ui.text.font.FontVariation.Settings endFontVariationSettings, optional androidx.compose.ui.text.TextStyle textStyle, optional long startFontSize, optional long endFontSize);
  }

  public final class AppScaffoldKt {
    method @androidx.compose.runtime.Composable public static void AppScaffold(optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> timeText, optional long containerColor, optional long contentColor, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
  }

  public final class ArcProgressIndicatorDefaults {
    method public float calculateRecommendedGapSize(float strokeWidth);
    method public float getIndeterminateEndAngle();
    method public float getIndeterminateStartAngle();
    method public float getIndeterminateStrokeWidth();
    method @androidx.compose.runtime.Composable public float getRecommendedIndeterminateDiameter();
    property public float IndeterminateEndAngle;
    property public float IndeterminateStartAngle;
    property public float IndeterminateStrokeWidth;
    property @androidx.compose.runtime.Composable public float recommendedIndeterminateDiameter;
    field public static final androidx.wear.compose.material3.ArcProgressIndicatorDefaults INSTANCE;
  }

  public final class ArcProgressIndicatorKt {
    method @androidx.compose.runtime.Composable public static void ArcProgressIndicator(optional androidx.compose.ui.Modifier modifier, optional float startAngle, optional float endAngle, optional int angularDirection, optional androidx.wear.compose.material3.ProgressIndicatorColors colors, optional float strokeWidth, optional float gapSize);
  }

  @androidx.compose.runtime.Immutable public final class ButtonColors {
    ctor public ButtonColors(long containerColor, long contentColor, long secondaryContentColor, long iconColor, long disabledContainerColor, long disabledContentColor, long disabledSecondaryContentColor, long disabledIconColor);
    method public androidx.wear.compose.material3.ButtonColors copy(optional long containerColor, optional long contentColor, optional long secondaryContentColor, optional long iconColor, optional long disabledContainerColor, optional long disabledContentColor, optional long disabledSecondaryContentColor, optional long disabledIconColor);
    method public long getContainerColor();
    method public long getContentColor();
    method public long getDisabledContainerColor();
    method public long getDisabledContentColor();
    method public long getDisabledIconColor();
    method public long getDisabledSecondaryContentColor();
    method public long getIconColor();
    method public long getSecondaryContentColor();
    property public long containerColor;
    property public long contentColor;
    property public long disabledContainerColor;
    property public long disabledContentColor;
    property public long disabledIconColor;
    property public long disabledSecondaryContentColor;
    property public long iconColor;
    property public long secondaryContentColor;
  }

  public final class ButtonDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ButtonColors buttonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ButtonColors buttonColors(optional long containerColor, optional long contentColor, optional long secondaryContentColor, optional long iconColor, optional long disabledContainerColor, optional long disabledContentColor, optional long disabledSecondaryContentColor, optional long disabledIconColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ButtonColors buttonWithContainerPainterColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ButtonColors buttonWithContainerPainterColors(optional long contentColor, optional long secondaryContentColor, optional long iconColor, optional long disabledContentColor, optional long disabledSecondaryContentColor, optional long disabledIconColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ButtonColors childButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ButtonColors childButtonColors(optional long contentColor, optional long secondaryContentColor, optional long iconColor, optional long disabledContentColor, optional long disabledSecondaryContentColor, optional long disabledIconColor);
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.painter.Painter containerPainter(androidx.compose.ui.graphics.painter.Painter image, optional androidx.compose.ui.graphics.Brush? scrim, optional boolean sizeToIntrinsics, optional androidx.compose.ui.Alignment alignment, optional androidx.compose.ui.layout.ContentScale contentScale, optional float alpha);
    method public androidx.compose.ui.graphics.painter.Painter disabledContainerPainter(androidx.compose.ui.graphics.painter.Painter containerPainter);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ButtonColors filledTonalButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ButtonColors filledTonalButtonColors(optional long containerColor, optional long contentColor, optional long secondaryContentColor, optional long iconColor, optional long disabledContainerColor, optional long disabledContentColor, optional long disabledSecondaryContentColor, optional long disabledIconColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ButtonColors filledVariantButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ButtonColors filledVariantButtonColors(optional long containerColor, optional long contentColor, optional long secondaryContentColor, optional long iconColor, optional long disabledContainerColor, optional long disabledContentColor, optional long disabledSecondaryContentColor, optional long disabledIconColor);
    method public float getButtonExtraLargeIconStartPadding();
    method public float getButtonHorizontalPadding();
    method public float getButtonLargeIconStartPadding();
    method public float getButtonVerticalPadding();
    method public androidx.compose.foundation.layout.PaddingValues getButtonWithExtraLargeIconContentPadding();
    method public androidx.compose.foundation.layout.PaddingValues getButtonWithLargeIconContentPadding();
    method public androidx.compose.foundation.layout.PaddingValues getCompactButtonContentPadding();
    method public float getCompactButtonHeight();
    method public float getCompactButtonHorizontalPadding();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.RoundedCornerShape getCompactButtonShape();
    method public androidx.compose.foundation.layout.PaddingValues getCompactButtonTapTargetPadding();
    method public float getCompactButtonVerticalPadding();
    method public androidx.compose.foundation.layout.PaddingValues getContentPadding();
    method public float getDisabledContainerAlpha();
    method public float getExtraLargeIconSize();
    method public float getExtraSmallIconSize();
    method public float getHeight();
    method public float getIconSize();
    method public float getIconSpacing();
    method public float getLargeIconSize();
    method @androidx.compose.runtime.Composable public long getScrimGradientEndColor();
    method @androidx.compose.runtime.Composable public long getScrimGradientStartColor();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.RoundedCornerShape getShape();
    method public float getSmallIconSize();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.BorderStroke outlinedButtonBorder(boolean enabled, optional long borderColor, optional long disabledBorderColor, optional float borderWidth);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ButtonColors outlinedButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ButtonColors outlinedButtonColors(optional long contentColor, optional long secondaryContentColor, optional long iconColor, optional long disabledContentColor, optional long disabledSecondaryContentColor, optional long disabledIconColor);
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Brush scrimBrush();
    property public float ButtonExtraLargeIconStartPadding;
    property public float ButtonHorizontalPadding;
    property public float ButtonLargeIconStartPadding;
    property public float ButtonVerticalPadding;
    property public androidx.compose.foundation.layout.PaddingValues ButtonWithExtraLargeIconContentPadding;
    property public androidx.compose.foundation.layout.PaddingValues ButtonWithLargeIconContentPadding;
    property public androidx.compose.foundation.layout.PaddingValues CompactButtonContentPadding;
    property public float CompactButtonHeight;
    property public float CompactButtonHorizontalPadding;
    property public androidx.compose.foundation.layout.PaddingValues CompactButtonTapTargetPadding;
    property public float CompactButtonVerticalPadding;
    property public androidx.compose.foundation.layout.PaddingValues ContentPadding;
    property public float DisabledContainerAlpha;
    property public float ExtraLargeIconSize;
    property public float ExtraSmallIconSize;
    property public float Height;
    property public float IconSize;
    property public float IconSpacing;
    property public float LargeIconSize;
    property public float SmallIconSize;
    property @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.RoundedCornerShape compactButtonShape;
    property @androidx.compose.runtime.Composable public long scrimGradientEndColor;
    property @androidx.compose.runtime.Composable public long scrimGradientStartColor;
    property @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.RoundedCornerShape shape;
    field public static final androidx.wear.compose.material3.ButtonDefaults INSTANCE;
  }

  public final class ButtonGroupDefaults {
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.layout.PaddingValues fullWidthPaddings();
    method public float getExpansionWidth();
    method public float getMinWidth();
    method public float getSpacing();
    property public float ExpansionWidth;
    property public float MinWidth;
    property public float Spacing;
    field public static final androidx.wear.compose.material3.ButtonGroupDefaults INSTANCE;
  }

  public final class ButtonGroupKt {
    method @androidx.compose.runtime.Composable public static void ButtonGroup(optional androidx.compose.ui.Modifier modifier, optional float spacing, optional float expansionWidth, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.ui.Alignment.Vertical verticalAlignment, kotlin.jvm.functions.Function1<? super androidx.wear.compose.material3.ButtonGroupScope,kotlin.Unit> content);
  }

  public interface ButtonGroupScope {
    method public androidx.compose.ui.Modifier animateWidth(androidx.compose.ui.Modifier, androidx.compose.foundation.interaction.InteractionSource interactionSource);
    method public androidx.compose.ui.Modifier minWidth(androidx.compose.ui.Modifier, optional float minWidth);
    method public androidx.compose.ui.Modifier weight(androidx.compose.ui.Modifier, @FloatRange(from=0.0, fromInclusive=false) float weight);
  }

  public final class ButtonKt {
    method @androidx.compose.runtime.Composable public static void Button(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.graphics.painter.Painter containerPainter, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.compose.ui.graphics.painter.Painter disabledContainerPainter, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.ButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void Button(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.graphics.painter.Painter containerPainter, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? secondaryLabel, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? icon, optional boolean enabled, optional androidx.compose.ui.graphics.painter.Painter disabledContainerPainter, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.ButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> label);
    method @androidx.compose.runtime.Composable public static void Button(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.ButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void Button(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? secondaryLabel, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? icon, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.ButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> label);
    method @androidx.compose.runtime.Composable public static void ChildButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.ButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void ChildButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? secondaryLabel, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? icon, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.ButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> label);
    method @androidx.compose.runtime.Composable public static void CompactButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? icon, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.ButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? label);
    method @androidx.compose.runtime.Composable public static void FilledTonalButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.ButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void FilledTonalButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? secondaryLabel, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? icon, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.ButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> label);
    method @androidx.compose.runtime.Composable public static void OutlinedButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.ButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void OutlinedButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? secondaryLabel, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? icon, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.ButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> label);
  }

  @androidx.compose.runtime.Immutable public final class CardColors {
    ctor public CardColors(long containerColor, long contentColor, long appNameColor, long timeColor, long titleColor, long subtitleColor);
    method public androidx.wear.compose.material3.CardColors copy(optional long containerColor, optional long contentColor, optional long appNameColor, optional long timeColor, optional long titleColor, optional long subtitleColor);
    method public long getAppNameColor();
    method public long getContainerColor();
    method public long getContentColor();
    method public long getSubtitleColor();
    method public long getTimeColor();
    method public long getTitleColor();
    property public long appNameColor;
    property public long containerColor;
    property public long contentColor;
    property public long subtitleColor;
    property public long timeColor;
    property public long titleColor;
  }

  public final class CardDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.CardColors cardColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.CardColors cardColors(optional long containerColor, optional long contentColor, optional long appNameColor, optional long timeColor, optional long titleColor, optional long subtitleColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.CardColors cardWithContainerPainterColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.CardColors cardWithContainerPainterColors(optional long contentColor, optional long appNameColor, optional long timeColor, optional long titleColor, optional long subtitleColor);
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.painter.Painter containerPainter(androidx.compose.ui.graphics.painter.Painter image, optional androidx.compose.ui.graphics.Brush scrim, optional boolean sizeToIntrinsics, optional androidx.compose.ui.Alignment alignment, optional androidx.compose.ui.layout.ContentScale contentScale, optional float alpha);
    method public float getAppImageSize();
    method public androidx.compose.foundation.layout.PaddingValues getCardWithContainerPainterContentPadding();
    method public androidx.compose.foundation.layout.PaddingValues getContentPadding();
    method public float getHeight();
    method public float getImageBottomPadding();
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public long getScrimColor();
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape getShape();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.BorderStroke outlinedCardBorder(optional long outlineColor, optional float borderWidth);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.CardColors outlinedCardColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.CardColors outlinedCardColors(optional long contentColor, optional long appNameColor, optional long timeColor, optional long titleColor, optional long subtitleColor);
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Brush scrimBrush();
    property public float AppImageSize;
    property public androidx.compose.foundation.layout.PaddingValues CardWithContainerPainterContentPadding;
    property public androidx.compose.foundation.layout.PaddingValues ContentPadding;
    property public float Height;
    property public float ImageBottomPadding;
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public long scrimColor;
    property @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape shape;
    field public static final androidx.wear.compose.material3.CardDefaults INSTANCE;
  }

  public final class CardKt {
    method @androidx.compose.runtime.Composable public static void AppCard(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> appName, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> title, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.CardColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? appImage, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? time, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void Card(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.graphics.painter.Painter containerPainter, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.CardColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void Card(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.CardColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void OutlinedCard(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.CardColors colors, optional androidx.compose.foundation.BorderStroke border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void TitleCard(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.graphics.painter.Painter containerPainter, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> title, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional kotlin.jvm.functions.Function0<kotlin.Unit>? time, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit>? subtitle, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.CardColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, optional kotlin.jvm.functions.Function0<kotlin.Unit>? content);
    method @androidx.compose.runtime.Composable public static void TitleCard(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> title, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional kotlin.jvm.functions.Function0<kotlin.Unit>? time, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit>? subtitle, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.CardColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, optional kotlin.jvm.functions.Function0<kotlin.Unit>? content);
  }

  @androidx.compose.runtime.Immutable public final class CheckboxButtonColors {
    ctor public CheckboxButtonColors(long checkedContainerColor, long checkedContentColor, long checkedSecondaryContentColor, long checkedIconColor, long checkedBoxColor, long checkedCheckmarkColor, long uncheckedContainerColor, long uncheckedContentColor, long uncheckedSecondaryContentColor, long uncheckedIconColor, long uncheckedBoxColor, long disabledCheckedContainerColor, long disabledCheckedContentColor, long disabledCheckedSecondaryContentColor, long disabledCheckedIconColor, long disabledCheckedBoxColor, long disabledCheckedCheckmarkColor, long disabledUncheckedContainerColor, long disabledUncheckedContentColor, long disabledUncheckedSecondaryContentColor, long disabledUncheckedIconColor, long disabledUncheckedBoxColor);
    method public androidx.wear.compose.material3.CheckboxButtonColors copy(optional long checkedContainerColor, optional long checkedContentColor, optional long checkedSecondaryContentColor, optional long checkedIconColor, optional long checkedBoxColor, optional long checkedCheckmarkColor, optional long uncheckedContainerColor, optional long uncheckedContentColor, optional long uncheckedSecondaryContentColor, optional long uncheckedIconColor, optional long uncheckedBoxColor, optional long disabledCheckedContainerColor, optional long disabledCheckedContentColor, optional long disabledCheckedSecondaryContentColor, optional long disabledCheckedIconColor, optional long disabledCheckedBoxColor, optional long disabledCheckedCheckmarkColor, optional long disabledUncheckedContainerColor, optional long disabledUncheckedContentColor, optional long disabledUncheckedSecondaryContentColor, optional long disabledUncheckedIconColor, optional long disabledUncheckedBoxColor);
    method public long getCheckedBoxColor();
    method public long getCheckedCheckmarkColor();
    method public long getCheckedContainerColor();
    method public long getCheckedContentColor();
    method public long getCheckedIconColor();
    method public long getCheckedSecondaryContentColor();
    method public long getDisabledCheckedBoxColor();
    method public long getDisabledCheckedCheckmarkColor();
    method public long getDisabledCheckedContainerColor();
    method public long getDisabledCheckedContentColor();
    method public long getDisabledCheckedIconColor();
    method public long getDisabledCheckedSecondaryContentColor();
    method public long getDisabledUncheckedBoxColor();
    method public long getDisabledUncheckedContainerColor();
    method public long getDisabledUncheckedContentColor();
    method public long getDisabledUncheckedIconColor();
    method public long getDisabledUncheckedSecondaryContentColor();
    method public long getUncheckedBoxColor();
    method public long getUncheckedContainerColor();
    method public long getUncheckedContentColor();
    method public long getUncheckedIconColor();
    method public long getUncheckedSecondaryContentColor();
    property public long checkedBoxColor;
    property public long checkedCheckmarkColor;
    property public long checkedContainerColor;
    property public long checkedContentColor;
    property public long checkedIconColor;
    property public long checkedSecondaryContentColor;
    property public long disabledCheckedBoxColor;
    property public long disabledCheckedCheckmarkColor;
    property public long disabledCheckedContainerColor;
    property public long disabledCheckedContentColor;
    property public long disabledCheckedIconColor;
    property public long disabledCheckedSecondaryContentColor;
    property public long disabledUncheckedBoxColor;
    property public long disabledUncheckedContainerColor;
    property public long disabledUncheckedContentColor;
    property public long disabledUncheckedIconColor;
    property public long disabledUncheckedSecondaryContentColor;
    property public long uncheckedBoxColor;
    property public long uncheckedContainerColor;
    property public long uncheckedContentColor;
    property public long uncheckedIconColor;
    property public long uncheckedSecondaryContentColor;
  }

  public final class CheckboxButtonDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.CheckboxButtonColors checkboxButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.CheckboxButtonColors checkboxButtonColors(optional long checkedContainerColor, optional long checkedContentColor, optional long checkedSecondaryContentColor, optional long checkedIconColor, optional long checkedBoxColor, optional long checkedCheckmarkColor, optional long uncheckedContainerColor, optional long uncheckedContentColor, optional long uncheckedSecondaryContentColor, optional long uncheckedIconColor, optional long uncheckedBoxColor, optional long disabledCheckedContainerColor, optional long disabledCheckedContentColor, optional long disabledCheckedSecondaryContentColor, optional long disabledCheckedIconColor, optional long disabledCheckedBoxColor, optional long disabledCheckedCheckmarkColor, optional long disabledUncheckedContainerColor, optional long disabledUncheckedContentColor, optional long disabledUncheckedSecondaryContentColor, optional long disabledUncheckedIconColor, optional long disabledUncheckedBoxColor);
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape getCheckboxButtonShape();
    method public androidx.compose.foundation.layout.PaddingValues getContentPadding();
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape getSplitCheckboxButtonShape();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.SplitCheckboxButtonColors splitCheckboxButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.SplitCheckboxButtonColors splitCheckboxButtonColors(optional long checkedContainerColor, optional long checkedContentColor, optional long checkedSecondaryContentColor, optional long checkedSplitContainerColor, optional long checkedBoxColor, optional long checkedCheckmarkColor, optional long uncheckedContainerColor, optional long uncheckedContentColor, optional long uncheckedSecondaryContentColor, optional long uncheckedSplitContainerColor, optional long uncheckedBoxColor, optional long disabledCheckedContainerColor, optional long disabledCheckedContentColor, optional long disabledCheckedSecondaryContentColor, optional long disabledCheckedSplitContainerColor, optional long disabledCheckedBoxColor, optional long disabledCheckedCheckmarkColor, optional long disabledUncheckedContainerColor, optional long disabledUncheckedContentColor, optional long disabledUncheckedSecondaryContentColor, optional long disabledUncheckedSplitContainerColor, optional long disabledUncheckedBoxColor);
    property public androidx.compose.foundation.layout.PaddingValues ContentPadding;
    property @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape checkboxButtonShape;
    property @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape splitCheckboxButtonShape;
    field public static final androidx.wear.compose.material3.CheckboxButtonDefaults INSTANCE;
  }

  public final class CheckboxButtonKt {
    method @androidx.compose.runtime.Composable public static void CheckboxButton(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.CheckboxButtonColors colors, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? icon, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? secondaryLabel, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> label);
    method @androidx.compose.runtime.Composable public static void SplitCheckboxButton(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, String? toggleContentDescription, kotlin.jvm.functions.Function0<kotlin.Unit> onContainerClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.SplitCheckboxButtonColors colors, optional androidx.compose.foundation.interaction.MutableInteractionSource? toggleInteractionSource, optional androidx.compose.foundation.interaction.MutableInteractionSource? containerInteractionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, optional String? containerClickLabel, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? secondaryLabel, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> label);
  }

  public final class CircularProgressIndicatorDefaults {
    method public float calculateRecommendedGapSize(float strokeWidth);
    method public float getFullScreenPadding();
    method public float getIndeterminateStrokeWidth();
    method @androidx.compose.runtime.Composable public float getLargeStrokeWidth();
    method @androidx.compose.runtime.Composable public float getSmallStrokeWidth();
    method public float getStartAngle();
    property public float FullScreenPadding;
    property public float IndeterminateStrokeWidth;
    property public float StartAngle;
    property @androidx.compose.runtime.Composable public float largeStrokeWidth;
    property @androidx.compose.runtime.Composable public float smallStrokeWidth;
    field public static final androidx.wear.compose.material3.CircularProgressIndicatorDefaults INSTANCE;
  }

  public final class CircularProgressIndicatorKt {
    method @androidx.compose.runtime.Composable public static void CircularProgressIndicator(optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ProgressIndicatorColors colors, optional float strokeWidth, optional float gapSize);
    method @androidx.compose.runtime.Composable public static void CircularProgressIndicator(kotlin.jvm.functions.Function0<java.lang.Float> progress, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional boolean allowProgressOverflow, optional float startAngle, optional float endAngle, optional androidx.wear.compose.material3.ProgressIndicatorColors colors, optional float strokeWidth, optional float gapSize);
    method public static void drawCircularProgressIndicator(androidx.compose.ui.graphics.drawscope.DrawScope, float progress, androidx.wear.compose.material3.ProgressIndicatorColors colors, float strokeWidth, optional boolean enabled, optional float targetProgress, optional boolean allowProgressOverflow, optional float startAngle, optional float endAngle, optional float gapSize);
  }

  @androidx.compose.runtime.Immutable @androidx.compose.runtime.Stable public final class ColorScheme {
    ctor public ColorScheme();
    ctor public ColorScheme(optional long primary, optional long primaryDim, optional long primaryContainer, optional long onPrimary, optional long onPrimaryContainer, optional long secondary, optional long secondaryDim, optional long secondaryContainer, optional long onSecondary, optional long onSecondaryContainer, optional long tertiary, optional long tertiaryDim, optional long tertiaryContainer, optional long onTertiary, optional long onTertiaryContainer, optional long surfaceContainerLow, optional long surfaceContainer, optional long surfaceContainerHigh, optional long onSurface, optional long onSurfaceVariant, optional long outline, optional long outlineVariant, optional long background, optional long onBackground, optional long error, optional long errorDim, optional long errorContainer, optional long onError, optional long onErrorContainer);
    method public androidx.wear.compose.material3.ColorScheme copy(optional long primary, optional long primaryDim, optional long primaryContainer, optional long onPrimary, optional long onPrimaryContainer, optional long secondary, optional long secondaryDim, optional long secondaryContainer, optional long onSecondary, optional long onSecondaryContainer, optional long tertiary, optional long tertiaryDim, optional long tertiaryContainer, optional long onTertiary, optional long onTertiaryContainer, optional long surfaceContainerLow, optional long surfaceContainer, optional long surfaceContainerHigh, optional long onSurface, optional long onSurfaceVariant, optional long outline, optional long outlineVariant, optional long background, optional long onBackground, optional long error, optional long errorDim, optional long errorContainer, optional long onError, optional long onErrorContainer);
    method public long getBackground();
    method public long getError();
    method public long getErrorContainer();
    method public long getErrorDim();
    method public long getOnBackground();
    method public long getOnError();
    method public long getOnErrorContainer();
    method public long getOnPrimary();
    method public long getOnPrimaryContainer();
    method public long getOnSecondary();
    method public long getOnSecondaryContainer();
    method public long getOnSurface();
    method public long getOnSurfaceVariant();
    method public long getOnTertiary();
    method public long getOnTertiaryContainer();
    method public long getOutline();
    method public long getOutlineVariant();
    method public long getPrimary();
    method public long getPrimaryContainer();
    method public long getPrimaryDim();
    method public long getSecondary();
    method public long getSecondaryContainer();
    method public long getSecondaryDim();
    method public long getSurfaceContainer();
    method public long getSurfaceContainerHigh();
    method public long getSurfaceContainerLow();
    method public long getTertiary();
    method public long getTertiaryContainer();
    method public long getTertiaryDim();
    property public long background;
    property public long error;
    property public long errorContainer;
    property public long errorDim;
    property public long onBackground;
    property public long onError;
    property public long onErrorContainer;
    property public long onPrimary;
    property public long onPrimaryContainer;
    property public long onSecondary;
    property public long onSecondaryContainer;
    property public long onSurface;
    property public long onSurfaceVariant;
    property public long onTertiary;
    property public long onTertiaryContainer;
    property public long outline;
    property public long outlineVariant;
    property public long primary;
    property public long primaryContainer;
    property public long primaryDim;
    property public long secondary;
    property public long secondaryContainer;
    property public long secondaryDim;
    property public long surfaceContainer;
    property public long surfaceContainerHigh;
    property public long surfaceContainerLow;
    property public long tertiary;
    property public long tertiaryContainer;
    property public long tertiaryDim;
  }

  public final class ColorSchemeKt {
    method public static long contentColorFor(androidx.wear.compose.material3.ColorScheme, long backgroundColor);
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static long contentColorFor(long backgroundColor);
  }

  public final class ConfirmationDialogColors {
    ctor public ConfirmationDialogColors(long iconColor, long iconContainerColor, long textColor);
    method public androidx.wear.compose.material3.ConfirmationDialogColors copy(optional long iconColor, optional long iconContainerColor, optional long textColor);
    method public long getIconColor();
    method public long getIconContainerColor();
    method public long getTextColor();
    property public long iconColor;
    property public long iconContainerColor;
    property public long textColor;
  }

  public final class ConfirmationDialogDefaults {
    method @androidx.compose.runtime.Composable public void FailureIcon();
    method @androidx.compose.runtime.Composable public void SuccessIcon();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ConfirmationDialogColors colors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ConfirmationDialogColors colors(optional long iconColor, optional long iconContainerColor, optional long textColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ConfirmationDialogColors failureColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ConfirmationDialogColors failureColors(optional long iconColor, optional long iconContainerColor, optional long textColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.CurvedTextStyle getCurvedTextStyle();
    method public long getDurationMillis();
    method public float getIconSize();
    method public float getSmallIconSize();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ConfirmationDialogColors successColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ConfirmationDialogColors successColors(optional long iconColor, optional long iconContainerColor, optional long textColor);
    property public long DurationMillis;
    property public float IconSize;
    property public float SmallIconSize;
    property @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.CurvedTextStyle curvedTextStyle;
    field public static final androidx.wear.compose.material3.ConfirmationDialogDefaults INSTANCE;
  }

  public final class ConfirmationDialogKt {
    method @androidx.compose.runtime.Composable public static void ConfirmationDialog(boolean visible, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit>? text, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ConfirmationDialogColors colors, optional androidx.compose.ui.window.DialogProperties properties, optional long durationMillis, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void ConfirmationDialog(boolean visible, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit>? curvedText, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ConfirmationDialogColors colors, optional androidx.compose.ui.window.DialogProperties properties, optional long durationMillis, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void ConfirmationDialogContent(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit>? text, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ConfirmationDialogColors colors, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void ConfirmationDialogContent(kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit>? curvedText, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ConfirmationDialogColors colors, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void FailureConfirmationDialog(boolean visible, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit>? curvedText, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ConfirmationDialogColors colors, optional androidx.compose.ui.window.DialogProperties properties, optional long durationMillis, optional kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void FailureConfirmationDialogContent(kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit>? curvedText, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ConfirmationDialogColors colors, optional kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void SuccessConfirmationDialog(boolean visible, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit>? curvedText, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ConfirmationDialogColors colors, optional androidx.compose.ui.window.DialogProperties properties, optional long durationMillis, optional kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void SuccessConfirmationDialogContent(kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit>? curvedText, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ConfirmationDialogColors colors, optional kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public static void confirmationDialogCurvedText(androidx.wear.compose.foundation.CurvedScope, String text, androidx.wear.compose.foundation.CurvedTextStyle style);
  }

  public final class ContentColorKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Color> getLocalContentColor();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Color> LocalContentColor;
  }

  public final class CurvedTextDefaults {
    method @androidx.compose.runtime.Composable public long backgroundColor();
    method public float getScrollableContentMaxSweepAngle();
    method public float getStaticContentMaxSweepAngle();
    property public float ScrollableContentMaxSweepAngle;
    property public float StaticContentMaxSweepAngle;
    field public static final androidx.wear.compose.material3.CurvedTextDefaults INSTANCE;
  }

  public final class CurvedTextKt {
    method public static void curvedText(androidx.wear.compose.foundation.CurvedScope, String text, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional float maxSweepAngle, optional long background, optional long color, optional long fontSize, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontSynthesis? fontSynthesis, optional long letterSpacing, optional long letterSpacingCounterClockwise, optional androidx.wear.compose.foundation.CurvedTextStyle? style, optional androidx.wear.compose.foundation.CurvedDirection.Angular? angularDirection, optional int overflow);
  }

  @androidx.compose.runtime.Immutable public final class DatePickerColors {
    ctor public DatePickerColors(long activePickerContentColor, long inactivePickerContentColor, long invalidPickerContentColor, long pickerLabelColor, long nextButtonContentColor, long nextButtonContainerColor, long confirmButtonContentColor, long confirmButtonContainerColor);
    method public androidx.wear.compose.material3.DatePickerColors copy(optional long activePickerContentColor, optional long inactivePickerContentColor, optional long invalidPickerContentColor, optional long pickerLabelColor, optional long nextButtonContentColor, optional long nextButtonContainerColor, optional long confirmButtonContentColor, optional long confirmButtonContainerColor);
    method public long getActivePickerContentColor();
    method public long getConfirmButtonContainerColor();
    method public long getConfirmButtonContentColor();
    method public long getInactivePickerContentColor();
    method public long getInvalidPickerContentColor();
    method public long getNextButtonContainerColor();
    method public long getNextButtonContentColor();
    method public long getPickerLabelColor();
    property public long activePickerContentColor;
    property public long confirmButtonContainerColor;
    property public long confirmButtonContentColor;
    property public long inactivePickerContentColor;
    property public long invalidPickerContentColor;
    property public long nextButtonContainerColor;
    property public long nextButtonContentColor;
    property public long pickerLabelColor;
  }

  public final class DatePickerDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.DatePickerColors datePickerColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.DatePickerColors datePickerColors(optional long activePickerContentColor, optional long inactivePickerContentColor, optional long invalidPickerContentColor, optional long pickerLabelColor, optional long nextButtonContentColor, optional long nextButtonContainerColor, optional long confirmButtonContentColor, optional long confirmButtonContainerColor);
    method @androidx.compose.runtime.Composable public int getDatePickerType();
    property @androidx.compose.runtime.Composable public int datePickerType;
    field public static final androidx.wear.compose.material3.DatePickerDefaults INSTANCE;
  }

  public final class DatePickerKt {
    method @RequiresApi(android.os.Build.VERSION_CODES.O) @androidx.compose.runtime.Composable public static void DatePicker(java.time.LocalDate initialDate, kotlin.jvm.functions.Function1<? super java.time.LocalDate,kotlin.Unit> onDatePicked, optional androidx.compose.ui.Modifier modifier, optional java.time.LocalDate? minValidDate, optional java.time.LocalDate? maxValidDate, optional int datePickerType, optional androidx.wear.compose.material3.DatePickerColors colors);
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class DatePickerType {
    field public static final androidx.wear.compose.material3.DatePickerType.Companion Companion;
  }

  public static final class DatePickerType.Companion {
    method public int getDayMonthYear();
    method public int getMonthDayYear();
    method public int getYearMonthDay();
    property public int DayMonthYear;
    property public int MonthDayYear;
    property public int YearMonthDay;
  }

  public final class DialogKt {
    method @androidx.compose.runtime.Composable public static void Dialog(boolean visible, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.window.DialogProperties properties, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class DynamicColorSchemeKt {
    method public static androidx.wear.compose.material3.ColorScheme? dynamicColorScheme(android.content.Context context);
  }

  public final class EdgeButtonDefaults {
    method public float getExtraSmallIconSize();
    method public float getLargeIconSize();
    method public float getMediumIconSize();
    method public float getSmallIconSize();
    method public float iconSizeFor(float edgeButtonSize);
    property public float ExtraSmallIconSize;
    property public float LargeIconSize;
    property public float MediumIconSize;
    property public float SmallIconSize;
    field public static final androidx.wear.compose.material3.EdgeButtonDefaults INSTANCE;
  }

  public final class EdgeButtonKt {
    method @androidx.compose.runtime.Composable public static void EdgeButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional float buttonSize, optional boolean enabled, optional androidx.wear.compose.material3.ButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
  }

  @kotlin.jvm.JvmInline public final value class EdgeButtonSize {
    field public static final androidx.wear.compose.material3.EdgeButtonSize.Companion Companion;
  }

  public static final class EdgeButtonSize.Companion {
    method public float getExtraSmall();
    method public float getLarge();
    method public float getMedium();
    method public float getSmall();
    property public float ExtraSmall;
    property public float Large;
    property public float Medium;
    property public float Small;
  }

  public final class FadingExpandingLabelDefaults {
    method @androidx.compose.runtime.Composable public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> getAnimationSpec();
    property @androidx.compose.runtime.Composable public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> animationSpec;
    field public static final androidx.wear.compose.material3.FadingExpandingLabelDefaults INSTANCE;
  }

  public final class FadingExpandingLabelKt {
    method @androidx.compose.runtime.Composable public static void FadingExpandingLabel(String text, optional androidx.compose.ui.Modifier modifier, optional long color, optional long fontSize, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional long letterSpacing, optional androidx.compose.ui.text.style.TextDecoration? textDecoration, optional androidx.compose.ui.text.style.TextAlign? textAlign, optional long lineHeight, optional boolean softWrap, optional int maxLines, optional int minLines, optional androidx.compose.ui.text.TextStyle textStyle, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> animationSpec);
  }

  @androidx.compose.runtime.Immutable public final class IconButtonColors {
    ctor public IconButtonColors(long containerColor, long contentColor, long disabledContainerColor, long disabledContentColor);
    method public androidx.wear.compose.material3.IconButtonColors copy(optional long containerColor, optional long contentColor, optional long disabledContainerColor, optional long disabledContentColor);
    method public long getContainerColor();
    method public long getContentColor();
    method public long getDisabledContainerColor();
    method public long getDisabledContentColor();
    property public long containerColor;
    property public long contentColor;
    property public long disabledContainerColor;
    property public long disabledContentColor;
  }

  public final class IconButtonDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonShapes animatedShapes();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonShapes animatedShapes(optional androidx.compose.foundation.shape.CornerBasedShape? shape, optional androidx.compose.foundation.shape.CornerBasedShape? pressedShape);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonColors filledIconButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonColors filledIconButtonColors(optional long containerColor, optional long contentColor, optional long disabledContainerColor, optional long disabledContentColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonColors filledTonalIconButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonColors filledTonalIconButtonColors(optional long containerColor, optional long contentColor, optional long disabledContainerColor, optional long disabledContentColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonColors filledVariantIconButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonColors filledVariantIconButtonColors(optional long containerColor, optional long contentColor, optional long disabledContainerColor, optional long disabledContentColor);
    method public float getDefaultButtonSize();
    method public float getDefaultIconSize();
    method public float getDisabledImageOpacity();
    method public float getExtraSmallButtonSize();
    method public float getLargeButtonSize();
    method public float getLargeIconSize();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.CornerBasedShape getPressedShape();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.RoundedCornerShape getShape();
    method public float getSmallButtonSize();
    method public float getSmallIconSize();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonColors iconButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonColors iconButtonColors(optional long containerColor, optional long contentColor, optional long disabledContainerColor, optional long disabledContentColor);
    method public float iconSizeFor(float buttonSize);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonColors outlinedIconButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonColors outlinedIconButtonColors(optional long contentColor, optional long disabledContentColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonShapes shapes();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconButtonShapes shapes(androidx.compose.ui.graphics.Shape shape);
    property public float DefaultButtonSize;
    property public float DefaultIconSize;
    property public float DisabledImageOpacity;
    property public float ExtraSmallButtonSize;
    property public float LargeButtonSize;
    property public float LargeIconSize;
    property public float SmallButtonSize;
    property public float SmallIconSize;
    property @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.CornerBasedShape pressedShape;
    property @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.RoundedCornerShape shape;
    field public static final androidx.wear.compose.material3.IconButtonDefaults INSTANCE;
  }

  public final class IconButtonKt {
    method @androidx.compose.runtime.Composable public static void FilledIconButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.wear.compose.material3.IconButtonShapes shapes, optional androidx.wear.compose.material3.IconButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void FilledTonalIconButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.wear.compose.material3.IconButtonShapes shapes, optional androidx.wear.compose.material3.IconButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void IconButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.wear.compose.material3.IconButtonShapes shapes, optional androidx.wear.compose.material3.IconButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void OutlinedIconButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.wear.compose.material3.IconButtonShapes shapes, optional androidx.wear.compose.material3.IconButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
  }

  public final class IconButtonShapes {
    ctor public IconButtonShapes(androidx.compose.ui.graphics.Shape shape, optional androidx.compose.ui.graphics.Shape pressedShape);
    method public androidx.wear.compose.material3.IconButtonShapes copy(optional androidx.compose.ui.graphics.Shape? shape, optional androidx.compose.ui.graphics.Shape? pressedShape);
    method public androidx.compose.ui.graphics.Shape getPressedShape();
    method public androidx.compose.ui.graphics.Shape getShape();
    property public androidx.compose.ui.graphics.Shape pressedShape;
    property public androidx.compose.ui.graphics.Shape shape;
  }

  public final class IconKt {
    method @androidx.compose.runtime.Composable public static void Icon(androidx.compose.ui.graphics.ImageBitmap bitmap, String? contentDescription, optional androidx.compose.ui.Modifier modifier, optional long tint);
    method @androidx.compose.runtime.Composable public static void Icon(androidx.compose.ui.graphics.painter.Painter painter, String? contentDescription, optional androidx.compose.ui.Modifier modifier, optional long tint);
    method @androidx.compose.runtime.Composable public static void Icon(androidx.compose.ui.graphics.vector.ImageVector imageVector, String? contentDescription, optional androidx.compose.ui.Modifier modifier, optional long tint);
  }

  @androidx.compose.runtime.Immutable public final class IconToggleButtonColors {
    ctor public IconToggleButtonColors(long checkedContainerColor, long checkedContentColor, long uncheckedContainerColor, long uncheckedContentColor, long disabledCheckedContainerColor, long disabledCheckedContentColor, long disabledUncheckedContainerColor, long disabledUncheckedContentColor);
    method public androidx.wear.compose.material3.IconToggleButtonColors copy(optional long checkedContainerColor, optional long checkedContentColor, optional long uncheckedContainerColor, optional long uncheckedContentColor, optional long disabledCheckedContainerColor, optional long disabledCheckedContentColor, optional long disabledUncheckedContainerColor, optional long disabledUncheckedContentColor);
    method public long getCheckedContainerColor();
    method public long getCheckedContentColor();
    method public long getDisabledCheckedContainerColor();
    method public long getDisabledCheckedContentColor();
    method public long getDisabledUncheckedContainerColor();
    method public long getDisabledUncheckedContentColor();
    method public long getUncheckedContainerColor();
    method public long getUncheckedContentColor();
    property public long checkedContainerColor;
    property public long checkedContentColor;
    property public long disabledCheckedContainerColor;
    property public long disabledCheckedContentColor;
    property public long disabledUncheckedContainerColor;
    property public long disabledUncheckedContentColor;
    property public long uncheckedContainerColor;
    property public long uncheckedContentColor;
  }

  public final class IconToggleButtonDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconToggleButtonShapes animatedShapes();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconToggleButtonShapes animatedShapes(optional androidx.compose.foundation.shape.CornerBasedShape? shape, optional androidx.compose.foundation.shape.CornerBasedShape? pressedShape);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconToggleButtonColors colors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconToggleButtonColors colors(optional long checkedContainerColor, optional long checkedContentColor, optional long uncheckedContainerColor, optional long uncheckedContentColor, optional long disabledCheckedContainerColor, optional long disabledCheckedContentColor, optional long disabledUncheckedContainerColor, optional long disabledUncheckedContentColor);
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.CornerBasedShape getCheckedShape();
    method public float getDefaultIconSize();
    method public float getExtraLargeIconSize();
    method public float getExtraLargeSize();
    method public float getLargeIconSize();
    method public float getLargeSize();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.CornerBasedShape getPressedShape();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.RoundedCornerShape getShape();
    method public float getSize();
    method public float getSmallIconSize();
    method public float getSmallSize();
    method public float iconSizeFor(float buttonSize);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconToggleButtonShapes shapes();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconToggleButtonShapes shapes(androidx.compose.ui.graphics.Shape shape);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconToggleButtonShapes variantAnimatedShapes();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.IconToggleButtonShapes variantAnimatedShapes(optional androidx.compose.foundation.shape.CornerBasedShape? uncheckedShape, optional androidx.compose.foundation.shape.CornerBasedShape? checkedShape);
    property public float DefaultIconSize;
    property public float ExtraLargeIconSize;
    property public float ExtraLargeSize;
    property public float LargeIconSize;
    property public float LargeSize;
    property public float Size;
    property public float SmallIconSize;
    property public float SmallSize;
    property @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.CornerBasedShape checkedShape;
    property @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.CornerBasedShape pressedShape;
    property @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.RoundedCornerShape shape;
    field public static final androidx.wear.compose.material3.IconToggleButtonDefaults INSTANCE;
  }

  public final class IconToggleButtonKt {
    method @androidx.compose.runtime.Composable public static void IconToggleButton(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material3.IconToggleButtonColors colors, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.IconToggleButtonShapes shapes, optional androidx.compose.foundation.BorderStroke? border, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
  }

  public final class IconToggleButtonShapes {
    ctor public IconToggleButtonShapes(androidx.compose.ui.graphics.Shape uncheckedShape, optional androidx.compose.ui.graphics.Shape checkedShape, optional androidx.compose.ui.graphics.Shape uncheckedPressedShape, optional androidx.compose.ui.graphics.Shape checkedPressedShape);
    method public androidx.wear.compose.material3.IconToggleButtonShapes copy(optional androidx.compose.ui.graphics.Shape? uncheckedShape, optional androidx.compose.ui.graphics.Shape? checkedShape, optional androidx.compose.ui.graphics.Shape? uncheckedPressedShape, optional androidx.compose.ui.graphics.Shape? checkedPressedShape);
    method public androidx.compose.ui.graphics.Shape getCheckedPressedShape();
    method public androidx.compose.ui.graphics.Shape getCheckedShape();
    method public androidx.compose.ui.graphics.Shape getUncheckedPressedShape();
    method public androidx.compose.ui.graphics.Shape getUncheckedShape();
    property public androidx.compose.ui.graphics.Shape checkedPressedShape;
    property public androidx.compose.ui.graphics.Shape checkedShape;
    property public androidx.compose.ui.graphics.Shape uncheckedPressedShape;
    property public androidx.compose.ui.graphics.Shape uncheckedShape;
  }

  public final class InteractiveComponentSizeKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier minimumInteractiveComponentSize(androidx.compose.ui.Modifier);
  }

  public final class LevelIndicatorColors {
    ctor public LevelIndicatorColors(long indicatorColor, long trackColor, long disabledIndicatorColor, long disabledTrackColor);
    method public androidx.wear.compose.material3.LevelIndicatorColors copy(optional long indicatorColor, optional long trackColor, optional long disabledIndicatorColor, optional long disabledTrackColor);
    method public long getDisabledIndicatorColor();
    method public long getDisabledTrackColor();
    method public long getIndicatorColor();
    method public long getTrackColor();
    property public long disabledIndicatorColor;
    property public long disabledTrackColor;
    property public long indicatorColor;
    property public long trackColor;
  }

  public final class LevelIndicatorDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.LevelIndicatorColors colors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.LevelIndicatorColors colors(optional long indicatorColor, optional long trackColor, optional long disabledIndicatorColor, optional long disabledTrackColor);
    method public float getStrokeWidth();
    method public float getSweepAngle();
    property public float StrokeWidth;
    property public float SweepAngle;
    field public static final androidx.wear.compose.material3.LevelIndicatorDefaults INSTANCE;
  }

  public final class LevelIndicatorKt {
    method @androidx.compose.runtime.Composable public static void LevelIndicator(kotlin.jvm.functions.Function0<java.lang.Float> value, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material3.LevelIndicatorColors colors, optional float strokeWidth, optional @FloatRange(from=0.0, to=360.0) float sweepAngle, optional boolean reverseDirection);
    method @androidx.compose.runtime.Composable public static void StepperLevelIndicator(kotlin.jvm.functions.Function0<java.lang.Float> value, optional androidx.compose.ui.Modifier modifier, optional kotlin.ranges.ClosedFloatingPointRange<java.lang.Float> valueRange, optional boolean enabled, optional androidx.wear.compose.material3.LevelIndicatorColors colors, optional float strokeWidth, optional @FloatRange(from=0.0, to=360.0) float sweepAngle, optional boolean reverseDirection);
    method @androidx.compose.runtime.Composable public static void StepperLevelIndicator(kotlin.jvm.functions.Function0<java.lang.Integer> value, kotlin.ranges.IntProgression valueProgression, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material3.LevelIndicatorColors colors, optional float strokeWidth, optional @FloatRange(from=0.0, to=360.0) float sweepAngle, optional boolean reverseDirection);
  }

  public final class LinearProgressIndicatorDefaults {
    method public float getStrokeWidthLarge();
    method public float getStrokeWidthSmall();
    property public float StrokeWidthLarge;
    property public float StrokeWidthSmall;
    field public static final androidx.wear.compose.material3.LinearProgressIndicatorDefaults INSTANCE;
  }

  public final class LinearProgressIndicatorKt {
    method @androidx.compose.runtime.Composable public static void LinearProgressIndicator(kotlin.jvm.functions.Function0<java.lang.Float> progress, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ProgressIndicatorColors colors, optional float strokeWidth, optional boolean enabled);
  }

  public final class ListHeaderDefaults {
    method @androidx.compose.runtime.Composable public long getContentColor();
    method public androidx.compose.foundation.layout.PaddingValues getContentPadding();
    method @androidx.compose.runtime.Composable public long getSubHeaderContentColor();
    method public androidx.compose.foundation.layout.PaddingValues getSubHeaderContentPadding();
    property public androidx.compose.foundation.layout.PaddingValues ContentPadding;
    property public androidx.compose.foundation.layout.PaddingValues SubHeaderContentPadding;
    property @androidx.compose.runtime.Composable public long contentColor;
    property @androidx.compose.runtime.Composable public long subHeaderContentColor;
    field public static final androidx.wear.compose.material3.ListHeaderDefaults INSTANCE;
  }

  public final class ListHeaderKt {
    method @androidx.compose.runtime.Composable public static void ListHeader(optional androidx.compose.ui.Modifier modifier, optional long backgroundColor, optional long contentColor, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void ListSubHeader(optional androidx.compose.ui.Modifier modifier, optional long backgroundColor, optional long contentColor, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? icon, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> label);
  }

  public final class MaterialTheme {
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.wear.compose.material3.ColorScheme getColorScheme();
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.wear.compose.material3.MotionScheme getMotionScheme();
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.wear.compose.material3.Shapes getShapes();
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.wear.compose.material3.Typography getTypography();
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.wear.compose.material3.ColorScheme colorScheme;
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.wear.compose.material3.MotionScheme motionScheme;
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.wear.compose.material3.Shapes shapes;
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.wear.compose.material3.Typography typography;
    field public static final androidx.wear.compose.material3.MaterialTheme INSTANCE;
  }

  public final class MaterialThemeKt {
    method @androidx.compose.runtime.Composable public static void MaterialTheme(optional androidx.wear.compose.material3.ColorScheme colorScheme, optional androidx.wear.compose.material3.Typography typography, optional androidx.wear.compose.material3.Shapes shapes, optional androidx.wear.compose.material3.MotionScheme motionScheme, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  @androidx.compose.runtime.Immutable public interface MotionScheme {
    method public <T> androidx.compose.animation.core.FiniteAnimationSpec<T> defaultEffectsSpec();
    method public <T> androidx.compose.animation.core.FiniteAnimationSpec<T> defaultSpatialSpec();
    method public <T> androidx.compose.animation.core.FiniteAnimationSpec<T> fastEffectsSpec();
    method public <T> androidx.compose.animation.core.FiniteAnimationSpec<T> fastSpatialSpec();
    method public <T> androidx.compose.animation.core.FiniteAnimationSpec<T> slowEffectsSpec();
    method public <T> androidx.compose.animation.core.FiniteAnimationSpec<T> slowSpatialSpec();
    field public static final androidx.wear.compose.material3.MotionScheme.Companion Companion;
  }

  public static final class MotionScheme.Companion {
    method public androidx.wear.compose.material3.MotionScheme expressive();
    method public androidx.wear.compose.material3.MotionScheme standard();
  }

  public final class OpenOnPhoneDialogColors {
    ctor public OpenOnPhoneDialogColors(long iconColor, long iconContainerColor, long progressIndicatorColor, long progressTrackColor, long textColor);
    method public androidx.wear.compose.material3.OpenOnPhoneDialogColors copy(optional long iconColor, optional long iconContainerColor, optional long progressIndicatorColor, optional long progressTrackColor, optional long textColor);
    method public long getIconColor();
    method public long getIconContainerColor();
    method public long getProgressIndicatorColor();
    method public long getProgressTrackColor();
    method public long getTextColor();
    property public long iconColor;
    property public long iconContainerColor;
    property public long progressIndicatorColor;
    property public long progressTrackColor;
    property public long textColor;
  }

  public final class OpenOnPhoneDialogDefaults {
    method @androidx.compose.runtime.Composable public void Icon(optional androidx.compose.ui.Modifier modifier, optional String contentDescription);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.OpenOnPhoneDialogColors colors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.OpenOnPhoneDialogColors colors(optional long iconColor, optional long iconContainerColor, optional long progressIndicatorColor, optional long progressTrackColor, optional long textColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.CurvedTextStyle getCurvedTextStyle();
    method public long getDurationMillis();
    method @androidx.compose.runtime.Composable public String getIconContentDescription();
    method @androidx.compose.runtime.Composable public String getText();
    property public long DurationMillis;
    property @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.CurvedTextStyle curvedTextStyle;
    property @androidx.compose.runtime.Composable public String iconContentDescription;
    property @androidx.compose.runtime.Composable public String text;
    field public static final androidx.wear.compose.material3.OpenOnPhoneDialogDefaults INSTANCE;
  }

  public final class OpenOnPhoneDialogKt {
    method @androidx.compose.runtime.Composable public static void OpenOnPhoneDialog(boolean visible, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit>? curvedText, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.OpenOnPhoneDialogColors colors, optional androidx.compose.ui.window.DialogProperties properties, optional long durationMillis, optional kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void OpenOnPhoneDialogContent(kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit>? curvedText, long durationMillis, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.OpenOnPhoneDialogColors colors, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public static void openOnPhoneDialogCurvedText(androidx.wear.compose.foundation.CurvedScope, String text, androidx.wear.compose.foundation.CurvedTextStyle style);
  }

  public final class PageIndicatorDefaults {
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public long getBackgroundColor();
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public long getSelectedColor();
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public long getUnselectedColor();
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public long backgroundColor;
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public long selectedColor;
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public long unselectedColor;
    field public static final androidx.wear.compose.material3.PageIndicatorDefaults INSTANCE;
  }

  public final class PageIndicatorKt {
    method @androidx.compose.runtime.Composable public static void HorizontalPageIndicator(androidx.wear.compose.foundation.pager.PagerState pagerState, optional androidx.compose.ui.Modifier modifier, optional long selectedColor, optional long unselectedColor, optional long backgroundColor);
    method @androidx.compose.runtime.Composable public static void VerticalPageIndicator(androidx.wear.compose.foundation.pager.PagerState pagerState, optional androidx.compose.ui.Modifier modifier, optional long selectedColor, optional long unselectedColor, optional long backgroundColor);
  }

  public final class PagerScaffoldDefaults {
    method public androidx.compose.animation.core.AnimationSpec<java.lang.Float> getFadeOutAnimationSpec();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.gestures.TargetedFlingBehavior snapWithSpringFlingBehavior(androidx.wear.compose.foundation.pager.PagerState state);
    property public androidx.compose.animation.core.AnimationSpec<java.lang.Float> FadeOutAnimationSpec;
    field public static final androidx.wear.compose.material3.PagerScaffoldDefaults INSTANCE;
  }

  public final class PagerScaffoldKt {
    method @androidx.compose.runtime.Composable public static void AnimatedPage(int pageIndex, androidx.wear.compose.foundation.pager.PagerState pagerState, optional long contentScrimColor, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void HorizontalPagerScaffold(androidx.wear.compose.foundation.pager.PagerState pagerState, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? pageIndicator, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float>? pageIndicatorAnimationSpec, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void VerticalPagerScaffold(androidx.wear.compose.foundation.pager.PagerState pagerState, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? pageIndicator, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float>? pageIndicatorAnimationSpec, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class PickerDefaults {
    method public float getGradientRatio();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior rotarySnapBehavior(androidx.wear.compose.material3.PickerState state);
    property public float GradientRatio;
    field public static final androidx.wear.compose.material3.PickerDefaults INSTANCE;
  }

  public final class PickerGroupKt {
    method @androidx.compose.runtime.Composable public static void PickerGroup(optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.PickerState? selectedPickerState, optional boolean autoCenter, optional boolean propagateMinConstraints, kotlin.jvm.functions.Function1<? super androidx.wear.compose.material3.PickerGroupScope,kotlin.Unit> content);
  }

  public final class PickerGroupScope {
    ctor public PickerGroupScope();
    method @androidx.compose.runtime.Composable public void PickerGroupItem(androidx.wear.compose.material3.PickerState pickerState, boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onSelected, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<java.lang.String>? contentDescription, optional androidx.compose.ui.focus.FocusRequester? focusRequester, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? readOnlyLabel, optional float verticalSpacing, kotlin.jvm.functions.Function3<? super androidx.wear.compose.material3.PickerScope,? super java.lang.Integer,? super java.lang.Boolean,kotlin.Unit> option);
  }

  public final class PickerKt {
    method @androidx.compose.runtime.Composable public static void Picker(androidx.wear.compose.material3.PickerState state, kotlin.jvm.functions.Function0<java.lang.String>? contentDescription, optional androidx.compose.ui.Modifier modifier, optional boolean readOnly, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? readOnlyLabel, optional kotlin.jvm.functions.Function0<kotlin.Unit> onSelected, optional float verticalSpacing, optional @FloatRange(from=0.0, to=0.5) float gradientRatio, optional long gradientColor, optional boolean userScrollEnabled, optional androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior? rotaryScrollableBehavior, kotlin.jvm.functions.Function2<? super androidx.wear.compose.material3.PickerScope,? super java.lang.Integer,kotlin.Unit> option);
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.material3.PickerState rememberPickerState(@IntRange(from=1L) int initialNumberOfOptions, optional @IntRange(from=0L) int initiallySelectedIndex, optional boolean shouldRepeatOptions);
  }

  public interface PickerScope {
    method public int getSelectedOptionIndex();
    property public abstract int selectedOptionIndex;
  }

  @androidx.compose.runtime.Stable public final class PickerState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor public PickerState(@IntRange(from=1L) int initialNumberOfOptions, optional @IntRange(from=0L) int initiallySelectedIndex, optional boolean shouldRepeatOptions);
    method public suspend Object? animateScrollToOption(int index, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public float dispatchRawDelta(float delta);
    method public int getNumberOfOptions();
    method public int getSelectedOptionIndex();
    method public boolean getShouldRepeatOptions();
    method public boolean isScrollInProgress();
    method public suspend Object? scroll(androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? scrollToOption(int index, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public void setNumberOfOptions(int);
    property public boolean canScrollBackward;
    property public boolean canScrollForward;
    property public boolean isScrollInProgress;
    property public int numberOfOptions;
    property public int selectedOptionIndex;
    property public boolean shouldRepeatOptions;
    field public static final androidx.wear.compose.material3.PickerState.Companion Companion;
  }

  public static final class PickerState.Companion {
    method public androidx.compose.runtime.saveable.Saver<androidx.wear.compose.material3.PickerState,java.lang.Object> getSaver();
    property public androidx.compose.runtime.saveable.Saver<androidx.wear.compose.material3.PickerState,java.lang.Object> Saver;
  }

  public final class PlaceholderDefaults {
    method @androidx.compose.runtime.Composable public long getColor();
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape getShape();
    method @androidx.compose.runtime.Composable public long getShimmerColor();
    property @androidx.compose.runtime.Composable public long color;
    property @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape shape;
    property @androidx.compose.runtime.Composable public long shimmerColor;
    field public static final androidx.wear.compose.material3.PlaceholderDefaults INSTANCE;
  }

  public final class PlaceholderKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.Modifier placeholder(androidx.compose.ui.Modifier, androidx.wear.compose.material3.PlaceholderState placeholderState, optional androidx.compose.ui.graphics.Shape shape, optional long color);
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.Modifier placeholderShimmer(androidx.compose.ui.Modifier, androidx.wear.compose.material3.PlaceholderState placeholderState, optional androidx.compose.ui.graphics.Shape shape, optional long color);
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.material3.PlaceholderState rememberPlaceholderState(boolean isVisible);
  }

  @androidx.compose.runtime.Stable public final class PlaceholderState {
    ctor public PlaceholderState(boolean isVisible);
    method public boolean isVisible();
    method public void setVisible(boolean);
    property public boolean isVisible;
  }

  public final class ProgressIndicatorColors {
    ctor public ProgressIndicatorColors(androidx.compose.ui.graphics.Brush indicatorBrush, androidx.compose.ui.graphics.Brush trackBrush, androidx.compose.ui.graphics.Brush overflowTrackBrush, androidx.compose.ui.graphics.Brush disabledIndicatorBrush, androidx.compose.ui.graphics.Brush disabledTrackBrush, androidx.compose.ui.graphics.Brush disabledOverflowTrackBrush);
    method public androidx.wear.compose.material3.ProgressIndicatorColors copy(optional androidx.compose.ui.graphics.Brush? indicatorBrush, optional androidx.compose.ui.graphics.Brush? trackBrush, optional androidx.compose.ui.graphics.Brush? overflowTrackBrush, optional androidx.compose.ui.graphics.Brush? disabledIndicatorBrush, optional androidx.compose.ui.graphics.Brush? disabledTrackBrush, optional androidx.compose.ui.graphics.Brush? disabledOverflowTrackBrush);
    method public androidx.wear.compose.material3.ProgressIndicatorColors copy(optional long indicatorColor, optional long trackColor, optional long overflowTrackColor, optional long disabledIndicatorColor, optional long disabledTrackColor, optional long disabledOverflowTrackColor);
    method public androidx.compose.ui.graphics.Brush getDisabledIndicatorBrush();
    method public androidx.compose.ui.graphics.Brush getDisabledOverflowTrackBrush();
    method public androidx.compose.ui.graphics.Brush getDisabledTrackBrush();
    method public androidx.compose.ui.graphics.Brush getIndicatorBrush();
    method public androidx.compose.ui.graphics.Brush getOverflowTrackBrush();
    method public androidx.compose.ui.graphics.Brush getTrackBrush();
    property public androidx.compose.ui.graphics.Brush disabledIndicatorBrush;
    property public androidx.compose.ui.graphics.Brush disabledOverflowTrackBrush;
    property public androidx.compose.ui.graphics.Brush disabledTrackBrush;
    property public androidx.compose.ui.graphics.Brush indicatorBrush;
    property public androidx.compose.ui.graphics.Brush overflowTrackBrush;
    property public androidx.compose.ui.graphics.Brush trackBrush;
  }

  public final class ProgressIndicatorDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ProgressIndicatorColors colors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ProgressIndicatorColors colors(optional androidx.compose.ui.graphics.Brush? indicatorBrush, optional androidx.compose.ui.graphics.Brush? trackBrush, optional androidx.compose.ui.graphics.Brush? overflowTrackBrush, optional androidx.compose.ui.graphics.Brush? disabledIndicatorBrush, optional androidx.compose.ui.graphics.Brush? disabledTrackBrush, optional androidx.compose.ui.graphics.Brush? disabledOverflowTrackBrush);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ProgressIndicatorColors colors(optional long indicatorColor, optional long trackColor, optional long overflowTrackColor, optional long disabledIndicatorColor, optional long disabledTrackColor, optional long disabledOverflowTrackColor);
    field public static final androidx.wear.compose.material3.ProgressIndicatorDefaults INSTANCE;
  }

  @androidx.compose.runtime.Immutable public final class RadioButtonColors {
    ctor public RadioButtonColors(long selectedContainerColor, long selectedContentColor, long selectedSecondaryContentColor, long selectedIconColor, long selectedControlColor, long unselectedContainerColor, long unselectedContentColor, long unselectedSecondaryContentColor, long unselectedIconColor, long unselectedControlColor, long disabledSelectedContainerColor, long disabledSelectedContentColor, long disabledSelectedSecondaryContentColor, long disabledSelectedIconColor, long disabledSelectedControlColor, long disabledUnselectedContainerColor, long disabledUnselectedContentColor, long disabledUnselectedSecondaryContentColor, long disabledUnselectedIconColor, long disabledUnselectedControlColor);
    method public androidx.wear.compose.material3.RadioButtonColors copy(optional long selectedContainerColor, optional long selectedContentColor, optional long selectedSecondaryContentColor, optional long selectedIconColor, optional long selectedControlColor, optional long unselectedContainerColor, optional long unselectedContentColor, optional long unselectedSecondaryContentColor, optional long unselectedIconColor, optional long unselectedControlColor, optional long disabledSelectedContainerColor, optional long disabledSelectedContentColor, optional long disabledSelectedSecondaryContentColor, optional long disabledSelectedIconColor, optional long disabledSelectedControlColor, optional long disabledUnselectedContainerColor, optional long disabledUnselectedContentColor, optional long disabledUnselectedSecondaryContentColor, optional long disabledUnselectedIconColor, optional long disabledUnselectedControlColor);
    method public long getDisabledSelectedContainerColor();
    method public long getDisabledSelectedContentColor();
    method public long getDisabledSelectedControlColor();
    method public long getDisabledSelectedIconColor();
    method public long getDisabledSelectedSecondaryContentColor();
    method public long getDisabledUnselectedContainerColor();
    method public long getDisabledUnselectedContentColor();
    method public long getDisabledUnselectedControlColor();
    method public long getDisabledUnselectedIconColor();
    method public long getDisabledUnselectedSecondaryContentColor();
    method public long getSelectedContainerColor();
    method public long getSelectedContentColor();
    method public long getSelectedControlColor();
    method public long getSelectedIconColor();
    method public long getSelectedSecondaryContentColor();
    method public long getUnselectedContainerColor();
    method public long getUnselectedContentColor();
    method public long getUnselectedControlColor();
    method public long getUnselectedIconColor();
    method public long getUnselectedSecondaryContentColor();
    property public long disabledSelectedContainerColor;
    property public long disabledSelectedContentColor;
    property public long disabledSelectedControlColor;
    property public long disabledSelectedIconColor;
    property public long disabledSelectedSecondaryContentColor;
    property public long disabledUnselectedContainerColor;
    property public long disabledUnselectedContentColor;
    property public long disabledUnselectedControlColor;
    property public long disabledUnselectedIconColor;
    property public long disabledUnselectedSecondaryContentColor;
    property public long selectedContainerColor;
    property public long selectedContentColor;
    property public long selectedControlColor;
    property public long selectedIconColor;
    property public long selectedSecondaryContentColor;
    property public long unselectedContainerColor;
    property public long unselectedContentColor;
    property public long unselectedControlColor;
    property public long unselectedIconColor;
    property public long unselectedSecondaryContentColor;
  }

  public final class RadioButtonDefaults {
    method public androidx.compose.foundation.layout.PaddingValues getContentPadding();
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape getRadioButtonShape();
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape getSplitRadioButtonShape();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.RadioButtonColors radioButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.RadioButtonColors radioButtonColors(optional long selectedContainerColor, optional long selectedContentColor, optional long selectedSecondaryContentColor, optional long selectedIconColor, optional long selectedControlColor, optional long unselectedContainerColor, optional long unselectedContentColor, optional long unselectedSecondaryContentColor, optional long unselectedIconColor, optional long unselectedControlColor, optional long disabledSelectedContainerColor, optional long disabledSelectedContentColor, optional long disabledSelectedSecondaryContentColor, optional long disabledSelectedIconColor, optional long disabledSelectedControlColor, optional long disabledUnselectedContainerColor, optional long disabledUnselectedContentColor, optional long disabledUnselectedSecondaryContentColor, optional long disabledUnselectedIconColor, optional long disabledUnselectedControlColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.SplitRadioButtonColors splitRadioButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.SplitRadioButtonColors splitRadioButtonColors(optional long selectedContainerColor, optional long selectedContentColor, optional long selectedSecondaryContentColor, optional long selectedSplitContainerColor, optional long selectedControlColor, optional long unselectedContainerColor, optional long unselectedContentColor, optional long unselectedSecondaryContentColor, optional long unselectedSplitContainerColor, optional long unselectedControlColor, optional long disabledSelectedContainerColor, optional long disabledSelectedContentColor, optional long disabledSelectedSecondaryContentColor, optional long disabledSelectedSplitContainerColor, optional long disabledSelectedControlColor, optional long disabledUnselectedContainerColor, optional long disabledUnselectedContentColor, optional long disabledUnselectedSecondaryContentColor, optional long disabledUnselectedSplitContainerColor, optional long disabledUnselectedControlColor);
    property public androidx.compose.foundation.layout.PaddingValues ContentPadding;
    property @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape radioButtonShape;
    property @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape splitRadioButtonShape;
    field public static final androidx.wear.compose.material3.RadioButtonDefaults INSTANCE;
  }

  public final class RadioButtonKt {
    method @androidx.compose.runtime.Composable public static void RadioButton(boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onSelect, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.RadioButtonColors colors, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? icon, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? secondaryLabel, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> label);
    method @androidx.compose.runtime.Composable public static void SplitRadioButton(boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onSelectionClick, String? selectionContentDescription, kotlin.jvm.functions.Function0<kotlin.Unit> onContainerClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.SplitRadioButtonColors colors, optional androidx.compose.foundation.interaction.MutableInteractionSource? selectionInteractionSource, optional androidx.compose.foundation.interaction.MutableInteractionSource? containerInteractionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, optional String? containerClickLabel, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? secondaryLabel, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> label);
  }

  public final class RangeSemanticsKt {
    method public static androidx.compose.ui.Modifier rangeSemantics(androidx.compose.ui.Modifier, float value, boolean enabled, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onValueChange, kotlin.ranges.ClosedFloatingPointRange<java.lang.Float> valueRange, int steps);
  }

  @kotlin.jvm.JvmInline public final value class RevealActionType {
    method public int getValue();
    property public int value;
    field public static final androidx.wear.compose.material3.RevealActionType.Companion Companion;
  }

  public static final class RevealActionType.Companion {
    method public int getNone();
    method public int getPrimaryAction();
    method public int getSecondaryAction();
    method public int getUndoAction();
    property public int None;
    property public int PrimaryAction;
    property public int SecondaryAction;
    property public int UndoAction;
  }

  @kotlin.jvm.JvmInline public final value class RevealDirection {
    method public int getValue();
    property public int value;
    field public static final androidx.wear.compose.material3.RevealDirection.Companion Companion;
  }

  public static final class RevealDirection.Companion {
    method public int getBidirectional();
    method public int getRightToLeft();
    property public int Bidirectional;
    property public int RightToLeft;
  }

  public final class RevealState {
    ctor public RevealState(int initialValue, java.util.Map<androidx.wear.compose.material3.RevealValue,java.lang.Float> anchors);
    method public suspend Object? animateTo(int targetValue, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public int getCurrentValue();
    method public int getLastActionType();
    method public float getOffset();
    method public float getRevealThreshold();
    method public int getTargetValue();
    method public androidx.compose.runtime.MutableFloatState getWidth();
    method public boolean hasBidirectionalAnchors();
    method public boolean isAnimationRunning();
    method public void setLastActionType(int);
    method public suspend Object? snapTo(int targetValue, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public int currentValue;
    property public boolean hasBidirectionalAnchors;
    property public boolean isAnimationRunning;
    property public int lastActionType;
    property public float offset;
    property public float revealThreshold;
    property public int targetValue;
    property public androidx.compose.runtime.MutableFloatState width;
  }

  @kotlin.jvm.JvmInline public final value class RevealValue {
    method public int getValue();
    property public int value;
    field public static final androidx.wear.compose.material3.RevealValue.Companion Companion;
  }

  public static final class RevealValue.Companion {
    method public int getCovered();
    method public int getLeftRevealed();
    method public int getLeftRevealing();
    method public int getRightRevealed();
    method public int getRightRevealing();
    property public int Covered;
    property public int LeftRevealed;
    property public int LeftRevealing;
    property public int RightRevealed;
    property public int RightRevealing;
  }

  public final class RippleKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.IndicationNodeFactory ripple(androidx.compose.ui.graphics.ColorProducer color, optional boolean bounded, optional float radius);
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.IndicationNodeFactory ripple(optional boolean bounded, optional float radius, optional long color);
  }

  public final class ScreenScaffoldDefaults {
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.layout.PaddingValues getContentPadding();
    method public float getEdgeButtonMinSpacing();
    method public float getEdgeButtonSpacing();
    property public float EdgeButtonMinSpacing;
    property public float EdgeButtonSpacing;
    property @androidx.compose.runtime.Composable public androidx.compose.foundation.layout.PaddingValues contentPadding;
    field public static final androidx.wear.compose.material3.ScreenScaffoldDefaults INSTANCE;
  }

  public final class ScreenScaffoldKt {
    method @androidx.compose.runtime.Composable public static void ScreenScaffold(androidx.compose.foundation.lazy.LazyListState scrollState, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function0<kotlin.Unit>? timeText, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? scrollIndicator, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void ScreenScaffold(androidx.compose.foundation.lazy.LazyListState scrollState, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> edgeButton, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function0<kotlin.Unit>? timeText, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? scrollIndicator, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, optional float edgeButtonSpacing, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void ScreenScaffold(androidx.compose.foundation.ScrollState scrollState, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function0<kotlin.Unit>? timeText, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? scrollIndicator, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void ScreenScaffold(optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.foundation.ScrollInfoProvider? scrollInfoProvider, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function0<kotlin.Unit>? timeText, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? scrollIndicator, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void ScreenScaffold(androidx.wear.compose.foundation.lazy.ScalingLazyListState scrollState, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function0<kotlin.Unit>? timeText, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? scrollIndicator, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void ScreenScaffold(androidx.wear.compose.foundation.lazy.ScalingLazyListState scrollState, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> edgeButton, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function0<kotlin.Unit>? timeText, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? scrollIndicator, optional float edgeButtonSpacing, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void ScreenScaffold(androidx.wear.compose.foundation.lazy.TransformingLazyColumnState scrollState, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function0<kotlin.Unit>? timeText, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? scrollIndicator, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void ScreenScaffold(androidx.wear.compose.foundation.lazy.TransformingLazyColumnState scrollState, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> edgeButton, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function0<kotlin.Unit>? timeText, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? scrollIndicator, optional float edgeButtonSpacing, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void ScreenScaffold(androidx.wear.compose.foundation.ScrollInfoProvider scrollInfoProvider, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> edgeButton, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function0<kotlin.Unit>? timeText, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? scrollIndicator, optional float edgeButtonSpacing, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit> content);
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class ScreenStage {
    field public static final androidx.wear.compose.material3.ScreenStage.Companion Companion;
  }

  public static final class ScreenStage.Companion {
    method public int getIdle();
    method public int getNew();
    method public int getScrolling();
    property public int Idle;
    property public int New;
    property public int Scrolling;
  }

  public final class ScrollAwayKt {
    method public static androidx.compose.ui.Modifier scrollAway(androidx.compose.ui.Modifier, androidx.wear.compose.foundation.ScrollInfoProvider scrollInfoProvider, kotlin.jvm.functions.Function0<androidx.wear.compose.material3.ScreenStage> screenStage);
  }

  public final class ScrollIndicatorColors {
    ctor public ScrollIndicatorColors(long indicatorColor, long trackColor);
    method public androidx.wear.compose.material3.ScrollIndicatorColors copy(optional long indicatorColor, optional long trackColor);
    method public long getIndicatorColor();
    method public long getTrackColor();
    property public long indicatorColor;
    property public long trackColor;
  }

  public final class ScrollIndicatorDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ScrollIndicatorColors colors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.ScrollIndicatorColors colors(optional long indicatorColor, optional long trackColor);
    method public androidx.compose.animation.core.AnimationSpec<java.lang.Float> getPositionAnimationSpec();
    property public androidx.compose.animation.core.AnimationSpec<java.lang.Float> PositionAnimationSpec;
    field public static final androidx.wear.compose.material3.ScrollIndicatorDefaults INSTANCE;
  }

  public final class ScrollIndicatorKt {
    method @androidx.compose.runtime.Composable public static void ScrollIndicator(androidx.compose.foundation.lazy.LazyListState state, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ScrollIndicatorColors colors, optional boolean reverseDirection, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> positionAnimationSpec);
    method @androidx.compose.runtime.Composable public static void ScrollIndicator(androidx.compose.foundation.ScrollState state, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ScrollIndicatorColors colors, optional boolean reverseDirection, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> positionAnimationSpec);
    method @androidx.compose.runtime.Composable public static void ScrollIndicator(androidx.wear.compose.foundation.lazy.ScalingLazyListState state, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ScrollIndicatorColors colors, optional boolean reverseDirection, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> positionAnimationSpec);
    method @androidx.compose.runtime.Composable public static void ScrollIndicator(androidx.wear.compose.foundation.lazy.TransformingLazyColumnState state, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.ScrollIndicatorColors colors, optional boolean reverseDirection, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> positionAnimationSpec);
  }

  public final class SegmentedCircularProgressIndicatorKt {
    method @androidx.compose.runtime.Composable public static void SegmentedCircularProgressIndicator(@IntRange(from=1L) int segmentCount, kotlin.jvm.functions.Function0<java.lang.Float> progress, optional androidx.compose.ui.Modifier modifier, optional boolean allowProgressOverflow, optional float startAngle, optional float endAngle, optional androidx.wear.compose.material3.ProgressIndicatorColors colors, optional float strokeWidth, optional float gapSize, optional boolean enabled);
    method @androidx.compose.runtime.Composable public static void SegmentedCircularProgressIndicator(@IntRange(from=1L) int segmentCount, kotlin.jvm.functions.Function1<? super java.lang.Integer,java.lang.Boolean> segmentValue, optional androidx.compose.ui.Modifier modifier, optional float startAngle, optional float endAngle, optional androidx.wear.compose.material3.ProgressIndicatorColors colors, optional float strokeWidth, optional float gapSize, optional boolean enabled);
  }

  public final class ShapeDefaults {
    method public androidx.compose.foundation.shape.RoundedCornerShape getExtraLarge();
    method public androidx.compose.foundation.shape.RoundedCornerShape getExtraSmall();
    method public androidx.compose.foundation.shape.RoundedCornerShape getLarge();
    method public androidx.compose.foundation.shape.RoundedCornerShape getMedium();
    method public androidx.compose.foundation.shape.RoundedCornerShape getSmall();
    property public androidx.compose.foundation.shape.RoundedCornerShape ExtraLarge;
    property public androidx.compose.foundation.shape.RoundedCornerShape ExtraSmall;
    property public androidx.compose.foundation.shape.RoundedCornerShape Large;
    property public androidx.compose.foundation.shape.RoundedCornerShape Medium;
    property public androidx.compose.foundation.shape.RoundedCornerShape Small;
    field public static final androidx.wear.compose.material3.ShapeDefaults INSTANCE;
  }

  @androidx.compose.runtime.Immutable public final class Shapes {
    ctor public Shapes();
    ctor public Shapes(optional androidx.compose.foundation.shape.CornerBasedShape extraSmall, optional androidx.compose.foundation.shape.CornerBasedShape small, optional androidx.compose.foundation.shape.CornerBasedShape medium, optional androidx.compose.foundation.shape.CornerBasedShape large, optional androidx.compose.foundation.shape.CornerBasedShape extraLarge);
    method public androidx.wear.compose.material3.Shapes copy(optional androidx.compose.foundation.shape.CornerBasedShape extraSmall, optional androidx.compose.foundation.shape.CornerBasedShape small, optional androidx.compose.foundation.shape.CornerBasedShape medium, optional androidx.compose.foundation.shape.CornerBasedShape large, optional androidx.compose.foundation.shape.CornerBasedShape extraLarge);
    method public androidx.compose.foundation.shape.CornerBasedShape getExtraLarge();
    method public androidx.compose.foundation.shape.CornerBasedShape getExtraSmall();
    method public androidx.compose.foundation.shape.CornerBasedShape getLarge();
    method public androidx.compose.foundation.shape.CornerBasedShape getMedium();
    method public androidx.compose.foundation.shape.CornerBasedShape getSmall();
    property public androidx.compose.foundation.shape.CornerBasedShape extraLarge;
    property public androidx.compose.foundation.shape.CornerBasedShape extraSmall;
    property public androidx.compose.foundation.shape.CornerBasedShape large;
    property public androidx.compose.foundation.shape.CornerBasedShape medium;
    property public androidx.compose.foundation.shape.CornerBasedShape small;
  }

  @androidx.compose.runtime.Immutable public final class SliderColors {
    ctor public SliderColors(long containerColor, long buttonIconColor, long selectedBarColor, long unselectedBarColor, long selectedBarSeparatorColor, long unselectedBarSeparatorColor, long disabledContainerColor, long disabledButtonIconColor, long disabledSelectedBarColor, long disabledUnselectedBarColor, long disabledSelectedBarSeparatorColor, long disabledUnselectedBarSeparatorColor);
    method public androidx.wear.compose.material3.SliderColors copy(optional long containerColor, optional long buttonIconColor, optional long selectedBarColor, optional long unselectedBarColor, optional long selectedBarSeparatorColor, optional long unselectedBarSeparatorColor, optional long disabledContainerColor, optional long disabledButtonIconColor, optional long disabledSelectedBarColor, optional long disabledUnselectedBarColor, optional long disabledSelectedBarSeparatorColor, optional long disabledUnselectedBarSeparatorColor);
    method public long getButtonIconColor();
    method public long getContainerColor();
    method public long getDisabledButtonIconColor();
    method public long getDisabledContainerColor();
    method public long getDisabledSelectedBarColor();
    method public long getDisabledSelectedBarSeparatorColor();
    method public long getDisabledUnselectedBarColor();
    method public long getDisabledUnselectedBarSeparatorColor();
    method public long getSelectedBarColor();
    method public long getSelectedBarSeparatorColor();
    method public long getUnselectedBarColor();
    method public long getUnselectedBarSeparatorColor();
    property public long buttonIconColor;
    property public long containerColor;
    property public long disabledButtonIconColor;
    property public long disabledContainerColor;
    property public long disabledSelectedBarColor;
    property public long disabledSelectedBarSeparatorColor;
    property public long disabledUnselectedBarColor;
    property public long disabledUnselectedBarSeparatorColor;
    property public long selectedBarColor;
    property public long selectedBarSeparatorColor;
    property public long unselectedBarColor;
    property public long unselectedBarSeparatorColor;
  }

  public final class SliderDefaults {
    method @androidx.compose.runtime.Composable public void DecreaseIcon(optional androidx.compose.ui.Modifier modifier, optional String contentDescription);
    method @androidx.compose.runtime.Composable public void IncreaseIcon(optional androidx.compose.ui.Modifier modifier, optional String contentDescription);
    method @androidx.compose.runtime.Composable public String getDecreaseIconContentDescription();
    method public float getIconSize();
    method @androidx.compose.runtime.Composable public String getIncreaseIconContentDescription();
    method public int getMaxSegmentSteps();
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape getShape();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.SliderColors sliderColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.SliderColors sliderColors(optional long containerColor, optional long buttonIconColor, optional long selectedBarColor, optional long unselectedBarColor, optional long selectedBarSeparatorColor, optional long unselectedBarSeparatorColor, optional long disabledContainerColor, optional long disabledButtonIconColor, optional long disabledSelectedBarColor, optional long disabledUnselectedBarColor, optional long disabledSelectedBarSeparatorColor, optional long disabledUnselectedBarSeparatorColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.SliderColors variantSliderColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.SliderColors variantSliderColors(optional long containerColor, optional long buttonIconColor, optional long selectedBarColor, optional long unselectedBarColor, optional long selectedBarSeparatorColor, optional long unselectedBarSeparatorColor, optional long disabledContainerColor, optional long disabledButtonIconColor, optional long disabledSelectedBarColor, optional long disabledUnselectedBarColor, optional long disabledSelectedBarSeparatorColor, optional long disabledUnselectedBarSeparatorColor);
    property public float IconSize;
    property public int MaxSegmentSteps;
    property @androidx.compose.runtime.Composable public String decreaseIconContentDescription;
    property @androidx.compose.runtime.Composable public String increaseIconContentDescription;
    property @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape shape;
    field public static final androidx.wear.compose.material3.SliderDefaults INSTANCE;
  }

  public final class SliderKt {
    method @androidx.compose.runtime.Composable public static void Slider(float value, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onValueChange, int steps, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> decreaseIcon, optional kotlin.jvm.functions.Function0<kotlin.Unit> increaseIcon, optional boolean enabled, optional kotlin.ranges.ClosedFloatingPointRange<java.lang.Float> valueRange, optional boolean segmented, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.SliderColors colors);
    method @androidx.compose.runtime.Composable public static void Slider(int value, kotlin.jvm.functions.Function1<? super java.lang.Integer,kotlin.Unit> onValueChange, kotlin.ranges.IntProgression valueProgression, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> decreaseIcon, optional kotlin.jvm.functions.Function0<kotlin.Unit> increaseIcon, optional boolean enabled, optional boolean segmented, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.SliderColors colors);
  }

  public final class SplitCheckboxButtonColors {
    ctor public SplitCheckboxButtonColors(long checkedContainerColor, long checkedContentColor, long checkedSecondaryContentColor, long checkedSplitContainerColor, long checkedBoxColor, long checkedCheckmarkColor, long uncheckedContainerColor, long uncheckedContentColor, long uncheckedSecondaryContentColor, long uncheckedSplitContainerColor, long uncheckedBoxColor, long disabledCheckedContainerColor, long disabledCheckedContentColor, long disabledCheckedSecondaryContentColor, long disabledCheckedSplitContainerColor, long disabledCheckedBoxColor, long disabledCheckedCheckmarkColor, long disabledUncheckedContainerColor, long disabledUncheckedContentColor, long disabledUncheckedSecondaryContentColor, long disabledUncheckedSplitContainerColor, long disabledUncheckedBoxColor);
    method public androidx.wear.compose.material3.SplitCheckboxButtonColors copy(optional long checkedContainerColor, optional long checkedContentColor, optional long checkedSecondaryContentColor, optional long checkedSplitContainerColor, optional long checkedBoxColor, optional long checkedCheckmarkColor, optional long uncheckedContainerColor, optional long uncheckedContentColor, optional long uncheckedSecondaryContentColor, optional long uncheckedSplitContainerColor, optional long uncheckedBoxColor, optional long disabledCheckedContainerColor, optional long disabledCheckedContentColor, optional long disabledCheckedSecondaryContentColor, optional long disabledCheckedSplitContainerColor, optional long disabledCheckedBoxColor, optional long disabledCheckedCheckmarkColor, optional long disabledUncheckedContainerColor, optional long disabledUncheckedContentColor, optional long disabledUncheckedSecondaryContentColor, optional long disabledUncheckedSplitContainerColor, optional long disabledUncheckedBoxColor);
    method public long getCheckedBoxColor();
    method public long getCheckedCheckmarkColor();
    method public long getCheckedContainerColor();
    method public long getCheckedContentColor();
    method public long getCheckedSecondaryContentColor();
    method public long getCheckedSplitContainerColor();
    method public long getDisabledCheckedBoxColor();
    method public long getDisabledCheckedCheckmarkColor();
    method public long getDisabledCheckedContainerColor();
    method public long getDisabledCheckedContentColor();
    method public long getDisabledCheckedSecondaryContentColor();
    method public long getDisabledCheckedSplitContainerColor();
    method public long getDisabledUncheckedBoxColor();
    method public long getDisabledUncheckedContainerColor();
    method public long getDisabledUncheckedContentColor();
    method public long getDisabledUncheckedSecondaryContentColor();
    method public long getDisabledUncheckedSplitContainerColor();
    method public long getUncheckedBoxColor();
    method public long getUncheckedContainerColor();
    method public long getUncheckedContentColor();
    method public long getUncheckedSecondaryContentColor();
    method public long getUncheckedSplitContainerColor();
    property public long checkedBoxColor;
    property public long checkedCheckmarkColor;
    property public long checkedContainerColor;
    property public long checkedContentColor;
    property public long checkedSecondaryContentColor;
    property public long checkedSplitContainerColor;
    property public long disabledCheckedBoxColor;
    property public long disabledCheckedCheckmarkColor;
    property public long disabledCheckedContainerColor;
    property public long disabledCheckedContentColor;
    property public long disabledCheckedSecondaryContentColor;
    property public long disabledCheckedSplitContainerColor;
    property public long disabledUncheckedBoxColor;
    property public long disabledUncheckedContainerColor;
    property public long disabledUncheckedContentColor;
    property public long disabledUncheckedSecondaryContentColor;
    property public long disabledUncheckedSplitContainerColor;
    property public long uncheckedBoxColor;
    property public long uncheckedContainerColor;
    property public long uncheckedContentColor;
    property public long uncheckedSecondaryContentColor;
    property public long uncheckedSplitContainerColor;
  }

  public final class SplitRadioButtonColors {
    ctor public SplitRadioButtonColors(long selectedContainerColor, long selectedContentColor, long selectedSecondaryContentColor, long selectedSplitContainerColor, long selectedControlColor, long unselectedContainerColor, long unselectedContentColor, long unselectedSecondaryContentColor, long unselectedSplitContainerColor, long unselectedControlColor, long disabledSelectedContainerColor, long disabledSelectedContentColor, long disabledSelectedSecondaryContentColor, long disabledSelectedSplitContainerColor, long disabledSelectedControlColor, long disabledUnselectedContainerColor, long disabledUnselectedContentColor, long disabledUnselectedSecondaryContentColor, long disabledUnselectedSplitContainerColor, long disabledUnselectedControlColor);
    method public androidx.wear.compose.material3.SplitRadioButtonColors copy(optional long selectedContainerColor, optional long selectedContentColor, optional long selectedSecondaryContentColor, optional long selectedSplitContainerColor, optional long selectedControlColor, optional long unselectedContainerColor, optional long unselectedContentColor, optional long unselectedSecondaryContentColor, optional long unselectedSplitContainerColor, optional long unselectedControlColor, optional long disabledSelectedContainerColor, optional long disabledSelectedContentColor, optional long disabledSelectedSecondaryContentColor, optional long disabledSelectedSplitContainerColor, optional long disabledSelectedControlColor, optional long disabledUnselectedContainerColor, optional long disabledUnselectedContentColor, optional long disabledUnselectedSecondaryContentColor, optional long disabledUnselectedSplitContainerColor, optional long disabledUnselectedControlColor);
    method public long getDisabledSelectedContainerColor();
    method public long getDisabledSelectedContentColor();
    method public long getDisabledSelectedControlColor();
    method public long getDisabledSelectedSecondaryContentColor();
    method public long getDisabledSelectedSplitContainerColor();
    method public long getDisabledUnselectedContainerColor();
    method public long getDisabledUnselectedContentColor();
    method public long getDisabledUnselectedControlColor();
    method public long getDisabledUnselectedSecondaryContentColor();
    method public long getDisabledUnselectedSplitContainerColor();
    method public long getSelectedContainerColor();
    method public long getSelectedContentColor();
    method public long getSelectedControlColor();
    method public long getSelectedSecondaryContentColor();
    method public long getSelectedSplitContainerColor();
    method public long getUnselectedContainerColor();
    method public long getUnselectedContentColor();
    method public long getUnselectedControlColor();
    method public long getUnselectedSecondaryContentColor();
    method public long getUnselectedSplitContainerColor();
    property public long disabledSelectedContainerColor;
    property public long disabledSelectedContentColor;
    property public long disabledSelectedControlColor;
    property public long disabledSelectedSecondaryContentColor;
    property public long disabledSelectedSplitContainerColor;
    property public long disabledUnselectedContainerColor;
    property public long disabledUnselectedContentColor;
    property public long disabledUnselectedControlColor;
    property public long disabledUnselectedSecondaryContentColor;
    property public long disabledUnselectedSplitContainerColor;
    property public long selectedContainerColor;
    property public long selectedContentColor;
    property public long selectedControlColor;
    property public long selectedSecondaryContentColor;
    property public long selectedSplitContainerColor;
    property public long unselectedContainerColor;
    property public long unselectedContentColor;
    property public long unselectedControlColor;
    property public long unselectedSecondaryContentColor;
    property public long unselectedSplitContainerColor;
  }

  public final class SplitSwitchButtonColors {
    ctor public SplitSwitchButtonColors(long checkedContainerColor, long checkedContentColor, long checkedSecondaryContentColor, long checkedSplitContainerColor, long checkedThumbColor, long checkedThumbIconColor, long checkedTrackColor, long checkedTrackBorderColor, long uncheckedContainerColor, long uncheckedContentColor, long uncheckedSecondaryContentColor, long uncheckedSplitContainerColor, long uncheckedThumbColor, long uncheckedTrackColor, long uncheckedTrackBorderColor, long disabledCheckedContainerColor, long disabledCheckedContentColor, long disabledCheckedSecondaryContentColor, long disabledCheckedSplitContainerColor, long disabledCheckedThumbColor, long disabledCheckedThumbIconColor, long disabledCheckedTrackColor, long disabledCheckedTrackBorderColor, long disabledUncheckedContainerColor, long disabledUncheckedContentColor, long disabledUncheckedSecondaryContentColor, long disabledUncheckedSplitContainerColor, long disabledUncheckedThumbColor, long disabledUncheckedTrackBorderColor);
    method public androidx.wear.compose.material3.SplitSwitchButtonColors copy(optional long checkedContainerColor, optional long checkedContentColor, optional long checkedSecondaryContentColor, optional long checkedSplitContainerColor, optional long checkedThumbColor, optional long checkedThumbIconColor, optional long checkedTrackColor, optional long checkedTrackBorderColor, optional long uncheckedContainerColor, optional long uncheckedContentColor, optional long uncheckedSecondaryContentColor, optional long uncheckedSplitContainerColor, optional long uncheckedThumbColor, optional long uncheckedTrackColor, optional long uncheckedTrackBorderColor, optional long disabledCheckedContainerColor, optional long disabledCheckedContentColor, optional long disabledCheckedSecondaryContentColor, optional long disabledCheckedSplitContainerColor, optional long disabledCheckedThumbColor, optional long disabledCheckedThumbIconColor, optional long disabledCheckedTrackColor, optional long disabledCheckedTrackBorderColor, optional long disabledUncheckedContainerColor, optional long disabledUncheckedContentColor, optional long disabledUncheckedSecondaryContentColor, optional long disabledUncheckedSplitContainerColor, optional long disabledUncheckedThumbColor, optional long disabledUncheckedTrackBorderColor);
    method public long getCheckedContainerColor();
    method public long getCheckedContentColor();
    method public long getCheckedSecondaryContentColor();
    method public long getCheckedSplitContainerColor();
    method public long getCheckedThumbColor();
    method public long getCheckedThumbIconColor();
    method public long getCheckedTrackBorderColor();
    method public long getCheckedTrackColor();
    method public long getDisabledCheckedContainerColor();
    method public long getDisabledCheckedContentColor();
    method public long getDisabledCheckedSecondaryContentColor();
    method public long getDisabledCheckedSplitContainerColor();
    method public long getDisabledCheckedThumbColor();
    method public long getDisabledCheckedThumbIconColor();
    method public long getDisabledCheckedTrackBorderColor();
    method public long getDisabledCheckedTrackColor();
    method public long getDisabledUncheckedContainerColor();
    method public long getDisabledUncheckedContentColor();
    method public long getDisabledUncheckedSecondaryContentColor();
    method public long getDisabledUncheckedSplitContainerColor();
    method public long getDisabledUncheckedThumbColor();
    method public long getDisabledUncheckedTrackBorderColor();
    method public long getUncheckedContainerColor();
    method public long getUncheckedContentColor();
    method public long getUncheckedSecondaryContentColor();
    method public long getUncheckedSplitContainerColor();
    method public long getUncheckedThumbColor();
    method public long getUncheckedTrackBorderColor();
    method public long getUncheckedTrackColor();
    property public long checkedContainerColor;
    property public long checkedContentColor;
    property public long checkedSecondaryContentColor;
    property public long checkedSplitContainerColor;
    property public long checkedThumbColor;
    property public long checkedThumbIconColor;
    property public long checkedTrackBorderColor;
    property public long checkedTrackColor;
    property public long disabledCheckedContainerColor;
    property public long disabledCheckedContentColor;
    property public long disabledCheckedSecondaryContentColor;
    property public long disabledCheckedSplitContainerColor;
    property public long disabledCheckedThumbColor;
    property public long disabledCheckedThumbIconColor;
    property public long disabledCheckedTrackBorderColor;
    property public long disabledCheckedTrackColor;
    property public long disabledUncheckedContainerColor;
    property public long disabledUncheckedContentColor;
    property public long disabledUncheckedSecondaryContentColor;
    property public long disabledUncheckedSplitContainerColor;
    property public long disabledUncheckedThumbColor;
    property public long disabledUncheckedTrackBorderColor;
    property public long uncheckedContainerColor;
    property public long uncheckedContentColor;
    property public long uncheckedSecondaryContentColor;
    property public long uncheckedSplitContainerColor;
    property public long uncheckedThumbColor;
    property public long uncheckedTrackBorderColor;
    property public long uncheckedTrackColor;
  }

  public final class StepperColors {
    ctor public StepperColors(long contentColor, long buttonContainerColor, long buttonIconColor, long disabledContentColor, long disabledButtonContainerColor, long disabledButtonIconColor);
    method public androidx.wear.compose.material3.StepperColors copy(optional long contentColor, optional long buttonContainerColor, optional long buttonIconColor, optional long disabledContentColor, optional long disabledButtonContainerColor, optional long disabledButtonIconColor);
    method public long getButtonContainerColor();
    method public long getButtonIconColor();
    method public long getContentColor();
    method public long getDisabledButtonContainerColor();
    method public long getDisabledButtonIconColor();
    method public long getDisabledContentColor();
    property public long buttonContainerColor;
    property public long buttonIconColor;
    property public long contentColor;
    property public long disabledButtonContainerColor;
    property public long disabledButtonIconColor;
    property public long disabledContentColor;
  }

  public final class StepperDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.StepperColors colors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.StepperColors colors(optional long contentColor, optional long buttonContainerColor, optional long buttonIconColor, optional long disabledContentColor, optional long disabledButtonContainerColor, optional long disabledButtonIconColor);
    method public float getIconSize();
    property public float IconSize;
    field public static final androidx.wear.compose.material3.StepperDefaults INSTANCE;
  }

  public final class StepperKt {
    method @androidx.compose.runtime.Composable public static void Stepper(float value, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onValueChange, int steps, kotlin.jvm.functions.Function0<kotlin.Unit> decreaseIcon, kotlin.jvm.functions.Function0<kotlin.Unit> increaseIcon, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional kotlin.ranges.ClosedFloatingPointRange<java.lang.Float> valueRange, optional androidx.wear.compose.material3.StepperColors colors, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void Stepper(int value, kotlin.jvm.functions.Function1<? super java.lang.Integer,kotlin.Unit> onValueChange, kotlin.ranges.IntProgression valueProgression, kotlin.jvm.functions.Function0<kotlin.Unit> decreaseIcon, kotlin.jvm.functions.Function0<kotlin.Unit> increaseIcon, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material3.StepperColors colors, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
  }

  public interface SurfaceTransformation {
    method public void applyContainerTransformation(androidx.compose.ui.graphics.GraphicsLayerScope);
    method public void applyContentTransformation(androidx.compose.ui.graphics.GraphicsLayerScope);
    method public androidx.compose.ui.graphics.painter.Painter createContainerPainter(androidx.compose.ui.graphics.painter.Painter painter, androidx.compose.ui.graphics.Shape shape, optional androidx.compose.foundation.BorderStroke? border);
  }

  public final class SurfaceTransformationKt {
    method @androidx.compose.runtime.Stable public static androidx.wear.compose.material3.SurfaceTransformation SurfaceTransformation(androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope, androidx.wear.compose.material3.lazy.TransformationSpec spec);
  }

  public final class SwipeToDismissBoxKt {
    method @androidx.compose.runtime.Composable public static void SwipeToDismissBox(androidx.wear.compose.foundation.SwipeToDismissBoxState state, optional androidx.compose.ui.Modifier modifier, optional long backgroundScrimColor, optional long contentScrimColor, optional Object backgroundKey, optional Object contentKey, optional boolean userSwipeEnabled, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super java.lang.Boolean,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void SwipeToDismissBox(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissed, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.foundation.SwipeToDismissBoxState state, optional long backgroundScrimColor, optional long contentScrimColor, optional Object backgroundKey, optional Object contentKey, optional boolean userSwipeEnabled, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super java.lang.Boolean,kotlin.Unit> content);
  }

  public final class SwipeToRevealDefaults {
    method @androidx.compose.runtime.Composable public java.util.Map<androidx.wear.compose.material3.RevealValue,java.lang.Float> anchors(optional float anchorWidth, optional boolean useAnchoredActions);
    method @androidx.compose.runtime.Composable public java.util.Map<androidx.wear.compose.material3.RevealValue,java.lang.Float> bidirectionalAnchors(optional float anchorWidth, optional boolean useAnchoredActions);
    method public java.util.Map<androidx.wear.compose.material3.RevealValue,java.lang.Float> createRevealAnchors(optional float coveredAnchor, optional float revealingAnchor, optional float revealedAnchor, optional int revealDirection);
    method public androidx.wear.compose.foundation.GestureInclusion gestureInclusion(androidx.wear.compose.material3.RevealState state, optional @FloatRange(from=0.0, to=1.0) float edgeZoneFraction);
    method public androidx.wear.compose.foundation.GestureInclusion getBidirectionalGestureInclusion();
    method public float getDoubleActionAnchorWidth();
    method public float getLargeActionButtonHeight();
    method public float getLeftEdgeZoneFraction();
    method public kotlin.jvm.functions.Function1<java.lang.Float,java.lang.Float> getPositionalThreshold();
    method public float getRevealingRatio();
    method public float getSingleActionAnchorWidth();
    method public float getSmallActionButtonHeight();
    property public float DoubleActionAnchorWidth;
    property public float LargeActionButtonHeight;
    property public float LeftEdgeZoneFraction;
    property public kotlin.jvm.functions.Function1<java.lang.Float,java.lang.Float> PositionalThreshold;
    property public float RevealingRatio;
    property public float SingleActionAnchorWidth;
    property public float SmallActionButtonHeight;
    property public androidx.wear.compose.foundation.GestureInclusion bidirectionalGestureInclusion;
    field public static final androidx.wear.compose.material3.SwipeToRevealDefaults INSTANCE;
  }

  public final class SwipeToRevealKt {
    method @androidx.compose.runtime.Composable public static void SwipeToReveal(kotlin.jvm.functions.Function1<? super androidx.wear.compose.material3.SwipeToRevealScope,kotlin.Unit> actions, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material3.RevealState revealState, optional float actionButtonHeight, optional androidx.wear.compose.foundation.GestureInclusion gestureInclusion, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.material3.RevealState rememberRevealState(optional int initialValue, optional java.util.Map<androidx.wear.compose.material3.RevealValue,java.lang.Float> anchors);
  }

  public final class SwipeToRevealScope {
    ctor public SwipeToRevealScope();
    method public void primaryAction(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, kotlin.jvm.functions.Function0<kotlin.Unit> icon, kotlin.jvm.functions.Function0<kotlin.Unit> text, optional long containerColor, optional long contentColor);
    method public void secondaryAction(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, kotlin.jvm.functions.Function0<kotlin.Unit> icon, optional long containerColor, optional long contentColor);
    method public void undoPrimaryAction(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, kotlin.jvm.functions.Function0<kotlin.Unit> text, optional kotlin.jvm.functions.Function0<kotlin.Unit>? icon, optional long containerColor, optional long contentColor);
    method public void undoSecondaryAction(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, kotlin.jvm.functions.Function0<kotlin.Unit> text, optional kotlin.jvm.functions.Function0<kotlin.Unit>? icon, optional long containerColor, optional long contentColor);
  }

  @androidx.compose.runtime.Immutable public final class SwitchButtonColors {
    ctor public SwitchButtonColors(long checkedContainerColor, long checkedContentColor, long checkedSecondaryContentColor, long checkedIconColor, long checkedThumbColor, long checkedThumbIconColor, long checkedTrackBorderColor, long checkedTrackColor, long uncheckedContainerColor, long uncheckedContentColor, long uncheckedSecondaryContentColor, long uncheckedIconColor, long uncheckedThumbColor, long uncheckedTrackColor, long uncheckedTrackBorderColor, long disabledCheckedContainerColor, long disabledCheckedContentColor, long disabledCheckedSecondaryContentColor, long disabledCheckedIconColor, long disabledCheckedThumbColor, long disabledCheckedThumbIconColor, long disabledCheckedTrackColor, long disabledCheckedTrackBorderColor, long disabledUncheckedContainerColor, long disabledUncheckedContentColor, long disabledUncheckedSecondaryContentColor, long disabledUncheckedIconColor, long disabledUncheckedThumbColor, long disabledUncheckedTrackBorderColor);
    method public androidx.wear.compose.material3.SwitchButtonColors copy(optional long checkedContainerColor, optional long checkedContentColor, optional long checkedSecondaryContentColor, optional long checkedIconColor, optional long checkedThumbColor, optional long checkedThumbIconColor, optional long checkedTrackColor, optional long checkedTrackBorderColor, optional long uncheckedContainerColor, optional long uncheckedContentColor, optional long uncheckedSecondaryContentColor, optional long uncheckedIconColor, optional long uncheckedThumbColor, optional long uncheckedTrackColor, optional long uncheckedTrackBorderColor, optional long disabledCheckedContainerColor, optional long disabledCheckedContentColor, optional long disabledCheckedSecondaryContentColor, optional long disabledCheckedIconColor, optional long disabledCheckedThumbColor, optional long disabledCheckedThumbIconColor, optional long disabledCheckedTrackColor, optional long disabledCheckedTrackBorderColor, optional long disabledUncheckedContainerColor, optional long disabledUncheckedContentColor, optional long disabledUncheckedSecondaryContentColor, optional long disabledUncheckedIconColor, optional long disabledUncheckedThumbColor, optional long disabledUncheckedTrackBorderColor);
    method public long getCheckedContainerColor();
    method public long getCheckedContentColor();
    method public long getCheckedIconColor();
    method public long getCheckedSecondaryContentColor();
    method public long getCheckedThumbColor();
    method public long getCheckedThumbIconColor();
    method public long getCheckedTrackBorderColor();
    method public long getCheckedTrackColor();
    method public long getDisabledCheckedContainerColor();
    method public long getDisabledCheckedContentColor();
    method public long getDisabledCheckedIconColor();
    method public long getDisabledCheckedSecondaryContentColor();
    method public long getDisabledCheckedThumbColor();
    method public long getDisabledCheckedThumbIconColor();
    method public long getDisabledCheckedTrackBorderColor();
    method public long getDisabledCheckedTrackColor();
    method public long getDisabledUncheckedContainerColor();
    method public long getDisabledUncheckedContentColor();
    method public long getDisabledUncheckedIconColor();
    method public long getDisabledUncheckedSecondaryContentColor();
    method public long getDisabledUncheckedThumbColor();
    method public long getDisabledUncheckedTrackBorderColor();
    method public long getUncheckedContainerColor();
    method public long getUncheckedContentColor();
    method public long getUncheckedIconColor();
    method public long getUncheckedSecondaryContentColor();
    method public long getUncheckedThumbColor();
    method public long getUncheckedTrackBorderColor();
    method public long getUncheckedTrackColor();
    property public long checkedContainerColor;
    property public long checkedContentColor;
    property public long checkedIconColor;
    property public long checkedSecondaryContentColor;
    property public long checkedThumbColor;
    property public long checkedThumbIconColor;
    property public long checkedTrackBorderColor;
    property public long checkedTrackColor;
    property public long disabledCheckedContainerColor;
    property public long disabledCheckedContentColor;
    property public long disabledCheckedIconColor;
    property public long disabledCheckedSecondaryContentColor;
    property public long disabledCheckedThumbColor;
    property public long disabledCheckedThumbIconColor;
    property public long disabledCheckedTrackBorderColor;
    property public long disabledCheckedTrackColor;
    property public long disabledUncheckedContainerColor;
    property public long disabledUncheckedContentColor;
    property public long disabledUncheckedIconColor;
    property public long disabledUncheckedSecondaryContentColor;
    property public long disabledUncheckedThumbColor;
    property public long disabledUncheckedTrackBorderColor;
    property public long uncheckedContainerColor;
    property public long uncheckedContentColor;
    property public long uncheckedIconColor;
    property public long uncheckedSecondaryContentColor;
    property public long uncheckedThumbColor;
    property public long uncheckedTrackBorderColor;
    property public long uncheckedTrackColor;
  }

  public final class SwitchButtonDefaults {
    method public androidx.compose.foundation.layout.PaddingValues getContentPadding();
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape getSplitSwitchButtonShape();
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape getSwitchButtonShape();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.SplitSwitchButtonColors splitSwitchButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.SplitSwitchButtonColors splitSwitchButtonColors(optional long checkedContainerColor, optional long checkedContentColor, optional long checkedSecondaryContentColor, optional long checkedSplitContainerColor, optional long checkedThumbColor, optional long checkedThumbIconColor, optional long checkedTrackColor, optional long checkedTrackBorderColor, optional long uncheckedContainerColor, optional long uncheckedContentColor, optional long uncheckedSecondaryContentColor, optional long uncheckedSplitContainerColor, optional long uncheckedThumbColor, optional long uncheckedTrackColor, optional long uncheckedTrackBorderColor, optional long disabledCheckedContainerColor, optional long disabledCheckedContentColor, optional long disabledCheckedSecondaryContentColor, optional long disabledCheckedSplitContainerColor, optional long disabledCheckedThumbColor, optional long disabledCheckedThumbIconColor, optional long disabledCheckedTrackColor, optional long disabledCheckedTrackBorderColor, optional long disabledUncheckedContainerColor, optional long disabledUncheckedContentColor, optional long disabledUncheckedSecondaryContentColor, optional long disabledUncheckedSplitContainerColor, optional long disabledUncheckedThumbColor, optional long disabledUncheckedTrackBorderColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.SwitchButtonColors switchButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.SwitchButtonColors switchButtonColors(optional long checkedContainerColor, optional long checkedContentColor, optional long checkedSecondaryContentColor, optional long checkedIconColor, optional long checkedThumbColor, optional long checkedThumbIconColor, optional long checkedTrackColor, optional long checkedTrackBorderColor, optional long uncheckedContainerColor, optional long uncheckedContentColor, optional long uncheckedSecondaryContentColor, optional long uncheckedIconColor, optional long uncheckedThumbColor, optional long uncheckedTrackColor, optional long uncheckedTrackBorderColor, optional long disabledCheckedContainerColor, optional long disabledCheckedContentColor, optional long disabledCheckedSecondaryContentColor, optional long disabledCheckedIconColor, optional long disabledCheckedThumbColor, optional long disabledCheckedThumbIconColor, optional long disabledCheckedTrackColor, optional long disabledCheckedTrackBorderColor, optional long disabledUncheckedContainerColor, optional long disabledUncheckedContentColor, optional long disabledUncheckedSecondaryContentColor, optional long disabledUncheckedIconColor, optional long disabledUncheckedThumbColor, optional long disabledUncheckedTrackBorderColor);
    property public androidx.compose.foundation.layout.PaddingValues ContentPadding;
    property @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape splitSwitchButtonShape;
    property @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.Shape switchButtonShape;
    field public static final androidx.wear.compose.material3.SwitchButtonDefaults INSTANCE;
  }

  public final class SwitchButtonKt {
    method @androidx.compose.runtime.Composable public static void SplitSwitchButton(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, String? toggleContentDescription, kotlin.jvm.functions.Function0<kotlin.Unit> onContainerClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.SplitSwitchButtonColors colors, optional androidx.compose.foundation.interaction.MutableInteractionSource? toggleInteractionSource, optional androidx.compose.foundation.interaction.MutableInteractionSource? containerInteractionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, optional String? containerClickLabel, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? secondaryLabel, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> label);
    method @androidx.compose.runtime.Composable public static void SwitchButton(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material3.SwitchButtonColors colors, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.SurfaceTransformation? transformation, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? icon, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit>? secondaryLabel, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> label);
  }

  @androidx.compose.runtime.Immutable public final class TextButtonColors {
    ctor public TextButtonColors(long containerColor, long contentColor, long disabledContainerColor, long disabledContentColor);
    method public androidx.wear.compose.material3.TextButtonColors copy(optional long containerColor, optional long contentColor, optional long disabledContainerColor, optional long disabledContentColor);
    method public long getContainerColor();
    method public long getContentColor();
    method public long getDisabledContainerColor();
    method public long getDisabledContentColor();
    property public long containerColor;
    property public long contentColor;
    property public long disabledContainerColor;
    property public long disabledContentColor;
  }

  public final class TextButtonDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonShapes animatedShapes();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonShapes animatedShapes(optional androidx.compose.foundation.shape.CornerBasedShape? shape, optional androidx.compose.foundation.shape.CornerBasedShape? pressedShape);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonColors filledTextButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonColors filledTextButtonColors(optional long containerColor, optional long contentColor, optional long disabledContainerColor, optional long disabledContentColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonColors filledTonalTextButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonColors filledTonalTextButtonColors(optional long containerColor, optional long contentColor, optional long disabledContainerColor, optional long disabledContentColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonColors filledVariantTextButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonColors filledVariantTextButtonColors(optional long containerColor, optional long contentColor, optional long disabledContainerColor, optional long disabledContentColor);
    method public float getDefaultButtonSize();
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.compose.ui.text.TextStyle getDefaultButtonTextStyle();
    method public float getLargeButtonSize();
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.compose.ui.text.TextStyle getLargeButtonTextStyle();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.CornerBasedShape getPressedShape();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.RoundedCornerShape getShape();
    method public float getSmallButtonSize();
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.compose.ui.text.TextStyle getSmallButtonTextStyle();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonColors outlinedTextButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonColors outlinedTextButtonColors(optional long contentColor, optional long disabledContentColor);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonShapes shapes();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonShapes shapes(androidx.compose.ui.graphics.Shape shape);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonColors textButtonColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextButtonColors textButtonColors(optional long containerColor, optional long contentColor, optional long disabledContainerColor, optional long disabledContentColor);
    property public float DefaultButtonSize;
    property public float LargeButtonSize;
    property public float SmallButtonSize;
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.compose.ui.text.TextStyle defaultButtonTextStyle;
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.compose.ui.text.TextStyle largeButtonTextStyle;
    property @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.CornerBasedShape pressedShape;
    property @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.RoundedCornerShape shape;
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.compose.ui.text.TextStyle smallButtonTextStyle;
    field public static final androidx.wear.compose.material3.TextButtonDefaults INSTANCE;
  }

  public final class TextButtonKt {
    method @androidx.compose.runtime.Composable public static void TextButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional String? onLongClickLabel, optional boolean enabled, optional androidx.wear.compose.material3.TextButtonShapes shapes, optional androidx.wear.compose.material3.TextButtonColors colors, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
  }

  public final class TextButtonShapes {
    ctor public TextButtonShapes(androidx.compose.ui.graphics.Shape shape, optional androidx.compose.ui.graphics.Shape pressedShape);
    method public androidx.wear.compose.material3.TextButtonShapes copy(optional androidx.compose.ui.graphics.Shape? shape, optional androidx.compose.ui.graphics.Shape? pressedShape);
    method public androidx.compose.ui.graphics.Shape getPressedShape();
    method public androidx.compose.ui.graphics.Shape getShape();
    property public androidx.compose.ui.graphics.Shape pressedShape;
    property public androidx.compose.ui.graphics.Shape shape;
  }

  public final class TextConfiguration {
    ctor public TextConfiguration(androidx.compose.ui.text.style.TextAlign? textAlign, int overflow, int maxLines);
    method public int getMaxLines();
    method public int getOverflow();
    method public androidx.compose.ui.text.style.TextAlign? getTextAlign();
    property public int maxLines;
    property public int overflow;
    property public androidx.compose.ui.text.style.TextAlign? textAlign;
  }

  public final class TextConfigurationDefaults {
    method public int getMaxLines();
    method public int getOverflow();
    method public androidx.compose.ui.text.style.TextAlign? getTextAlign();
    property public int MaxLines;
    property public int Overflow;
    property public androidx.compose.ui.text.style.TextAlign? TextAlign;
    field public static final androidx.wear.compose.material3.TextConfigurationDefaults INSTANCE;
  }

  public final class TextKt {
    method @androidx.compose.runtime.Composable public static void ProvideTextStyle(androidx.compose.ui.text.TextStyle value, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void Text(androidx.compose.ui.text.AnnotatedString text, optional androidx.compose.ui.Modifier modifier, optional long color, optional long fontSize, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional long letterSpacing, optional androidx.compose.ui.text.style.TextDecoration? textDecoration, optional androidx.compose.ui.text.style.TextAlign? textAlign, optional long lineHeight, optional int overflow, optional boolean softWrap, optional int maxLines, optional int minLines, optional java.util.Map<java.lang.String,androidx.compose.foundation.text.InlineTextContent> inlineContent, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult,kotlin.Unit> onTextLayout, optional androidx.compose.ui.text.TextStyle style);
    method @androidx.compose.runtime.Composable public static void Text(String text, optional androidx.compose.ui.Modifier modifier, optional long color, optional long fontSize, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional long letterSpacing, optional androidx.compose.ui.text.style.TextDecoration? textDecoration, optional androidx.compose.ui.text.style.TextAlign? textAlign, optional long lineHeight, optional int overflow, optional boolean softWrap, optional int maxLines, optional int minLines, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult,kotlin.Unit> onTextLayout, optional androidx.compose.ui.text.TextStyle style);
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.wear.compose.material3.TextConfiguration> getLocalTextConfiguration();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.text.TextStyle> getLocalTextStyle();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.wear.compose.material3.TextConfiguration> LocalTextConfiguration;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.text.TextStyle> LocalTextStyle;
  }

  @androidx.compose.runtime.Immutable public final class TextToggleButtonColors {
    ctor public TextToggleButtonColors(long checkedContainerColor, long checkedContentColor, long uncheckedContainerColor, long uncheckedContentColor, long disabledCheckedContainerColor, long disabledCheckedContentColor, long disabledUncheckedContainerColor, long disabledUncheckedContentColor);
    method public androidx.wear.compose.material3.TextToggleButtonColors copy(optional long checkedContainerColor, optional long checkedContentColor, optional long uncheckedContainerColor, optional long uncheckedContentColor, optional long disabledCheckedContainerColor, optional long disabledCheckedContentColor, optional long disabledUncheckedContainerColor, optional long disabledUncheckedContentColor);
    method public long getCheckedContainerColor();
    method public long getCheckedContentColor();
    method public long getDisabledCheckedContainerColor();
    method public long getDisabledCheckedContentColor();
    method public long getDisabledUncheckedContainerColor();
    method public long getDisabledUncheckedContentColor();
    method public long getUncheckedContainerColor();
    method public long getUncheckedContentColor();
    property public long checkedContainerColor;
    property public long checkedContentColor;
    property public long disabledCheckedContainerColor;
    property public long disabledCheckedContentColor;
    property public long disabledUncheckedContainerColor;
    property public long disabledUncheckedContentColor;
    property public long uncheckedContainerColor;
    property public long uncheckedContentColor;
  }

  public final class TextToggleButtonDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextToggleButtonShapes animatedShapes();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextToggleButtonShapes animatedShapes(optional androidx.compose.foundation.shape.CornerBasedShape? shape, optional androidx.compose.foundation.shape.CornerBasedShape? pressedShape);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextToggleButtonColors colors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextToggleButtonColors colors(optional long checkedContainerColor, optional long checkedContentColor, optional long uncheckedContainerColor, optional long uncheckedContentColor, optional long disabledCheckedContainerColor, optional long disabledCheckedContentColor, optional long disabledUncheckedContainerColor, optional long disabledUncheckedContentColor);
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.CornerBasedShape getCheckedShape();
    method public float getExtraLargeSize();
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.compose.ui.text.TextStyle getExtraLargeTextStyle();
    method public float getLargeSize();
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.compose.ui.text.TextStyle getLargeTextStyle();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.CornerBasedShape getPressedShape();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.RoundedCornerShape getShape();
    method public float getSize();
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.compose.ui.text.TextStyle getTextStyle();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextToggleButtonShapes shapes();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextToggleButtonShapes shapes(androidx.compose.ui.graphics.Shape shape);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextToggleButtonShapes variantAnimatedShapes();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TextToggleButtonShapes variantAnimatedShapes(optional androidx.compose.foundation.shape.CornerBasedShape? uncheckedShape, optional androidx.compose.foundation.shape.CornerBasedShape? checkedShape);
    property public float ExtraLargeSize;
    property public float LargeSize;
    property public float Size;
    property @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.CornerBasedShape checkedShape;
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.compose.ui.text.TextStyle extraLargeTextStyle;
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.compose.ui.text.TextStyle largeTextStyle;
    property @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.CornerBasedShape pressedShape;
    property @androidx.compose.runtime.Composable public androidx.compose.foundation.shape.RoundedCornerShape shape;
    property @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public androidx.compose.ui.text.TextStyle textStyle;
    field public static final androidx.wear.compose.material3.TextToggleButtonDefaults INSTANCE;
  }

  public final class TextToggleButtonKt {
    method @androidx.compose.runtime.Composable public static void TextToggleButton(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material3.TextToggleButtonColors colors, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.wear.compose.material3.TextToggleButtonShapes shapes, optional androidx.compose.foundation.BorderStroke? border, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
  }

  public final class TextToggleButtonShapes {
    ctor public TextToggleButtonShapes(androidx.compose.ui.graphics.Shape uncheckedShape, optional androidx.compose.ui.graphics.Shape checkedShape, optional androidx.compose.ui.graphics.Shape uncheckedPressedShape, optional androidx.compose.ui.graphics.Shape checkedPressedShape);
    method public androidx.wear.compose.material3.TextToggleButtonShapes copy(optional androidx.compose.ui.graphics.Shape? uncheckedShape, optional androidx.compose.ui.graphics.Shape? checkedShape, optional androidx.compose.ui.graphics.Shape? uncheckedPressedShape, optional androidx.compose.ui.graphics.Shape? checkedPressedShape);
    method public androidx.compose.ui.graphics.Shape getCheckedPressedShape();
    method public androidx.compose.ui.graphics.Shape getCheckedShape();
    method public androidx.compose.ui.graphics.Shape getUncheckedPressedShape();
    method public androidx.compose.ui.graphics.Shape getUncheckedShape();
    property public androidx.compose.ui.graphics.Shape checkedPressedShape;
    property public androidx.compose.ui.graphics.Shape checkedShape;
    property public androidx.compose.ui.graphics.Shape uncheckedPressedShape;
    property public androidx.compose.ui.graphics.Shape uncheckedShape;
  }

  @androidx.compose.runtime.Immutable public final class TimePickerColors {
    ctor public TimePickerColors(long selectedPickerContentColor, long unselectedPickerContentColor, long separatorColor, long pickerLabelColor, long confirmButtonContentColor, long confirmButtonContainerColor);
    method public androidx.wear.compose.material3.TimePickerColors copy(optional long selectedPickerContentColor, optional long unselectedPickerContentColor, optional long separatorColor, optional long pickerLabelColor, optional long confirmButtonContentColor, optional long confirmButtonContainerColor);
    method public long getConfirmButtonContainerColor();
    method public long getConfirmButtonContentColor();
    method public long getPickerLabelColor();
    method public long getSelectedPickerContentColor();
    method public long getSeparatorColor();
    method public long getUnselectedPickerContentColor();
    property public long confirmButtonContainerColor;
    property public long confirmButtonContentColor;
    property public long pickerLabelColor;
    property public long selectedPickerContentColor;
    property public long separatorColor;
    property public long unselectedPickerContentColor;
  }

  public final class TimePickerDefaults {
    method @androidx.compose.runtime.Composable public int getTimePickerType();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TimePickerColors timePickerColors();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TimePickerColors timePickerColors(optional long selectedPickerContentColor, optional long unselectedPickerContentColor, optional long separatorColor, optional long pickerLabelColor, optional long confirmButtonContentColor, optional long confirmButtonContainerColor);
    property @androidx.compose.runtime.Composable public int timePickerType;
    field public static final androidx.wear.compose.material3.TimePickerDefaults INSTANCE;
  }

  public final class TimePickerKt {
    method @RequiresApi(android.os.Build.VERSION_CODES.O) @androidx.compose.runtime.Composable public static void TimePicker(java.time.LocalTime initialTime, kotlin.jvm.functions.Function1<? super java.time.LocalTime,kotlin.Unit> onTimePicked, optional androidx.compose.ui.Modifier modifier, optional int timePickerType, optional androidx.wear.compose.material3.TimePickerColors colors);
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class TimePickerType {
    field public static final androidx.wear.compose.material3.TimePickerType.Companion Companion;
  }

  public static final class TimePickerType.Companion {
    method public int getHoursMinutes24H();
    method public int getHoursMinutesAmPm12H();
    method public int getHoursMinutesSeconds24H();
    property public int HoursMinutes24H;
    property public int HoursMinutesAmPm12H;
    property public int HoursMinutesSeconds24H;
  }

  public interface TimeSource {
    method @androidx.compose.runtime.Composable public String currentTime();
  }

  public final class TimeTextDefaults {
    method @androidx.compose.runtime.Composable public long backgroundColor();
    method public androidx.compose.foundation.layout.PaddingValues getContentPadding();
    method public float getMaxSweepAngle();
    method public String getTimeFormat12Hours();
    method public String getTimeFormat24Hours();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material3.TimeSource rememberTimeSource(String timeFormat);
    method @androidx.compose.runtime.Composable public String timeFormat();
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.CurvedTextStyle timeTextStyle(optional long background, optional long color, optional long fontSize);
    property public androidx.compose.foundation.layout.PaddingValues ContentPadding;
    property public float MaxSweepAngle;
    property public String TimeFormat12Hours;
    property public String TimeFormat24Hours;
    field public static final androidx.wear.compose.material3.TimeTextDefaults INSTANCE;
  }

  public final class TimeTextKt {
    method @androidx.compose.runtime.Composable public static void TimeText(optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.foundation.CurvedModifier curvedModifier, optional float maxSweepAngle, optional long backgroundColor, optional androidx.wear.compose.material3.TimeSource timeSource, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.CurvedScope,? super java.lang.String,kotlin.Unit> content);
    method public static void timeTextCurvedText(androidx.wear.compose.foundation.CurvedScope, String time, optional androidx.wear.compose.foundation.CurvedTextStyle? style);
    method public static void timeTextSeparator(androidx.wear.compose.foundation.CurvedScope, optional androidx.wear.compose.foundation.CurvedTextStyle? curvedTextStyle, optional androidx.wear.compose.foundation.ArcPaddingValues contentArcPadding);
  }

  public final class TouchTargetAwareSizeKt {
    method public static androidx.compose.ui.Modifier touchTargetAwareSize(androidx.compose.ui.Modifier, float size);
  }

  @androidx.compose.runtime.Immutable public final class Typography {
    ctor public Typography(optional androidx.compose.ui.text.font.FontFamily defaultFontFamily, optional androidx.wear.compose.foundation.CurvedTextStyle arcLarge, optional androidx.wear.compose.foundation.CurvedTextStyle arcMedium, optional androidx.wear.compose.foundation.CurvedTextStyle arcSmall, optional androidx.compose.ui.text.TextStyle displayLarge, optional androidx.compose.ui.text.TextStyle displayMedium, optional androidx.compose.ui.text.TextStyle displaySmall, optional androidx.compose.ui.text.TextStyle titleLarge, optional androidx.compose.ui.text.TextStyle titleMedium, optional androidx.compose.ui.text.TextStyle titleSmall, optional androidx.compose.ui.text.TextStyle labelLarge, optional androidx.compose.ui.text.TextStyle labelMedium, optional androidx.compose.ui.text.TextStyle labelSmall, optional androidx.compose.ui.text.TextStyle bodyLarge, optional androidx.compose.ui.text.TextStyle bodyMedium, optional androidx.compose.ui.text.TextStyle bodySmall, optional androidx.compose.ui.text.TextStyle bodyExtraSmall, optional androidx.compose.ui.text.TextStyle numeralExtraLarge, optional androidx.compose.ui.text.TextStyle numeralLarge, optional androidx.compose.ui.text.TextStyle numeralMedium, optional androidx.compose.ui.text.TextStyle numeralSmall, optional androidx.compose.ui.text.TextStyle numeralExtraSmall);
    method public androidx.wear.compose.material3.Typography copy(optional androidx.wear.compose.foundation.CurvedTextStyle arcLarge, optional androidx.wear.compose.foundation.CurvedTextStyle arcMedium, optional androidx.wear.compose.foundation.CurvedTextStyle arcSmall, optional androidx.compose.ui.text.TextStyle displayLarge, optional androidx.compose.ui.text.TextStyle displayMedium, optional androidx.compose.ui.text.TextStyle displaySmall, optional androidx.compose.ui.text.TextStyle titleLarge, optional androidx.compose.ui.text.TextStyle titleMedium, optional androidx.compose.ui.text.TextStyle titleSmall, optional androidx.compose.ui.text.TextStyle labelLarge, optional androidx.compose.ui.text.TextStyle labelMedium, optional androidx.compose.ui.text.TextStyle labelSmall, optional androidx.compose.ui.text.TextStyle bodyLarge, optional androidx.compose.ui.text.TextStyle bodyMedium, optional androidx.compose.ui.text.TextStyle bodySmall, optional androidx.compose.ui.text.TextStyle bodyExtraSmall, optional androidx.compose.ui.text.TextStyle numeralExtraLarge, optional androidx.compose.ui.text.TextStyle numeralLarge, optional androidx.compose.ui.text.TextStyle numeralMedium, optional androidx.compose.ui.text.TextStyle numeralSmall, optional androidx.compose.ui.text.TextStyle numeralExtraSmall);
    method public androidx.wear.compose.foundation.CurvedTextStyle getArcLarge();
    method public androidx.wear.compose.foundation.CurvedTextStyle getArcMedium();
    method public androidx.wear.compose.foundation.CurvedTextStyle getArcSmall();
    method public androidx.compose.ui.text.TextStyle getBodyExtraSmall();
    method public androidx.compose.ui.text.TextStyle getBodyLarge();
    method public androidx.compose.ui.text.TextStyle getBodyMedium();
    method public androidx.compose.ui.text.TextStyle getBodySmall();
    method public androidx.compose.ui.text.TextStyle getDisplayLarge();
    method public androidx.compose.ui.text.TextStyle getDisplayMedium();
    method public androidx.compose.ui.text.TextStyle getDisplaySmall();
    method public androidx.compose.ui.text.TextStyle getLabelLarge();
    method public androidx.compose.ui.text.TextStyle getLabelMedium();
    method public androidx.compose.ui.text.TextStyle getLabelSmall();
    method public androidx.compose.ui.text.TextStyle getNumeralExtraLarge();
    method public androidx.compose.ui.text.TextStyle getNumeralExtraSmall();
    method public androidx.compose.ui.text.TextStyle getNumeralLarge();
    method public androidx.compose.ui.text.TextStyle getNumeralMedium();
    method public androidx.compose.ui.text.TextStyle getNumeralSmall();
    method public androidx.compose.ui.text.TextStyle getTitleLarge();
    method public androidx.compose.ui.text.TextStyle getTitleMedium();
    method public androidx.compose.ui.text.TextStyle getTitleSmall();
    property public androidx.wear.compose.foundation.CurvedTextStyle arcLarge;
    property public androidx.wear.compose.foundation.CurvedTextStyle arcMedium;
    property public androidx.wear.compose.foundation.CurvedTextStyle arcSmall;
    property public androidx.compose.ui.text.TextStyle bodyExtraSmall;
    property public androidx.compose.ui.text.TextStyle bodyLarge;
    property public androidx.compose.ui.text.TextStyle bodyMedium;
    property public androidx.compose.ui.text.TextStyle bodySmall;
    property public androidx.compose.ui.text.TextStyle displayLarge;
    property public androidx.compose.ui.text.TextStyle displayMedium;
    property public androidx.compose.ui.text.TextStyle displaySmall;
    property public androidx.compose.ui.text.TextStyle labelLarge;
    property public androidx.compose.ui.text.TextStyle labelMedium;
    property public androidx.compose.ui.text.TextStyle labelSmall;
    property public androidx.compose.ui.text.TextStyle numeralExtraLarge;
    property public androidx.compose.ui.text.TextStyle numeralExtraSmall;
    property public androidx.compose.ui.text.TextStyle numeralLarge;
    property public androidx.compose.ui.text.TextStyle numeralMedium;
    property public androidx.compose.ui.text.TextStyle numeralSmall;
    property public androidx.compose.ui.text.TextStyle titleLarge;
    property public androidx.compose.ui.text.TextStyle titleMedium;
    property public androidx.compose.ui.text.TextStyle titleSmall;
  }

}

package androidx.wear.compose.material3.lazy {

  public sealed interface ResponsiveTransformationSpec extends androidx.wear.compose.material3.lazy.TransformationSpec {
    field public static final androidx.wear.compose.material3.lazy.ResponsiveTransformationSpec.Companion Companion;
  }

  public static final class ResponsiveTransformationSpec.Companion {
    method public androidx.wear.compose.material3.lazy.ResponsiveTransformationSpec largeScreen(optional float screenSize, optional @FloatRange(from=0.0, to=1.0) float minElementHeightFraction, optional @FloatRange(from=0.0, to=1.0) float maxElementHeightFraction, optional @FloatRange(from=0.0, to=1.0) float minTransitionAreaHeightFraction, optional @FloatRange(from=0.0, to=1.0) float maxTransitionAreaHeightFraction, optional androidx.compose.animation.core.Easing easing, optional androidx.wear.compose.material3.lazy.TransformationVariableSpec containerAlpha, optional androidx.wear.compose.material3.lazy.TransformationVariableSpec contentAlpha, optional androidx.wear.compose.material3.lazy.TransformationVariableSpec scale);
    method public androidx.wear.compose.material3.lazy.ResponsiveTransformationSpec smallScreen(optional float screenSize, optional @FloatRange(from=0.0, to=1.0) float minElementHeightFraction, optional @FloatRange(from=0.0, to=1.0) float maxElementHeightFraction, optional @FloatRange(from=0.0, to=1.0) float minTransitionAreaHeightFraction, optional @FloatRange(from=0.0, to=1.0) float maxTransitionAreaHeightFraction, optional androidx.compose.animation.core.Easing easing, optional androidx.wear.compose.material3.lazy.TransformationVariableSpec containerAlpha, optional androidx.wear.compose.material3.lazy.TransformationVariableSpec contentAlpha, optional androidx.wear.compose.material3.lazy.TransformationVariableSpec scale);
  }

  public final class ResponsiveTransformationSpecDefaults {
    method public float getLargeScreenSize();
    method public float getSmallScreenSize();
    property public float LargeScreenSize;
    property public float SmallScreenSize;
    field public static final androidx.wear.compose.material3.lazy.ResponsiveTransformationSpecDefaults INSTANCE;
  }

  public final class ResponsiveTransformationSpecKt {
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.material3.lazy.TransformationSpec rememberTransformationSpec();
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.material3.lazy.TransformationSpec rememberTransformationSpec(androidx.wear.compose.material3.lazy.ResponsiveTransformationSpec... specs);
  }

  public interface TransformationSpec {
    method public void applyContainerTransformation(androidx.compose.ui.graphics.GraphicsLayerScope, long scrollProgress);
    method public void applyContentTransformation(androidx.compose.ui.graphics.GraphicsLayerScope, long scrollProgress);
    method public androidx.compose.ui.graphics.painter.Painter createTransformedContainerPainter(androidx.wear.compose.material3.lazy.TransformedContainerPainterScope, androidx.compose.ui.graphics.painter.Painter painter, androidx.compose.ui.graphics.Shape shape, androidx.compose.foundation.BorderStroke? border);
    method public int getTransformedHeight(int measuredHeight, long scrollProgress);
  }

  public final class TransformationSpecKt {
    method public static androidx.wear.compose.material3.lazy.TransformationVariableSpec lerp(androidx.wear.compose.material3.lazy.TransformationVariableSpec start, androidx.wear.compose.material3.lazy.TransformationVariableSpec stop, float progress);
    method public static androidx.compose.ui.Modifier transformedHeight(androidx.compose.ui.Modifier, androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope scope, androidx.wear.compose.material3.lazy.TransformationSpec transformationSpec);
  }

  public final class TransformationVariableSpec {
    ctor public TransformationVariableSpec(@FloatRange(from=0.0, to=1.0) float topValue, optional @FloatRange(from=0.0, to=1.0) float targetValue, optional @FloatRange(from=0.0, to=1.0) float bottomValue, optional @FloatRange(from=0.0, to=1.0) float transformationZoneEnterFraction, optional @FloatRange(from=0.0, to=1.0) float transformationZoneExitFraction);
    method public androidx.wear.compose.material3.lazy.TransformationVariableSpec copy(optional float topValue, optional float targetValue, optional float bottomValue, optional float transformationZoneEnterFraction, optional float transformationZoneExitFraction);
    method public float getBottomValue();
    method public float getTargetValue();
    method public float getTopValue();
    method public float getTransformationZoneEnterFraction();
    method public float getTransformationZoneExitFraction();
    property @FloatRange(from=0.0, to=1.0) public float bottomValue;
    property @FloatRange(from=0.0, to=1.0) public float targetValue;
    property @FloatRange(from=0.0, to=1.0) public float topValue;
    property @FloatRange(from=0.0, to=1.0) public float transformationZoneEnterFraction;
    property @FloatRange(from=0.0, to=1.0) public float transformationZoneExitFraction;
  }

  public interface TransformedContainerPainterScope {
    method public float getItemHeight(androidx.compose.ui.graphics.drawscope.DrawScope);
    method public long getScrollProgress();
    property public abstract float androidx.compose.ui.graphics.drawscope.DrawScope.itemHeight;
    property public abstract long androidx.compose.ui.graphics.drawscope.DrawScope.scrollProgress;
  }

}

