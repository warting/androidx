// Signature format: 4.0
package androidx.wear.compose.foundation {

  @kotlin.jvm.JvmInline public final value class AnchorType {
    method @BytecodeOnly public static androidx.wear.compose.foundation.AnchorType! box-impl(float);
    method @BytecodeOnly public float unbox-impl();
    field public static final androidx.wear.compose.foundation.AnchorType.Companion Companion;
  }

  public static final class AnchorType.Companion {
    method public float getCenter();
    method @BytecodeOnly public float getCenter-IUldqTk();
    method public float getEnd();
    method @BytecodeOnly public float getEnd-IUldqTk();
    method public float getStart();
    method @BytecodeOnly public float getStart-IUldqTk();
    property public float Center;
    property public float End;
    property public float Start;
  }

  @androidx.compose.runtime.Stable public interface ArcPaddingValues {
    method public float calculateAfterPadding(androidx.compose.ui.unit.LayoutDirection layoutDirection, int angularDirection);
    method @BytecodeOnly public float calculateAfterPadding-h2ZJBLU(androidx.compose.ui.unit.LayoutDirection, int);
    method public float calculateBeforePadding(androidx.compose.ui.unit.LayoutDirection layoutDirection, int angularDirection);
    method @BytecodeOnly public float calculateBeforePadding-h2ZJBLU(androidx.compose.ui.unit.LayoutDirection, int);
    method public float calculateInnerPadding(int radialDirection);
    method @BytecodeOnly public float calculateInnerPadding-bxc3Tjc(int);
    method public float calculateOuterPadding(int radialDirection);
    method @BytecodeOnly public float calculateOuterPadding-bxc3Tjc(int);
  }

  public final class BasicCurvedTextKt {
    method public static void basicCurvedText(androidx.wear.compose.foundation.CurvedScope, String text, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional androidx.wear.compose.foundation.CurvedDirection.Angular? angularDirection, optional int overflow, optional kotlin.jvm.functions.Function0<androidx.wear.compose.foundation.CurvedTextStyle> style);
    method public static void basicCurvedText(androidx.wear.compose.foundation.CurvedScope, String text, androidx.wear.compose.foundation.CurvedTextStyle style, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional androidx.wear.compose.foundation.CurvedDirection.Angular? angularDirection, optional int overflow);
    method @BytecodeOnly public static void basicCurvedText-q1JGhlM(androidx.wear.compose.foundation.CurvedScope, String, androidx.wear.compose.foundation.CurvedTextStyle, androidx.wear.compose.foundation.CurvedModifier, androidx.wear.compose.foundation.CurvedDirection.Angular?, int);
    method @BytecodeOnly public static void basicCurvedText-zBu2efk(androidx.wear.compose.foundation.CurvedScope, String, androidx.wear.compose.foundation.CurvedModifier, androidx.wear.compose.foundation.CurvedDirection.Angular?, int, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,androidx.wear.compose.foundation.CurvedTextStyle!>);
  }

  public final class BasicSwipeToDismissBoxKt {
    method @androidx.compose.runtime.Composable public static void BasicSwipeToDismissBox(androidx.wear.compose.foundation.SwipeToDismissBoxState state, optional androidx.compose.ui.Modifier modifier, optional Object backgroundKey, optional Object contentKey, optional boolean userSwipeEnabled, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super java.lang.Boolean,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void BasicSwipeToDismissBox(androidx.wear.compose.foundation.SwipeToDismissBoxState, androidx.compose.ui.Modifier?, Object?, Object?, boolean, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.layout.BoxScope!,? super java.lang.Boolean!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable public static void BasicSwipeToDismissBox(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissed, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.foundation.SwipeToDismissBoxState state, optional Object backgroundKey, optional Object contentKey, optional boolean userSwipeEnabled, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super java.lang.Boolean,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void BasicSwipeToDismissBox(kotlin.jvm.functions.Function0<kotlin.Unit!>, androidx.compose.ui.Modifier?, androidx.wear.compose.foundation.SwipeToDismissBoxState?, Object?, Object?, boolean, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.layout.BoxScope!,? super java.lang.Boolean!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method public static androidx.compose.ui.Modifier edgeSwipeToDismiss(androidx.compose.ui.Modifier, androidx.wear.compose.foundation.SwipeToDismissBoxState swipeToDismissBoxState, optional float edgeWidth);
    method @BytecodeOnly public static androidx.compose.ui.Modifier edgeSwipeToDismiss-wH6b6FI(androidx.compose.ui.Modifier, androidx.wear.compose.foundation.SwipeToDismissBoxState, float);
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.SwipeToDismissBoxState rememberSwipeToDismissBoxState(optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.SwipeToDismissValue,java.lang.Boolean> confirmStateChange);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.SwipeToDismissBoxState rememberSwipeToDismissBoxState(androidx.compose.animation.core.AnimationSpec<java.lang.Float!>?, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.SwipeToDismissValue!,java.lang.Boolean!>?, androidx.compose.runtime.Composer?, int, int);
  }

  public final class CompositionLocalsKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> getLocalReduceMotion();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> getLocalScreenIsActive();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Color> getLocalSwipeToDismissBackgroundScrimColor();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Color> getLocalSwipeToDismissContentScrimColor();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> LocalReduceMotion;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> LocalScreenIsActive;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Color> LocalSwipeToDismissBackgroundScrimColor;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Color> LocalSwipeToDismissContentScrimColor;
  }

  public interface CurvedAlignment {
  }

  @kotlin.jvm.JvmInline public static final value class CurvedAlignment.Angular {
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedAlignment.Angular! box-impl(float);
    method @BytecodeOnly public float unbox-impl();
    field public static final androidx.wear.compose.foundation.CurvedAlignment.Angular.Companion Companion;
  }

  public static final class CurvedAlignment.Angular.Companion {
    method public float Custom(float ratio);
    method @BytecodeOnly public float Custom-MIL3zXU(float);
    method public float getCenter();
    method @BytecodeOnly public float getCenter-yWRYBYk();
    method public float getEnd();
    method @BytecodeOnly public float getEnd-yWRYBYk();
    method public float getStart();
    method @BytecodeOnly public float getStart-yWRYBYk();
    property public float Center;
    property public float End;
    property public float Start;
  }

  @kotlin.jvm.JvmInline public static final value class CurvedAlignment.Radial {
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedAlignment.Radial! box-impl(float);
    method @BytecodeOnly public float unbox-impl();
    field public static final androidx.wear.compose.foundation.CurvedAlignment.Radial.Companion Companion;
  }

  public static final class CurvedAlignment.Radial.Companion {
    method public float Custom(float ratio);
    method @BytecodeOnly public float Custom-Tt6c-v8(float);
    method public float getCenter();
    method @BytecodeOnly public float getCenter-BjYtHoc();
    method public float getInner();
    method @BytecodeOnly public float getInner-BjYtHoc();
    method public float getOuter();
    method @BytecodeOnly public float getOuter-BjYtHoc();
    property public float Center;
    property public float Inner;
    property public float Outer;
  }

  public final class CurvedBoxKt {
    method public static void curvedBox(androidx.wear.compose.foundation.CurvedScope, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional androidx.wear.compose.foundation.CurvedAlignment.Radial? radialAlignment, optional androidx.wear.compose.foundation.CurvedAlignment.Angular? angularAlignment, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit> contentBuilder);
    method @BytecodeOnly public static void curvedBox-wFQxHJU(androidx.wear.compose.foundation.CurvedScope, androidx.wear.compose.foundation.CurvedModifier, androidx.wear.compose.foundation.CurvedAlignment.Radial?, androidx.wear.compose.foundation.CurvedAlignment.Angular?, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope!,kotlin.Unit!>);
  }

  public final class CurvedColumnKt {
    method public static void curvedColumn(androidx.wear.compose.foundation.CurvedScope, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional androidx.wear.compose.foundation.CurvedDirection.Radial? radialDirection, optional androidx.wear.compose.foundation.CurvedAlignment.Angular? angularAlignment, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit> contentBuilder);
    method @BytecodeOnly public static void curvedColumn-6v4VuIY(androidx.wear.compose.foundation.CurvedScope, androidx.wear.compose.foundation.CurvedModifier, androidx.wear.compose.foundation.CurvedDirection.Radial?, androidx.wear.compose.foundation.CurvedAlignment.Angular?, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope!,kotlin.Unit!>);
  }

  public final class CurvedComposableKt {
    method public static void curvedComposable(androidx.wear.compose.foundation.CurvedScope, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional float radialAlignment, optional boolean rotationLocked, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
    method @Deprecated public static void curvedComposable(androidx.wear.compose.foundation.CurvedScope, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional float radialAlignment, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
    method @BytecodeOnly @Deprecated public static void curvedComposable-E6nutXQ(androidx.wear.compose.foundation.CurvedScope!, androidx.wear.compose.foundation.CurvedModifier!, float, kotlin.jvm.functions.Function3!);
    method @BytecodeOnly public static void curvedComposable-y9Iwo_o(androidx.wear.compose.foundation.CurvedScope, androidx.wear.compose.foundation.CurvedModifier, float, boolean, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.layout.BoxScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
  }

  public interface CurvedDirection {
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public static final value class CurvedDirection.Angular {
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedDirection.Angular! box-impl(int);
    method @BytecodeOnly public int unbox-impl();
    field public static final androidx.wear.compose.foundation.CurvedDirection.Angular.Companion Companion;
  }

  public static final class CurvedDirection.Angular.Companion {
    method public int getClockwise();
    method @BytecodeOnly public int getClockwise-gmlPZk4();
    method public int getCounterClockwise();
    method @BytecodeOnly public int getCounterClockwise-gmlPZk4();
    method public int getNormal();
    method @BytecodeOnly public int getNormal-gmlPZk4();
    method public int getReversed();
    method @BytecodeOnly public int getReversed-gmlPZk4();
    property public int Clockwise;
    property public int CounterClockwise;
    property public int Normal;
    property public int Reversed;
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public static final value class CurvedDirection.Radial {
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedDirection.Radial! box-impl(int);
    method @BytecodeOnly public int unbox-impl();
    field public static final androidx.wear.compose.foundation.CurvedDirection.Radial.Companion Companion;
  }

  public static final class CurvedDirection.Radial.Companion {
    method public int getInsideOut();
    method @BytecodeOnly public int getInsideOut-Ysh6JRM();
    method public int getOutsideIn();
    method @BytecodeOnly public int getOutsideIn-Ysh6JRM();
    property public int InsideOut;
    property public int OutsideIn;
  }

  public final class CurvedDrawKt {
    method public static androidx.wear.compose.foundation.CurvedModifier angularGradientBackground(androidx.wear.compose.foundation.CurvedModifier, java.util.List<androidx.compose.ui.graphics.Color> colors, optional int cap);
    method public static androidx.wear.compose.foundation.CurvedModifier angularGradientBackground(androidx.wear.compose.foundation.CurvedModifier, kotlin.Pair<java.lang.Float,androidx.compose.ui.graphics.Color>[] colorStops, optional int cap);
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedModifier angularGradientBackground-dtTnAaA(androidx.wear.compose.foundation.CurvedModifier, java.util.List<androidx.compose.ui.graphics.Color!>, int);
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedModifier angularGradientBackground-dtTnAaA(androidx.wear.compose.foundation.CurvedModifier, kotlin.Pair<java.lang.Float!,androidx.compose.ui.graphics.Color!>![], int);
    method public static androidx.wear.compose.foundation.CurvedModifier background(androidx.wear.compose.foundation.CurvedModifier, long color, optional int cap);
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedModifier background-nkY6TQo(androidx.wear.compose.foundation.CurvedModifier, long, int);
    method public static androidx.wear.compose.foundation.CurvedModifier radialGradientBackground(androidx.wear.compose.foundation.CurvedModifier, java.util.List<androidx.compose.ui.graphics.Color> colors, optional int cap);
    method public static androidx.wear.compose.foundation.CurvedModifier radialGradientBackground(androidx.wear.compose.foundation.CurvedModifier, kotlin.Pair<java.lang.Float,androidx.compose.ui.graphics.Color>[] colorStops, optional int cap);
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedModifier radialGradientBackground-dtTnAaA(androidx.wear.compose.foundation.CurvedModifier, java.util.List<androidx.compose.ui.graphics.Color!>, int);
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedModifier radialGradientBackground-dtTnAaA(androidx.wear.compose.foundation.CurvedModifier, kotlin.Pair<java.lang.Float!,androidx.compose.ui.graphics.Color!>![], int);
  }

  public final class CurvedLayoutKt {
    method @androidx.compose.runtime.Composable public static void CurvedLayout(optional androidx.compose.ui.Modifier modifier, optional float anchor, optional float anchorType, optional androidx.wear.compose.foundation.CurvedAlignment.Radial? radialAlignment, optional int angularDirection, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit> contentBuilder);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void CurvedLayout-z6uKIlA(androidx.compose.ui.Modifier?, float, float, androidx.wear.compose.foundation.CurvedAlignment.Radial?, int, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  @androidx.compose.runtime.Stable @kotlin.jvm.JvmDefaultWithCompatibility public sealed interface CurvedModifier {
    method public default infix androidx.wear.compose.foundation.CurvedModifier then(androidx.wear.compose.foundation.CurvedModifier other);
    field public static final androidx.wear.compose.foundation.CurvedModifier.Companion Companion;
  }

  public static final class CurvedModifier.Companion implements androidx.wear.compose.foundation.CurvedModifier {
  }

  public final class CurvedPaddingKt {
    method public static androidx.wear.compose.foundation.ArcPaddingValues ArcPaddingValues(float all);
    method public static androidx.wear.compose.foundation.ArcPaddingValues ArcPaddingValues(optional float radial, optional float angular);
    method public static androidx.wear.compose.foundation.ArcPaddingValues ArcPaddingValues(optional float outer, optional float inner, optional float before, optional float after);
    method @BytecodeOnly public static androidx.wear.compose.foundation.ArcPaddingValues ArcPaddingValues-0680j_4(float);
    method @BytecodeOnly public static androidx.wear.compose.foundation.ArcPaddingValues ArcPaddingValues-YgX7TsA(float, float);
    method @BytecodeOnly public static androidx.wear.compose.foundation.ArcPaddingValues ArcPaddingValues-a9UjIt4(float, float, float, float);
    method public static androidx.wear.compose.foundation.CurvedModifier padding(androidx.wear.compose.foundation.CurvedModifier, androidx.wear.compose.foundation.ArcPaddingValues paddingValues);
    method public static androidx.wear.compose.foundation.CurvedModifier padding(androidx.wear.compose.foundation.CurvedModifier, optional float all);
    method public static androidx.wear.compose.foundation.CurvedModifier padding(androidx.wear.compose.foundation.CurvedModifier, optional float radial, optional float angular);
    method public static androidx.wear.compose.foundation.CurvedModifier padding(androidx.wear.compose.foundation.CurvedModifier, float outer, float inner, float before, float after);
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedModifier padding-3ABfNKs(androidx.wear.compose.foundation.CurvedModifier, float);
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedModifier padding-VpY3zN4(androidx.wear.compose.foundation.CurvedModifier, float, float);
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedModifier padding-qDBjuR0(androidx.wear.compose.foundation.CurvedModifier, float, float, float, float);
  }

  public final class CurvedParentDataKt {
    method public static androidx.wear.compose.foundation.CurvedModifier parentDataModifier(androidx.wear.compose.foundation.CurvedModifier, kotlin.jvm.functions.Function1<java.lang.Object?,? extends java.lang.Object?> modifyParentData);
    method public static androidx.wear.compose.foundation.CurvedModifier weight(androidx.wear.compose.foundation.CurvedModifier, @FloatRange(from=0.0, fromInclusive=false) float weight);
  }

  public final class CurvedRowKt {
    method public static void curvedRow(androidx.wear.compose.foundation.CurvedScope, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional androidx.wear.compose.foundation.CurvedAlignment.Radial? radialAlignment, optional androidx.wear.compose.foundation.CurvedDirection.Angular? angularDirection, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit> contentBuilder);
    method @BytecodeOnly public static void curvedRow-siNV5iY(androidx.wear.compose.foundation.CurvedScope, androidx.wear.compose.foundation.CurvedModifier, androidx.wear.compose.foundation.CurvedAlignment.Radial?, androidx.wear.compose.foundation.CurvedDirection.Angular?, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope!,kotlin.Unit!>);
  }

  @androidx.compose.foundation.layout.LayoutScopeMarker public final class CurvedScope {
  }

  public final class CurvedSemanticsKt {
    method public static androidx.wear.compose.foundation.CurvedModifier clearAndSetSemantics(androidx.wear.compose.foundation.CurvedModifier, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedSemanticsScope,kotlin.Unit> properties);
    method public static androidx.wear.compose.foundation.CurvedModifier semantics(androidx.wear.compose.foundation.CurvedModifier, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedSemanticsScope,kotlin.Unit> properties);
  }

  public final class CurvedSemanticsScope {
    ctor public CurvedSemanticsScope();
    method public String? getContentDescription();
    method public float getTraversalIndex();
    method public void setContentDescription(String?);
    method public void setTraversalIndex(float);
    property public String? contentDescription;
    property public float traversalIndex;
  }

  public final class CurvedSizeKt {
    method public static androidx.wear.compose.foundation.CurvedModifier angularSize(androidx.wear.compose.foundation.CurvedModifier, float sweepDegrees);
    method public static androidx.wear.compose.foundation.CurvedModifier angularSizeDp(androidx.wear.compose.foundation.CurvedModifier, float angularWidth);
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedModifier angularSizeDp-3ABfNKs(androidx.wear.compose.foundation.CurvedModifier, float);
    method public static androidx.wear.compose.foundation.CurvedModifier radialSize(androidx.wear.compose.foundation.CurvedModifier, float thickness);
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedModifier radialSize-3ABfNKs(androidx.wear.compose.foundation.CurvedModifier, float);
    method public static androidx.wear.compose.foundation.CurvedModifier size(androidx.wear.compose.foundation.CurvedModifier, @FloatRange(from=0.0, to=360.0) float sweepDegrees, float thickness);
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedModifier size-wH6b6FI(androidx.wear.compose.foundation.CurvedModifier, @FloatRange(from=0.0, to=360.0) float, float);
    method public static androidx.wear.compose.foundation.CurvedModifier sizeIn(androidx.wear.compose.foundation.CurvedModifier, optional @FloatRange(from=0.0, to=360.0) float minSweepDegrees, optional @FloatRange(from=0.0, to=360.0) float maxSweepDegrees, optional float minThickness, optional float maxThickness);
    method @BytecodeOnly public static androidx.wear.compose.foundation.CurvedModifier sizeIn-oZzcvok(androidx.wear.compose.foundation.CurvedModifier, @FloatRange(from=0.0, to=360.0) float, @FloatRange(from=0.0, to=360.0) float, float, float);
  }

  public final class CurvedTextStyle {
    ctor public CurvedTextStyle();
    ctor @KotlinOnly public CurvedTextStyle(optional androidx.compose.ui.graphics.Color background, optional androidx.compose.ui.graphics.Color color, optional androidx.compose.ui.unit.TextUnit fontSize, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontSynthesis? fontSynthesis, optional androidx.compose.ui.unit.TextUnit letterSpacing, optional androidx.compose.ui.unit.TextUnit letterSpacingCounterClockwise, optional androidx.compose.ui.unit.TextUnit lineHeight);
    ctor public CurvedTextStyle(androidx.compose.ui.text.TextStyle style);
    ctor @BytecodeOnly @Deprecated public CurvedTextStyle(long, long, long, androidx.compose.ui.text.font.FontFamily!, androidx.compose.ui.text.font.FontWeight!, androidx.compose.ui.text.font.FontStyle!, androidx.compose.ui.text.font.FontSynthesis!, kotlin.jvm.internal.DefaultConstructorMarker!);
    ctor @BytecodeOnly @Deprecated public CurvedTextStyle(long, long, long, androidx.compose.ui.text.font.FontFamily!, androidx.compose.ui.text.font.FontWeight!, androidx.compose.ui.text.font.FontStyle!, androidx.compose.ui.text.font.FontSynthesis!, long, kotlin.jvm.internal.DefaultConstructorMarker!);
    ctor @BytecodeOnly public CurvedTextStyle(long, long, long, androidx.compose.ui.text.font.FontFamily!, androidx.compose.ui.text.font.FontWeight!, androidx.compose.ui.text.font.FontStyle!, androidx.compose.ui.text.font.FontSynthesis!, long, long, long, kotlin.jvm.internal.DefaultConstructorMarker!);
    ctor @BytecodeOnly @Deprecated public CurvedTextStyle(long, long, long, kotlin.jvm.internal.DefaultConstructorMarker!);
    method @Deprecated public androidx.wear.compose.foundation.CurvedTextStyle copy(optional long background, optional long color, optional long fontSize);
    method @Deprecated public androidx.wear.compose.foundation.CurvedTextStyle copy(optional long background, optional long color, optional long fontSize, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontSynthesis? fontSynthesis);
    method @Deprecated public androidx.wear.compose.foundation.CurvedTextStyle copy(optional long background, optional long color, optional long fontSize, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontSynthesis? fontSynthesis, optional long letterSpacing);
    method public androidx.wear.compose.foundation.CurvedTextStyle copy(optional long background, optional long color, optional long fontSize, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontSynthesis? fontSynthesis, optional long letterSpacing, optional long letterSpacingCounterClockwise, optional long lineHeight);
    method @BytecodeOnly @Deprecated public androidx.wear.compose.foundation.CurvedTextStyle! copy-MF-8BNI(long, long, long, androidx.compose.ui.text.font.FontFamily!, androidx.compose.ui.text.font.FontWeight!, androidx.compose.ui.text.font.FontStyle!, androidx.compose.ui.text.font.FontSynthesis!, long);
    method @BytecodeOnly @Deprecated public androidx.wear.compose.foundation.CurvedTextStyle! copy-rRnh6Vg(long, long, long);
    method @BytecodeOnly @Deprecated public androidx.wear.compose.foundation.CurvedTextStyle! copy-xgAEyWg(long, long, long, androidx.compose.ui.text.font.FontFamily!, androidx.compose.ui.text.font.FontWeight!, androidx.compose.ui.text.font.FontStyle!, androidx.compose.ui.text.font.FontSynthesis!);
    method @BytecodeOnly public androidx.wear.compose.foundation.CurvedTextStyle copy-zt0DKyk(long, long, long, androidx.compose.ui.text.font.FontFamily?, androidx.compose.ui.text.font.FontWeight?, androidx.compose.ui.text.font.FontStyle?, androidx.compose.ui.text.font.FontSynthesis?, long, long, long);
    method public long getBackground();
    method @BytecodeOnly public long getBackground-0d7_KjU();
    method public long getColor();
    method @BytecodeOnly public long getColor-0d7_KjU();
    method public androidx.compose.ui.text.font.FontFamily? getFontFamily();
    method public long getFontSize();
    method @BytecodeOnly public long getFontSize-XSAIIZE();
    method public androidx.compose.ui.text.font.FontStyle? getFontStyle();
    method @BytecodeOnly public androidx.compose.ui.text.font.FontStyle? getFontStyle-4Lr2A7w();
    method public androidx.compose.ui.text.font.FontSynthesis? getFontSynthesis();
    method @BytecodeOnly public androidx.compose.ui.text.font.FontSynthesis? getFontSynthesis-ZQGJjVo();
    method public androidx.compose.ui.text.font.FontWeight? getFontWeight();
    method public long getLetterSpacing();
    method @BytecodeOnly public long getLetterSpacing-XSAIIZE();
    method public long getLetterSpacingCounterClockwise();
    method @BytecodeOnly public long getLetterSpacingCounterClockwise-XSAIIZE();
    method public long getLineHeight();
    method @BytecodeOnly public long getLineHeight-XSAIIZE();
    method public androidx.wear.compose.foundation.CurvedTextStyle merge(optional androidx.wear.compose.foundation.CurvedTextStyle? other);
    method public operator androidx.wear.compose.foundation.CurvedTextStyle plus(androidx.wear.compose.foundation.CurvedTextStyle other);
    property public long background;
    property public long color;
    property public androidx.compose.ui.text.font.FontFamily? fontFamily;
    property public long fontSize;
    property public androidx.compose.ui.text.font.FontStyle? fontStyle;
    property public androidx.compose.ui.text.font.FontSynthesis? fontSynthesis;
    property public androidx.compose.ui.text.font.FontWeight? fontWeight;
    property public long letterSpacing;
    property public long letterSpacingCounterClockwise;
    property public long lineHeight;
  }

  public final class ExpandableItemsDefaults {
    method public androidx.compose.animation.core.AnimationSpec<java.lang.Float> getCollapseAnimationSpec();
    method public androidx.compose.animation.core.AnimationSpec<java.lang.Float> getExpandAnimationSpec();
    property public androidx.compose.animation.core.AnimationSpec<java.lang.Float> collapseAnimationSpec;
    property public androidx.compose.animation.core.AnimationSpec<java.lang.Float> expandAnimationSpec;
    field public static final androidx.wear.compose.foundation.ExpandableItemsDefaults INSTANCE;
  }

  public final class ExpandableKt {
    method public static void expandableButton(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, androidx.wear.compose.foundation.ExpandableState state, optional Object? key, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly public static void expandableButton(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, androidx.wear.compose.foundation.ExpandableState, Object?, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public static void expandableItem(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, androidx.wear.compose.foundation.ExpandableState state, optional Object? key, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> content);
    method @BytecodeOnly public static void expandableItem(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, androidx.wear.compose.foundation.ExpandableState, Object?, kotlin.jvm.functions.Function3<? super java.lang.Boolean!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public static void expandableItems(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, androidx.wear.compose.foundation.ExpandableState state, int count, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,?>? key, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super java.lang.Integer,kotlin.Unit> itemContent);
    method @BytecodeOnly public static void expandableItems(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, androidx.wear.compose.foundation.ExpandableState, int, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.layout.BoxScope!,? super java.lang.Integer!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.ExpandableState rememberExpandableState(optional boolean initiallyExpanded, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> expandAnimationSpec, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> collapseAnimationSpec);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.ExpandableState rememberExpandableState(boolean, androidx.compose.animation.core.AnimationSpec<java.lang.Float!>?, androidx.compose.animation.core.AnimationSpec<java.lang.Float!>?, androidx.compose.runtime.Composer?, int, int);
    method @SuppressCompatibility @androidx.compose.runtime.Composable @androidx.wear.compose.foundation.ExperimentalWearFoundationApi public static <T> androidx.wear.compose.foundation.ExpandableStateMapping<T> rememberExpandableStateMapping(optional kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> initiallyExpanded, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> expandAnimationSpec, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> collapseAnimationSpec);
    method @BytecodeOnly @SuppressCompatibility @androidx.compose.runtime.Composable @androidx.wear.compose.foundation.ExperimentalWearFoundationApi public static <T> androidx.wear.compose.foundation.ExpandableStateMapping<T!> rememberExpandableStateMapping(kotlin.jvm.functions.Function1<? super T!,java.lang.Boolean!>?, androidx.compose.animation.core.AnimationSpec<java.lang.Float!>?, androidx.compose.animation.core.AnimationSpec<java.lang.Float!>?, androidx.compose.runtime.Composer?, int, int);
  }

  public final class ExpandableState {
    method public float getExpandProgress();
    method public boolean isExpanded();
    method public void setExpanded(boolean);
    property public float expandProgress;
    property public boolean expanded;
    field public static final androidx.wear.compose.foundation.ExpandableState.Companion Companion;
  }

  public static final class ExpandableState.Companion {
    method @androidx.compose.runtime.Composable public androidx.compose.runtime.saveable.Saver<androidx.wear.compose.foundation.ExpandableState,java.lang.Boolean> saver(androidx.compose.animation.core.AnimationSpec<java.lang.Float> expandAnimationSpec, androidx.compose.animation.core.AnimationSpec<java.lang.Float> collapseAnimationSpec);
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.compose.runtime.saveable.Saver<androidx.wear.compose.foundation.ExpandableState!,java.lang.Boolean!> saver(androidx.compose.animation.core.AnimationSpec<java.lang.Float!>, androidx.compose.animation.core.AnimationSpec<java.lang.Float!>, androidx.compose.runtime.Composer?, int);
  }

  @SuppressCompatibility @androidx.wear.compose.foundation.ExperimentalWearFoundationApi public final class ExpandableStateMapping<T> {
    method public androidx.wear.compose.foundation.ExpandableState getOrPutNew(T key);
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This Wear Foundation API is experimental and is likely to change or to be removed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalWearFoundationApi {
  }

  public interface GestureInclusion {
    method public boolean ignoreGestureStart(long offset, androidx.compose.ui.layout.LayoutCoordinates layoutCoordinates);
    method @BytecodeOnly public boolean ignoreGestureStart-3MmeM6k(long, androidx.compose.ui.layout.LayoutCoordinates);
  }

  public final class HierarchicalFocusCoordinatorKt {
    method @Deprecated @androidx.compose.runtime.Composable public static void ActiveFocusListener(kotlin.jvm.functions.Function2<? super kotlinx.coroutines.CoroutineScope,? super java.lang.Boolean,kotlin.Unit> onFocusChanged);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void ActiveFocusListener(kotlin.jvm.functions.Function2<? super kotlinx.coroutines.CoroutineScope!,? super java.lang.Boolean!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int);
    method @Deprecated @androidx.compose.runtime.Composable public static void HierarchicalFocusCoordinator(kotlin.jvm.functions.Function0<java.lang.Boolean> requiresFocus, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public static void HierarchicalFocusCoordinator(kotlin.jvm.functions.Function0<java.lang.Boolean!>, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int);
    method @Deprecated @androidx.compose.runtime.Composable public static androidx.compose.ui.focus.FocusRequester rememberActiveFocusRequester();
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static androidx.compose.ui.focus.FocusRequester rememberActiveFocusRequester(androidx.compose.runtime.Composer?, int);
  }

  public final class HierarchicalFocusKt {
    method public static androidx.compose.ui.Modifier hierarchicalFocusGroup(androidx.compose.ui.Modifier, boolean active);
    method public static androidx.compose.ui.Modifier requestFocusOnHierarchyActive(androidx.compose.ui.Modifier);
  }

  @Deprecated @SuppressCompatibility @androidx.wear.compose.foundation.ExperimentalWearFoundationApi @kotlin.jvm.JvmInline public final value class RevealActionType {
    method @BytecodeOnly @Deprecated public static androidx.wear.compose.foundation.RevealActionType! box-impl(int);
    method @Deprecated public int getValue();
    method @BytecodeOnly @Deprecated public int unbox-impl();
    property @Deprecated public int value;
    field @Deprecated public static final androidx.wear.compose.foundation.RevealActionType.Companion Companion;
  }

  @Deprecated public static final class RevealActionType.Companion {
    method @Deprecated public int getNone();
    method @BytecodeOnly @Deprecated public int getNone-Bxv7xxc();
    method @Deprecated public int getPrimaryAction();
    method @BytecodeOnly @Deprecated public int getPrimaryAction-Bxv7xxc();
    method @Deprecated public int getSecondaryAction();
    method @BytecodeOnly @Deprecated public int getSecondaryAction-Bxv7xxc();
    method @Deprecated public int getUndoAction();
    method @BytecodeOnly @Deprecated public int getUndoAction-Bxv7xxc();
    property @Deprecated public int None;
    property @Deprecated public int PrimaryAction;
    property @Deprecated public int SecondaryAction;
    property @Deprecated public int UndoAction;
  }

  @Deprecated @SuppressCompatibility @androidx.wear.compose.foundation.ExperimentalWearFoundationApi @kotlin.jvm.JvmInline public final value class RevealDirection {
    method @BytecodeOnly @Deprecated public static androidx.wear.compose.foundation.RevealDirection! box-impl(int);
    method @Deprecated public int getValue();
    method @BytecodeOnly @Deprecated public int unbox-impl();
    property @Deprecated public int value;
    field @Deprecated public static final androidx.wear.compose.foundation.RevealDirection.Companion Companion;
  }

  @Deprecated public static final class RevealDirection.Companion {
    method @Deprecated public int getBoth();
    method @BytecodeOnly @Deprecated public int getBoth-orZwqdU();
    method @Deprecated public int getRightToLeft();
    method @BytecodeOnly @Deprecated public int getRightToLeft-orZwqdU();
    property @Deprecated public int Both;
    property @Deprecated public int RightToLeft;
  }

  @Deprecated @SuppressCompatibility @androidx.wear.compose.foundation.ExperimentalWearFoundationApi public final class RevealState {
    method @Deprecated public suspend Object? animateTo(int targetValue, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @BytecodeOnly @Deprecated public Object? animateTo-HVQT5Qc(int, kotlin.coroutines.Continuation<? super kotlin.Unit!>);
    method @Deprecated public int getCurrentValue();
    method @BytecodeOnly @Deprecated public int getCurrentValue-EhNvi2Q();
    method @Deprecated public int getLastActionType();
    method @BytecodeOnly @Deprecated public int getLastActionType-Bxv7xxc();
    method @Deprecated public float getOffset();
    method @Deprecated public float getRevealThreshold();
    method @Deprecated public java.util.Map<androidx.wear.compose.foundation.RevealValue,java.lang.Float> getSwipeAnchors();
    method @Deprecated public int getTargetValue();
    method @BytecodeOnly @Deprecated public int getTargetValue-EhNvi2Q();
    method @Deprecated public androidx.compose.runtime.MutableFloatState getWidth();
    method @Deprecated public boolean isAnimationRunning();
    method @Deprecated public void setLastActionType(int);
    method @BytecodeOnly @Deprecated public void setLastActionType-zcPJnak(int);
    method @Deprecated public suspend Object? snapTo(int targetValue, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @BytecodeOnly @Deprecated public Object? snapTo-HVQT5Qc(int, kotlin.coroutines.Continuation<? super kotlin.Unit!>);
    property @Deprecated public int currentValue;
    property @Deprecated public boolean isAnimationRunning;
    property @Deprecated public int lastActionType;
    property @Deprecated public float offset;
    property @Deprecated public float revealThreshold;
    property @Deprecated public java.util.Map<androidx.wear.compose.foundation.RevealValue,java.lang.Float> swipeAnchors;
    property @Deprecated public int targetValue;
    property @Deprecated public androidx.compose.runtime.MutableFloatState width;
  }

  @Deprecated @SuppressCompatibility @androidx.wear.compose.foundation.ExperimentalWearFoundationApi @kotlin.jvm.JvmInline public final value class RevealValue {
    method @BytecodeOnly @Deprecated public static androidx.wear.compose.foundation.RevealValue! box-impl(int);
    method @Deprecated public int getValue();
    method @BytecodeOnly @Deprecated public int unbox-impl();
    property @Deprecated public int value;
    field @Deprecated public static final androidx.wear.compose.foundation.RevealValue.Companion Companion;
  }

  @Deprecated public static final class RevealValue.Companion {
    method @Deprecated public int getCovered();
    method @BytecodeOnly @Deprecated public int getCovered-EhNvi2Q();
    method @Deprecated public int getLeftRevealed();
    method @BytecodeOnly @Deprecated public int getLeftRevealed-EhNvi2Q();
    method @Deprecated public int getLeftRevealing();
    method @BytecodeOnly @Deprecated public int getLeftRevealing-EhNvi2Q();
    method @Deprecated public int getRightRevealed();
    method @BytecodeOnly @Deprecated public int getRightRevealed-EhNvi2Q();
    method @Deprecated public int getRightRevealing();
    method @BytecodeOnly @Deprecated public int getRightRevealing-EhNvi2Q();
    property @Deprecated public int Covered;
    property @Deprecated public int LeftRevealed;
    property @Deprecated public int LeftRevealing;
    property @Deprecated public int RightRevealed;
    property @Deprecated public int RightRevealing;
  }

  public interface ScrollInfoProvider {
    method public float getAnchorItemOffset();
    method public float getLastItemOffset();
    method public boolean isScrollAwayValid();
    method public boolean isScrollInProgress();
    method public boolean isScrollable();
    property public abstract float anchorItemOffset;
    property public abstract boolean isScrollAwayValid;
    property public abstract boolean isScrollInProgress;
    property public abstract boolean isScrollable;
    property public abstract float lastItemOffset;
  }

  public final class ScrollInfoProviderKt {
    method public static androidx.wear.compose.foundation.ScrollInfoProvider ScrollInfoProvider(androidx.compose.foundation.lazy.LazyListState state);
    method public static androidx.wear.compose.foundation.ScrollInfoProvider ScrollInfoProvider(androidx.compose.foundation.ScrollState state);
    method public static androidx.wear.compose.foundation.ScrollInfoProvider ScrollInfoProvider(androidx.wear.compose.foundation.lazy.ScalingLazyListState state);
    method public static androidx.wear.compose.foundation.ScrollInfoProvider ScrollInfoProvider(androidx.wear.compose.foundation.lazy.TransformingLazyColumnState state);
    method public static androidx.wear.compose.foundation.ScrollInfoProvider ScrollInfoProvider(androidx.wear.compose.foundation.pager.PagerState state);
  }

  public final class SwipeToDismissBoxDefaults {
    method public androidx.compose.animation.core.SpringSpec<java.lang.Float> getAnimationSpec();
    method public float getEdgeWidth();
    method @BytecodeOnly public float getEdgeWidth-D9Ej5fM();
    property public androidx.compose.animation.core.SpringSpec<java.lang.Float> AnimationSpec;
    property public float EdgeWidth;
    field public static final androidx.wear.compose.foundation.SwipeToDismissBoxDefaults INSTANCE;
  }

  @androidx.compose.runtime.Stable public final class SwipeToDismissBoxState {
    ctor public SwipeToDismissBoxState();
    ctor public SwipeToDismissBoxState(optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.SwipeToDismissValue,java.lang.Boolean> confirmStateChange);
    method public androidx.wear.compose.foundation.SwipeToDismissValue getCurrentValue();
    method public float getOffset();
    method public androidx.wear.compose.foundation.SwipeToDismissValue getTargetValue();
    method public boolean isAnimationRunning();
    method public float requireOffset();
    method public suspend Object? snapTo(androidx.wear.compose.foundation.SwipeToDismissValue targetValue, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public androidx.wear.compose.foundation.SwipeToDismissValue currentValue;
    property public boolean isAnimationRunning;
    property public float offset;
    property public androidx.wear.compose.foundation.SwipeToDismissValue targetValue;
  }

  public enum SwipeToDismissKeys {
    enum_constant public static final androidx.wear.compose.foundation.SwipeToDismissKeys Background;
    enum_constant public static final androidx.wear.compose.foundation.SwipeToDismissKeys Content;
  }

  public enum SwipeToDismissValue {
    enum_constant public static final androidx.wear.compose.foundation.SwipeToDismissValue Default;
    enum_constant public static final androidx.wear.compose.foundation.SwipeToDismissValue Dismissed;
  }

  @Deprecated @SuppressCompatibility @androidx.wear.compose.foundation.ExperimentalWearFoundationApi public final class SwipeToRevealDefaults {
    method @Deprecated public androidx.wear.compose.foundation.GestureInclusion gestureInclusion(androidx.wear.compose.foundation.RevealState state, optional @FloatRange(from=0.0, to=1.0) float edgeZoneFraction);
    method @Deprecated public androidx.wear.compose.foundation.GestureInclusion getBidirectionalGestureInclusion();
    method @Deprecated public float getLeftEdgeZoneFraction();
    method @Deprecated public kotlin.jvm.functions.Function1<java.lang.Float,java.lang.Float> getPositionalThreshold();
    method @Deprecated public float getRevealingRatio();
    property @Deprecated public float LeftEdgeZoneFraction;
    property @Deprecated public kotlin.jvm.functions.Function1<java.lang.Float,java.lang.Float> PositionalThreshold;
    property @Deprecated public float RevealingRatio;
    property @Deprecated public androidx.wear.compose.foundation.GestureInclusion bidirectionalGestureInclusion;
    field @Deprecated public static final androidx.wear.compose.foundation.SwipeToRevealDefaults INSTANCE;
  }

  public final class SwipeToRevealKt {
    method @Deprecated @SuppressCompatibility @androidx.compose.runtime.Composable @androidx.wear.compose.foundation.ExperimentalWearFoundationApi public static void SwipeToReveal(kotlin.jvm.functions.Function0<kotlin.Unit> primaryAction, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> onFullSwipe, optional androidx.wear.compose.foundation.RevealState state, optional kotlin.jvm.functions.Function0<kotlin.Unit>? secondaryAction, optional kotlin.jvm.functions.Function0<kotlin.Unit>? undoAction, optional androidx.wear.compose.foundation.GestureInclusion gestureInclusion, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly @Deprecated @SuppressCompatibility @androidx.compose.runtime.Composable @androidx.wear.compose.foundation.ExperimentalWearFoundationApi public static void SwipeToReveal(kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.ui.Modifier?, kotlin.jvm.functions.Function0<kotlin.Unit!>?, androidx.wear.compose.foundation.RevealState?, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>?, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>?, androidx.wear.compose.foundation.GestureInclusion?, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @Deprecated @SuppressCompatibility @androidx.wear.compose.foundation.ExperimentalWearFoundationApi public static java.util.Map<androidx.wear.compose.foundation.RevealValue,java.lang.Float> createRevealAnchors(optional float coveredAnchor, optional float revealingAnchor, optional float revealedAnchor, optional int revealDirection);
    method @BytecodeOnly @Deprecated @SuppressCompatibility @androidx.wear.compose.foundation.ExperimentalWearFoundationApi public static java.util.Map<androidx.wear.compose.foundation.RevealValue!,java.lang.Float!> createRevealAnchors-j8aLdyg(float, float, float, int);
    method @Deprecated @SuppressCompatibility @androidx.compose.runtime.Composable @androidx.wear.compose.foundation.ExperimentalWearFoundationApi public static androidx.wear.compose.foundation.RevealState rememberRevealState(optional int initialValue, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.RevealValue,java.lang.Boolean> confirmValueChange, optional kotlin.jvm.functions.Function1<? super java.lang.Float,java.lang.Float> positionalThreshold, optional java.util.Map<androidx.wear.compose.foundation.RevealValue,java.lang.Float> anchors);
    method @BytecodeOnly @Deprecated @SuppressCompatibility @androidx.compose.runtime.Composable @androidx.wear.compose.foundation.ExperimentalWearFoundationApi public static androidx.wear.compose.foundation.RevealState rememberRevealState-jPjcZH0(int, androidx.compose.animation.core.AnimationSpec<java.lang.Float!>?, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.RevealValue!,java.lang.Boolean!>?, kotlin.jvm.functions.Function1<? super java.lang.Float!,java.lang.Float!>?, java.util.Map<androidx.wear.compose.foundation.RevealValue!,java.lang.Float!>?, androidx.compose.runtime.Composer?, int, int);
  }

}

package androidx.wear.compose.foundation.lazy {

  @androidx.compose.runtime.Immutable public final class AutoCenteringParams {
    ctor public AutoCenteringParams();
    ctor public AutoCenteringParams(optional int itemIndex, optional int itemOffset);
  }

  public final class ScalingLazyColumnDefaults {
    method public androidx.wear.compose.foundation.lazy.ScalingParams scalingParams(optional float edgeScale, optional float edgeAlpha, optional float minElementHeight, optional float maxElementHeight, optional float minTransitionArea, optional float maxTransitionArea, optional androidx.compose.animation.core.Easing scaleInterpolator, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.unit.Constraints,java.lang.Integer> viewportVerticalOffsetResolver);
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.gestures.FlingBehavior snapFlingBehavior(androidx.wear.compose.foundation.lazy.ScalingLazyListState state, optional float snapOffset, optional androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decay);
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.compose.foundation.gestures.FlingBehavior snapFlingBehavior-uFdPcIQ(androidx.wear.compose.foundation.lazy.ScalingLazyListState, float, androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float!>?, androidx.compose.runtime.Composer?, int, int);
    field public static final androidx.wear.compose.foundation.lazy.ScalingLazyColumnDefaults INSTANCE;
  }

  public final class ScalingLazyColumnKt {
    method @androidx.compose.runtime.Composable public static void ScalingLazyColumn(optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.foundation.lazy.ScalingLazyListState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional boolean reverseLayout, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.wear.compose.foundation.lazy.ScalingParams scalingParams, optional int anchorType, optional androidx.wear.compose.foundation.lazy.AutoCenteringParams? autoCentering, optional androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior? rotaryScrollableBehavior, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit> content);
    method @Deprecated @androidx.compose.runtime.Composable public static void ScalingLazyColumn(optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.foundation.lazy.ScalingLazyListState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional boolean reverseLayout, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.wear.compose.foundation.lazy.ScalingParams scalingParams, optional int anchorType, optional androidx.wear.compose.foundation.lazy.AutoCenteringParams? autoCentering, optional androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior? rotaryScrollableBehavior, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit> content);
    method @Deprecated @androidx.compose.runtime.Composable public static void ScalingLazyColumn(optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.foundation.lazy.ScalingLazyListState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional boolean reverseLayout, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.wear.compose.foundation.lazy.ScalingParams scalingParams, optional int anchorType, optional androidx.wear.compose.foundation.lazy.AutoCenteringParams? autoCentering, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit> content);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void ScalingLazyColumn-7uB0L7Y(androidx.compose.ui.Modifier!, androidx.wear.compose.foundation.lazy.ScalingLazyListState!, androidx.compose.foundation.layout.PaddingValues!, boolean, androidx.compose.foundation.layout.Arrangement.Vertical!, androidx.compose.ui.Alignment.Horizontal!, androidx.compose.foundation.gestures.FlingBehavior!, boolean, androidx.wear.compose.foundation.lazy.ScalingParams!, int, androidx.wear.compose.foundation.lazy.AutoCenteringParams!, kotlin.jvm.functions.Function1!, androidx.compose.runtime.Composer!, int, int, int);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void ScalingLazyColumn-l7mySQI(androidx.compose.ui.Modifier?, androidx.wear.compose.foundation.lazy.ScalingLazyListState?, androidx.compose.foundation.layout.PaddingValues?, boolean, androidx.compose.foundation.layout.Arrangement.Vertical?, androidx.compose.ui.Alignment.Horizontal?, androidx.compose.foundation.gestures.FlingBehavior?, boolean, androidx.wear.compose.foundation.lazy.ScalingParams?, int, androidx.wear.compose.foundation.lazy.AutoCenteringParams?, androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior?, androidx.compose.foundation.OverscrollEffect?, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void ScalingLazyColumn-uNMxmyI(androidx.compose.ui.Modifier!, androidx.wear.compose.foundation.lazy.ScalingLazyListState!, androidx.compose.foundation.layout.PaddingValues!, boolean, androidx.compose.foundation.layout.Arrangement.Vertical!, androidx.compose.ui.Alignment.Horizontal!, androidx.compose.foundation.gestures.FlingBehavior!, boolean, androidx.wear.compose.foundation.lazy.ScalingParams!, int, androidx.wear.compose.foundation.lazy.AutoCenteringParams!, androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior!, kotlin.jvm.functions.Function1!, androidx.compose.runtime.Composer!, int, int, int);
    method public static inline <T> void items(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function1<? super T,?>? key, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void items(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, java.util.List<? extends T!>, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function4<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public static inline <T> void items(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, T[] items, optional kotlin.jvm.functions.Function1<? super T,?>? key, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void items(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, T![], kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function4<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public static inline <T> void itemsIndexed(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,?>? key, kotlin.jvm.functions.Function3<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void itemsIndexed(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, java.util.List<? extends T!>, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function5<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope!,? super java.lang.Integer!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public static inline <T> void itemsIndexed(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, T[] items, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,?>? key, kotlin.jvm.functions.Function3<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void itemsIndexed(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, T![], kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function5<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope!,? super java.lang.Integer!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class ScalingLazyListAnchorType {
    method @BytecodeOnly public static androidx.wear.compose.foundation.lazy.ScalingLazyListAnchorType! box-impl(int);
    method @BytecodeOnly public int unbox-impl();
    field public static final androidx.wear.compose.foundation.lazy.ScalingLazyListAnchorType.Companion Companion;
  }

  public static final class ScalingLazyListAnchorType.Companion {
    method public int getItemCenter();
    method @BytecodeOnly public int getItemCenter-ZuIr4RU();
    method public int getItemStart();
    method @BytecodeOnly public int getItemStart-ZuIr4RU();
    property public int ItemCenter;
    property public int ItemStart;
  }

  public sealed interface ScalingLazyListItemInfo {
    method public float getAlpha();
    method public int getIndex();
    method public Object getKey();
    method public int getOffset();
    method public float getScale();
    method public int getSize();
    method public int getUnadjustedOffset();
    method public int getUnadjustedSize();
    property public abstract float alpha;
    property public abstract int index;
    property public abstract Object key;
    property public abstract int offset;
    property public abstract float scale;
    property public abstract int size;
    property public abstract int unadjustedOffset;
    property public abstract int unadjustedSize;
  }

  @androidx.compose.runtime.Stable @androidx.wear.compose.foundation.lazy.ScalingLazyScopeMarker public sealed interface ScalingLazyListItemScope {
    method public androidx.compose.ui.Modifier fillParentMaxHeight(androidx.compose.ui.Modifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method public androidx.compose.ui.Modifier fillParentMaxSize(androidx.compose.ui.Modifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method public androidx.compose.ui.Modifier fillParentMaxWidth(androidx.compose.ui.Modifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
  }

  public sealed interface ScalingLazyListLayoutInfo {
    method public int getAfterAutoCenteringPadding();
    method public int getAfterContentPadding();
    method public int getAnchorType();
    method @BytecodeOnly public int getAnchorType-ZuIr4RU();
    method public int getBeforeAutoCenteringPadding();
    method public int getBeforeContentPadding();
    method public androidx.compose.foundation.gestures.Orientation getOrientation();
    method public boolean getReverseLayout();
    method public int getTotalItemsCount();
    method public int getViewportEndOffset();
    method public long getViewportSize();
    method @BytecodeOnly public long getViewportSize-YbymL2g();
    method public int getViewportStartOffset();
    method public java.util.List<androidx.wear.compose.foundation.lazy.ScalingLazyListItemInfo> getVisibleItemsInfo();
    property public abstract int afterAutoCenteringPadding;
    property public abstract int afterContentPadding;
    property public abstract int anchorType;
    property public abstract int beforeAutoCenteringPadding;
    property public abstract int beforeContentPadding;
    property public abstract androidx.compose.foundation.gestures.Orientation orientation;
    property public abstract boolean reverseLayout;
    property public abstract int totalItemsCount;
    property public abstract int viewportEndOffset;
    property public abstract long viewportSize;
    property public abstract int viewportStartOffset;
    property public abstract java.util.List<androidx.wear.compose.foundation.lazy.ScalingLazyListItemInfo> visibleItemsInfo;
  }

  @androidx.wear.compose.foundation.lazy.ScalingLazyScopeMarker public sealed interface ScalingLazyListScope {
    method public void item(optional Object? key, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope,kotlin.Unit> content);
    method @BytecodeOnly public void item(Object?, kotlin.jvm.functions.Function3<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public void items(int count, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,?>? key, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope,? super java.lang.Integer,kotlin.Unit> itemContent);
    method @BytecodeOnly public void items(int, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function4<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope!,? super java.lang.Integer!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
  }

  @androidx.compose.runtime.Stable public final class ScalingLazyListState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor public ScalingLazyListState();
    ctor public ScalingLazyListState(optional int initialCenterItemIndex, optional int initialCenterItemScrollOffset);
    method public suspend Object? animateScrollToItem(int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public float dispatchRawDelta(float delta);
    method public int getCenterItemIndex();
    method public int getCenterItemScrollOffset();
    method public androidx.wear.compose.foundation.lazy.ScalingLazyListLayoutInfo getLayoutInfo();
    method public boolean isScrollInProgress();
    method public suspend Object? scroll(androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? scrollToItem(int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public boolean canScrollBackward;
    property public boolean canScrollForward;
    property public int centerItemIndex;
    property public int centerItemScrollOffset;
    property public boolean isScrollInProgress;
    property public boolean lastScrolledBackward;
    property public boolean lastScrolledForward;
    property public androidx.wear.compose.foundation.lazy.ScalingLazyListLayoutInfo layoutInfo;
    field public static final androidx.wear.compose.foundation.lazy.ScalingLazyListState.Companion Companion;
  }

  public static final class ScalingLazyListState.Companion {
    method public androidx.compose.runtime.saveable.Saver<androidx.wear.compose.foundation.lazy.ScalingLazyListState,java.lang.Object> getSaver();
    property public androidx.compose.runtime.saveable.Saver<androidx.wear.compose.foundation.lazy.ScalingLazyListState,java.lang.Object> Saver;
  }

  public final class ScalingLazyListStateKt {
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.lazy.ScalingLazyListState rememberScalingLazyListState(optional int initialCenterItemIndex, optional int initialCenterItemScrollOffset);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.lazy.ScalingLazyListState rememberScalingLazyListState(int, int, androidx.compose.runtime.Composer?, int, int);
  }

  @kotlin.DslMarker public @interface ScalingLazyScopeMarker {
  }

  @androidx.compose.runtime.Stable public interface ScalingParams {
    method @FloatRange(from=0.0, to=1.0) public float getEdgeAlpha();
    method @FloatRange(from=0.0, to=1.0) public float getEdgeScale();
    method @FloatRange(from=0.0, to=1.0) public float getMaxElementHeight();
    method @FloatRange(from=0.0, to=1.0) public float getMaxTransitionArea();
    method @FloatRange(from=0.0, to=1.0) public float getMinElementHeight();
    method @FloatRange(from=0.0, to=1.0) public float getMinTransitionArea();
    method public androidx.compose.animation.core.Easing getScaleInterpolator();
    method public int resolveViewportVerticalOffset(long viewportConstraints);
    method @BytecodeOnly public int resolveViewportVerticalOffset-BRTryo0(long);
    property @FloatRange(from=0.0, to=1.0) public abstract float edgeAlpha;
    property @FloatRange(from=0.0, to=1.0) public abstract float edgeScale;
    property @FloatRange(from=0.0, to=1.0) public abstract float maxElementHeight;
    property @FloatRange(from=0.0, to=1.0) public abstract float maxTransitionArea;
    property @FloatRange(from=0.0, to=1.0) public abstract float minElementHeight;
    property @FloatRange(from=0.0, to=1.0) public abstract float minTransitionArea;
    property public abstract androidx.compose.animation.core.Easing scaleInterpolator;
  }

  public final class TransformingLazyColumnDslKt {
    method public static inline <T> void items(androidx.wear.compose.foundation.lazy.TransformingLazyColumnScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function1<? super T,?>? key, optional kotlin.jvm.functions.Function1<? super T,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void items(androidx.wear.compose.foundation.lazy.TransformingLazyColumnScope, java.util.List<? extends T!>, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function4<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public static inline <T> void itemsIndexed(androidx.wear.compose.foundation.lazy.TransformingLazyColumnScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,?>? key, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function3<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void itemsIndexed(androidx.wear.compose.foundation.lazy.TransformingLazyColumnScope, java.util.List<? extends T!>, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function5<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope!,? super java.lang.Integer!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
  }

  @androidx.wear.compose.foundation.lazy.TransformingLazyColumnScopeMarker public sealed interface TransformingLazyColumnItemScope {
    method public androidx.compose.ui.Modifier animateItem(androidx.compose.ui.Modifier, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float>? fadeInSpec, optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset>? placementSpec, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float>? fadeOutSpec);
    method public long getScrollProgress(androidx.compose.ui.graphics.drawscope.DrawScope);
    method public long getScrollProgress(androidx.compose.ui.graphics.GraphicsLayerScope);
    method @BytecodeOnly public long getScrollProgress-CyslRjo(androidx.compose.ui.graphics.drawscope.DrawScope);
    method @BytecodeOnly public long getScrollProgress-CyslRjo(androidx.compose.ui.graphics.GraphicsLayerScope);
    method public androidx.compose.ui.Modifier transformedHeight(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function2<? super java.lang.Integer,? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScrollProgress,java.lang.Integer> heightProvider);
    property public abstract long androidx.compose.ui.graphics.drawscope.DrawScope.scrollProgress;
    property public abstract long androidx.compose.ui.graphics.GraphicsLayerScope.scrollProgress;
  }

  @kotlin.jvm.JvmInline public final value class TransformingLazyColumnItemScrollProgress {
    ctor public TransformingLazyColumnItemScrollProgress(float topOffsetFraction, float bottomOffsetFraction);
    method @BytecodeOnly public static androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScrollProgress! box-impl(long);
    method @BytecodeOnly public static long constructor-impl(float, float);
    method @BytecodeOnly public static float getBottomOffsetFraction-impl(long);
    method @BytecodeOnly public static float getTopOffsetFraction-impl(long);
    method @BytecodeOnly public static boolean isSpecified-impl(long);
    method @BytecodeOnly public static boolean isUnspecified-impl(long);
    method @BytecodeOnly public long unbox-impl();
    property public float bottomOffsetFraction;
    property public boolean isSpecified;
    property public boolean isUnspecified;
    property public float topOffsetFraction;
    field public static final androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScrollProgress.Companion Companion;
  }

  public static final class TransformingLazyColumnItemScrollProgress.Companion {
    method public long getUnspecified();
    method @BytecodeOnly public long getUnspecified-xlmz8Ag();
    property public long Unspecified;
  }

  public final class TransformingLazyColumnKt {
    method @androidx.compose.runtime.Composable public static void TransformingLazyColumn(optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.foundation.lazy.TransformingLazyColumnState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior? rotaryScrollableBehavior, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void TransformingLazyColumn(androidx.compose.ui.Modifier?, androidx.wear.compose.foundation.lazy.TransformingLazyColumnState?, androidx.compose.foundation.layout.PaddingValues?, androidx.compose.foundation.layout.Arrangement.Vertical?, androidx.compose.ui.Alignment.Horizontal?, androidx.compose.foundation.gestures.FlingBehavior?, boolean, androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior?, androidx.compose.foundation.OverscrollEffect?, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  public sealed interface TransformingLazyColumnLayoutInfo {
    method public int getAfterContentPadding();
    method public int getBeforeContentPadding();
    method public int getTotalItemsCount();
    method public long getViewportSize();
    method @BytecodeOnly public long getViewportSize-YbymL2g();
    method public java.util.List<androidx.wear.compose.foundation.lazy.TransformingLazyColumnVisibleItemInfo> getVisibleItems();
    property public abstract int afterContentPadding;
    property public abstract int beforeContentPadding;
    property public abstract int totalItemsCount;
    property public abstract long viewportSize;
    property public abstract java.util.List<androidx.wear.compose.foundation.lazy.TransformingLazyColumnVisibleItemInfo> visibleItems;
  }

  @androidx.wear.compose.foundation.lazy.TransformingLazyColumnScopeMarker public sealed interface TransformingLazyColumnScope {
    method public void item(optional Object? key, optional Object? contentType, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope,kotlin.Unit> content);
    method @BytecodeOnly public void item(Object?, Object?, kotlin.jvm.functions.Function3<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public void items(int count, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,?>? key, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope,? super java.lang.Integer,kotlin.Unit> content);
    method @BytecodeOnly public void items(int, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>, kotlin.jvm.functions.Function4<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope!,? super java.lang.Integer!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
  }

  @kotlin.DslMarker public @interface TransformingLazyColumnScopeMarker {
  }

  @androidx.compose.runtime.Stable public final class TransformingLazyColumnState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor public TransformingLazyColumnState();
    ctor public TransformingLazyColumnState(optional int initialAnchorItemIndex, optional int initialAnchorItemScrollOffset);
    method public suspend Object? animateScrollToItem(@IntRange(from=0L) int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public float dispatchRawDelta(float delta);
    method public int getAnchorItemIndex();
    method public int getAnchorItemScrollOffset();
    method public androidx.wear.compose.foundation.lazy.TransformingLazyColumnLayoutInfo getLayoutInfo();
    method public boolean isScrollInProgress();
    method public void requestScrollToItem(@IntRange(from=0L) int index, optional int scrollOffset);
    method public suspend Object? scroll(androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? scrollToItem(@IntRange(from=0L) int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public int anchorItemIndex;
    property public int anchorItemScrollOffset;
    property public boolean canScrollBackward;
    property public boolean canScrollForward;
    property public boolean isScrollInProgress;
    property public boolean lastScrolledBackward;
    property public boolean lastScrolledForward;
    property public androidx.wear.compose.foundation.lazy.TransformingLazyColumnLayoutInfo layoutInfo;
  }

  public final class TransformingLazyColumnStateKt {
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.lazy.TransformingLazyColumnState rememberTransformingLazyColumnState(optional int initialAnchorItemIndex, optional int initialAnchorItemScrollOffset);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.lazy.TransformingLazyColumnState rememberTransformingLazyColumnState(int, int, androidx.compose.runtime.Composer?, int, int);
  }

  public sealed interface TransformingLazyColumnVisibleItemInfo {
    method public Object? getContentType();
    method public int getIndex();
    method public Object getKey();
    method public int getMeasuredHeight();
    method public int getOffset();
    method public long getScrollProgress();
    method @BytecodeOnly public long getScrollProgress-xlmz8Ag();
    method public int getTransformedHeight();
    property public abstract Object? contentType;
    property public abstract int index;
    property public abstract Object key;
    property public abstract int measuredHeight;
    property public abstract int offset;
    property public abstract long scrollProgress;
    property public abstract int transformedHeight;
  }

}

package androidx.wear.compose.foundation.pager {

  public final class PagerDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.GestureInclusion gestureInclusion(androidx.wear.compose.foundation.pager.PagerState state, optional float edgeZoneFraction);
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.GestureInclusion gestureInclusion(androidx.wear.compose.foundation.pager.PagerState, float, androidx.compose.runtime.Composer?, int, int);
    method public int getBeyondViewportPageCount();
    method public float getLeftEdgeZoneFraction();
    method public androidx.compose.animation.core.AnimationSpec<java.lang.Float> getSnapAnimationSpec();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.gestures.TargetedFlingBehavior snapFlingBehavior(androidx.wear.compose.foundation.pager.PagerState state, optional int maxFlingPages, optional androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> snapAnimationSpec, optional @FloatRange(from=0.0, to=1.0) float snapPositionalThreshold);
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.compose.foundation.gestures.TargetedFlingBehavior snapFlingBehavior(androidx.wear.compose.foundation.pager.PagerState, int, androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float!>?, androidx.compose.animation.core.AnimationSpec<java.lang.Float!>?, @FloatRange(from=0.0, to=1.0) float, androidx.compose.runtime.Composer?, int, int);
    property public int BeyondViewportPageCount;
    property public float LeftEdgeZoneFraction;
    property public androidx.compose.animation.core.AnimationSpec<java.lang.Float> SnapAnimationSpec;
    field public static final androidx.wear.compose.foundation.pager.PagerDefaults INSTANCE;
  }

  public final class PagerKt {
    method @androidx.compose.runtime.Composable public static void HorizontalPager(androidx.wear.compose.foundation.pager.PagerState state, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional int beyondViewportPageCount, optional androidx.compose.foundation.gestures.TargetedFlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.wear.compose.foundation.GestureInclusion gestureInclusion, optional boolean reverseLayout, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,?>? key, optional androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior? rotaryScrollableBehavior, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.pager.PagerScope,? super java.lang.Integer,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void HorizontalPager(androidx.wear.compose.foundation.pager.PagerState, androidx.compose.ui.Modifier?, androidx.compose.foundation.layout.PaddingValues?, int, androidx.compose.foundation.gestures.TargetedFlingBehavior?, boolean, androidx.wear.compose.foundation.GestureInclusion?, boolean, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>?, androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior?, kotlin.jvm.functions.Function4<? super androidx.wear.compose.foundation.pager.PagerScope!,? super java.lang.Integer!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int, int);
    method @androidx.compose.runtime.Composable public static void VerticalPager(androidx.wear.compose.foundation.pager.PagerState state, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional int beyondViewportPageCount, optional androidx.compose.foundation.gestures.TargetedFlingBehavior flingBehavior, optional boolean userScrollEnabled, optional boolean reverseLayout, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,?>? key, optional androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior? rotaryScrollableBehavior, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.pager.PagerScope,? super java.lang.Integer,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void VerticalPager(androidx.wear.compose.foundation.pager.PagerState, androidx.compose.ui.Modifier?, androidx.compose.foundation.layout.PaddingValues?, int, androidx.compose.foundation.gestures.TargetedFlingBehavior?, boolean, boolean, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>?, androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior?, kotlin.jvm.functions.Function4<? super androidx.wear.compose.foundation.pager.PagerScope!,? super java.lang.Integer!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  public sealed interface PagerLayoutInfo {
    method public androidx.compose.foundation.gestures.Orientation getOrientation();
    method public int getPageSize();
    property public abstract androidx.compose.foundation.gestures.Orientation orientation;
    property public abstract int pageSize;
  }

  public sealed interface PagerScope {
  }

  public final class PagerState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor public PagerState(optional @IntRange(from=0L) int currentPage, optional @FloatRange(from=-0.5, to=0.5) float currentPageOffsetFraction, @IntRange(from=1L) kotlin.jvm.functions.Function0<java.lang.Integer> pageCount);
    method public suspend Object? animateScrollToPage(int page, optional @FloatRange(from=-0.5, to=0.5) float pageOffsetFraction, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public float dispatchRawDelta(float delta);
    method public int getCurrentPage();
    method public float getCurrentPageOffsetFraction();
    method public androidx.compose.foundation.interaction.InteractionSource getInteractionSource();
    method public androidx.wear.compose.foundation.pager.PagerLayoutInfo getLayoutInfo();
    method public int getPageCount();
    method public int getSettledPage();
    method public int getTargetPage();
    method public boolean isScrollInProgress();
    method public suspend Object? scroll(androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? scrollToPage(int page, optional @FloatRange(from=-0.5, to=0.5) float pageOffsetFraction, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public int currentPage;
    property public float currentPageOffsetFraction;
    property public androidx.compose.foundation.interaction.InteractionSource interactionSource;
    property public boolean isScrollInProgress;
    property public androidx.wear.compose.foundation.pager.PagerLayoutInfo layoutInfo;
    property public int pageCount;
    property public int settledPage;
    property public int targetPage;
    field public static final androidx.wear.compose.foundation.pager.PagerState.Companion Companion;
  }

  public static final class PagerState.Companion {
    method public androidx.compose.runtime.saveable.Saver<androidx.wear.compose.foundation.pager.PagerState,? extends java.lang.Object?> getSaver();
    property public androidx.compose.runtime.saveable.Saver<androidx.wear.compose.foundation.pager.PagerState,? extends java.lang.Object?> Saver;
  }

  public final class PagerStateKt {
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.pager.PagerState rememberPagerState(optional @IntRange(from=0L) int initialPage, optional @FloatRange(from=-0.5, to=0.5) float initialPageOffsetFraction, @IntRange(from=1L) kotlin.jvm.functions.Function0<java.lang.Integer> pageCount);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.pager.PagerState rememberPagerState(@IntRange(from=0L) int, @FloatRange(from=-0.5, to=0.5) float, @IntRange(from=1L) kotlin.jvm.functions.Function0<java.lang.Integer!>, androidx.compose.runtime.Composer?, int, int);
  }

}

package androidx.wear.compose.foundation.rotary {

  public interface RotaryScrollableBehavior {
    method public suspend Object? performScroll(kotlinx.coroutines.CoroutineScope, long timestampMillis, float delta, int inputDeviceId, androidx.compose.foundation.gestures.Orientation orientation, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public final class RotaryScrollableDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior behavior(androidx.compose.foundation.gestures.ScrollableState scrollableState, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior, optional boolean hapticFeedbackEnabled);
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior behavior(androidx.compose.foundation.gestures.ScrollableState, androidx.compose.foundation.gestures.FlingBehavior?, boolean, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior snapBehavior(androidx.compose.foundation.gestures.ScrollableState scrollableState, androidx.wear.compose.foundation.rotary.RotarySnapLayoutInfoProvider layoutInfoProvider, optional float snapOffset, optional boolean hapticFeedbackEnabled);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior snapBehavior(androidx.wear.compose.foundation.lazy.ScalingLazyListState scrollableState, optional float snapOffset, optional boolean hapticFeedbackEnabled);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior snapBehavior(androidx.wear.compose.foundation.pager.PagerState pagerState, optional float snapOffset, optional boolean hapticFeedbackEnabled);
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior snapBehavior-942rkJo(androidx.compose.foundation.gestures.ScrollableState, androidx.wear.compose.foundation.rotary.RotarySnapLayoutInfoProvider, float, boolean, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior snapBehavior-uFdPcIQ(androidx.wear.compose.foundation.lazy.ScalingLazyListState, float, boolean, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior snapBehavior-uFdPcIQ(androidx.wear.compose.foundation.pager.PagerState, float, boolean, androidx.compose.runtime.Composer?, int, int);
    field public static final androidx.wear.compose.foundation.rotary.RotaryScrollableDefaults INSTANCE;
  }

  public final class RotaryScrollableKt {
    method @Deprecated public static androidx.compose.ui.Modifier rotaryScrollable(androidx.compose.ui.Modifier, androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior behavior, androidx.compose.ui.focus.FocusRequester focusRequester, optional boolean reverseDirection);
    method public static androidx.compose.ui.Modifier rotaryScrollable(androidx.compose.ui.Modifier, androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior behavior, androidx.compose.ui.focus.FocusRequester focusRequester, optional boolean reverseDirection, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect);
  }

  public interface RotarySnapLayoutInfoProvider {
    method public float getAverageItemSize();
    method public int getCurrentItemIndex();
    method public float getCurrentItemOffset();
    method public int getTotalItemCount();
    property public abstract float averageItemSize;
    property public abstract int currentItemIndex;
    property public abstract float currentItemOffset;
    property public abstract int totalItemCount;
  }

}

