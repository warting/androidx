// Signature format: 4.0
package androidx.wear.compose.foundation {

  @kotlin.jvm.JvmInline public final value class AnchorType {
    field public static final androidx.wear.compose.foundation.AnchorType.Companion Companion;
  }

  public static final class AnchorType.Companion {
    method public float getCenter();
    method public float getEnd();
    method public float getStart();
    property public float Center;
    property public float End;
    property public float Start;
  }

  @androidx.compose.runtime.Stable public interface ArcPaddingValues {
    method public float calculateAfterPadding(androidx.compose.ui.unit.LayoutDirection layoutDirection, int angularDirection);
    method public float calculateBeforePadding(androidx.compose.ui.unit.LayoutDirection layoutDirection, int angularDirection);
    method public float calculateInnerPadding(int radialDirection);
    method public float calculateOuterPadding(int radialDirection);
  }

  public final class BasicCurvedTextKt {
    method public static void basicCurvedText(androidx.wear.compose.foundation.CurvedScope, String text, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional androidx.wear.compose.foundation.CurvedDirection.Angular? angularDirection, optional int overflow, optional kotlin.jvm.functions.Function0<androidx.wear.compose.foundation.CurvedTextStyle> style);
    method public static void basicCurvedText(androidx.wear.compose.foundation.CurvedScope, String text, androidx.wear.compose.foundation.CurvedTextStyle style, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional androidx.wear.compose.foundation.CurvedDirection.Angular? angularDirection, optional int overflow);
  }

  public final class BasicSwipeToDismissBoxKt {
    method @androidx.compose.runtime.Composable public static void BasicSwipeToDismissBox(androidx.wear.compose.foundation.SwipeToDismissBoxState state, optional androidx.compose.ui.Modifier modifier, optional Object backgroundKey, optional Object contentKey, optional boolean userSwipeEnabled, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super java.lang.Boolean,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void BasicSwipeToDismissBox(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissed, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.foundation.SwipeToDismissBoxState state, optional Object backgroundKey, optional Object contentKey, optional boolean userSwipeEnabled, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super java.lang.Boolean,kotlin.Unit> content);
    method public static androidx.compose.ui.Modifier edgeSwipeToDismiss(androidx.compose.ui.Modifier, androidx.wear.compose.foundation.SwipeToDismissBoxState swipeToDismissBoxState, optional float edgeWidth);
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.SwipeToDismissBoxState rememberSwipeToDismissBoxState(optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.SwipeToDismissValue,java.lang.Boolean> confirmStateChange);
  }

  public final class CompositionLocalsKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> getLocalReduceMotion();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> getLocalScreenIsActive();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Color> getLocalSwipeToDismissBackgroundScrimColor();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Color> getLocalSwipeToDismissContentScrimColor();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> LocalReduceMotion;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> LocalScreenIsActive;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Color> LocalSwipeToDismissBackgroundScrimColor;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Color> LocalSwipeToDismissContentScrimColor;
  }

  public interface CurvedAlignment {
  }

  @kotlin.jvm.JvmInline public static final value class CurvedAlignment.Angular {
    field public static final androidx.wear.compose.foundation.CurvedAlignment.Angular.Companion Companion;
  }

  public static final class CurvedAlignment.Angular.Companion {
    method public float Custom(float ratio);
    method public float getCenter();
    method public float getEnd();
    method public float getStart();
    property public float Center;
    property public float End;
    property public float Start;
  }

  @kotlin.jvm.JvmInline public static final value class CurvedAlignment.Radial {
    field public static final androidx.wear.compose.foundation.CurvedAlignment.Radial.Companion Companion;
  }

  public static final class CurvedAlignment.Radial.Companion {
    method public float Custom(float ratio);
    method public float getCenter();
    method public float getInner();
    method public float getOuter();
    property public float Center;
    property public float Inner;
    property public float Outer;
  }

  public final class CurvedBoxKt {
    method public static void curvedBox(androidx.wear.compose.foundation.CurvedScope, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional androidx.wear.compose.foundation.CurvedAlignment.Radial? radialAlignment, optional androidx.wear.compose.foundation.CurvedAlignment.Angular? angularAlignment, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit> contentBuilder);
  }

  public final class CurvedColumnKt {
    method public static void curvedColumn(androidx.wear.compose.foundation.CurvedScope, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional androidx.wear.compose.foundation.CurvedDirection.Radial? radialDirection, optional androidx.wear.compose.foundation.CurvedAlignment.Angular? angularAlignment, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit> contentBuilder);
  }

  public final class CurvedComposableKt {
    method public static void curvedComposable(androidx.wear.compose.foundation.CurvedScope, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional float radialAlignment, optional boolean rotationLocked, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
    method @Deprecated public static void curvedComposable(androidx.wear.compose.foundation.CurvedScope, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional float radialAlignment, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
  }

  public interface CurvedDirection {
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public static final value class CurvedDirection.Angular {
    field public static final androidx.wear.compose.foundation.CurvedDirection.Angular.Companion Companion;
  }

  public static final class CurvedDirection.Angular.Companion {
    method public int getClockwise();
    method public int getCounterClockwise();
    method public int getNormal();
    method public int getReversed();
    property public int Clockwise;
    property public int CounterClockwise;
    property public int Normal;
    property public int Reversed;
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public static final value class CurvedDirection.Radial {
    field public static final androidx.wear.compose.foundation.CurvedDirection.Radial.Companion Companion;
  }

  public static final class CurvedDirection.Radial.Companion {
    method public int getInsideOut();
    method public int getOutsideIn();
    property public int InsideOut;
    property public int OutsideIn;
  }

  public final class CurvedDrawKt {
    method public static androidx.wear.compose.foundation.CurvedModifier angularGradientBackground(androidx.wear.compose.foundation.CurvedModifier, java.util.List<androidx.compose.ui.graphics.Color> colors, optional int cap);
    method public static androidx.wear.compose.foundation.CurvedModifier angularGradientBackground(androidx.wear.compose.foundation.CurvedModifier, kotlin.Pair<java.lang.Float,androidx.compose.ui.graphics.Color>[] colorStops, optional int cap);
    method public static androidx.wear.compose.foundation.CurvedModifier background(androidx.wear.compose.foundation.CurvedModifier, long color, optional int cap);
    method public static androidx.wear.compose.foundation.CurvedModifier radialGradientBackground(androidx.wear.compose.foundation.CurvedModifier, java.util.List<androidx.compose.ui.graphics.Color> colors, optional int cap);
    method public static androidx.wear.compose.foundation.CurvedModifier radialGradientBackground(androidx.wear.compose.foundation.CurvedModifier, kotlin.Pair<java.lang.Float,androidx.compose.ui.graphics.Color>[] colorStops, optional int cap);
  }

  public final class CurvedLayoutKt {
    method @androidx.compose.runtime.Composable public static void CurvedLayout(optional androidx.compose.ui.Modifier modifier, optional float anchor, optional float anchorType, optional androidx.wear.compose.foundation.CurvedAlignment.Radial? radialAlignment, optional int angularDirection, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit> contentBuilder);
  }

  @androidx.compose.runtime.Stable @kotlin.jvm.JvmDefaultWithCompatibility public sealed interface CurvedModifier {
    method public default infix androidx.wear.compose.foundation.CurvedModifier then(androidx.wear.compose.foundation.CurvedModifier other);
    field public static final androidx.wear.compose.foundation.CurvedModifier.Companion Companion;
  }

  public static final class CurvedModifier.Companion implements androidx.wear.compose.foundation.CurvedModifier {
  }

  public final class CurvedPaddingKt {
    method public static androidx.wear.compose.foundation.ArcPaddingValues ArcPaddingValues(float all);
    method public static androidx.wear.compose.foundation.ArcPaddingValues ArcPaddingValues(optional float radial, optional float angular);
    method public static androidx.wear.compose.foundation.ArcPaddingValues ArcPaddingValues(optional float outer, optional float inner, optional float before, optional float after);
    method public static androidx.wear.compose.foundation.CurvedModifier padding(androidx.wear.compose.foundation.CurvedModifier, androidx.wear.compose.foundation.ArcPaddingValues paddingValues);
    method public static androidx.wear.compose.foundation.CurvedModifier padding(androidx.wear.compose.foundation.CurvedModifier, optional float all);
    method public static androidx.wear.compose.foundation.CurvedModifier padding(androidx.wear.compose.foundation.CurvedModifier, optional float radial, optional float angular);
    method public static androidx.wear.compose.foundation.CurvedModifier padding(androidx.wear.compose.foundation.CurvedModifier, float outer, float inner, float before, float after);
  }

  public final class CurvedParentDataKt {
    method public static androidx.wear.compose.foundation.CurvedModifier parentDataModifier(androidx.wear.compose.foundation.CurvedModifier, kotlin.jvm.functions.Function1<java.lang.Object?,? extends java.lang.Object?> modifyParentData);
    method public static androidx.wear.compose.foundation.CurvedModifier weight(androidx.wear.compose.foundation.CurvedModifier, @FloatRange(from=0.0, fromInclusive=false) float weight);
  }

  public final class CurvedRowKt {
    method public static void curvedRow(androidx.wear.compose.foundation.CurvedScope, optional androidx.wear.compose.foundation.CurvedModifier modifier, optional androidx.wear.compose.foundation.CurvedAlignment.Radial? radialAlignment, optional androidx.wear.compose.foundation.CurvedDirection.Angular? angularDirection, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedScope,kotlin.Unit> contentBuilder);
  }

  @androidx.compose.foundation.layout.LayoutScopeMarker public final class CurvedScope {
  }

  public final class CurvedSemanticsKt {
    method public static androidx.wear.compose.foundation.CurvedModifier clearAndSetSemantics(androidx.wear.compose.foundation.CurvedModifier, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedSemanticsScope,kotlin.Unit> properties);
    method public static androidx.wear.compose.foundation.CurvedModifier semantics(androidx.wear.compose.foundation.CurvedModifier, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.CurvedSemanticsScope,kotlin.Unit> properties);
  }

  public final class CurvedSemanticsScope {
    ctor public CurvedSemanticsScope();
    method public String? getContentDescription();
    method public float getTraversalIndex();
    method public void setContentDescription(String?);
    method public void setTraversalIndex(float);
    property public String? contentDescription;
    property public float traversalIndex;
  }

  public final class CurvedSizeKt {
    method public static androidx.wear.compose.foundation.CurvedModifier angularSize(androidx.wear.compose.foundation.CurvedModifier, float sweepDegrees);
    method public static androidx.wear.compose.foundation.CurvedModifier angularSizeDp(androidx.wear.compose.foundation.CurvedModifier, float angularWidth);
    method public static androidx.wear.compose.foundation.CurvedModifier radialSize(androidx.wear.compose.foundation.CurvedModifier, float thickness);
    method public static androidx.wear.compose.foundation.CurvedModifier size(androidx.wear.compose.foundation.CurvedModifier, @FloatRange(from=0.0, to=360.0) float sweepDegrees, float thickness);
    method public static androidx.wear.compose.foundation.CurvedModifier sizeIn(androidx.wear.compose.foundation.CurvedModifier, optional @FloatRange(from=0.0, to=360.0) float minSweepDegrees, optional @FloatRange(from=0.0, to=360.0) float maxSweepDegrees, optional float minThickness, optional float maxThickness);
  }

  public final class CurvedTextStyle {
    ctor public CurvedTextStyle();
    ctor public CurvedTextStyle(androidx.compose.ui.text.TextStyle style);
    ctor @Deprecated public CurvedTextStyle(optional long background, optional long color, optional long fontSize);
    ctor @Deprecated public CurvedTextStyle(optional long background, optional long color, optional long fontSize, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontSynthesis? fontSynthesis);
    ctor @Deprecated public CurvedTextStyle(optional long background, optional long color, optional long fontSize, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontSynthesis? fontSynthesis, optional long letterSpacing);
    ctor public CurvedTextStyle(optional long background, optional long color, optional long fontSize, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontSynthesis? fontSynthesis, optional long letterSpacing, optional long letterSpacingCounterClockwise, optional long lineHeight);
    method @Deprecated public androidx.wear.compose.foundation.CurvedTextStyle copy(optional long background, optional long color, optional long fontSize);
    method @Deprecated public androidx.wear.compose.foundation.CurvedTextStyle copy(optional long background, optional long color, optional long fontSize, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontSynthesis? fontSynthesis);
    method @Deprecated public androidx.wear.compose.foundation.CurvedTextStyle copy(optional long background, optional long color, optional long fontSize, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontSynthesis? fontSynthesis, optional long letterSpacing);
    method public androidx.wear.compose.foundation.CurvedTextStyle copy(optional long background, optional long color, optional long fontSize, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontSynthesis? fontSynthesis, optional long letterSpacing, optional long letterSpacingCounterClockwise, optional long lineHeight);
    method public long getBackground();
    method public long getColor();
    method public androidx.compose.ui.text.font.FontFamily? getFontFamily();
    method public long getFontSize();
    method public androidx.compose.ui.text.font.FontStyle? getFontStyle();
    method public androidx.compose.ui.text.font.FontSynthesis? getFontSynthesis();
    method public androidx.compose.ui.text.font.FontWeight? getFontWeight();
    method public long getLetterSpacing();
    method public long getLetterSpacingCounterClockwise();
    method public long getLineHeight();
    method public androidx.wear.compose.foundation.CurvedTextStyle merge(optional androidx.wear.compose.foundation.CurvedTextStyle? other);
    method public operator androidx.wear.compose.foundation.CurvedTextStyle plus(androidx.wear.compose.foundation.CurvedTextStyle other);
    property public long background;
    property public long color;
    property public androidx.compose.ui.text.font.FontFamily? fontFamily;
    property public long fontSize;
    property public androidx.compose.ui.text.font.FontStyle? fontStyle;
    property public androidx.compose.ui.text.font.FontSynthesis? fontSynthesis;
    property public androidx.compose.ui.text.font.FontWeight? fontWeight;
    property public long letterSpacing;
    property public long letterSpacingCounterClockwise;
    property public long lineHeight;
  }

  public final class ExpandableItemsDefaults {
    method public androidx.compose.animation.core.AnimationSpec<java.lang.Float> getCollapseAnimationSpec();
    method public androidx.compose.animation.core.AnimationSpec<java.lang.Float> getExpandAnimationSpec();
    property public androidx.compose.animation.core.AnimationSpec<java.lang.Float> collapseAnimationSpec;
    property public androidx.compose.animation.core.AnimationSpec<java.lang.Float> expandAnimationSpec;
    field public static final androidx.wear.compose.foundation.ExpandableItemsDefaults INSTANCE;
  }

  public final class ExpandableKt {
    method public static void expandableButton(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, androidx.wear.compose.foundation.ExpandableState state, optional Object? key, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public static void expandableItem(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, androidx.wear.compose.foundation.ExpandableState state, optional Object? key, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> content);
    method public static void expandableItems(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, androidx.wear.compose.foundation.ExpandableState state, int count, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,?>? key, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super java.lang.Integer,kotlin.Unit> itemContent);
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.ExpandableState rememberExpandableState(optional boolean initiallyExpanded, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> expandAnimationSpec, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> collapseAnimationSpec);
    method @SuppressCompatibility @androidx.compose.runtime.Composable @androidx.wear.compose.foundation.ExperimentalWearFoundationApi public static <T> androidx.wear.compose.foundation.ExpandableStateMapping<T> rememberExpandableStateMapping(optional kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> initiallyExpanded, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> expandAnimationSpec, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> collapseAnimationSpec);
  }

  public final class ExpandableState {
    method public float getExpandProgress();
    method public boolean isExpanded();
    method public void setExpanded(boolean);
    property public float expandProgress;
    property public boolean expanded;
    field public static final androidx.wear.compose.foundation.ExpandableState.Companion Companion;
  }

  public static final class ExpandableState.Companion {
    method @androidx.compose.runtime.Composable public androidx.compose.runtime.saveable.Saver<androidx.wear.compose.foundation.ExpandableState,java.lang.Boolean> saver(androidx.compose.animation.core.AnimationSpec<java.lang.Float> expandAnimationSpec, androidx.compose.animation.core.AnimationSpec<java.lang.Float> collapseAnimationSpec);
  }

  @SuppressCompatibility @androidx.wear.compose.foundation.ExperimentalWearFoundationApi public final class ExpandableStateMapping<T> {
    method public androidx.wear.compose.foundation.ExpandableState getOrPutNew(T key);
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This Wear Foundation API is experimental and is likely to change or to be removed in" + " the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalWearFoundationApi {
  }

  public interface GestureInclusion {
    method public boolean ignoreGestureStart(long offset, androidx.compose.ui.layout.LayoutCoordinates layoutCoordinates);
  }

  public final class HierarchicalFocusCoordinatorKt {
    method @Deprecated @androidx.compose.runtime.Composable public static void ActiveFocusListener(kotlin.jvm.functions.Function2<? super kotlinx.coroutines.CoroutineScope,? super java.lang.Boolean,kotlin.Unit> onFocusChanged);
    method @Deprecated @androidx.compose.runtime.Composable public static void HierarchicalFocusCoordinator(kotlin.jvm.functions.Function0<java.lang.Boolean> requiresFocus, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @Deprecated @androidx.compose.runtime.Composable public static androidx.compose.ui.focus.FocusRequester rememberActiveFocusRequester();
  }

  public final class HierarchicalFocusKt {
    method public static androidx.compose.ui.Modifier hierarchicalFocusGroup(androidx.compose.ui.Modifier, boolean active);
    method public static androidx.compose.ui.Modifier requestFocusOnHierarchyActive(androidx.compose.ui.Modifier);
  }

  @kotlin.jvm.JvmInline public final value class RevealActionType {
    method public int getValue();
    property public int value;
    field public static final androidx.wear.compose.foundation.RevealActionType.Companion Companion;
  }

  public static final class RevealActionType.Companion {
    method public int getNone();
    method public int getPrimaryAction();
    method public int getSecondaryAction();
    method public int getUndoAction();
    property public int None;
    property public int PrimaryAction;
    property public int SecondaryAction;
    property public int UndoAction;
  }

  @kotlin.jvm.JvmInline public final value class RevealDirection {
    method public int getValue();
    property public int value;
    field public static final androidx.wear.compose.foundation.RevealDirection.Companion Companion;
  }

  public static final class RevealDirection.Companion {
    method public int getBoth();
    method public int getRightToLeft();
    property public int Both;
    property public int RightToLeft;
  }

  public final class RevealState {
    method public suspend Object? animateTo(int targetValue, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public int getCurrentValue();
    method public int getLastActionType();
    method public float getOffset();
    method public float getRevealThreshold();
    method public java.util.Map<androidx.wear.compose.foundation.RevealValue,java.lang.Float> getSwipeAnchors();
    method public int getTargetValue();
    method public androidx.compose.runtime.MutableFloatState getWidth();
    method public boolean isAnimationRunning();
    method public void setLastActionType(int);
    method public suspend Object? snapTo(int targetValue, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public int currentValue;
    property public boolean isAnimationRunning;
    property public int lastActionType;
    property public float offset;
    property public float revealThreshold;
    property public java.util.Map<androidx.wear.compose.foundation.RevealValue,java.lang.Float> swipeAnchors;
    property public int targetValue;
    property public androidx.compose.runtime.MutableFloatState width;
  }

  @kotlin.jvm.JvmInline public final value class RevealValue {
    method public int getValue();
    property public int value;
    field public static final androidx.wear.compose.foundation.RevealValue.Companion Companion;
  }

  public static final class RevealValue.Companion {
    method public int getCovered();
    method public int getLeftRevealed();
    method public int getLeftRevealing();
    method public int getRightRevealed();
    method public int getRightRevealing();
    property public int Covered;
    property public int LeftRevealed;
    property public int LeftRevealing;
    property public int RightRevealed;
    property public int RightRevealing;
  }

  public interface ScrollInfoProvider {
    method public float getAnchorItemOffset();
    method public float getLastItemOffset();
    method public boolean isScrollAwayValid();
    method public boolean isScrollInProgress();
    method public boolean isScrollable();
    property public abstract float anchorItemOffset;
    property public abstract boolean isScrollAwayValid;
    property public abstract boolean isScrollInProgress;
    property public abstract boolean isScrollable;
    property public abstract float lastItemOffset;
  }

  public final class ScrollInfoProviderKt {
    method public static androidx.wear.compose.foundation.ScrollInfoProvider ScrollInfoProvider(androidx.compose.foundation.lazy.LazyListState state);
    method public static androidx.wear.compose.foundation.ScrollInfoProvider ScrollInfoProvider(androidx.compose.foundation.ScrollState state);
    method public static androidx.wear.compose.foundation.ScrollInfoProvider ScrollInfoProvider(androidx.wear.compose.foundation.lazy.ScalingLazyListState state);
    method public static androidx.wear.compose.foundation.ScrollInfoProvider ScrollInfoProvider(androidx.wear.compose.foundation.lazy.TransformingLazyColumnState state);
    method public static androidx.wear.compose.foundation.ScrollInfoProvider ScrollInfoProvider(androidx.wear.compose.foundation.pager.PagerState state);
  }

  public final class SwipeToDismissBoxDefaults {
    method public androidx.compose.animation.core.SpringSpec<java.lang.Float> getAnimationSpec();
    method public float getEdgeWidth();
    property public androidx.compose.animation.core.SpringSpec<java.lang.Float> AnimationSpec;
    property public float EdgeWidth;
    field public static final androidx.wear.compose.foundation.SwipeToDismissBoxDefaults INSTANCE;
  }

  @androidx.compose.runtime.Stable public final class SwipeToDismissBoxState {
    ctor public SwipeToDismissBoxState();
    ctor public SwipeToDismissBoxState(optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.SwipeToDismissValue,java.lang.Boolean> confirmStateChange);
    method public androidx.wear.compose.foundation.SwipeToDismissValue getCurrentValue();
    method public float getOffset();
    method public androidx.wear.compose.foundation.SwipeToDismissValue getTargetValue();
    method public boolean isAnimationRunning();
    method public float requireOffset();
    method public suspend Object? snapTo(androidx.wear.compose.foundation.SwipeToDismissValue targetValue, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public androidx.wear.compose.foundation.SwipeToDismissValue currentValue;
    property public boolean isAnimationRunning;
    property public float offset;
    property public androidx.wear.compose.foundation.SwipeToDismissValue targetValue;
  }

  public enum SwipeToDismissKeys {
    enum_constant public static final androidx.wear.compose.foundation.SwipeToDismissKeys Background;
    enum_constant public static final androidx.wear.compose.foundation.SwipeToDismissKeys Content;
  }

  public enum SwipeToDismissValue {
    enum_constant public static final androidx.wear.compose.foundation.SwipeToDismissValue Default;
    enum_constant public static final androidx.wear.compose.foundation.SwipeToDismissValue Dismissed;
  }

  public final class SwipeToRevealDefaults {
    method public androidx.wear.compose.foundation.GestureInclusion gestureInclusion(androidx.wear.compose.foundation.RevealState state, optional @FloatRange(from=0.0, to=1.0) float edgeZoneFraction);
    method public androidx.wear.compose.foundation.GestureInclusion getBidirectionalGestureInclusion();
    method public float getLeftEdgeZoneFraction();
    method public kotlin.jvm.functions.Function1<java.lang.Float,java.lang.Float> getPositionalThreshold();
    method public float getRevealingRatio();
    property public float LeftEdgeZoneFraction;
    property public kotlin.jvm.functions.Function1<java.lang.Float,java.lang.Float> PositionalThreshold;
    property public float RevealingRatio;
    property public androidx.wear.compose.foundation.GestureInclusion bidirectionalGestureInclusion;
    field public static final androidx.wear.compose.foundation.SwipeToRevealDefaults INSTANCE;
  }

  public final class SwipeToRevealKt {
    method @androidx.compose.runtime.Composable public static void SwipeToReveal(kotlin.jvm.functions.Function0<kotlin.Unit> primaryAction, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> onFullSwipe, optional androidx.wear.compose.foundation.RevealState state, optional kotlin.jvm.functions.Function0<kotlin.Unit>? secondaryAction, optional kotlin.jvm.functions.Function0<kotlin.Unit>? undoAction, optional androidx.wear.compose.foundation.GestureInclusion gestureInclusion, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public static java.util.Map<androidx.wear.compose.foundation.RevealValue,java.lang.Float> createRevealAnchors(optional float coveredAnchor, optional float revealingAnchor, optional float revealedAnchor, optional int revealDirection);
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.RevealState rememberRevealState(optional int initialValue, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.RevealValue,java.lang.Boolean> confirmValueChange, optional kotlin.jvm.functions.Function1<? super java.lang.Float,java.lang.Float> positionalThreshold, optional java.util.Map<androidx.wear.compose.foundation.RevealValue,java.lang.Float> anchors);
  }

}

package androidx.wear.compose.foundation.lazy {

  @androidx.compose.runtime.Immutable public final class AutoCenteringParams {
    ctor public AutoCenteringParams();
    ctor public AutoCenteringParams(optional int itemIndex, optional int itemOffset);
  }

  public final class ScalingLazyColumnDefaults {
    method public androidx.wear.compose.foundation.lazy.ScalingParams scalingParams(optional float edgeScale, optional float edgeAlpha, optional float minElementHeight, optional float maxElementHeight, optional float minTransitionArea, optional float maxTransitionArea, optional androidx.compose.animation.core.Easing scaleInterpolator, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.unit.Constraints,java.lang.Integer> viewportVerticalOffsetResolver);
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.gestures.FlingBehavior snapFlingBehavior(androidx.wear.compose.foundation.lazy.ScalingLazyListState state, optional float snapOffset, optional androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decay);
    field public static final androidx.wear.compose.foundation.lazy.ScalingLazyColumnDefaults INSTANCE;
  }

  public final class ScalingLazyColumnKt {
    method @androidx.compose.runtime.Composable public static void ScalingLazyColumn(optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.foundation.lazy.ScalingLazyListState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional boolean reverseLayout, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.wear.compose.foundation.lazy.ScalingParams scalingParams, optional int anchorType, optional androidx.wear.compose.foundation.lazy.AutoCenteringParams? autoCentering, optional androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior? rotaryScrollableBehavior, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit> content);
    method @Deprecated @androidx.compose.runtime.Composable public static void ScalingLazyColumn(optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.foundation.lazy.ScalingLazyListState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional boolean reverseLayout, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.wear.compose.foundation.lazy.ScalingParams scalingParams, optional int anchorType, optional androidx.wear.compose.foundation.lazy.AutoCenteringParams? autoCentering, optional androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior? rotaryScrollableBehavior, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit> content);
    method @Deprecated @androidx.compose.runtime.Composable public static void ScalingLazyColumn(optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.foundation.lazy.ScalingLazyListState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional boolean reverseLayout, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.wear.compose.foundation.lazy.ScalingParams scalingParams, optional int anchorType, optional androidx.wear.compose.foundation.lazy.AutoCenteringParams? autoCentering, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit> content);
    method public static inline <T> void items(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function1<? super T,?>? key, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope,? super T,kotlin.Unit> itemContent);
    method public static inline <T> void items(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, T[] items, optional kotlin.jvm.functions.Function1<? super T,?>? key, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope,? super T,kotlin.Unit> itemContent);
    method public static inline <T> void itemsIndexed(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,?>? key, kotlin.jvm.functions.Function3<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
    method public static inline <T> void itemsIndexed(androidx.wear.compose.foundation.lazy.ScalingLazyListScope, T[] items, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,?>? key, kotlin.jvm.functions.Function3<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class ScalingLazyListAnchorType {
    field public static final androidx.wear.compose.foundation.lazy.ScalingLazyListAnchorType.Companion Companion;
  }

  public static final class ScalingLazyListAnchorType.Companion {
    method public int getItemCenter();
    method public int getItemStart();
    property public int ItemCenter;
    property public int ItemStart;
  }

  public sealed interface ScalingLazyListItemInfo {
    method public float getAlpha();
    method public int getIndex();
    method public Object getKey();
    method public int getOffset();
    method public float getScale();
    method public int getSize();
    method public int getUnadjustedOffset();
    method public int getUnadjustedSize();
    property public abstract float alpha;
    property public abstract int index;
    property public abstract Object key;
    property public abstract int offset;
    property public abstract float scale;
    property public abstract int size;
    property public abstract int unadjustedOffset;
    property public abstract int unadjustedSize;
  }

  @androidx.compose.runtime.Stable @androidx.wear.compose.foundation.lazy.ScalingLazyScopeMarker public sealed interface ScalingLazyListItemScope {
    method public androidx.compose.ui.Modifier fillParentMaxHeight(androidx.compose.ui.Modifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method public androidx.compose.ui.Modifier fillParentMaxSize(androidx.compose.ui.Modifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method public androidx.compose.ui.Modifier fillParentMaxWidth(androidx.compose.ui.Modifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
  }

  public sealed interface ScalingLazyListLayoutInfo {
    method public int getAfterAutoCenteringPadding();
    method public int getAfterContentPadding();
    method public int getAnchorType();
    method public int getBeforeAutoCenteringPadding();
    method public int getBeforeContentPadding();
    method public androidx.compose.foundation.gestures.Orientation getOrientation();
    method public boolean getReverseLayout();
    method public int getTotalItemsCount();
    method public int getViewportEndOffset();
    method public long getViewportSize();
    method public int getViewportStartOffset();
    method public java.util.List<androidx.wear.compose.foundation.lazy.ScalingLazyListItemInfo> getVisibleItemsInfo();
    property public abstract int afterAutoCenteringPadding;
    property public abstract int afterContentPadding;
    property public abstract int anchorType;
    property public abstract int beforeAutoCenteringPadding;
    property public abstract int beforeContentPadding;
    property public abstract androidx.compose.foundation.gestures.Orientation orientation;
    property public abstract boolean reverseLayout;
    property public abstract int totalItemsCount;
    property public abstract int viewportEndOffset;
    property public abstract long viewportSize;
    property public abstract int viewportStartOffset;
    property public abstract java.util.List<androidx.wear.compose.foundation.lazy.ScalingLazyListItemInfo> visibleItemsInfo;
  }

  @androidx.wear.compose.foundation.lazy.ScalingLazyScopeMarker public sealed interface ScalingLazyListScope {
    method public void item(optional Object? key, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope,kotlin.Unit> content);
    method public void items(int count, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,?>? key, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.lazy.ScalingLazyListItemScope,? super java.lang.Integer,kotlin.Unit> itemContent);
  }

  @androidx.compose.runtime.Stable public final class ScalingLazyListState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor public ScalingLazyListState();
    ctor public ScalingLazyListState(optional int initialCenterItemIndex, optional int initialCenterItemScrollOffset);
    method public suspend Object? animateScrollToItem(int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public float dispatchRawDelta(float delta);
    method public int getCenterItemIndex();
    method public int getCenterItemScrollOffset();
    method public androidx.wear.compose.foundation.lazy.ScalingLazyListLayoutInfo getLayoutInfo();
    method public boolean isScrollInProgress();
    method public suspend Object? scroll(androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? scrollToItem(int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public boolean canScrollBackward;
    property public boolean canScrollForward;
    property public int centerItemIndex;
    property public int centerItemScrollOffset;
    property public boolean isScrollInProgress;
    property public boolean lastScrolledBackward;
    property public boolean lastScrolledForward;
    property public androidx.wear.compose.foundation.lazy.ScalingLazyListLayoutInfo layoutInfo;
    field public static final androidx.wear.compose.foundation.lazy.ScalingLazyListState.Companion Companion;
  }

  public static final class ScalingLazyListState.Companion {
    method public androidx.compose.runtime.saveable.Saver<androidx.wear.compose.foundation.lazy.ScalingLazyListState,java.lang.Object> getSaver();
    property public androidx.compose.runtime.saveable.Saver<androidx.wear.compose.foundation.lazy.ScalingLazyListState,java.lang.Object> Saver;
  }

  public final class ScalingLazyListStateKt {
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.lazy.ScalingLazyListState rememberScalingLazyListState(optional int initialCenterItemIndex, optional int initialCenterItemScrollOffset);
  }

  @kotlin.DslMarker public @interface ScalingLazyScopeMarker {
  }

  @androidx.compose.runtime.Stable public interface ScalingParams {
    method @FloatRange(from=0.0, to=1.0) public float getEdgeAlpha();
    method @FloatRange(from=0.0, to=1.0) public float getEdgeScale();
    method @FloatRange(from=0.0, to=1.0) public float getMaxElementHeight();
    method @FloatRange(from=0.0, to=1.0) public float getMaxTransitionArea();
    method @FloatRange(from=0.0, to=1.0) public float getMinElementHeight();
    method @FloatRange(from=0.0, to=1.0) public float getMinTransitionArea();
    method public androidx.compose.animation.core.Easing getScaleInterpolator();
    method public int resolveViewportVerticalOffset(long viewportConstraints);
    property @FloatRange(from=0.0, to=1.0) public abstract float edgeAlpha;
    property @FloatRange(from=0.0, to=1.0) public abstract float edgeScale;
    property @FloatRange(from=0.0, to=1.0) public abstract float maxElementHeight;
    property @FloatRange(from=0.0, to=1.0) public abstract float maxTransitionArea;
    property @FloatRange(from=0.0, to=1.0) public abstract float minElementHeight;
    property @FloatRange(from=0.0, to=1.0) public abstract float minTransitionArea;
    property public abstract androidx.compose.animation.core.Easing scaleInterpolator;
  }

  public final class TransformingLazyColumnDslKt {
    method public static inline <T> void items(androidx.wear.compose.foundation.lazy.TransformingLazyColumnScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function1<? super T,?>? key, optional kotlin.jvm.functions.Function1<? super T,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope,? super T,kotlin.Unit> itemContent);
    method public static inline <T> void itemsIndexed(androidx.wear.compose.foundation.lazy.TransformingLazyColumnScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,?>? key, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function3<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
  }

  @androidx.wear.compose.foundation.lazy.TransformingLazyColumnScopeMarker public sealed interface TransformingLazyColumnItemScope {
    method @androidx.compose.runtime.Composable public default void TransformExclusion(kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope,kotlin.Unit> content);
    method public androidx.compose.ui.Modifier animateItem(androidx.compose.ui.Modifier, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float>? fadeInSpec, optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset>? placementSpec, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float>? fadeOutSpec);
    method public long getScrollProgress(androidx.compose.ui.graphics.drawscope.DrawScope);
    method public long getScrollProgress(androidx.compose.ui.graphics.GraphicsLayerScope);
    method public androidx.compose.ui.Modifier transformedHeight(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function2<? super java.lang.Integer,? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScrollProgress,java.lang.Integer> heightProvider);
    property public abstract long androidx.compose.ui.graphics.drawscope.DrawScope.scrollProgress;
    property public abstract long androidx.compose.ui.graphics.GraphicsLayerScope.scrollProgress;
  }

  @kotlin.jvm.JvmInline public final value class TransformingLazyColumnItemScrollProgress {
    ctor public TransformingLazyColumnItemScrollProgress(float topOffsetFraction, float bottomOffsetFraction);
    property public float bottomOffsetFraction;
    property public boolean isSpecified;
    property public boolean isUnspecified;
    property public float topOffsetFraction;
    field public static final androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScrollProgress.Companion Companion;
  }

  public static final class TransformingLazyColumnItemScrollProgress.Companion {
    method public long getUnspecified();
    property public long Unspecified;
  }

  public final class TransformingLazyColumnKt {
    method @androidx.compose.runtime.Composable public static void TransformingLazyColumn(optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.foundation.lazy.TransformingLazyColumnState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior? rotaryScrollableBehavior, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnScope,kotlin.Unit> content);
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope?> getLocalTransformingLazyColumnItemScope();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope?> LocalTransformingLazyColumnItemScope;
  }

  public sealed interface TransformingLazyColumnLayoutInfo {
    method public int getAfterContentPadding();
    method public int getBeforeContentPadding();
    method public int getTotalItemsCount();
    method public long getViewportSize();
    method public java.util.List<androidx.wear.compose.foundation.lazy.TransformingLazyColumnVisibleItemInfo> getVisibleItems();
    property public abstract int afterContentPadding;
    property public abstract int beforeContentPadding;
    property public abstract int totalItemsCount;
    property public abstract long viewportSize;
    property public abstract java.util.List<androidx.wear.compose.foundation.lazy.TransformingLazyColumnVisibleItemInfo> visibleItems;
  }

  @androidx.wear.compose.foundation.lazy.TransformingLazyColumnScopeMarker public sealed interface TransformingLazyColumnScope {
    method public void item(optional Object? key, optional Object? contentType, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope,kotlin.Unit> content);
    method public void items(int count, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,?>? key, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.lazy.TransformingLazyColumnItemScope,? super java.lang.Integer,kotlin.Unit> content);
  }

  @kotlin.DslMarker public @interface TransformingLazyColumnScopeMarker {
  }

  @androidx.compose.runtime.Stable public final class TransformingLazyColumnState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor public TransformingLazyColumnState();
    ctor public TransformingLazyColumnState(optional int initialAnchorItemIndex, optional int initialAnchorItemScrollOffset);
    method public suspend Object? animateScrollToItem(@IntRange(from=0L) int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public float dispatchRawDelta(float delta);
    method public int getAnchorItemIndex();
    method public int getAnchorItemScrollOffset();
    method public androidx.wear.compose.foundation.lazy.TransformingLazyColumnLayoutInfo getLayoutInfo();
    method public boolean isScrollInProgress();
    method public void requestScrollToItem(@IntRange(from=0L) int index, optional int scrollOffset);
    method public suspend Object? scroll(androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? scrollToItem(@IntRange(from=0L) int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public int anchorItemIndex;
    property public int anchorItemScrollOffset;
    property public boolean canScrollBackward;
    property public boolean canScrollForward;
    property public boolean isScrollInProgress;
    property public boolean lastScrolledBackward;
    property public boolean lastScrolledForward;
    property public androidx.wear.compose.foundation.lazy.TransformingLazyColumnLayoutInfo layoutInfo;
  }

  public final class TransformingLazyColumnStateKt {
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.lazy.TransformingLazyColumnState rememberTransformingLazyColumnState(optional int initialAnchorItemIndex, optional int initialAnchorItemScrollOffset);
  }

  public sealed interface TransformingLazyColumnVisibleItemInfo {
    method public Object? getContentType();
    method public int getIndex();
    method public Object getKey();
    method public int getMeasuredHeight();
    method public int getOffset();
    method public long getScrollProgress();
    method public int getTransformedHeight();
    property public abstract Object? contentType;
    property public abstract int index;
    property public abstract Object key;
    property public abstract int measuredHeight;
    property public abstract int offset;
    property public abstract long scrollProgress;
    property public abstract int transformedHeight;
  }

}

package androidx.wear.compose.foundation.pager {

  public final class PagerDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.GestureInclusion gestureInclusion(androidx.wear.compose.foundation.pager.PagerState state, optional float edgeZoneFraction);
    method public int getBeyondViewportPageCount();
    method public float getLeftEdgeZoneFraction();
    method public androidx.compose.animation.core.AnimationSpec<java.lang.Float> getSnapAnimationSpec();
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.gestures.TargetedFlingBehavior snapFlingBehavior(androidx.wear.compose.foundation.pager.PagerState state, optional int maxFlingPages, optional androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> snapAnimationSpec, optional @FloatRange(from=0.0, to=1.0) float snapPositionalThreshold);
    property public int BeyondViewportPageCount;
    property public float LeftEdgeZoneFraction;
    property public androidx.compose.animation.core.AnimationSpec<java.lang.Float> SnapAnimationSpec;
    field public static final androidx.wear.compose.foundation.pager.PagerDefaults INSTANCE;
  }

  public final class PagerKt {
    method @androidx.compose.runtime.Composable public static void HorizontalPager(androidx.wear.compose.foundation.pager.PagerState state, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional int beyondViewportPageCount, optional androidx.compose.foundation.gestures.TargetedFlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.wear.compose.foundation.GestureInclusion gestureInclusion, optional boolean reverseLayout, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,?>? key, optional androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior? rotaryScrollableBehavior, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.pager.PagerScope,? super java.lang.Integer,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void VerticalPager(androidx.wear.compose.foundation.pager.PagerState state, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional int beyondViewportPageCount, optional androidx.compose.foundation.gestures.TargetedFlingBehavior flingBehavior, optional boolean userScrollEnabled, optional boolean reverseLayout, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,?>? key, optional androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior? rotaryScrollableBehavior, kotlin.jvm.functions.Function2<? super androidx.wear.compose.foundation.pager.PagerScope,? super java.lang.Integer,kotlin.Unit> content);
  }

  public sealed interface PagerLayoutInfo {
    method public androidx.compose.foundation.gestures.Orientation getOrientation();
    method public int getPageSize();
    property public abstract androidx.compose.foundation.gestures.Orientation orientation;
    property public abstract int pageSize;
  }

  public sealed interface PagerScope {
  }

  public final class PagerState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor public PagerState(optional @IntRange(from=0L) int currentPage, optional @FloatRange(from=-0.5, to=0.5) float currentPageOffsetFraction, @IntRange(from=1L) kotlin.jvm.functions.Function0<java.lang.Integer> pageCount);
    method public suspend Object? animateScrollToPage(int page, optional @FloatRange(from=-0.5, to=0.5) float pageOffsetFraction, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public float dispatchRawDelta(float delta);
    method public int getCurrentPage();
    method public float getCurrentPageOffsetFraction();
    method public androidx.compose.foundation.interaction.InteractionSource getInteractionSource();
    method public androidx.wear.compose.foundation.pager.PagerLayoutInfo getLayoutInfo();
    method public int getPageCount();
    method public int getSettledPage();
    method public int getTargetPage();
    method public boolean isScrollInProgress();
    method public suspend Object? scroll(androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? scrollToPage(int page, optional @FloatRange(from=-0.5, to=0.5) float pageOffsetFraction, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public int currentPage;
    property public float currentPageOffsetFraction;
    property public androidx.compose.foundation.interaction.InteractionSource interactionSource;
    property public boolean isScrollInProgress;
    property public androidx.wear.compose.foundation.pager.PagerLayoutInfo layoutInfo;
    property public int pageCount;
    property public int settledPage;
    property public int targetPage;
    field public static final androidx.wear.compose.foundation.pager.PagerState.Companion Companion;
  }

  public static final class PagerState.Companion {
    method public androidx.compose.runtime.saveable.Saver<androidx.wear.compose.foundation.pager.PagerState,? extends java.lang.Object?> getSaver();
    property public androidx.compose.runtime.saveable.Saver<androidx.wear.compose.foundation.pager.PagerState,? extends java.lang.Object?> Saver;
  }

  public final class PagerStateKt {
    method @androidx.compose.runtime.Composable public static androidx.wear.compose.foundation.pager.PagerState rememberPagerState(optional @IntRange(from=0L) int initialPage, optional @FloatRange(from=-0.5, to=0.5) float initialPageOffsetFraction, @IntRange(from=1L) kotlin.jvm.functions.Function0<java.lang.Integer> pageCount);
  }

}

package androidx.wear.compose.foundation.rotary {

  public interface RotaryScrollableBehavior {
    method public suspend Object? performScroll(kotlinx.coroutines.CoroutineScope, long timestampMillis, float delta, int inputDeviceId, androidx.compose.foundation.gestures.Orientation orientation, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public final class RotaryScrollableDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior behavior(androidx.compose.foundation.gestures.ScrollableState scrollableState, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior, optional boolean hapticFeedbackEnabled);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior snapBehavior(androidx.compose.foundation.gestures.ScrollableState scrollableState, androidx.wear.compose.foundation.rotary.RotarySnapLayoutInfoProvider layoutInfoProvider, optional float snapOffset, optional boolean hapticFeedbackEnabled);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior snapBehavior(androidx.wear.compose.foundation.lazy.ScalingLazyListState scrollableState, optional float snapOffset, optional boolean hapticFeedbackEnabled);
    method @androidx.compose.runtime.Composable public androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior snapBehavior(androidx.wear.compose.foundation.pager.PagerState pagerState, optional float snapOffset, optional boolean hapticFeedbackEnabled);
    field public static final androidx.wear.compose.foundation.rotary.RotaryScrollableDefaults INSTANCE;
  }

  public final class RotaryScrollableKt {
    method @Deprecated public static androidx.compose.ui.Modifier rotaryScrollable(androidx.compose.ui.Modifier, androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior behavior, androidx.compose.ui.focus.FocusRequester focusRequester, optional boolean reverseDirection);
    method public static androidx.compose.ui.Modifier rotaryScrollable(androidx.compose.ui.Modifier, androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior behavior, androidx.compose.ui.focus.FocusRequester focusRequester, optional boolean reverseDirection, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect);
  }

  public interface RotarySnapLayoutInfoProvider {
    method public float getAverageItemSize();
    method public int getCurrentItemIndex();
    method public float getCurrentItemOffset();
    method public int getTotalItemCount();
    property public abstract float averageItemSize;
    property public abstract int currentItemIndex;
    property public abstract float currentItemOffset;
    property public abstract int totalItemCount;
  }

}

