// Signature format: 4.0
package androidx.glance.wear.tiles {

  public final class AndroidLayoutElementKt {
    method @androidx.compose.runtime.Composable public static void AndroidLayoutElement(androidx.wear.tiles.LayoutElementBuilders.LayoutElement layoutElement);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void AndroidLayoutElement(androidx.wear.tiles.LayoutElementBuilders.LayoutElement, androidx.compose.runtime.Composer?, int);
  }

  public final class BorderKt {
    method public static androidx.glance.GlanceModifier border(androidx.glance.GlanceModifier, float width, androidx.glance.unit.ColorProvider color);
    method public static androidx.glance.GlanceModifier border(androidx.glance.GlanceModifier, @DimenRes int width, androidx.glance.unit.ColorProvider color);
    method @BytecodeOnly public static androidx.glance.GlanceModifier border-lG28NQ4(androidx.glance.GlanceModifier, float, androidx.glance.unit.ColorProvider);
  }

  public final class CompositionLocalsKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.glance.wear.tiles.TimeInterval?> getLocalTimeInterval();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.glance.wear.tiles.TimeInterval?> LocalTimeInterval;
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This API is experimental and is likely to change in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalGlanceWearTilesApi {
  }

  public abstract class GlanceTileService extends androidx.wear.tiles.TileService {
    ctor public GlanceTileService();
    ctor public GlanceTileService(optional androidx.wear.tiles.LayoutElementBuilders.LayoutElement? errorUiLayout);
    method @androidx.compose.runtime.Composable @androidx.glance.GlanceComposable public abstract void Content();
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.glance.GlanceComposable public abstract void Content(androidx.compose.runtime.Composer?, int);
    method public androidx.glance.state.GlanceStateDefinition<? extends java.lang.Object?>? getStateDefinition();
    method public final suspend <T> Object? getTileState(kotlin.coroutines.Continuation<? super T>);
    method public androidx.glance.wear.tiles.TimelineMode getTimelineMode();
    method protected final com.google.common.util.concurrent.ListenableFuture<androidx.wear.tiles.ResourceBuilders.Resources> onResourcesRequest(androidx.wear.tiles.RequestBuilders.ResourcesRequest requestParams);
    method public void onStart(android.content.Intent? intent, int startId);
    method protected final com.google.common.util.concurrent.ListenableFuture<androidx.wear.tiles.TileBuilders.Tile> onTileRequest(androidx.wear.tiles.RequestBuilders.TileRequest requestParams);
    method public final suspend <T> Object? updateTileState(kotlin.jvm.functions.Function2<? super T,? super kotlin.coroutines.Continuation<? super T>,? extends java.lang.Object?> updateState, kotlin.coroutines.Continuation<? super T>);
    property public androidx.glance.state.GlanceStateDefinition<? extends java.lang.Object?>? stateDefinition;
    property public androidx.glance.wear.tiles.TimelineMode timelineMode;
  }

  public final class GlanceWearTilesKt {
    method @SuppressCompatibility @androidx.glance.wear.tiles.ExperimentalGlanceWearTilesApi public static suspend Object? compose(android.content.Context context, long size, optional Object? state, kotlin.jvm.functions.Function0<kotlin.Unit> content, kotlin.coroutines.Continuation<? super androidx.glance.wear.tiles.WearTilesCompositionResult>);
    method @BytecodeOnly @SuppressCompatibility @androidx.glance.wear.tiles.ExperimentalGlanceWearTilesApi public static Object? compose-eVKgIn8(android.content.Context, long, Object?, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, kotlin.coroutines.Continuation<? super androidx.glance.wear.tiles.WearTilesCompositionResult!>);
  }

  public final class TimeInterval {
    ctor public TimeInterval();
    ctor public TimeInterval(optional java.time.Instant start, optional java.time.Instant end);
    method public java.time.Instant component1();
    method public java.time.Instant component2();
    method public androidx.glance.wear.tiles.TimeInterval copy(optional java.time.Instant start, optional java.time.Instant end);
    method public java.time.Instant getEnd();
    method public java.time.Instant getStart();
    property public java.time.Instant end;
    property public java.time.Instant start;
  }

  public sealed interface TimelineMode {
  }

  public static final class TimelineMode.SingleEntry implements androidx.glance.wear.tiles.TimelineMode {
    field public static final androidx.glance.wear.tiles.TimelineMode.SingleEntry INSTANCE;
  }

  public static final class TimelineMode.TimeBoundEntries implements androidx.glance.wear.tiles.TimelineMode {
    ctor public TimelineMode.TimeBoundEntries(java.util.Set<androidx.glance.wear.tiles.TimeInterval> timeIntervals);
    method public java.util.Set<androidx.glance.wear.tiles.TimeInterval> getTimeIntervals();
    property public java.util.Set<androidx.glance.wear.tiles.TimeInterval> timeIntervals;
  }

  @SuppressCompatibility @androidx.glance.wear.tiles.ExperimentalGlanceWearTilesApi public final class WearTilesCompositionResult {
    ctor public WearTilesCompositionResult(androidx.wear.tiles.LayoutElementBuilders.LayoutElement layout, androidx.wear.tiles.ResourceBuilders.Resources resources);
    method public androidx.wear.tiles.LayoutElementBuilders.LayoutElement getLayout();
    method public androidx.wear.tiles.ResourceBuilders.Resources getResources();
    property public androidx.wear.tiles.LayoutElementBuilders.LayoutElement layout;
    property public androidx.wear.tiles.ResourceBuilders.Resources resources;
  }

}

package androidx.glance.wear.tiles.action {

  public interface ActionCallback {
    method public suspend Object? onAction(android.content.Context context, androidx.glance.GlanceId glanceId, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public final class RunCallbackActionKt {
    method @KotlinOnly public static inline <reified T extends androidx.glance.wear.tiles.action.ActionCallback> androidx.glance.action.Action actionRunCallback();
    method public static <T extends androidx.glance.wear.tiles.action.ActionCallback> androidx.glance.action.Action actionRunCallback(Class<T> callbackClass);
  }

}

package androidx.glance.wear.tiles.curved {

  @kotlin.jvm.JvmInline public final value class AnchorType {
    method @BytecodeOnly public static androidx.glance.wear.tiles.curved.AnchorType! box-impl(int);
    method @BytecodeOnly public int unbox-impl();
    field public static final androidx.glance.wear.tiles.curved.AnchorType.Companion Companion;
  }

  public static final class AnchorType.Companion {
    method @BytecodeOnly public int getCenter-TqGwu_4();
    method @BytecodeOnly public int getEnd-TqGwu_4();
    method @BytecodeOnly public int getStart-TqGwu_4();
    property public androidx.glance.wear.tiles.curved.AnchorType Center;
    property public androidx.glance.wear.tiles.curved.AnchorType End;
    property public androidx.glance.wear.tiles.curved.AnchorType Start;
  }

  public final class CombinedGlanceCurvedModifier implements androidx.glance.wear.tiles.curved.GlanceCurvedModifier {
    ctor public CombinedGlanceCurvedModifier(androidx.glance.wear.tiles.curved.GlanceCurvedModifier outer, androidx.glance.wear.tiles.curved.GlanceCurvedModifier inner);
    method public boolean all(kotlin.jvm.functions.Function1<? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,java.lang.Boolean> predicate);
    method public boolean any(kotlin.jvm.functions.Function1<? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,java.lang.Boolean> predicate);
    method public <R> R foldIn(R initial, kotlin.jvm.functions.Function2<? super R,? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,? extends R> operation);
    method public <R> R foldOut(R initial, kotlin.jvm.functions.Function2<? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,? super R,? extends R> operation);
  }

  @androidx.glance.wear.tiles.curved.CurvedScopeMarker public interface CurvedChildScope {
  }

  public final class CurvedRowKt {
    method @androidx.compose.runtime.Composable public static void CurvedRow(optional androidx.glance.GlanceModifier modifier, optional float anchorDegrees, optional int anchorType, optional int radialAlignment, kotlin.jvm.functions.Function1<? super androidx.glance.wear.tiles.curved.CurvedScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void CurvedRow-zQo951E(androidx.glance.GlanceModifier?, float, int, int, kotlin.jvm.functions.Function1<? super androidx.glance.wear.tiles.curved.CurvedScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  @androidx.glance.wear.tiles.curved.CurvedScopeMarker @kotlin.jvm.JvmDefaultWithCompatibility public interface CurvedScope {
    method public void curvedComposable(optional boolean rotateContent, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly public void curvedComposable(boolean, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public void curvedLine(androidx.glance.unit.ColorProvider color, optional androidx.glance.wear.tiles.curved.GlanceCurvedModifier curvedModifier);
    method public void curvedSpacer(optional androidx.glance.wear.tiles.curved.GlanceCurvedModifier curvedModifier);
    method public void curvedText(String text, optional androidx.glance.wear.tiles.curved.GlanceCurvedModifier curvedModifier, optional androidx.glance.wear.tiles.curved.CurvedTextStyle? style);
  }

  @kotlin.DslMarker public @interface CurvedScopeMarker {
  }

  @androidx.compose.runtime.Immutable public final class CurvedTextStyle {
    ctor public CurvedTextStyle();
    ctor @KotlinOnly public CurvedTextStyle(optional androidx.glance.unit.ColorProvider? color, optional androidx.compose.ui.unit.TextUnit? fontSize, optional androidx.glance.text.FontWeight? fontWeight, optional androidx.glance.text.FontStyle? fontStyle);
    method public androidx.glance.unit.ColorProvider? getColor();
    method @BytecodeOnly public androidx.compose.ui.unit.TextUnit? getFontSize-U3a4LBI();
    method @BytecodeOnly public androidx.glance.text.FontStyle? getFontStyle-xuO1esU();
    method @BytecodeOnly public androidx.glance.text.FontWeight? getFontWeight-pJbD0qI();
    property public androidx.glance.unit.ColorProvider? color;
    property public androidx.compose.ui.unit.TextUnit? fontSize;
    property public androidx.glance.text.FontStyle? fontStyle;
    property public androidx.glance.text.FontWeight? fontWeight;
  }

  @androidx.compose.runtime.Stable @kotlin.jvm.JvmDefaultWithCompatibility public interface GlanceCurvedModifier {
    method public boolean all(kotlin.jvm.functions.Function1<? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,java.lang.Boolean> predicate);
    method public boolean any(kotlin.jvm.functions.Function1<? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,java.lang.Boolean> predicate);
    method public <R> R foldIn(R initial, kotlin.jvm.functions.Function2<? super R,? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,? extends R> operation);
    method public <R> R foldOut(R initial, kotlin.jvm.functions.Function2<? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,? super R,? extends R> operation);
    method public default infix androidx.glance.wear.tiles.curved.GlanceCurvedModifier then(androidx.glance.wear.tiles.curved.GlanceCurvedModifier other);
    field public static final androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Companion Companion;
  }

  public static final class GlanceCurvedModifier.Companion implements androidx.glance.wear.tiles.curved.GlanceCurvedModifier {
    method public boolean all(kotlin.jvm.functions.Function1<? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,java.lang.Boolean> predicate);
    method public boolean any(kotlin.jvm.functions.Function1<? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,java.lang.Boolean> predicate);
    method public <R> R foldIn(R initial, kotlin.jvm.functions.Function2<? super R,? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,? extends R> operation);
    method public <R> R foldOut(R initial, kotlin.jvm.functions.Function2<? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,? super R,? extends R> operation);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public static interface GlanceCurvedModifier.Element extends androidx.glance.wear.tiles.curved.GlanceCurvedModifier {
    method public default boolean all(kotlin.jvm.functions.Function1<? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,java.lang.Boolean> predicate);
    method public default boolean any(kotlin.jvm.functions.Function1<? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,java.lang.Boolean> predicate);
    method public default <R> R foldIn(R initial, kotlin.jvm.functions.Function2<? super R,? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,? extends R> operation);
    method public default <R> R foldOut(R initial, kotlin.jvm.functions.Function2<? super androidx.glance.wear.tiles.curved.GlanceCurvedModifier.Element,? super R,? extends R> operation);
  }

  public final class GlanceCurvedModifierKt {
    method public static androidx.glance.wear.tiles.curved.GlanceCurvedModifier clickable(androidx.glance.wear.tiles.curved.GlanceCurvedModifier, androidx.glance.action.Action onClick);
    method public static androidx.glance.wear.tiles.curved.GlanceCurvedModifier semantics(androidx.glance.wear.tiles.curved.GlanceCurvedModifier, kotlin.jvm.functions.Function1<? super androidx.glance.semantics.SemanticsPropertyReceiver,kotlin.Unit> properties);
    method public static androidx.glance.wear.tiles.curved.GlanceCurvedModifier sweepAngleDegrees(androidx.glance.wear.tiles.curved.GlanceCurvedModifier, float degrees);
    method public static androidx.glance.wear.tiles.curved.GlanceCurvedModifier thickness(androidx.glance.wear.tiles.curved.GlanceCurvedModifier, float thickness);
    method @BytecodeOnly public static androidx.glance.wear.tiles.curved.GlanceCurvedModifier thickness-3ABfNKs(androidx.glance.wear.tiles.curved.GlanceCurvedModifier, float);
  }

  @kotlin.jvm.JvmInline public final value class RadialAlignment {
    method @BytecodeOnly public static androidx.glance.wear.tiles.curved.RadialAlignment! box-impl(int);
    method @BytecodeOnly public int unbox-impl();
    field public static final androidx.glance.wear.tiles.curved.RadialAlignment.Companion Companion;
  }

  public static final class RadialAlignment.Companion {
    method @BytecodeOnly public int getCenter-pFUpIe8();
    method @BytecodeOnly public int getInner-pFUpIe8();
    method @BytecodeOnly public int getOuter-pFUpIe8();
    property public androidx.glance.wear.tiles.curved.RadialAlignment Center;
    property public androidx.glance.wear.tiles.curved.RadialAlignment Inner;
    property public androidx.glance.wear.tiles.curved.RadialAlignment Outer;
  }

}

package androidx.glance.wear.tiles.state {

  public final class GlanceWearTilesStateKt {
    method public static suspend <T> Object? getWearTileState(android.content.Context context, androidx.glance.state.GlanceStateDefinition<T> definition, androidx.glance.GlanceId glanceId, kotlin.coroutines.Continuation<? super T>);
    method public static suspend <T> Object? updateWearTileState(android.content.Context context, androidx.glance.state.GlanceStateDefinition<T> definition, androidx.glance.GlanceId glanceId, kotlin.jvm.functions.Function2<? super T,? super kotlin.coroutines.Continuation<? super T>,? extends java.lang.Object?> updateState, kotlin.coroutines.Continuation<? super T>);
  }

}

