/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was created using the `create_project.py` script located in the
 * `<AndroidX root>/development/project-creator` directory.
 *
 * Please use that script when creating a new project, rather than copying an existing project and
 * modifying its settings.
 */

import androidx.build.SoftwareType
import androidx.build.PlatformIdentifier
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType
import org.jetbrains.kotlin.konan.target.KonanTarget

plugins {
    id("AndroidXPlugin")
}

androidXMultiplatform {
    def supportedKonanTargets = [
            KonanTarget.ANDROID_ARM32,
            KonanTarget.ANDROID_ARM64,
            KonanTarget.ANDROID_X64,
            KonanTarget.ANDROID_X86,
    ]

    // Define C++ compilation of shared_counter
    def sharedCounterCompilation = createNativeCompilation("sharedCounter") {
        configureEachTarget { nativeCompilation ->
            // add C++ sources
            nativeCompilation.sources.from(fileTree("src/androidMain/cpp/shared"))
            nativeCompilation.freeArgs.addAll("-Wall", "-Werror", "-std=c++17")
            // Konan target android_arm32's clang compiler triple is: arm-unknown-linux-androideabi
            // This maps to an ARM architecture that lacks instructions for lock-free atomics causing
            // compilation failure:
            // error: static assertion failed due to requirement 'std::atomic<unsigned int>::is_always_lock_free': atomic<uint32_t> is not always lock-free
            //     static_assert(std::atomic<uint32_t>::is_always_lock_free,
            // Adding to the compiler that Android's architecture for arm_32 is armv7a fixes the compilation
            if (nativeCompilation.konanTarget == KonanTarget.ANDROID_ARM32.INSTANCE) {
                nativeCompilation.freeArgs.add("-march=armv7-a")
            }
        }
        configureTargets(supportedKonanTargets.collect { it.INSTANCE })
    }


    // Define C++ compilation of JNI
    def jniImplementation = createNativeCompilation("datastore_shared_counter") {
        configureEachTarget { nativeCompilation ->
            // add JNI headers as sources
            nativeCompilation.addJniHeaders()
            // statically include the output of sharedCounter compilation
            nativeCompilation.include(sharedCounterCompilation)
            // add our JNI sources
            nativeCompilation.sources.from(fileTree("src/androidMain/cpp/jni"))
            nativeCompilation.freeArgs.addAll("-Wall", "-Werror", "-std=c++17")
        }
        configureTargets(supportedKonanTargets.collect { it.INSTANCE })
    }

    androidLibrary {
        namespace = "androidx.datastore.core"
        optimization {
            it.consumerKeepRules.publish = true
            it.consumerKeepRules.files.add(new File("proguard-rules.pro"))
        }
        addNativeLibrariesToJniLibs(it, jniImplementation)
    }
    jvm()
    mac()
    linux()
    ios()
    watchos()
    tvos()

    defaultPlatform(PlatformIdentifier.ANDROID)

    sourceSets {
        configureEach {
            languageSettings.optIn("kotlin.RequiresOptIn")
        }

        commonMain {
            dependencies {
                api(libs.kotlinStdlib)
                api(libs.kotlinCoroutinesCore)
                api("androidx.annotation:annotation:1.9.1")
            }
        }

        jvmAndroidMain {
            dependsOn(commonMain)
        }

        androidMain {
            dependsOn(jvmAndroidMain)
        }

        jvmMain {
            dependsOn(jvmAndroidMain)
        }

        commonTest {
            dependencies {
                implementation(libs.kotlinTestCommon)
                implementation(libs.kotlinTestAnnotationsCommon)
                implementation(libs.kotlinCoroutinesTest)
                implementation(libs.okio)
                implementation(project(":datastore:datastore-core-okio"))
                implementation(project(":kruth:kruth"))
                implementation(project(":internal-testutils-datastore"))
            }
        }

        jvmAndroidTest {
            dependsOn(commonTest)
            dependencies {
                implementation(libs.junit)
                implementation(libs.kotlinTest)
                implementation(project(":kruth:kruth"))
                implementation(project(":internal-testutils-datastore"))

                // Workaround bug in 1.8.0, was supposed be fixed in RC2/final, but apparently not.
                implementation(libs.kotlinTestJunit)
            }
        }
        // tests that are run on AndroidUnit and instrumented targets.
        // similar to jvmAndroidTest, except, they don't run on JVM outside Robolectric.
        androidUnitAndInstrumentedTest {
            dependsOn(jvmAndroidTest)
        }

        jvmTest {
            dependsOn(jvmAndroidTest)
        }

        androidUnitTest {
            dependsOn(jvmAndroidTest)
            dependsOn(androidUnitAndInstrumentedTest)
            dependencies {
                implementation(libs.protobufLite)
                implementation(libs.testRules)
                implementation(libs.testRunner)
                implementation(libs.robolectric)
                implementation(libs.testExtJunit)
            }
        }

        androidInstrumentedTest {
            dependsOn(jvmAndroidTest)
            dependsOn(androidUnitAndInstrumentedTest)
            dependencies {
                implementation(libs.truth)
                implementation(project(":internal-testutils-truth"))
                implementation(libs.testRunner)
                implementation(libs.testCore)
                implementation("androidx.lifecycle:lifecycle-service:2.6.1")
                implementation(libs.testExtJunit)

                // Workaround bug in 1.8.0, was supposed be fixed in RC2/final, but apparently not.
                implementation(libs.kotlinTestJunit)
            }
        }

        nativeMain {
            dependsOn(commonMain)
            dependencies {
                implementation(libs.atomicFu)
            }
        }
        nativeTest {
            dependsOn(commonTest)
        }

        targets.configureEach { target ->
            if (target.platformType == KotlinPlatformType.native) {
                target.compilations["main"].defaultSourceSet {
                    dependsOn(nativeMain)
                }
                target.compilations["test"].defaultSourceSet {
                    dependsOn(nativeTest)
                }
            }
        }
    }
}

androidx {
    name = "DataStore Core"
    type = SoftwareType.PUBLISHED_LIBRARY
    inceptionYear = "2020"
    description = "Android DataStore Core - contains the underlying store used by each serialization method"
    legacyDisableKotlinStrictApiMode = true
}
