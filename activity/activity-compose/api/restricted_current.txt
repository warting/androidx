// Signature format: 4.0
package androidx.activity.compose {

  public final class ActivityResultRegistryKt {
    method @androidx.compose.runtime.Composable public static <I, O> androidx.activity.compose.ManagedActivityResultLauncher<I,O> rememberLauncherForActivityResult(androidx.activity.result.contract.ActivityResultContract<I,O> contract, kotlin.jvm.functions.Function1<? super O,kotlin.Unit> onResult);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static <I, O> androidx.activity.compose.ManagedActivityResultLauncher<I!,O!> rememberLauncherForActivityResult(androidx.activity.result.contract.ActivityResultContract<I!,O!>, kotlin.jvm.functions.Function1<? super O!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int);
  }

  public final class BackHandlerKt {
    method @androidx.compose.runtime.Composable public static void BackHandler(optional boolean enabled, kotlin.jvm.functions.Function0<kotlin.Unit> onBack);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void BackHandler(boolean, kotlin.jvm.functions.Function0<kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  public final class ComponentActivityKt {
    method public static void setContent(androidx.activity.ComponentActivity, optional androidx.compose.runtime.CompositionContext? parent, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly @SuppressCompatibility @androidx.compose.runtime.ComposableInferredTarget(scheme="[0[0]]") public static void setContent(androidx.activity.ComponentActivity, androidx.compose.runtime.CompositionContext?, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
  }

  public final class LocalActivityKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<android.app.Activity?> getLocalActivity();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<android.app.Activity?> LocalActivity;
  }

  public final class LocalActivityResultRegistryOwner {
    method @androidx.compose.runtime.Composable public androidx.activity.result.ActivityResultRegistryOwner? getCurrent();
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.activity.result.ActivityResultRegistryOwner? getCurrent(androidx.compose.runtime.Composer?, int);
    method public infix androidx.compose.runtime.ProvidedValue<androidx.activity.result.ActivityResultRegistryOwner?> provides(androidx.activity.result.ActivityResultRegistryOwner registryOwner);
    property @androidx.compose.runtime.Composable public androidx.activity.result.ActivityResultRegistryOwner? current;
    field public static final androidx.activity.compose.LocalActivityResultRegistryOwner INSTANCE;
  }

  public final class LocalFullyDrawnReporterOwner {
    method @androidx.compose.runtime.Composable public androidx.activity.FullyDrawnReporterOwner? getCurrent();
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.activity.FullyDrawnReporterOwner? getCurrent(androidx.compose.runtime.Composer?, int);
    method public infix androidx.compose.runtime.ProvidedValue<androidx.activity.FullyDrawnReporterOwner?> provides(androidx.activity.FullyDrawnReporterOwner fullyDrawnReporterOwner);
    property @androidx.compose.runtime.Composable public androidx.activity.FullyDrawnReporterOwner? current;
    field public static final androidx.activity.compose.LocalFullyDrawnReporterOwner INSTANCE;
  }

  public final class LocalOnBackPressedDispatcherOwner {
    method @androidx.compose.runtime.Composable public androidx.activity.OnBackPressedDispatcherOwner? getCurrent();
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.activity.OnBackPressedDispatcherOwner? getCurrent(androidx.compose.runtime.Composer?, int);
    method public infix androidx.compose.runtime.ProvidedValue<androidx.activity.OnBackPressedDispatcherOwner?> provides(androidx.activity.OnBackPressedDispatcherOwner dispatcherOwner);
    property @androidx.compose.runtime.Composable public androidx.activity.OnBackPressedDispatcherOwner? current;
    field public static final androidx.activity.compose.LocalOnBackPressedDispatcherOwner INSTANCE;
  }

  public final class ManagedActivityResultLauncher<I, O> extends androidx.activity.result.ActivityResultLauncher<I> {
    method public androidx.activity.result.contract.ActivityResultContract<I,O> getContract();
    method public void launch(I input, androidx.core.app.ActivityOptionsCompat? options);
    method @Deprecated public void unregister();
    property public androidx.activity.result.contract.ActivityResultContract<I,O> contract;
  }

  public final class PredictiveBackHandlerKt {
    method @androidx.compose.runtime.Composable public static void PredictiveBackHandler(optional boolean enabled, kotlin.jvm.functions.Function2<kotlinx.coroutines.flow.Flow<androidx.activity.BackEventCompat>,? super kotlin.coroutines.Continuation<kotlin.Unit>,? extends java.lang.Object?> onBack);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void PredictiveBackHandler(boolean, kotlin.jvm.functions.Function2<kotlinx.coroutines.flow.Flow<androidx.activity.BackEventCompat!>!,? super kotlin.coroutines.Continuation<kotlin.Unit!>!,? extends java.lang.Object!>, androidx.compose.runtime.Composer?, int, int);
  }

  public final class ReportDrawnKt {
    method @androidx.compose.runtime.Composable public static void ReportDrawn();
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void ReportDrawn(androidx.compose.runtime.Composer?, int);
    method @androidx.compose.runtime.Composable public static void ReportDrawnAfter(kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void ReportDrawnAfter(kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super kotlin.Unit!>!,? extends java.lang.Object!>, androidx.compose.runtime.Composer?, int);
    method @androidx.compose.runtime.Composable public static void ReportDrawnWhen(kotlin.jvm.functions.Function0<java.lang.Boolean> predicate);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void ReportDrawnWhen(kotlin.jvm.functions.Function0<java.lang.Boolean!>, androidx.compose.runtime.Composer?, int);
  }

}

