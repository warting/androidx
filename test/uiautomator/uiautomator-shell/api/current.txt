// Signature format: 4.0
package androidx.test.shell {

  public final class Shell {
    method public androidx.test.shell.command.ApplicationCommands application(String packageName);
    method public androidx.test.shell.Shell.CommandOutput command(String command);
    method public androidx.test.shell.command.PermissionCommands permission(String packageName);
    method public androidx.test.shell.command.ProcessCommands process();
    method public androidx.test.shell.command.RecorderCommands recorder();
    method public androidx.test.shell.command.ScreenCommands screen();
    method public void setShellProcessFactory(kotlin.jvm.functions.Function0<androidx.test.shell.ShellProcess> factory);
    method public androidx.test.shell.command.WifiCommands wifi();
    field public static final androidx.test.shell.Shell INSTANCE;
  }

  public static final class Shell.CommandOutput {
    ctor public Shell.CommandOutput(String command, androidx.test.shell.ShellProcess shellProcess);
    method public String getStdErr();
    method public java.io.InputStream getStdErrStream();
    method public String getStdOut();
    method public java.io.InputStream getStdOutStream();
    method public boolean isRunning();
    property public String stdErr;
    property public java.io.InputStream stdErrStream;
    property public String stdOut;
    property public java.io.InputStream stdOutStream;
  }

  public final class ShellProcess implements java.lang.AutoCloseable {
    method public void close();
    method public static androidx.test.shell.ShellProcess create();
    method public static androidx.test.shell.ShellProcess create(optional int baseTcpPort);
    method public static androidx.test.shell.ShellProcess create(optional int baseTcpPort, optional int connectToNativeProcessTimeoutMs);
    method public static androidx.test.shell.ShellProcess create(optional int baseTcpPort, optional int connectToNativeProcessTimeoutMs, optional boolean nativeLogs);
    method public java.io.InputStream getStdErr();
    method public java.io.OutputStream getStdIn();
    method public java.io.InputStream getStdOut();
    method public boolean isClosed();
    method public void writeLine(String string);
    property public java.io.InputStream stdErr;
    property public java.io.OutputStream stdIn;
    property public java.io.InputStream stdOut;
    field public static final androidx.test.shell.ShellProcess.Companion Companion;
  }

  public static final class ShellProcess.Companion {
    method public androidx.test.shell.ShellProcess create();
    method public androidx.test.shell.ShellProcess create(optional int baseTcpPort);
    method public androidx.test.shell.ShellProcess create(optional int baseTcpPort, optional int connectToNativeProcessTimeoutMs);
    method public androidx.test.shell.ShellProcess create(optional int baseTcpPort, optional int connectToNativeProcessTimeoutMs, optional boolean nativeLogs);
  }

}

package androidx.test.shell.command {

  public final class ApplicationCommands {
    method public void clearAppData();
    method public void startApp();
    method public void stopApp();
  }

  public final class PermissionCommands {
    method public void grant(java.lang.String... permissions);
    method public void revoke(java.lang.String... permissions);
  }

  public final class ProcessCommands {
    method public int getPid(String processName);
    method public boolean isProcessAlive(int pid);
    method public void killPid(int pid);
    method public void killPid(int pid, optional String signal);
    method public java.util.List<androidx.test.shell.command.ProcessPid> processGrep(String processName);
  }

  public final class ProcessPid {
    ctor public ProcessPid(String processName, int pid);
    method public int getPid();
    method public String getProcessName();
    property public int pid;
    property public String processName;
  }

  public final class RecorderCommands {
    method public androidx.test.shell.command.Recording start(java.io.File outputFile);
    method public androidx.test.shell.command.Recording start(java.io.File outputFile, optional String? screenSizePixel);
    method public androidx.test.shell.command.Recording start(java.io.File outputFile, optional String? screenSizePixel, optional @IntRange(from=0L) int bitRateMb);
    method public androidx.test.shell.command.Recording start(java.io.File outputFile, optional String? screenSizePixel, optional @IntRange(from=0L) int bitRateMb, optional @IntRange(from=0L) long timeLimitSeconds);
  }

  public final class Recording implements java.lang.AutoCloseable {
    ctor public Recording(androidx.test.shell.command.ProcessCommands process, androidx.test.shell.Shell.CommandOutput commandOutput, long timeLimitSeconds, int pid);
    method public boolean await();
    method public boolean await(optional long timeoutSeconds);
    method public void close();
    method public int getPid();
    method public boolean isRunning();
    property public int pid;
  }

  public final class ScreenCommands {
    method public boolean isKeyboardVisible();
    method public String resumedActivityName();
  }

  public final class WifiCommands {
    method public boolean isEnabled();
    method public void turnOff();
    method public void turnOn();
  }

}

