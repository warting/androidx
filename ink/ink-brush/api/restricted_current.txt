// Signature format: 4.0
package androidx.ink.brush {

  public final class Brush {
    ctor public Brush(androidx.ink.brush.BrushFamily family, @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) float size, @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) float epsilon);
    method public static androidx.ink.brush.Brush.Builder builder();
    method public androidx.ink.brush.Brush copy();
    method public androidx.ink.brush.Brush copy(optional androidx.ink.brush.BrushFamily family);
    method public androidx.ink.brush.Brush copy(optional androidx.ink.brush.BrushFamily family, optional @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) float size);
    method public androidx.ink.brush.Brush copy(optional androidx.ink.brush.BrushFamily family, optional @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) float size, optional @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) float epsilon);
    method public androidx.ink.brush.Brush copyWithColorIntArgb(@ColorInt int colorIntArgb);
    method public androidx.ink.brush.Brush copyWithColorIntArgb(@ColorInt int colorIntArgb, optional androidx.ink.brush.BrushFamily family);
    method public androidx.ink.brush.Brush copyWithColorIntArgb(@ColorInt int colorIntArgb, optional androidx.ink.brush.BrushFamily family, optional @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) float size);
    method public androidx.ink.brush.Brush copyWithColorIntArgb(@ColorInt int colorIntArgb, optional androidx.ink.brush.BrushFamily family, optional @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) float size, optional @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) float epsilon);
    method public androidx.ink.brush.Brush copyWithColorLong(@ColorLong long colorLong);
    method public androidx.ink.brush.Brush copyWithColorLong(@ColorLong long colorLong, optional androidx.ink.brush.BrushFamily family);
    method public androidx.ink.brush.Brush copyWithColorLong(@ColorLong long colorLong, optional androidx.ink.brush.BrushFamily family, optional @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) float size);
    method public androidx.ink.brush.Brush copyWithColorLong(@ColorLong long colorLong, optional androidx.ink.brush.BrushFamily family, optional @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) float size, optional @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) float epsilon);
    method public static androidx.ink.brush.Brush createWithColorIntArgb(androidx.ink.brush.BrushFamily family, @ColorInt int colorIntArgb, float size, float epsilon);
    method public static androidx.ink.brush.Brush createWithColorLong(androidx.ink.brush.BrushFamily family, @ColorLong long colorLong, float size, float epsilon);
    method protected void finalize();
    method @ColorInt public int getColorIntArgb();
    method @ColorLong public long getColorLong();
    method @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) public float getEpsilon();
    method public androidx.ink.brush.BrushFamily getFamily();
    method @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) public float getSize();
    method public androidx.ink.brush.Brush.Builder toBuilder();
    property @ColorInt public int colorIntArgb;
    property @ColorLong public long colorLong;
    property @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) public float epsilon;
    property public androidx.ink.brush.BrushFamily family;
    property @FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) public float size;
    field public static final androidx.ink.brush.Brush.Companion Companion;
  }

  public static final class Brush.Builder {
    ctor public Brush.Builder();
    method public androidx.ink.brush.Brush build();
    method public androidx.ink.brush.Brush.Builder setColorIntArgb(@ColorInt int colorIntArgb);
    method public androidx.ink.brush.Brush.Builder setColorLong(@ColorLong long colorLong);
    method public androidx.ink.brush.Brush.Builder setEpsilon(@FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) float epsilon);
    method public androidx.ink.brush.Brush.Builder setFamily(androidx.ink.brush.BrushFamily family);
    method public androidx.ink.brush.Brush.Builder setSize(@FloatRange(from=0.0, fromInclusive=false, to=kotlin.jvm.internal.DoubleCompanionObject.POSITIVE_INFINITY, toInclusive=false) float size);
  }

  public static final class Brush.Companion {
    method public androidx.ink.brush.Brush.Builder builder();
    method public androidx.ink.brush.Brush createWithColorIntArgb(androidx.ink.brush.BrushFamily family, @ColorInt int colorIntArgb, float size, float epsilon);
    method public androidx.ink.brush.Brush createWithColorLong(androidx.ink.brush.BrushFamily family, @ColorLong long colorLong, float size, float epsilon);
  }

  public final class BrushFamily {
    method protected void finalize();
    field public static final androidx.ink.brush.BrushFamily.Companion Companion;
  }

  public static final class BrushFamily.Companion {
  }

  public final class BrushUtil {
    method @CheckResult @RequiresApi(android.os.Build.VERSION_CODES.O) public static androidx.ink.brush.Brush copyWithAndroidColor(androidx.ink.brush.Brush, android.graphics.Color color, optional androidx.ink.brush.BrushFamily family, optional float size, optional float epsilon);
    method @CheckResult @RequiresApi(android.os.Build.VERSION_CODES.O) public static android.graphics.Color createAndroidColor(androidx.ink.brush.Brush);
    method @CheckResult @RequiresApi(android.os.Build.VERSION_CODES.O) public static androidx.ink.brush.Brush createWithAndroidColor(androidx.ink.brush.Brush.Companion, androidx.ink.brush.BrushFamily family, android.graphics.Color color, float size, float epsilon);
    method @CheckResult @RequiresApi(android.os.Build.VERSION_CODES.O) public static androidx.ink.brush.Brush createWithAndroidColor(androidx.ink.brush.BrushFamily family, android.graphics.Color color, float size, float epsilon);
    method @CheckResult @RequiresApi(android.os.Build.VERSION_CODES.O) public static androidx.ink.brush.Brush.Builder setAndroidColor(androidx.ink.brush.Brush.Builder, android.graphics.Color color);
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(level=kotlin.RequiresOptIn.Level.ERROR) @kotlin.annotation.MustBeDocumented @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.CLASS, kotlin.annotation.AnnotationTarget.ANNOTATION_CLASS, kotlin.annotation.AnnotationTarget.PROPERTY, kotlin.annotation.AnnotationTarget.FIELD, kotlin.annotation.AnnotationTarget.LOCAL_VARIABLE, kotlin.annotation.AnnotationTarget.VALUE_PARAMETER, kotlin.annotation.AnnotationTarget.CONSTRUCTOR, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.PROPERTY_SETTER, kotlin.annotation.AnnotationTarget.TYPEALIAS}) public @interface ExperimentalInkCustomBrushApi {
  }

  public final class InputToolType {
    property public int value;
    field public static final androidx.ink.brush.InputToolType.Companion Companion;
    field public static final androidx.ink.brush.InputToolType MOUSE;
    field public static final androidx.ink.brush.InputToolType STYLUS;
    field public static final androidx.ink.brush.InputToolType TOUCH;
    field public static final androidx.ink.brush.InputToolType UNKNOWN;
  }

  public static final class InputToolType.Companion {
    property public androidx.ink.brush.InputToolType MOUSE;
    property public androidx.ink.brush.InputToolType STYLUS;
    property public androidx.ink.brush.InputToolType TOUCH;
    property public androidx.ink.brush.InputToolType UNKNOWN;
  }

  public final class StockBrushes {
    method public static androidx.ink.brush.BrushFamily getDashedLineLatest();
    method public static androidx.ink.brush.BrushFamily getDashedLineV1();
    method public static androidx.ink.brush.BrushFamily getHighlighterLatest();
    method public static androidx.ink.brush.BrushFamily getHighlighterV1();
    method public static androidx.ink.brush.BrushFamily getMarkerLatest();
    method public static androidx.ink.brush.BrushFamily getMarkerV1();
    method public static androidx.ink.brush.BrushFamily getPressurePenLatest();
    method public static androidx.ink.brush.BrushFamily getPressurePenV1();
    property public static androidx.ink.brush.BrushFamily dashedLineLatest;
    property public static androidx.ink.brush.BrushFamily dashedLineV1;
    property public static androidx.ink.brush.BrushFamily highlighterLatest;
    property public static androidx.ink.brush.BrushFamily highlighterV1;
    property public static androidx.ink.brush.BrushFamily markerLatest;
    property public static androidx.ink.brush.BrushFamily markerV1;
    property public static androidx.ink.brush.BrushFamily pressurePenLatest;
    property public static androidx.ink.brush.BrushFamily pressurePenV1;
    field public static final androidx.ink.brush.StockBrushes INSTANCE;
  }

  @SuppressCompatibility @androidx.ink.brush.ExperimentalInkCustomBrushApi public fun interface TextureBitmapStore {
    method public operator android.graphics.Bitmap? get(String clientTextureId);
  }

}

