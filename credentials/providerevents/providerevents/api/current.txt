// Signature format: 4.0
package androidx.credentials.providerevents {

  public interface CredentialEventsProvider {
    method public android.os.IBinder? getStubImplementation(androidx.credentials.providerevents.service.CredentialProviderEventsService service);
    field public static final androidx.credentials.providerevents.CredentialEventsProvider.Companion Companion;
    field public static final String EVENTS_SERVICE_PROVIDER_KEY = "androidx.credentials.providerevents.service.EVENTS_SERVICE_PROVIDER_KEY";
  }

  public static final class CredentialEventsProvider.Companion {
    property public static String EVENTS_SERVICE_PROVIDER_KEY;
    field public static final String EVENTS_SERVICE_PROVIDER_KEY = "androidx.credentials.providerevents.service.EVENTS_SERVICE_PROVIDER_KEY";
  }

  public interface DeviceSetupProvider {
    method public android.os.IBinder? getStubImplementation(androidx.credentials.providerevents.service.DeviceSetupService service);
    field public static final androidx.credentials.providerevents.DeviceSetupProvider.Companion Companion;
    field public static final String DEVICE_SETUP_PROVIDER_KEY = "androidx.credentials.providerevents.service.DEVICE_SETUP_PROVIDER_KEY";
  }

  public static final class DeviceSetupProvider.Companion {
    property public static String DEVICE_SETUP_PROVIDER_KEY;
    field public static final String DEVICE_SETUP_PROVIDER_KEY = "androidx.credentials.providerevents.service.DEVICE_SETUP_PROVIDER_KEY";
  }

}

package androidx.credentials.providerevents.exception {

  public abstract class ExportCredentialsException extends java.lang.Exception {
  }

  public final class ExportCredentialsInvalidJsonException extends androidx.credentials.providerevents.exception.ExportCredentialsException {
    ctor public ExportCredentialsInvalidJsonException();
    ctor public ExportCredentialsInvalidJsonException(optional CharSequence? errorMessage);
  }

  public final class ExportCredentialsSystemErrorException extends androidx.credentials.providerevents.exception.ExportCredentialsException {
    ctor public ExportCredentialsSystemErrorException();
    ctor public ExportCredentialsSystemErrorException(optional CharSequence? errorMessage);
  }

  public final class ExportCredentialsUnknownCallerException extends androidx.credentials.providerevents.exception.ExportCredentialsException {
    ctor public ExportCredentialsUnknownCallerException();
    ctor public ExportCredentialsUnknownCallerException(optional CharSequence? errorMessage);
  }

  public final class ExportCredentialsUnknownErrorException extends androidx.credentials.providerevents.exception.ExportCredentialsException {
    ctor public ExportCredentialsUnknownErrorException();
    ctor public ExportCredentialsUnknownErrorException(optional CharSequence? errorMessage);
  }

  public abstract class GetCredentialTransferCapabilitiesException extends java.lang.Exception {
  }

  public final class GetCredentialTransferCapabilitiesSystemErrorException extends androidx.credentials.providerevents.exception.GetCredentialTransferCapabilitiesException {
    ctor public GetCredentialTransferCapabilitiesSystemErrorException();
    ctor public GetCredentialTransferCapabilitiesSystemErrorException(optional CharSequence? errorMessage);
  }

  public final class GetCredentialTransferCapabilitiesUnknownCallerException extends androidx.credentials.providerevents.exception.GetCredentialTransferCapabilitiesException {
    ctor public GetCredentialTransferCapabilitiesUnknownCallerException();
    ctor public GetCredentialTransferCapabilitiesUnknownCallerException(optional CharSequence? errorMessage);
  }

  public final class GetCredentialTransferCapabilitiesUnknownErrorException extends androidx.credentials.providerevents.exception.GetCredentialTransferCapabilitiesException {
    ctor public GetCredentialTransferCapabilitiesUnknownErrorException();
    ctor public GetCredentialTransferCapabilitiesUnknownErrorException(optional CharSequence? errorMessage);
  }

  public abstract class ImportCredentialsException extends java.lang.Exception {
  }

  public final class ImportCredentialsInvalidJsonException extends androidx.credentials.providerevents.exception.ImportCredentialsException {
    ctor public ImportCredentialsInvalidJsonException();
    ctor public ImportCredentialsInvalidJsonException(optional CharSequence? errorMessage);
  }

  public final class ImportCredentialsSystemErrorException extends androidx.credentials.providerevents.exception.ImportCredentialsException {
    ctor public ImportCredentialsSystemErrorException();
    ctor public ImportCredentialsSystemErrorException(optional CharSequence? errorMessage);
  }

  public final class ImportCredentialsUnknownCallerException extends androidx.credentials.providerevents.exception.ImportCredentialsException {
    ctor public ImportCredentialsUnknownCallerException();
    ctor public ImportCredentialsUnknownCallerException(optional CharSequence? errorMessage);
  }

  public final class ImportCredentialsUnknownErrorException extends androidx.credentials.providerevents.exception.ImportCredentialsException {
    ctor public ImportCredentialsUnknownErrorException();
    ctor public ImportCredentialsUnknownErrorException(optional CharSequence? errorMessage);
  }

}

package androidx.credentials.providerevents.service {

  public abstract class CredentialProviderEventsService extends android.app.Service {
    ctor public CredentialProviderEventsService();
    method public android.os.IBinder? onBind(android.content.Intent? intent);
    method public void onCreateCredentialRequest(androidx.credentials.provider.ProviderCreateCredentialRequest request, android.os.CancellationSignal cancellationSignal, androidx.core.os.OutcomeReceiverCompat<androidx.credentials.CreateCredentialResponse,androidx.credentials.exceptions.CreateCredentialException> callback);
    method public void onSignalCredentialStateRequest(androidx.credentials.providerevents.signal.ProviderSignalCredentialStateRequest request, androidx.credentials.providerevents.signal.ProviderSignalCredentialStateCallback callback);
  }

  public abstract class DeviceSetupService extends android.app.Service {
    ctor public DeviceSetupService();
    method public final android.os.IBinder? onBind(android.content.Intent? intent);
    method public abstract void onExportCredentialsRequest(androidx.credentials.providerevents.transfer.ExportCredentialsRequest request, androidx.credentials.provider.CallingAppInfo callingAppInfo, androidx.core.os.OutcomeReceiverCompat<androidx.credentials.providerevents.transfer.ExportCredentialsResponse,androidx.credentials.providerevents.exception.ExportCredentialsException> callback);
    method public abstract void onGetCredentialTransferCapabilities(androidx.credentials.providerevents.transfer.CredentialTransferCapabilitiesRequest request, androidx.credentials.provider.CallingAppInfo callingAppInfo, androidx.core.os.OutcomeReceiverCompat<androidx.credentials.providerevents.transfer.CredentialTransferCapabilities,androidx.credentials.providerevents.exception.GetCredentialTransferCapabilitiesException> callback);
    method public abstract void onImportCredentialsRequest(androidx.credentials.providerevents.transfer.ImportCredentialsRequest request, androidx.credentials.provider.CallingAppInfo callingAppInfo, androidx.core.os.OutcomeReceiverCompat<androidx.credentials.providerevents.transfer.ImportCredentialsResponse,androidx.credentials.providerevents.exception.ImportCredentialsException> callback);
  }

}

package androidx.credentials.providerevents.signal {

  public interface ProviderSignalCredentialStateCallback {
    method public void onSignalConsumed();
  }

  public final class ProviderSignalCredentialStateRequest {
    ctor public ProviderSignalCredentialStateRequest(androidx.credentials.SignalCredentialStateRequest callingRequest, androidx.credentials.provider.CallingAppInfo callingAppInfo);
    method public androidx.credentials.provider.CallingAppInfo getCallingAppInfo();
    method public androidx.credentials.SignalCredentialStateRequest getCallingRequest();
    property public androidx.credentials.provider.CallingAppInfo callingAppInfo;
    property public androidx.credentials.SignalCredentialStateRequest callingRequest;
  }

}

package androidx.credentials.providerevents.transfer {

  public final class CredentialTransferCapabilities {
    ctor public CredentialTransferCapabilities(int totalNumCredentials, int numPasswords, int numPublicKeyCredentials, long totalSizeBytes);
    method public int getNumPasswords();
    method public int getNumPublicKeyCredentials();
    method public int getTotalNumCredentials();
    method public long getTotalSizeBytes();
    property public int numPasswords;
    property public int numPublicKeyCredentials;
    property public int totalNumCredentials;
    property public long totalSizeBytes;
    field public static final androidx.credentials.providerevents.transfer.CredentialTransferCapabilities.Companion Companion;
  }

  public static final class CredentialTransferCapabilities.Companion {
  }

  public final class CredentialTransferCapabilitiesRequest {
    ctor public CredentialTransferCapabilitiesRequest();
  }

  public final class ExportCredentialsRequest {
    ctor public ExportCredentialsRequest(String credentialsJson);
    method public String getCredentialsJson();
    property public String credentialsJson;
  }

  public final class ExportCredentialsResponse {
    ctor public ExportCredentialsResponse(int numSuccess, int numFailure, int numIgnored);
    method public int getNumFailure();
    method public int getNumIgnored();
    method public int getNumSuccess();
    method public static android.os.Bundle toBundle(androidx.credentials.providerevents.transfer.ExportCredentialsResponse response);
    property public int numFailure;
    property public int numIgnored;
    property public int numSuccess;
    field public static final androidx.credentials.providerevents.transfer.ExportCredentialsResponse.Companion Companion;
  }

  public static final class ExportCredentialsResponse.Companion {
    method public android.os.Bundle toBundle(androidx.credentials.providerevents.transfer.ExportCredentialsResponse response);
  }

  public final class ImportCredentialsRequest {
    ctor public ImportCredentialsRequest(String requestJson);
    method public String getRequestJson();
    property public String requestJson;
  }

  public final class ImportCredentialsResponse {
    ctor public ImportCredentialsResponse(String responseJson);
    method public String getResponseJson();
    method public static android.os.Bundle toBundle(androidx.credentials.providerevents.transfer.ImportCredentialsResponse response);
    property public String responseJson;
    field public static final androidx.credentials.providerevents.transfer.ImportCredentialsResponse.Companion Companion;
  }

  public static final class ImportCredentialsResponse.Companion {
    method public android.os.Bundle toBundle(androidx.credentials.providerevents.transfer.ImportCredentialsResponse response);
  }

}

