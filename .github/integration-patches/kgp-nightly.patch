diff --git a/binarycompatibilityvalidator/binarycompatibilityvalidator/src/main/java/androidx/binarycompatibilityvalidator/BinaryCompatibilityChecker.kt b/binarycompatibilityvalidator/binarycompatibilityvalidator/src/main/java/androidx/binarycompatibilityvalidator/BinaryCompatibilityChecker.kt
index 9165eacb187..fcb57254038 100644
--- a/binarycompatibilityvalidator/binarycompatibilityvalidator/src/main/java/androidx/binarycompatibilityvalidator/BinaryCompatibilityChecker.kt
+++ b/binarycompatibilityvalidator/binarycompatibilityvalidator/src/main/java/androidx/binarycompatibilityvalidator/BinaryCompatibilityChecker.kt
@@ -34,6 +34,7 @@ import org.jetbrains.kotlin.library.abi.AbiTypeArgument.StarProjection
 import org.jetbrains.kotlin.library.abi.AbiTypeArgument.TypeProjection
 import org.jetbrains.kotlin.library.abi.AbiTypeParameter
 import org.jetbrains.kotlin.library.abi.AbiValueParameter
+import org.jetbrains.kotlin.library.abi.AbiValueParameterKind
 import org.jetbrains.kotlin.library.abi.ExperimentalLibraryAbiReader
 import org.jetbrains.kotlin.library.abi.LibraryAbi

@@ -269,18 +270,18 @@ class BinaryCompatibilityChecker(
                     "$qualifiedName"
             )
         }
-        if (hasExtensionReceiverParameter != otherFunction.hasExtensionReceiverParameter) {
+        if (hasExtensionReceiverParameter() != otherFunction.hasExtensionReceiverParameter()) {
             errors.add(
                 "hasExtensionReceiverParameter changed from " +
-                    "${otherFunction.hasExtensionReceiverParameter} to " +
-                    "$hasExtensionReceiverParameter for $qualifiedName"
+                    "${otherFunction.hasExtensionReceiverParameter()} to " +
+                    "${hasExtensionReceiverParameter()} for $qualifiedName"
             )
         }
-        if (contextReceiverParametersCount != otherFunction.contextReceiverParametersCount) {
+        if (contextReceiverParametersCount() != otherFunction.contextReceiverParametersCount()) {
             errors.add(
                 "contextReceiverParametersCount changed from " +
-                    "${otherFunction.contextReceiverParametersCount} to " +
-                    "$contextReceiverParametersCount for $qualifiedName"
+                    "${otherFunction.contextReceiverParametersCount()} to " +
+                    "${contextReceiverParametersCount()} for $qualifiedName"
             )
         }
         returnType.isBinaryCompatibleWith(
@@ -573,14 +574,14 @@ private fun AbiProperty.asTypeString(): String {
     val builder = StringBuilder()
     val getterFunc = getter ?: return qualifiedName.toString()
     val valueParameters = getterFunc.valueParameters.toMutableList()
-    if (getterFunc.contextReceiverParametersCount > 0) {
+    if (getterFunc.contextReceiverParametersCount() > 0) {
         builder.append("context(")
-        repeat(getterFunc.contextReceiverParametersCount) {
+        repeat(getterFunc.contextReceiverParametersCount()) {
             builder.append(valueParameters.removeFirst().type.asString())
         }
         builder.append(") ")
     }
-    if (getterFunc.hasExtensionReceiverParameter) {
+    if (getterFunc.hasExtensionReceiverParameter()) {
         builder.append("(${valueParameters.removeFirst().type.asString()}).")
     }
     builder.append(qualifiedName.toString())
@@ -711,3 +712,9 @@ private fun File.asBaselineErrors(): Set<String> =

 private class DecoratedAbiValueParameter(val index: Int, param: AbiValueParameter) :
     AbiValueParameter by param
+
+fun AbiFunction.hasExtensionReceiverParameter(): Boolean =
+    valueParameters.any { it.kind == AbiValueParameterKind.EXTENSION_RECEIVER }
+
+fun AbiFunction.contextReceiverParametersCount(): Int =
+    valueParameters.count { it.kind == AbiValueParameterKind.CONTEXT }
diff --git a/binarycompatibilityvalidator/binarycompatibilityvalidator/src/main/java/androidx/binarycompatibilityvalidator/KLibDumpParser.kt b/binarycompatibilityvalidator/binarycompatibilityvalidator/src/main/java/androidx/binarycompatibilityvalidator/KLibDumpParser.kt
index eabad2468b6..8b47c8b299f 100644
--- a/binarycompatibilityvalidator/binarycompatibilityvalidator/src/main/java/androidx/binarycompatibilityvalidator/KLibDumpParser.kt
+++ b/binarycompatibilityvalidator/binarycompatibilityvalidator/src/main/java/androidx/binarycompatibilityvalidator/KLibDumpParser.kt
@@ -32,9 +32,11 @@ import org.jetbrains.kotlin.library.abi.AbiProperty
 import org.jetbrains.kotlin.library.abi.AbiQualifiedName
 import org.jetbrains.kotlin.library.abi.AbiSignatureVersion
 import org.jetbrains.kotlin.library.abi.AbiSignatures
+import org.jetbrains.kotlin.library.abi.AbiValueParameterKind
 import org.jetbrains.kotlin.library.abi.ExperimentalLibraryAbiReader
 import org.jetbrains.kotlin.library.abi.LibraryAbi
 import org.jetbrains.kotlin.library.abi.LibraryManifest
+import org.jetbrains.kotlin.library.abi.impl.AbiAnnotationListImpl
 import org.jetbrains.kotlin.library.abi.impl.AbiClassImpl
 import org.jetbrains.kotlin.library.abi.impl.AbiConstructorImpl
 import org.jetbrains.kotlin.library.abi.impl.AbiEnumEntryImpl
@@ -174,7 +176,7 @@ class KlibDumpParser(klibDump: String, private val fileName: String? = null) {
         return AbiClassImpl(
             qualifiedName = abiQualifiedName,
             signatures = signaturesStub,
-            annotations = emptySet(), // annotations aren't part of klib dumps
+            annotations = AbiAnnotationListImpl.EMPTY, // annotations aren't part of klib dumps
             modality = modality,
             kind = kind,
             isInner = isInner,
@@ -227,7 +229,7 @@ class KlibDumpParser(klibDump: String, private val fileName: String? = null) {
         return AbiPropertyImpl(
             qualifiedName = qualifiedName,
             signatures = signaturesStub,
-            annotations = emptySet(), // annotations aren't part of klib dumps
+            annotations = AbiAnnotationListImpl.EMPTY, // annotations aren't part of klib dumps
             modality = modality,
             kind = kind,
             getter = getter,
@@ -248,7 +250,7 @@ class KlibDumpParser(klibDump: String, private val fileName: String? = null) {
         return AbiEnumEntryImpl(
             qualifiedName = qualifiedName,
             signatures = signaturesStub,
-            annotations = emptySet()
+            annotations = AbiAnnotationListImpl.EMPTY
         )
     }

@@ -291,6 +293,7 @@ class KlibDumpParser(klibDump: String, private val fileName: String? = null) {
                 if (null != functionReceiver) {
                     val functionReceiverAsValueParam =
                         AbiValueParameterImpl(
+                            kind = AbiValueParameterKind.REGULAR,
                             type = functionReceiver,
                             isVararg = false,
                             hasDefaultArg = false,
@@ -306,13 +309,13 @@ class KlibDumpParser(klibDump: String, private val fileName: String? = null) {
         return AbiFunctionImpl(
             qualifiedName = abiQualifiedName,
             signatures = signaturesStub,
-            annotations = emptySet(), // annotations aren't part of klib dumps
+            annotations = AbiAnnotationListImpl.EMPTY, // annotations aren't part of klib dumps
             modality = modality,
             isInline = isInline,
             isSuspend = isSuspend,
             typeParameters = typeParams,
-            hasExtensionReceiverParameter = null != functionReceiver,
-            contextReceiverParametersCount = contextParams.size,
+            // hasExtensionReceiverParameter = null != functionReceiver,
+            // contextReceiverParametersCount = 0, // TODO
             valueParameters = allValueParameters,
             returnType = returnType
         )
@@ -334,9 +337,9 @@ class KlibDumpParser(klibDump: String, private val fileName: String? = null) {
         return AbiConstructorImpl(
             qualifiedName = abiQualifiedName,
             signatures = signaturesStub,
-            annotations = emptySet(), // annotations aren't part of klib dumps
+            annotations = AbiAnnotationListImpl.EMPTY, // annotations aren't part of klib dumps
             isInline = false, // TODO
-            contextReceiverParametersCount = 0, // TODO
+            // contextReceiverParametersCount = 0, // TODO
             valueParameters = valueParameters,
         )
     }
diff --git a/binarycompatibilityvalidator/binarycompatibilityvalidator/src/main/java/androidx/binarycompatibilityvalidator/KlibParsingCursorExtensions.kt b/binarycompatibilityvalidator/binarycompatibilityvalidator/src/main/java/androidx/binarycompatibilityvalidator/KlibParsingCursorExtensions.kt
index 069ee2de86e..9a441ffb09f 100644
--- a/binarycompatibilityvalidator/binarycompatibilityvalidator/src/main/java/androidx/binarycompatibilityvalidator/KlibParsingCursorExtensions.kt
+++ b/binarycompatibilityvalidator/binarycompatibilityvalidator/src/main/java/androidx/binarycompatibilityvalidator/KlibParsingCursorExtensions.kt
@@ -31,6 +31,7 @@ import org.jetbrains.kotlin.library.abi.AbiTypeArgument
 import org.jetbrains.kotlin.library.abi.AbiTypeNullability
 import org.jetbrains.kotlin.library.abi.AbiTypeParameter
 import org.jetbrains.kotlin.library.abi.AbiValueParameter
+import org.jetbrains.kotlin.library.abi.AbiValueParameterKind
 import org.jetbrains.kotlin.library.abi.AbiVariance
 import org.jetbrains.kotlin.library.abi.ExperimentalLibraryAbiReader
 import org.jetbrains.kotlin.library.abi.impl.AbiTypeParameterImpl
@@ -283,6 +284,7 @@ internal fun Cursor.parseValueParameter(peek: Boolean = false): AbiValueParamete
     val isVararg = cursor.parseVarargSymbol() != null
     val hasDefaultArg = cursor.parseDefaultArg() != null
     return AbiValueParameterImpl(
+        kind = AbiValueParameterKind.REGULAR,
         type = type,
         isVararg = isVararg,
         hasDefaultArg = hasDefaultArg,
diff --git a/binarycompatibilityvalidator/binarycompatibilityvalidator/src/test/java/androidx/binarycompatibilityvalidator/KLibDumpParserTest.kt b/binarycompatibilityvalidator/binarycompatibilityvalidator/src/test/java/androidx/binarycompatibilityvalidator/KLibDumpParserTest.kt
index b0841da0e02..cfebe84fbfb 100644
--- a/binarycompatibilityvalidator/binarycompatibilityvalidator/src/test/java/androidx/binarycompatibilityvalidator/KLibDumpParserTest.kt
+++ b/binarycompatibilityvalidator/binarycompatibilityvalidator/src/test/java/androidx/binarycompatibilityvalidator/KLibDumpParserTest.kt
@@ -24,6 +24,7 @@ import org.jetbrains.kotlin.library.abi.AbiModality
 import org.jetbrains.kotlin.library.abi.AbiProperty
 import org.jetbrains.kotlin.library.abi.AbiQualifiedName
 import org.jetbrains.kotlin.library.abi.AbiSignatureVersion
+import org.jetbrains.kotlin.library.abi.AbiValueParameterKind
 import org.jetbrains.kotlin.library.abi.ExperimentalLibraryAbiReader
 import org.jetbrains.kotlin.library.abi.LibraryAbi
 import org.junit.Test
@@ -234,7 +235,10 @@ class KlibDumpParserTest {
         val parentQName =
             AbiQualifiedName(AbiCompoundName("androidx.collection"), AbiCompoundName("ObjectList"))
         val parsed = KlibDumpParser(input).parseFunction(parentQName, isGetterOrSetter = true)
-        assertThat(parsed.hasExtensionReceiverParameter).isTrue()
+        assertThat(
+                parsed.valueParameters.any { it.kind == AbiValueParameterKind.EXTENSION_RECEIVER }
+            )
+            .isTrue()
     }

     @Test
@@ -243,7 +247,10 @@ class KlibDumpParserTest {
             "final inline fun <#A: androidx.datastore.core/Closeable, #B: kotlin/Any?> " +
                 "(#A).androidx.datastore.core/use(kotlin/Function1<#A, #B>): #B"
         val parsed = KlibDumpParser(input).parseFunction()
-        assertThat(parsed.hasExtensionReceiverParameter).isTrue()
+        assertThat(
+                parsed.valueParameters.any { it.kind == AbiValueParameterKind.EXTENSION_RECEIVER }
+            )
+            .isTrue()
         assertThat(parsed.typeParameters).hasSize(2)
     }

@@ -320,7 +327,12 @@ class KlibDumpParserTest {
                 .trimIndent()
         val parsed = KlibDumpParser(input).parseProperty()
         assertThat(parsed.getter).isNotNull()
-        assertThat(parsed.getter?.hasExtensionReceiverParameter).isTrue()
+        assertThat(
+                parsed.getter?.valueParameters?.any {
+                    it.kind == AbiValueParameterKind.EXTENSION_RECEIVER
+                }
+            )
+            .isTrue()
     }

     @Test
diff --git a/buildSrc/private/src/main/kotlin/androidx/build/AndroidXMultiplatformExtension.kt b/buildSrc/private/src/main/kotlin/androidx/build/AndroidXMultiplatformExtension.kt
index d91099b9a36..28fac953d91 100644
--- a/buildSrc/private/src/main/kotlin/androidx/build/AndroidXMultiplatformExtension.kt
+++ b/buildSrc/private/src/main/kotlin/androidx/build/AndroidXMultiplatformExtension.kt
@@ -48,7 +48,7 @@ import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinAndroidTarget
 import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeCompilation
 import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget
 import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTargetWithHostTests
-import org.jetbrains.kotlin.gradle.targets.js.binaryen.BinaryenRootExtension
+import org.jetbrains.kotlin.gradle.targets.js.binaryen.BinaryenRootEnvSpec
 import org.jetbrains.kotlin.gradle.targets.js.dsl.KotlinJsTargetDsl
 import org.jetbrains.kotlin.gradle.targets.js.dsl.KotlinWasmTargetDsl
 import org.jetbrains.kotlin.gradle.targets.js.ir.DefaultIncrementalSyncTask
@@ -805,15 +805,17 @@ private fun Project.configureNode() {
     }
 }

+@OptIn(ExperimentalWasmDsl::class)
 private fun Project.configureBinaryen() {
     // https://youtrack.jetbrains.com/issue/KT-74840
-    rootProject.extensions.findByType<BinaryenRootExtension>()?.let { binaryen ->
-        @Suppress("DEPRECATION")
-        binaryen.downloadBaseUrl =
+    rootProject.extensions
+        .findByType(BinaryenRootEnvSpec::class.java)
+        ?.downloadBaseUrl
+        ?.set(
             File(project.getPrebuiltsRoot(), "androidx/javascript-for-kotlin/binaryen")
                 .toURI()
                 .toString()
-    }
+        )
 }

 private fun Project.configureKotlinJsTests() {
diff --git a/buildSrc/private/src/main/kotlin/androidx/build/ListTaskOutputsTask.kt b/buildSrc/private/src/main/kotlin/androidx/build/ListTaskOutputsTask.kt
index 6ae2835dc3d..945ad97ffd2 100644
--- a/buildSrc/private/src/main/kotlin/androidx/build/ListTaskOutputsTask.kt
+++ b/buildSrc/private/src/main/kotlin/androidx/build/ListTaskOutputsTask.kt
@@ -134,6 +134,15 @@ val taskNamesKnownToDuplicateOutputs =
         "kotlinStorePackageLock",
         "kotlinStoreYarnLock",

+        // The following tasks have the same output file:
+        // $OUT_DIR/androidx/build/wasm/yarn.lock
+        "wasmKotlinRestoreYarnLock",
+        "wasmKotlinNpmInstall",
+        "wasmKotlinUpgradePackageLock",
+        "wasmKotlinStorePackageLock",
+        "wasmKotlinUpgradeYarnLock",
+        "wasmKotlinStoreYarnLock",
+
         // The following tasks have the same output configFile file:
         // projectBuildDir/js/packages/projectName-wasm-js/webpack.config.js
         // Remove when https://youtrack.jetbrains.com/issue/KT-70029 / b/361319689 is resolved
@@ -145,7 +154,15 @@ val taskNamesKnownToDuplicateOutputs =
         "jsTestTestDevelopmentExecutableCompileSync",

         // TODO file a bug
+        // $OUT_DIR/.gradle/nodejs/node-v22.13.0-darwin-arm64.hash
         "kotlinNodeJsSetup",
+        "wasmKotlinNodeJsSetup",
+        // $OUT_DIR/.gradle/yarn/yarn-v1.22.17.hash
+        "wasmKotlinYarnSetup",
+        "kotlinYarnSetup",
+
+        // $OUT_DIR/.gradle/binaryen/binaryen-version_122.hash
+        "kotlinBinaryenSetup",
     )

 fun shouldValidateTaskOutput(task: Task): Boolean {
diff --git a/buildSrc/private/src/main/kotlin/androidx/build/clang/KonanBuildService.kt b/buildSrc/private/src/main/kotlin/androidx/build/clang/KonanBuildService.kt
index 982636c35d4..dcfa2608034 100644
--- a/buildSrc/private/src/main/kotlin/androidx/build/clang/KonanBuildService.kt
+++ b/buildSrc/private/src/main/kotlin/androidx/build/clang/KonanBuildService.kt
@@ -150,7 +150,7 @@ abstract class KonanBuildService @Inject constructor(private val execOperations:
                         debug = false,
                         kind = parameters.linkerOutputKind.get(),
                         outputDsymBundle = "unused",
-                        mimallocEnabled = false,
+                        // mimallocEnabled = false,
                         sanitizer = null
                     )
                     .finalLinkCommands()
diff --git a/buildSrc/public/src/main/kotlin/androidx/build/AndroidXConfiguration.kt b/buildSrc/public/src/main/kotlin/androidx/build/AndroidXConfiguration.kt
index 696486a34c3..ac74dc32911 100644
--- a/buildSrc/public/src/main/kotlin/androidx/build/AndroidXConfiguration.kt
+++ b/buildSrc/public/src/main/kotlin/androidx/build/AndroidXConfiguration.kt
@@ -37,6 +37,7 @@ interface AndroidXConfiguration {
     val kotlinBomVersion: Provider<String>
 }

+@Suppress("DEPRECATION")
 enum class KotlinTarget(val apiVersion: KotlinVersion, val catalogVersion: String) {
     KOTLIN_1_8(KotlinVersion.KOTLIN_1_8, "kotlin18"),
     KOTLIN_1_9(KotlinVersion.KOTLIN_1_9, "kotlin19"),
diff --git a/buildSrc/shared.gradle b/buildSrc/shared.gradle
index 85bb1bfa6ac..7e61af93b12 100644
--- a/buildSrc/shared.gradle
+++ b/buildSrc/shared.gradle
@@ -37,7 +37,7 @@ tasks.withType(KotlinCompile).configureEach { task ->
     task.compilerOptions {
         jvmTarget.set(JvmTarget.JVM_17)
         freeCompilerArgs.addAll(
-                "-Werror",
+//                "-Werror",
                 "-Xskip-metadata-version-check",
                 "-Xjdk-release=17",
         )
diff --git a/compose/runtime/runtime/src/commonMain/kotlin/androidx/compose/runtime/internal/ComposableLambda.kt b/compose/runtime/runtime/src/commonMain/kotlin/androidx/compose/runtime/internal/ComposableLambda.kt
index 537335b0cf3..26c0dfdf39c 100644
--- a/compose/runtime/runtime/src/commonMain/kotlin/androidx/compose/runtime/internal/ComposableLambda.kt
+++ b/compose/runtime/runtime/src/commonMain/kotlin/androidx/compose/runtime/internal/ComposableLambda.kt
@@ -15,6 +15,7 @@
  */

 @file:OptIn(InternalComposeApi::class)
+@file:Suppress("EXPECT_ACTUAL_INCOMPATIBILITY")

 package androidx.compose.runtime.internal

diff --git a/room/room-compiler-processing-testing/src/main/java/androidx/room/compiler/processing/util/compiler/TestDefaultOptions.kt b/room/room-compiler-processing-testing/src/main/java/androidx/room/compiler/processing/util/compiler/TestDefaultOptions.kt
index 919bd8ace17..f28cea3ad44 100644
--- a/room/room-compiler-processing-testing/src/main/java/androidx/room/compiler/processing/util/compiler/TestDefaultOptions.kt
+++ b/room/room-compiler-processing-testing/src/main/java/androidx/room/compiler/processing/util/compiler/TestDefaultOptions.kt
@@ -26,6 +26,6 @@ internal object TestDefaultOptions {
     internal val kotlinLanguageVersion = LanguageVersion.KOTLIN_2_0
     internal val kotlinApiVersion = ApiVersion.createByLanguageVersion(kotlinLanguageVersion)
     internal val jvmTarget = JvmTarget.JVM_1_8
-    internal val jvmDefaultMode = JvmDefaultMode.ALL_COMPATIBILITY
+    internal val jvmDefaultMode = JvmDefaultMode.ENABLE
     internal val jvmModuleName = "main"
 }
diff --git a/room/room-compiler-processing-testing/src/main/java/androidx/room/compiler/processing/util/compiler/steps/KaptCompilationStep.kt b/room/room-compiler-processing-testing/src/main/java/androidx/room/compiler/processing/util/compiler/steps/KaptCompilationStep.kt
index 59b0f89630a..68442e04e86 100644
--- a/room/room-compiler-processing-testing/src/main/java/androidx/room/compiler/processing/util/compiler/steps/KaptCompilationStep.kt
+++ b/room/room-compiler-processing-testing/src/main/java/androidx/room/compiler/processing/util/compiler/steps/KaptCompilationStep.kt
@@ -26,9 +26,9 @@ import java.util.Base64
 import javax.annotation.processing.Processor
 import org.jetbrains.kotlin.cli.common.ExitCode
 import org.jetbrains.kotlin.com.intellij.util.PathUtil
+import org.jetbrains.kotlin.kapt.base.AptMode
 import org.jetbrains.kotlin.kapt.cli.CliToolOption
 import org.jetbrains.kotlin.kapt.cli.KaptCliOption
-import org.jetbrains.kotlin.kapt3.base.AptMode

 /** Runs KAPT to run Java annotation processors. */
 internal class KaptCompilationStep(
diff --git a/room/room-compiler/src/main/kotlin/androidx/room/vo/InsertFunction.kt b/room/room-compiler/src/main/kotlin/androidx/room/vo/InsertFunction.kt
index 3a966ff01e5..dcdd96355ac 100644
--- a/room/room-compiler/src/main/kotlin/androidx/room/vo/InsertFunction.kt
+++ b/room/room-compiler/src/main/kotlin/androidx/room/vo/InsertFunction.kt
@@ -23,7 +23,7 @@ import androidx.room.solver.shortcut.binder.InsertOrUpsertFunctionBinder

 class InsertFunction(
     element: XMethodElement,
-    @OnConflictStrategy val onConflict: Int,
+    @param:OnConflictStrategy val onConflict: Int,
     entities: Map<String, ShortcutEntity>,
     returnType: XType,
     parameters: List<ShortcutQueryParameter>,
diff --git a/room/room-compiler/src/main/kotlin/androidx/room/vo/UpdateFunction.kt b/room/room-compiler/src/main/kotlin/androidx/room/vo/UpdateFunction.kt
index fbf3eaaff43..a6a26252d5b 100644
--- a/room/room-compiler/src/main/kotlin/androidx/room/vo/UpdateFunction.kt
+++ b/room/room-compiler/src/main/kotlin/androidx/room/vo/UpdateFunction.kt
@@ -25,5 +25,5 @@ class UpdateFunction(
     entities: Map<String, ShortcutEntity>,
     parameters: List<ShortcutQueryParameter>,
     functionBinder: DeleteOrUpdateFunctionBinder?,
-    @OnConflictStrategy val onConflictStrategy: Int
+    @param:OnConflictStrategy val onConflictStrategy: Int
 ) : DeleteOrUpdateShortcutFunction(element, entities, parameters, functionBinder)
diff --git a/room/room-gradle-plugin/src/main/java/androidx/room/gradle/integration/AndroidPluginIntegration.kt b/room/room-gradle-plugin/src/main/java/androidx/room/gradle/integration/AndroidPluginIntegration.kt
index 0be4bde5cca..2bbb95691a8 100644
--- a/room/room-gradle-plugin/src/main/java/androidx/room/gradle/integration/AndroidPluginIntegration.kt
+++ b/room/room-gradle-plugin/src/main/java/androidx/room/gradle/integration/AndroidPluginIntegration.kt
@@ -194,10 +194,12 @@ internal class AndroidPluginIntegration(private val common: CommonIntegration) {
                     try {
                         // Because of KT-58009, we need to add a `listOf(argProvider)` instead
                         // of `argProvider`.
+                        @Suppress("DEPRECATION")
                         task.annotationProcessorOptionProviders.add(listOf(argProvider))
                     } catch (e: Throwable) {
                         // Once KT-58009 is fixed, adding `listOf(argProvider)` will fail, we will
                         // pass `argProvider` instead, which is the correct way.
+                        @Suppress("DEPRECATION")
                         task.annotationProcessorOptionProviders.add(argProvider)
                     }
                 }
diff --git a/wear/compose/compose-foundation/src/main/java/androidx/wear/compose/foundation/HierarchicalFocus.kt b/wear/compose/compose-foundation/src/main/java/androidx/wear/compose/foundation/HierarchicalFocus.kt
index 9b029f92eea..638cf9c62b1 100644
--- a/wear/compose/compose-foundation/src/main/java/androidx/wear/compose/foundation/HierarchicalFocus.kt
+++ b/wear/compose/compose-foundation/src/main/java/androidx/wear/compose/foundation/HierarchicalFocus.kt
@@ -98,7 +98,7 @@ public fun Modifier.hierarchicalFocusGroup(active: Boolean): Modifier {
  *
  * @sample androidx.wear.compose.foundation.samples.HierarchicalFocusSample
  */
-public fun Modifier.requestFocusOnHierarchyActive() =
+public fun Modifier.requestFocusOnHierarchyActive(): Modifier =
     this.then(
         HierarchicalFocusCoordinatorModifierElement(
             active = true,
