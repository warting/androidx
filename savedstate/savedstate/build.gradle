/**
 * This file was created using the `create_project.py` script located in the
 * `<AndroidX root>/development/project-creator` directory.
 *
 * Please use that script when creating a new project, rather than copying an existing project and
 * modifying its settings.
 */


import androidx.build.SoftwareType
import androidx.build.PlatformIdentifier

plugins {
    id("AndroidXPlugin")
    id("com.android.library")
    alias(libs.plugins.kotlinSerialization)
}

androidXMultiplatform {
    androidTarget()
    desktop()
    ios()
    linux()
    mac()

    defaultPlatform(PlatformIdentifier.ANDROID)

    sourceSets {
        commonMain {
            dependencies {
                api(libs.kotlinStdlib)
                api("androidx.annotation:annotation:1.9.1")
                api(androidx.projectOrArtifact(":lifecycle:lifecycle-common"))
                api(libs.kotlinCoroutinesCore)
                api(libs.kotlinSerializationCore)
            }
        }

        commonTest {
            dependencies {
                implementation(project(":lifecycle:lifecycle-runtime"))
                implementation(project(":kruth:kruth"))
                implementation(libs.kotlinTest)
                implementation(libs.kotlinTestCommon)
                implementation(libs.kotlinTestAnnotationsCommon)
                implementation(libs.kotlinCoroutinesTest)
            }
        }

        jvmMain {
            dependsOn(commonMain)
        }

        jvmTest {
            dependsOn(commonTest)
        }

        androidMain {
            dependsOn(jvmMain)
            dependencies {
                api("androidx.annotation:annotation:1.8.1")
                implementation("androidx.core:core-ktx:1.13.1")
                implementation("androidx.core:core-viewtree:1.0.0")
                api(libs.kotlinStdlib)
            }
        }

        androidUnitTest {
            dependsOn(jvmTest)
            dependencies {
                implementation(libs.robolectric)
            }
        }

        androidInstrumentedTest {
            dependsOn(jvmTest)
            dependencies {
                implementation(project(":lifecycle:lifecycle-runtime"))
                implementation(libs.testExtJunit)
                implementation(libs.testCore)
                implementation(libs.testRunner)
                implementation(libs.testRules)
                implementation(libs.truth)
            }
        }

        nonAndroidMain {
            dependsOn(commonMain)
        }

        nonAndroidTest {
            dependsOn(commonTest)
        }

        desktopMain {
            dependsOn(jvmMain)
            dependsOn(nonAndroidMain)
        }

        desktopTest {
            dependsOn(jvmTest)
            dependsOn(nonAndroidTest)
        }

        nativeMain {
            dependsOn(commonMain)
            dependsOn(nonAndroidMain)
        }

        nativeTest {
            dependsOn(commonTest)
            dependsOn(nonAndroidTest)
        }

        darwinMain {
            dependsOn(nativeMain)
        }

        darwinTest {
            dependsOn(nativeTest)
        }

        linuxMain {
            dependsOn(nativeMain)
        }

        linuxTest {
            dependsOn(nativeTest)
        }

        targets.configureEach { target ->
            if (target.platformType == org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType.native) {
                target.compilations["main"].defaultSourceSet {
                    def konanTargetFamily = target.konanTarget.family
                    if (konanTargetFamily == org.jetbrains.kotlin.konan.target.Family.OSX || konanTargetFamily == org.jetbrains.kotlin.konan.target.Family.IOS) {
                        dependsOn(darwinMain)
                    } else if (konanTargetFamily == org.jetbrains.kotlin.konan.target.Family.LINUX) {
                        dependsOn(linuxMain)
                    } else {
                        throw new GradleException("unknown native target ${target}")
                    }
                }
                target.compilations["test"].defaultSourceSet {
                    def konanTargetFamily = target.konanTarget.family
                    if (konanTargetFamily == org.jetbrains.kotlin.konan.target.Family.OSX || konanTargetFamily == org.jetbrains.kotlin.konan.target.Family.IOS) {
                        dependsOn(darwinTest)
                    } else if (konanTargetFamily == org.jetbrains.kotlin.konan.target.Family.LINUX) {
                        dependsOn(linuxTest)
                    } else {
                        throw new GradleException("unknown native target ${target}")
                    }
                }
            }
        }
    }
}

android {
    buildTypes.configureEach {
        consumerProguardFiles("proguard-rules.pro")
    }
    namespace = "androidx.savedstate"
    experimentalProperties["android.lint.useK2Uast"] = false // TODO(b/345531033)
}

androidx {
    name = "Saved State"
    type = SoftwareType.PUBLISHED_LIBRARY
    samples(project(":savedstate:savedstate-samples"))
    inceptionYear = "2018"
    description = "Android Lifecycle Saved State"
    metalavaK2UastEnabled = false
}
