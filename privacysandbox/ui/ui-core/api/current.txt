// Signature format: 4.0
package androidx.privacysandbox.ui.core {

  @SuppressCompatibility @androidx.privacysandbox.ui.core.ExperimentalFeatures.DelegatingAdapterApi public final class DelegatingSandboxedUiAdapter implements androidx.privacysandbox.ui.core.SandboxedUiAdapter {
    ctor public DelegatingSandboxedUiAdapter(android.os.Bundle delegate);
    method public void addDelegateChangeListener(androidx.privacysandbox.ui.core.DelegatingSandboxedUiAdapter.DelegateChangeListener listener);
    method public android.os.Bundle getDelegate();
    method public void openSession(android.content.Context context, androidx.privacysandbox.ui.core.SessionData sessionData, int initialWidth, int initialHeight, boolean isZOrderOnTop, java.util.concurrent.Executor clientExecutor, androidx.privacysandbox.ui.core.SandboxedUiAdapter.SessionClient client);
    method public void removeDelegateChangeListener(androidx.privacysandbox.ui.core.DelegatingSandboxedUiAdapter.DelegateChangeListener listener);
    method public suspend Object? updateDelegate(android.os.Bundle delegate, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public static interface DelegatingSandboxedUiAdapter.DelegateChangeListener {
    method public default suspend Object? onDelegateChanged(android.os.Bundle delegate, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public sealed interface ExperimentalFeatures {
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This API is experimental. It may be changed in the future without notice.", level=kotlin.RequiresOptIn.Level.WARNING) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public static @interface ExperimentalFeatures.DelegatingAdapterApi {
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This API is experimental. It may be changed in the future without notice.", level=kotlin.RequiresOptIn.Level.WARNING) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public static @interface ExperimentalFeatures.SharedUiPresentationApi {
  }

  public final class SandboxedSdkViewUiInfo {
    ctor public SandboxedSdkViewUiInfo(int uiContainerWidth, int uiContainerHeight, android.graphics.Rect onScreenGeometry, float uiContainerOpacityHint, java.util.List<android.graphics.Rect> obstructedGeometry);
    method public static androidx.privacysandbox.ui.core.SandboxedSdkViewUiInfo fromBundle(android.os.Bundle bundle);
    method public java.util.List<android.graphics.Rect> getObstructedGeometry();
    method public android.graphics.Rect getOnScreenGeometry();
    method public int getUiContainerHeight();
    method public float getUiContainerOpacityHint();
    method public int getUiContainerWidth();
    method public static android.os.Bundle toBundle(androidx.privacysandbox.ui.core.SandboxedSdkViewUiInfo sandboxedSdkViewUiInfo);
    property public java.util.List<android.graphics.Rect> obstructedGeometry;
    property public android.graphics.Rect onScreenGeometry;
    property public int uiContainerHeight;
    property public float uiContainerOpacityHint;
    property public int uiContainerWidth;
    field public static final androidx.privacysandbox.ui.core.SandboxedSdkViewUiInfo.Companion Companion;
  }

  public static final class SandboxedSdkViewUiInfo.Companion {
    method public androidx.privacysandbox.ui.core.SandboxedSdkViewUiInfo fromBundle(android.os.Bundle bundle);
    method public android.os.Bundle toBundle(androidx.privacysandbox.ui.core.SandboxedSdkViewUiInfo sandboxedSdkViewUiInfo);
  }

  public interface SandboxedUiAdapter {
    method public void openSession(android.content.Context context, androidx.privacysandbox.ui.core.SessionData sessionData, int initialWidth, int initialHeight, boolean isZOrderOnTop, java.util.concurrent.Executor clientExecutor, androidx.privacysandbox.ui.core.SandboxedUiAdapter.SessionClient client);
  }

  public static interface SandboxedUiAdapter.Session extends java.lang.AutoCloseable {
    method public void close();
    method public java.util.Set<java.lang.String> getSignalOptions();
    method public android.view.View getView();
    method public void notifyConfigurationChanged(android.content.res.Configuration configuration);
    method public void notifyResized(int width, int height);
    method public void notifySessionRendered(java.util.Set<java.lang.String> supportedSignalOptions);
    method public void notifyUiChanged(android.os.Bundle uiContainerInfo);
    method public void notifyZOrderChanged(boolean isZOrderOnTop);
    property public abstract java.util.Set<java.lang.String> signalOptions;
    property public abstract android.view.View view;
  }

  public static interface SandboxedUiAdapter.SessionClient {
    method public void onResizeRequested(int width, int height);
    method public void onSessionError(Throwable throwable);
    method public void onSessionOpened(androidx.privacysandbox.ui.core.SandboxedUiAdapter.Session session);
  }

  public final class SandboxedUiAdapterSignalOptions {
    ctor public SandboxedUiAdapterSignalOptions();
    field public static final androidx.privacysandbox.ui.core.SandboxedUiAdapterSignalOptions.Companion Companion;
    field public static final String GEOMETRY = "geometry";
    field public static final String OBSTRUCTIONS = "obstructions";
  }

  public static final class SandboxedUiAdapterSignalOptions.Companion {
    property public static String GEOMETRY;
    property public static String OBSTRUCTIONS;
  }

  public final class SessionData {
    ctor public SessionData();
    method public android.window.InputTransferToken? getInputTransferToken();
    method public android.os.IBinder? getWindowInputToken();
    property @RequiresApi(android.os.Build.VERSION_CODES.VANILLA_ICE_CREAM) public android.window.InputTransferToken? inputTransferToken;
    property public android.os.IBinder? windowInputToken;
    field public static final androidx.privacysandbox.ui.core.SessionData.Companion Companion;
  }

  public static final class SessionData.Companion {
  }

  public interface SessionObserver {
    method public void onSessionClosed();
    method public void onSessionOpened(androidx.privacysandbox.ui.core.SessionObserverContext sessionObserverContext);
    method public void onUiContainerChanged(android.os.Bundle uiContainerInfo);
  }

  public final class SessionObserverContext {
    ctor public SessionObserverContext(android.view.View? view, java.util.Set<java.lang.String> supportedSignalOptions);
    method public java.util.Set<java.lang.String> getSupportedSignalOptions();
    method public android.view.View? getView();
    property public java.util.Set<java.lang.String> supportedSignalOptions;
    property public android.view.View? view;
  }

  public interface SessionObserverFactory {
    method public androidx.privacysandbox.ui.core.SessionObserver create();
    method public default java.util.Set<java.lang.String> getSignalOptions();
    property public default java.util.Set<java.lang.String> signalOptions;
  }

  @SuppressCompatibility @androidx.privacysandbox.ui.core.ExperimentalFeatures.SharedUiPresentationApi public interface SharedUiAdapter {
    method public void openSession(java.util.concurrent.Executor clientExecutor, androidx.privacysandbox.ui.core.SharedUiAdapter.SessionClient client);
  }

  public static interface SharedUiAdapter.Session extends java.lang.AutoCloseable {
    method public void close();
  }

  public static interface SharedUiAdapter.SessionClient {
    method public void onSessionError(Throwable throwable);
    method public void onSessionOpened(androidx.privacysandbox.ui.core.SharedUiAdapter.Session session);
  }

}

