// Signature format: 4.0
package androidx.privacysandbox.ads.adservices.adid {

  public final class AdId {
    method public String getAdId();
    method public boolean isLimitAdTrackingEnabled();
    property public String adId;
    property public boolean isLimitAdTrackingEnabled;
  }

  public abstract class AdIdManager {
    method @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_AD_ID) public abstract suspend Object? getAdId(kotlin.coroutines.Continuation<? super androidx.privacysandbox.ads.adservices.adid.AdId>);
    method public static final androidx.privacysandbox.ads.adservices.adid.AdIdManager? obtain(android.content.Context context);
    field public static final androidx.privacysandbox.ads.adservices.adid.AdIdManager.Companion Companion;
  }

  public static final class AdIdManager.Companion {
    method public androidx.privacysandbox.ads.adservices.adid.AdIdManager? obtain(android.content.Context context);
  }

}

package androidx.privacysandbox.ads.adservices.adselection {

  public final class AdSelectionConfig {
    ctor public AdSelectionConfig(androidx.privacysandbox.ads.adservices.common.AdTechIdentifier seller, android.net.Uri decisionLogicUri, java.util.List<androidx.privacysandbox.ads.adservices.common.AdTechIdentifier> customAudienceBuyers, androidx.privacysandbox.ads.adservices.common.AdSelectionSignals adSelectionSignals, androidx.privacysandbox.ads.adservices.common.AdSelectionSignals sellerSignals, java.util.Map<androidx.privacysandbox.ads.adservices.common.AdTechIdentifier,androidx.privacysandbox.ads.adservices.common.AdSelectionSignals> perBuyerSignals, android.net.Uri trustedScoringSignalsUri);
    method public androidx.privacysandbox.ads.adservices.common.AdSelectionSignals getAdSelectionSignals();
    method public java.util.List<androidx.privacysandbox.ads.adservices.common.AdTechIdentifier> getCustomAudienceBuyers();
    method public android.net.Uri getDecisionLogicUri();
    method public java.util.Map<androidx.privacysandbox.ads.adservices.common.AdTechIdentifier,androidx.privacysandbox.ads.adservices.common.AdSelectionSignals> getPerBuyerSignals();
    method public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier getSeller();
    method public androidx.privacysandbox.ads.adservices.common.AdSelectionSignals getSellerSignals();
    method public android.net.Uri getTrustedScoringSignalsUri();
    property public androidx.privacysandbox.ads.adservices.common.AdSelectionSignals adSelectionSignals;
    property public java.util.List<androidx.privacysandbox.ads.adservices.common.AdTechIdentifier> customAudienceBuyers;
    property public android.net.Uri decisionLogicUri;
    property public java.util.Map<androidx.privacysandbox.ads.adservices.common.AdTechIdentifier,androidx.privacysandbox.ads.adservices.common.AdSelectionSignals> perBuyerSignals;
    property public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier seller;
    property public androidx.privacysandbox.ads.adservices.common.AdSelectionSignals sellerSignals;
    property public android.net.Uri trustedScoringSignalsUri;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public final class AdSelectionFromOutcomesConfig {
    ctor public AdSelectionFromOutcomesConfig(androidx.privacysandbox.ads.adservices.common.AdTechIdentifier seller, java.util.List<java.lang.Long> adSelectionIds, androidx.privacysandbox.ads.adservices.common.AdSelectionSignals adSelectionSignals, android.net.Uri selectionLogicUri);
    method public java.util.List<java.lang.Long> getAdSelectionIds();
    method public androidx.privacysandbox.ads.adservices.common.AdSelectionSignals getAdSelectionSignals();
    method public android.net.Uri getSelectionLogicUri();
    method public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier getSeller();
    method public void setSelectionLogicUri(android.net.Uri);
    property public java.util.List<java.lang.Long> adSelectionIds;
    property public androidx.privacysandbox.ads.adservices.common.AdSelectionSignals adSelectionSignals;
    property public android.net.Uri selectionLogicUri;
    property public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier seller;
  }

  public abstract class AdSelectionManager {
    method @SuppressCompatibility @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_CUSTOM_AUDIENCE) @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public abstract suspend Object? getAdSelectionData(androidx.privacysandbox.ads.adservices.adselection.GetAdSelectionDataRequest getAdSelectionDataRequest, kotlin.coroutines.Continuation<? super androidx.privacysandbox.ads.adservices.adselection.GetAdSelectionDataOutcome>);
    method public static final androidx.privacysandbox.ads.adservices.adselection.AdSelectionManager? obtain(android.content.Context context);
    method @SuppressCompatibility @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_CUSTOM_AUDIENCE) @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public abstract suspend Object? persistAdSelectionResult(androidx.privacysandbox.ads.adservices.adselection.PersistAdSelectionResultRequest persistAdSelectionResultRequest, kotlin.coroutines.Continuation<? super androidx.privacysandbox.ads.adservices.adselection.AdSelectionOutcome>);
    method @SuppressCompatibility @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_CUSTOM_AUDIENCE) @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext8OptIn public abstract suspend Object? reportEvent(androidx.privacysandbox.ads.adservices.adselection.ReportEventRequest reportEventRequest, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_CUSTOM_AUDIENCE) public abstract suspend Object? reportImpression(androidx.privacysandbox.ads.adservices.adselection.ReportImpressionRequest reportImpressionRequest, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_CUSTOM_AUDIENCE) public abstract suspend Object? selectAds(androidx.privacysandbox.ads.adservices.adselection.AdSelectionConfig adSelectionConfig, kotlin.coroutines.Continuation<? super androidx.privacysandbox.ads.adservices.adselection.AdSelectionOutcome>);
    method @SuppressCompatibility @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_CUSTOM_AUDIENCE) @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public abstract suspend Object? selectAds(androidx.privacysandbox.ads.adservices.adselection.AdSelectionFromOutcomesConfig adSelectionFromOutcomesConfig, kotlin.coroutines.Continuation<? super androidx.privacysandbox.ads.adservices.adselection.AdSelectionOutcome>);
    method @SuppressCompatibility @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_CUSTOM_AUDIENCE) @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext8OptIn public abstract suspend Object? updateAdCounterHistogram(androidx.privacysandbox.ads.adservices.adselection.UpdateAdCounterHistogramRequest updateAdCounterHistogramRequest, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field public static final androidx.privacysandbox.ads.adservices.adselection.AdSelectionManager.Companion Companion;
  }

  public static final class AdSelectionManager.Companion {
    method public androidx.privacysandbox.ads.adservices.adselection.AdSelectionManager? obtain(android.content.Context context);
  }

  public final class AdSelectionOutcome {
    ctor public AdSelectionOutcome(long adSelectionId, android.net.Uri renderUri);
    method public long getAdSelectionId();
    method public android.net.Uri getRenderUri();
    method @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public boolean hasOutcome();
    property public long adSelectionId;
    property public android.net.Uri renderUri;
    field public static final androidx.privacysandbox.ads.adservices.adselection.AdSelectionOutcome.Companion Companion;
    field @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public static final androidx.privacysandbox.ads.adservices.adselection.AdSelectionOutcome NO_OUTCOME;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public static final class AdSelectionOutcome.Companion {
    property @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public androidx.privacysandbox.ads.adservices.adselection.AdSelectionOutcome NO_OUTCOME;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public final class GetAdSelectionDataOutcome {
    ctor public GetAdSelectionDataOutcome(long adSelectionId);
    ctor public GetAdSelectionDataOutcome(long adSelectionId, optional byte[]? adSelectionData);
    method public byte[]? getAdSelectionData();
    method public long getAdSelectionId();
    property public byte[]? adSelectionData;
    property public long adSelectionId;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public final class GetAdSelectionDataRequest {
    ctor public GetAdSelectionDataRequest(androidx.privacysandbox.ads.adservices.common.AdTechIdentifier seller);
    ctor public GetAdSelectionDataRequest(androidx.privacysandbox.ads.adservices.common.AdTechIdentifier seller, optional android.net.Uri? coordinatorOriginUri);
    ctor public GetAdSelectionDataRequest(androidx.privacysandbox.ads.adservices.common.AdTechIdentifier seller, optional android.net.Uri? coordinatorOriginUri, optional androidx.privacysandbox.ads.adservices.adselection.SellerConfiguration? sellerConfiguration);
    method public android.net.Uri? getCoordinatorOriginUri();
    method public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier getSeller();
    method public androidx.privacysandbox.ads.adservices.adselection.SellerConfiguration? getSellerConfiguration();
    property @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext12OptIn public android.net.Uri? coordinatorOriginUri;
    property public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier seller;
    property @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public androidx.privacysandbox.ads.adservices.adselection.SellerConfiguration? sellerConfiguration;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public final class PerBuyerConfiguration {
    ctor public PerBuyerConfiguration(int targetInputSizeBytes, androidx.privacysandbox.ads.adservices.common.AdTechIdentifier buyer);
    method public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier getBuyer();
    method public int getTargetInputSizeBytes();
    property public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier buyer;
    property public int targetInputSizeBytes;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public final class PersistAdSelectionResultRequest {
    ctor public PersistAdSelectionResultRequest(long adSelectionId);
    ctor public PersistAdSelectionResultRequest(long adSelectionId, optional androidx.privacysandbox.ads.adservices.common.AdTechIdentifier? seller);
    ctor public PersistAdSelectionResultRequest(long adSelectionId, optional androidx.privacysandbox.ads.adservices.common.AdTechIdentifier? seller, optional byte[]? adSelectionResult);
    method public long getAdSelectionId();
    method public byte[]? getAdSelectionResult();
    method public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier? getSeller();
    property public long adSelectionId;
    property public byte[]? adSelectionResult;
    property public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier? seller;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext8OptIn public final class ReportEventRequest {
    ctor public ReportEventRequest(long adSelectionId, String eventKey, String eventData, int reportingDestinations);
    ctor public ReportEventRequest(long adSelectionId, String eventKey, String eventData, int reportingDestinations, optional android.view.InputEvent? inputEvent);
    method public long getAdSelectionId();
    method public String getEventData();
    method public String getEventKey();
    method public android.view.InputEvent? getInputEvent();
    method public int getReportingDestinations();
    property public long adSelectionId;
    property public String eventData;
    property public String eventKey;
    property @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public android.view.InputEvent? inputEvent;
    property public int reportingDestinations;
    field public static final androidx.privacysandbox.ads.adservices.adselection.ReportEventRequest.Companion Companion;
    field public static final int FLAG_REPORTING_DESTINATION_BUYER = 2; // 0x2
    field public static final int FLAG_REPORTING_DESTINATION_SELLER = 1; // 0x1
  }

  public static final class ReportEventRequest.Companion {
    property public static int FLAG_REPORTING_DESTINATION_BUYER;
    property public static int FLAG_REPORTING_DESTINATION_SELLER;
  }

  public final class ReportImpressionRequest {
    ctor @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext8OptIn public ReportImpressionRequest(long adSelectionId);
    ctor public ReportImpressionRequest(long adSelectionId, androidx.privacysandbox.ads.adservices.adselection.AdSelectionConfig adSelectionConfig);
    method public androidx.privacysandbox.ads.adservices.adselection.AdSelectionConfig getAdSelectionConfig();
    method public long getAdSelectionId();
    property public androidx.privacysandbox.ads.adservices.adselection.AdSelectionConfig adSelectionConfig;
    property public long adSelectionId;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public final class SellerConfiguration {
    ctor public SellerConfiguration(int maximumPayloadSizeBytes, java.util.Set<androidx.privacysandbox.ads.adservices.adselection.PerBuyerConfiguration> perBuyerConfigurations);
    method public int getMaximumPayloadSizeBytes();
    method public java.util.Set<androidx.privacysandbox.ads.adservices.adselection.PerBuyerConfiguration> getPerBuyerConfigurations();
    property public int maximumPayloadSizeBytes;
    property public java.util.Set<androidx.privacysandbox.ads.adservices.adselection.PerBuyerConfiguration> perBuyerConfigurations;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext8OptIn public final class UpdateAdCounterHistogramRequest {
    ctor public UpdateAdCounterHistogramRequest(long adSelectionId, int adEventType, androidx.privacysandbox.ads.adservices.common.AdTechIdentifier callerAdTech);
    method public int getAdEventType();
    method public long getAdSelectionId();
    method public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier getCallerAdTech();
    property public int adEventType;
    property public long adSelectionId;
    property public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier callerAdTech;
  }

}

package androidx.privacysandbox.ads.adservices.appsetid {

  public final class AppSetId {
    ctor public AppSetId(String id, int scope);
    method public String getId();
    method public int getScope();
    property public String id;
    property public int scope;
    field public static final androidx.privacysandbox.ads.adservices.appsetid.AppSetId.Companion Companion;
    field public static final int SCOPE_APP = 1; // 0x1
    field public static final int SCOPE_DEVELOPER = 2; // 0x2
  }

  public static final class AppSetId.Companion {
    property public static int SCOPE_APP;
    property public static int SCOPE_DEVELOPER;
  }

  public abstract class AppSetIdManager {
    method public abstract suspend Object? getAppSetId(kotlin.coroutines.Continuation<? super androidx.privacysandbox.ads.adservices.appsetid.AppSetId>);
    method public static final androidx.privacysandbox.ads.adservices.appsetid.AppSetIdManager? obtain(android.content.Context context);
    field public static final androidx.privacysandbox.ads.adservices.appsetid.AppSetIdManager.Companion Companion;
  }

  public static final class AppSetIdManager.Companion {
    method public androidx.privacysandbox.ads.adservices.appsetid.AppSetIdManager? obtain(android.content.Context context);
  }

}

package androidx.privacysandbox.ads.adservices.common {

  public final class AdData {
    ctor public AdData(android.net.Uri renderUri, String metadata);
    ctor @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext8OptIn public AdData(android.net.Uri renderUri, String metadata, optional java.util.Set<java.lang.Integer> adCounterKeys, optional androidx.privacysandbox.ads.adservices.common.AdFilters? adFilters);
    ctor @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public AdData(android.net.Uri renderUri, String metadata, optional java.util.Set<java.lang.Integer> adCounterKeys, optional androidx.privacysandbox.ads.adservices.common.AdFilters? adFilters, optional String? adRenderId);
    method public java.util.Set<java.lang.Integer> getAdCounterKeys();
    method public androidx.privacysandbox.ads.adservices.common.AdFilters? getAdFilters();
    method public String? getAdRenderId();
    method public String getMetadata();
    method public android.net.Uri getRenderUri();
    property public java.util.Set<java.lang.Integer> adCounterKeys;
    property public androidx.privacysandbox.ads.adservices.common.AdFilters? adFilters;
    property public String? adRenderId;
    property public String metadata;
    property public android.net.Uri renderUri;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext8OptIn public final class AdFilters {
    ctor public AdFilters(androidx.privacysandbox.ads.adservices.common.FrequencyCapFilters? frequencyCapFilters);
    method public androidx.privacysandbox.ads.adservices.common.FrequencyCapFilters? getFrequencyCapFilters();
    property public androidx.privacysandbox.ads.adservices.common.FrequencyCapFilters? frequencyCapFilters;
  }

  public final class AdSelectionSignals {
    ctor public AdSelectionSignals(String signals);
    method public String getSignals();
    property public String signals;
  }

  public final class AdTechIdentifier {
    ctor public AdTechIdentifier(String identifier);
    method public String getIdentifier();
    property public String identifier;
  }

  public sealed interface ExperimentalFeatures {
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="The Ext10 API is experimental.", level=kotlin.RequiresOptIn.Level.WARNING) public static @interface ExperimentalFeatures.Ext10OptIn {
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="The Ext11 API is experimental.", level=kotlin.RequiresOptIn.Level.WARNING) public static @interface ExperimentalFeatures.Ext11OptIn {
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="The Ext12 API is experimental.", level=kotlin.RequiresOptIn.Level.WARNING) public static @interface ExperimentalFeatures.Ext12OptIn {
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="The Ext14 API is experimental.", level=kotlin.RequiresOptIn.Level.WARNING) public static @interface ExperimentalFeatures.Ext14OptIn {
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="The Ext8 API is experimental.", level=kotlin.RequiresOptIn.Level.WARNING) public static @interface ExperimentalFeatures.Ext8OptIn {
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This API is experimental.", level=kotlin.RequiresOptIn.Level.WARNING) public static @interface ExperimentalFeatures.RegisterSourceOptIn {
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext8OptIn public final class FrequencyCapFilters {
    ctor public FrequencyCapFilters();
    ctor public FrequencyCapFilters(optional java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForWinEvents);
    ctor public FrequencyCapFilters(optional java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForWinEvents, optional java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForImpressionEvents);
    ctor public FrequencyCapFilters(optional java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForWinEvents, optional java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForImpressionEvents, optional java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForViewEvents);
    ctor public FrequencyCapFilters(optional java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForWinEvents, optional java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForImpressionEvents, optional java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForViewEvents, optional java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForClickEvents);
    method public java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> getKeyedFrequencyCapsForClickEvents();
    method public java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> getKeyedFrequencyCapsForImpressionEvents();
    method public java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> getKeyedFrequencyCapsForViewEvents();
    method public java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> getKeyedFrequencyCapsForWinEvents();
    property public java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForClickEvents;
    property public java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForImpressionEvents;
    property public java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForViewEvents;
    property public java.util.List<androidx.privacysandbox.ads.adservices.common.KeyedFrequencyCap> keyedFrequencyCapsForWinEvents;
    field public static final int AD_EVENT_TYPE_CLICK = 3; // 0x3
    field public static final int AD_EVENT_TYPE_IMPRESSION = 1; // 0x1
    field public static final int AD_EVENT_TYPE_VIEW = 2; // 0x2
    field public static final int AD_EVENT_TYPE_WIN = 0; // 0x0
    field public static final androidx.privacysandbox.ads.adservices.common.FrequencyCapFilters.Companion Companion;
  }

  public static final class FrequencyCapFilters.Companion {
    property public static int AD_EVENT_TYPE_CLICK;
    property public static int AD_EVENT_TYPE_IMPRESSION;
    property public static int AD_EVENT_TYPE_VIEW;
    property public static int AD_EVENT_TYPE_WIN;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext8OptIn public final class KeyedFrequencyCap {
    ctor public KeyedFrequencyCap(int adCounterKey, int maxCount, java.time.Duration interval);
    method public int getAdCounterKey();
    method public java.time.Duration getInterval();
    method public int getMaxCount();
    property public int adCounterKey;
    property public java.time.Duration interval;
    property public int maxCount;
  }

}

package androidx.privacysandbox.ads.adservices.customaudience {

  public final class CustomAudience {
    ctor public CustomAudience(androidx.privacysandbox.ads.adservices.common.AdTechIdentifier buyer, String name, android.net.Uri dailyUpdateUri, android.net.Uri biddingLogicUri, java.util.List<androidx.privacysandbox.ads.adservices.common.AdData> ads, optional java.time.Instant? activationTime, optional java.time.Instant? expirationTime, optional androidx.privacysandbox.ads.adservices.common.AdSelectionSignals? userBiddingSignals, optional androidx.privacysandbox.ads.adservices.customaudience.TrustedBiddingData? trustedBiddingSignals);
    ctor @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public CustomAudience(androidx.privacysandbox.ads.adservices.common.AdTechIdentifier buyer, String name, android.net.Uri dailyUpdateUri, android.net.Uri biddingLogicUri, java.util.List<androidx.privacysandbox.ads.adservices.common.AdData> ads, optional java.time.Instant? activationTime, optional java.time.Instant? expirationTime, optional androidx.privacysandbox.ads.adservices.common.AdSelectionSignals? userBiddingSignals, optional androidx.privacysandbox.ads.adservices.customaudience.TrustedBiddingData? trustedBiddingSignals, optional @SuppressCompatibility int auctionServerRequestFlags, optional double priority);
    method public java.time.Instant? getActivationTime();
    method public java.util.List<androidx.privacysandbox.ads.adservices.common.AdData> getAds();
    method public int getAuctionServerRequestFlags();
    method public android.net.Uri getBiddingLogicUri();
    method public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier getBuyer();
    method public android.net.Uri getDailyUpdateUri();
    method public java.time.Instant? getExpirationTime();
    method public String getName();
    method public double getPriority();
    method public androidx.privacysandbox.ads.adservices.customaudience.TrustedBiddingData? getTrustedBiddingSignals();
    method public androidx.privacysandbox.ads.adservices.common.AdSelectionSignals? getUserBiddingSignals();
    property public java.time.Instant? activationTime;
    property public java.util.List<androidx.privacysandbox.ads.adservices.common.AdData> ads;
    property @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public int auctionServerRequestFlags;
    property public android.net.Uri biddingLogicUri;
    property public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier buyer;
    property public android.net.Uri dailyUpdateUri;
    property public java.time.Instant? expirationTime;
    property public String name;
    property @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public double priority;
    property public androidx.privacysandbox.ads.adservices.customaudience.TrustedBiddingData? trustedBiddingSignals;
    property public androidx.privacysandbox.ads.adservices.common.AdSelectionSignals? userBiddingSignals;
    field public static final androidx.privacysandbox.ads.adservices.customaudience.CustomAudience.Companion Companion;
    field @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public static final int FLAG_AUCTION_SERVER_REQUEST_DEFAULT = 0; // 0x0
    field @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public static final int FLAG_AUCTION_SERVER_REQUEST_OMIT_ADS = 1; // 0x1
    field @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public static final double PRIORITY_DEFAULT = 0.0;
  }

  public static final class CustomAudience.Builder {
    ctor public CustomAudience.Builder(androidx.privacysandbox.ads.adservices.common.AdTechIdentifier buyer, String name, android.net.Uri dailyUpdateUri, android.net.Uri biddingLogicUri, java.util.List<androidx.privacysandbox.ads.adservices.common.AdData> ads);
    method public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience build();
    method public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience.Builder setActivationTime(java.time.Instant activationTime);
    method public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience.Builder setAds(java.util.List<androidx.privacysandbox.ads.adservices.common.AdData> ads);
    method @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience.Builder setAuctionServerRequestFlags(@SuppressCompatibility int auctionServerRequestFlag);
    method public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience.Builder setBiddingLogicUri(android.net.Uri biddingLogicUri);
    method public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience.Builder setBuyer(androidx.privacysandbox.ads.adservices.common.AdTechIdentifier buyer);
    method public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience.Builder setDailyUpdateUri(android.net.Uri dailyUpdateUri);
    method public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience.Builder setExpirationTime(java.time.Instant expirationTime);
    method public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience.Builder setName(String name);
    method @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience.Builder setPriority(double priority);
    method public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience.Builder setTrustedBiddingData(androidx.privacysandbox.ads.adservices.customaudience.TrustedBiddingData trustedBiddingSignals);
    method public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience.Builder setUserBiddingSignals(androidx.privacysandbox.ads.adservices.common.AdSelectionSignals userBiddingSignals);
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public static final class CustomAudience.Companion {
    property @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public static int FLAG_AUCTION_SERVER_REQUEST_DEFAULT;
    property @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public static int FLAG_AUCTION_SERVER_REQUEST_OMIT_ADS;
    property @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public static double PRIORITY_DEFAULT;
  }

  public abstract class CustomAudienceManager {
    method @SuppressCompatibility @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_CUSTOM_AUDIENCE) @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public abstract suspend Object? fetchAndJoinCustomAudience(androidx.privacysandbox.ads.adservices.customaudience.FetchAndJoinCustomAudienceRequest request, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_CUSTOM_AUDIENCE) public abstract suspend Object? joinCustomAudience(androidx.privacysandbox.ads.adservices.customaudience.JoinCustomAudienceRequest request, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_CUSTOM_AUDIENCE) public abstract suspend Object? leaveCustomAudience(androidx.privacysandbox.ads.adservices.customaudience.LeaveCustomAudienceRequest request, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public static final androidx.privacysandbox.ads.adservices.customaudience.CustomAudienceManager? obtain(android.content.Context context);
    method @SuppressCompatibility @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_CUSTOM_AUDIENCE) @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public abstract suspend Object? scheduleCustomAudienceUpdate(androidx.privacysandbox.ads.adservices.customaudience.ScheduleCustomAudienceUpdateRequest request, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field public static final androidx.privacysandbox.ads.adservices.customaudience.CustomAudienceManager.Companion Companion;
  }

  public static final class CustomAudienceManager.Companion {
    method public androidx.privacysandbox.ads.adservices.customaudience.CustomAudienceManager? obtain(android.content.Context context);
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext10OptIn public final class FetchAndJoinCustomAudienceRequest {
    ctor public FetchAndJoinCustomAudienceRequest(android.net.Uri fetchUri);
    ctor public FetchAndJoinCustomAudienceRequest(android.net.Uri fetchUri, optional String? name);
    ctor public FetchAndJoinCustomAudienceRequest(android.net.Uri fetchUri, optional String? name, optional java.time.Instant? activationTime);
    ctor public FetchAndJoinCustomAudienceRequest(android.net.Uri fetchUri, optional String? name, optional java.time.Instant? activationTime, optional java.time.Instant? expirationTime);
    ctor public FetchAndJoinCustomAudienceRequest(android.net.Uri fetchUri, optional String? name, optional java.time.Instant? activationTime, optional java.time.Instant? expirationTime, optional androidx.privacysandbox.ads.adservices.common.AdSelectionSignals? userBiddingSignals);
    method public java.time.Instant? getActivationTime();
    method public java.time.Instant? getExpirationTime();
    method public android.net.Uri getFetchUri();
    method public String? getName();
    method public androidx.privacysandbox.ads.adservices.common.AdSelectionSignals? getUserBiddingSignals();
    property public java.time.Instant? activationTime;
    property public java.time.Instant? expirationTime;
    property public android.net.Uri fetchUri;
    property public String? name;
    property public androidx.privacysandbox.ads.adservices.common.AdSelectionSignals? userBiddingSignals;
  }

  public final class JoinCustomAudienceRequest {
    ctor public JoinCustomAudienceRequest(androidx.privacysandbox.ads.adservices.customaudience.CustomAudience customAudience);
    method public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience getCustomAudience();
    property public androidx.privacysandbox.ads.adservices.customaudience.CustomAudience customAudience;
  }

  public final class LeaveCustomAudienceRequest {
    ctor public LeaveCustomAudienceRequest(androidx.privacysandbox.ads.adservices.common.AdTechIdentifier buyer, String name);
    method public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier getBuyer();
    method public String getName();
    property public androidx.privacysandbox.ads.adservices.common.AdTechIdentifier buyer;
    property public String name;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public final class PartialCustomAudience {
    ctor public PartialCustomAudience(String name);
    ctor public PartialCustomAudience(String name, optional java.time.Instant? activationTime);
    ctor public PartialCustomAudience(String name, optional java.time.Instant? activationTime, optional java.time.Instant? expirationTime);
    ctor public PartialCustomAudience(String name, optional java.time.Instant? activationTime, optional java.time.Instant? expirationTime, optional androidx.privacysandbox.ads.adservices.common.AdSelectionSignals? userBiddingSignals);
    method public java.time.Instant? getActivationTime();
    method public java.time.Instant? getExpirationTime();
    method public String getName();
    method public androidx.privacysandbox.ads.adservices.common.AdSelectionSignals? getUserBiddingSignals();
    property public java.time.Instant? activationTime;
    property public java.time.Instant? expirationTime;
    property public String name;
    property public androidx.privacysandbox.ads.adservices.common.AdSelectionSignals? userBiddingSignals;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext14OptIn public final class ScheduleCustomAudienceUpdateRequest {
    ctor public ScheduleCustomAudienceUpdateRequest(android.net.Uri updateUri, java.time.Duration minDelay, java.util.List<androidx.privacysandbox.ads.adservices.customaudience.PartialCustomAudience> partialCustomAudienceList);
    ctor public ScheduleCustomAudienceUpdateRequest(android.net.Uri updateUri, java.time.Duration minDelay, java.util.List<androidx.privacysandbox.ads.adservices.customaudience.PartialCustomAudience> partialCustomAudienceList, optional boolean shouldReplacePendingUpdates);
    method public java.time.Duration getMinDelay();
    method public java.util.List<androidx.privacysandbox.ads.adservices.customaudience.PartialCustomAudience> getPartialCustomAudienceList();
    method public android.net.Uri getUpdateUri();
    method public boolean shouldReplacePendingUpdates();
    property public java.time.Duration minDelay;
    property public java.util.List<androidx.privacysandbox.ads.adservices.customaudience.PartialCustomAudience> partialCustomAudienceList;
    property public boolean shouldReplacePendingUpdates;
    property public android.net.Uri updateUri;
  }

  public final class TrustedBiddingData {
    ctor public TrustedBiddingData(android.net.Uri trustedBiddingUri, java.util.List<java.lang.String> trustedBiddingKeys);
    method public java.util.List<java.lang.String> getTrustedBiddingKeys();
    method public android.net.Uri getTrustedBiddingUri();
    property public java.util.List<java.lang.String> trustedBiddingKeys;
    property public android.net.Uri trustedBiddingUri;
  }

}

package androidx.privacysandbox.ads.adservices.measurement {

  @RequiresApi(android.os.Build.VERSION_CODES.O) public final class DeletionRequest {
    ctor public DeletionRequest(int deletionMode, int matchBehavior, optional java.time.Instant start, optional java.time.Instant end, optional java.util.List<? extends android.net.Uri> domainUris, optional java.util.List<? extends android.net.Uri> originUris);
    method public int getDeletionMode();
    method public java.util.List<android.net.Uri> getDomainUris();
    method public java.time.Instant getEnd();
    method public int getMatchBehavior();
    method public java.util.List<android.net.Uri> getOriginUris();
    method public java.time.Instant getStart();
    property public int deletionMode;
    property public java.util.List<android.net.Uri> domainUris;
    property public java.time.Instant end;
    property public int matchBehavior;
    property public java.util.List<android.net.Uri> originUris;
    property public java.time.Instant start;
    field public static final androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.Companion Companion;
    field public static final int DELETION_MODE_ALL = 0; // 0x0
    field public static final int DELETION_MODE_EXCLUDE_INTERNAL_DATA = 1; // 0x1
    field public static final int MATCH_BEHAVIOR_DELETE = 0; // 0x0
    field public static final int MATCH_BEHAVIOR_PRESERVE = 1; // 0x1
  }

  @RequiresApi(android.os.Build.VERSION_CODES.O) public static final class DeletionRequest.Builder {
    ctor public DeletionRequest.Builder(int deletionMode, int matchBehavior);
    method public androidx.privacysandbox.ads.adservices.measurement.DeletionRequest build();
    method public androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.Builder setDomainUris(java.util.List<? extends android.net.Uri> domainUris);
    method public androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.Builder setEnd(java.time.Instant end);
    method public androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.Builder setOriginUris(java.util.List<? extends android.net.Uri> originUris);
    method public androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.Builder setStart(java.time.Instant start);
  }

  public static final class DeletionRequest.Companion {
    property public static int DELETION_MODE_ALL;
    property public static int DELETION_MODE_EXCLUDE_INTERNAL_DATA;
    property public static int MATCH_BEHAVIOR_DELETE;
    property public static int MATCH_BEHAVIOR_PRESERVE;
  }

  public abstract class MeasurementManager {
    ctor public MeasurementManager();
    method public abstract suspend Object? deleteRegistrations(androidx.privacysandbox.ads.adservices.measurement.DeletionRequest deletionRequest, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_ATTRIBUTION) public abstract suspend Object? getMeasurementApiStatus(kotlin.coroutines.Continuation<? super java.lang.Integer>);
    method public static final androidx.privacysandbox.ads.adservices.measurement.MeasurementManager? obtain(android.content.Context context);
    method @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_ATTRIBUTION) public abstract suspend Object? registerSource(android.net.Uri attributionSource, android.view.InputEvent? inputEvent, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @SuppressCompatibility @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_ATTRIBUTION) @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.RegisterSourceOptIn public abstract suspend Object? registerSource(androidx.privacysandbox.ads.adservices.measurement.SourceRegistrationRequest request, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_ATTRIBUTION) public abstract suspend Object? registerTrigger(android.net.Uri trigger, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_ATTRIBUTION) public abstract suspend Object? registerWebSource(androidx.privacysandbox.ads.adservices.measurement.WebSourceRegistrationRequest request, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_ATTRIBUTION) public abstract suspend Object? registerWebTrigger(androidx.privacysandbox.ads.adservices.measurement.WebTriggerRegistrationRequest request, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field public static final androidx.privacysandbox.ads.adservices.measurement.MeasurementManager.Companion Companion;
    field public static final int MEASUREMENT_API_STATE_DISABLED = 0; // 0x0
    field public static final int MEASUREMENT_API_STATE_ENABLED = 1; // 0x1
  }

  public static final class MeasurementManager.Companion {
    method public androidx.privacysandbox.ads.adservices.measurement.MeasurementManager? obtain(android.content.Context context);
    property public static int MEASUREMENT_API_STATE_DISABLED;
    property public static int MEASUREMENT_API_STATE_ENABLED;
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.RegisterSourceOptIn public final class SourceRegistrationRequest {
    ctor public SourceRegistrationRequest(java.util.List<? extends android.net.Uri> registrationUris, optional android.view.InputEvent? inputEvent);
    method public android.view.InputEvent? getInputEvent();
    method public java.util.List<android.net.Uri> getRegistrationUris();
    property public android.view.InputEvent? inputEvent;
    property public java.util.List<android.net.Uri> registrationUris;
  }

  public static final class SourceRegistrationRequest.Builder {
    ctor public SourceRegistrationRequest.Builder(java.util.List<? extends android.net.Uri> registrationUris);
    method public androidx.privacysandbox.ads.adservices.measurement.SourceRegistrationRequest build();
    method public androidx.privacysandbox.ads.adservices.measurement.SourceRegistrationRequest.Builder setInputEvent(android.view.InputEvent inputEvent);
  }

  public final class WebSourceParams {
    ctor public WebSourceParams(android.net.Uri registrationUri, boolean debugKeyAllowed);
    method public boolean getDebugKeyAllowed();
    method public android.net.Uri getRegistrationUri();
    property public boolean debugKeyAllowed;
    property public android.net.Uri registrationUri;
  }

  public final class WebSourceRegistrationRequest {
    ctor public WebSourceRegistrationRequest(java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebSourceParams> webSourceParams, android.net.Uri topOriginUri, optional android.view.InputEvent? inputEvent, optional android.net.Uri? appDestination, optional android.net.Uri? webDestination, optional android.net.Uri? verifiedDestination);
    method public android.net.Uri? getAppDestination();
    method public android.view.InputEvent? getInputEvent();
    method public android.net.Uri getTopOriginUri();
    method public android.net.Uri? getVerifiedDestination();
    method public android.net.Uri? getWebDestination();
    method public java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebSourceParams> getWebSourceParams();
    property public android.net.Uri? appDestination;
    property public android.view.InputEvent? inputEvent;
    property public android.net.Uri topOriginUri;
    property public android.net.Uri? verifiedDestination;
    property public android.net.Uri? webDestination;
    property public java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebSourceParams> webSourceParams;
  }

  public static final class WebSourceRegistrationRequest.Builder {
    ctor public WebSourceRegistrationRequest.Builder(java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebSourceParams> webSourceParams, android.net.Uri topOriginUri);
    method public androidx.privacysandbox.ads.adservices.measurement.WebSourceRegistrationRequest build();
    method public androidx.privacysandbox.ads.adservices.measurement.WebSourceRegistrationRequest.Builder setAppDestination(android.net.Uri? appDestination);
    method public androidx.privacysandbox.ads.adservices.measurement.WebSourceRegistrationRequest.Builder setInputEvent(android.view.InputEvent inputEvent);
    method public androidx.privacysandbox.ads.adservices.measurement.WebSourceRegistrationRequest.Builder setVerifiedDestination(android.net.Uri? verifiedDestination);
    method public androidx.privacysandbox.ads.adservices.measurement.WebSourceRegistrationRequest.Builder setWebDestination(android.net.Uri? webDestination);
  }

  public final class WebTriggerParams {
    ctor public WebTriggerParams(android.net.Uri registrationUri, boolean debugKeyAllowed);
    method public boolean getDebugKeyAllowed();
    method public android.net.Uri getRegistrationUri();
    property public boolean debugKeyAllowed;
    property public android.net.Uri registrationUri;
  }

  public final class WebTriggerRegistrationRequest {
    ctor public WebTriggerRegistrationRequest(java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebTriggerParams> webTriggerParams, android.net.Uri destination);
    method public android.net.Uri getDestination();
    method public java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebTriggerParams> getWebTriggerParams();
    property public android.net.Uri destination;
    property public java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebTriggerParams> webTriggerParams;
  }

}

package androidx.privacysandbox.ads.adservices.signals {

  public abstract class ProtectedSignalsManager {
    method @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext12OptIn public static final androidx.privacysandbox.ads.adservices.signals.ProtectedSignalsManager? obtain(android.content.Context context);
    method @SuppressCompatibility @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_PROTECTED_SIGNALS) @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext12OptIn public abstract suspend Object? updateSignals(androidx.privacysandbox.ads.adservices.signals.UpdateSignalsRequest request, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field public static final androidx.privacysandbox.ads.adservices.signals.ProtectedSignalsManager.Companion Companion;
  }

  public static final class ProtectedSignalsManager.Companion {
    method @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext12OptIn public androidx.privacysandbox.ads.adservices.signals.ProtectedSignalsManager? obtain(android.content.Context context);
  }

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext12OptIn public final class UpdateSignalsRequest {
    ctor public UpdateSignalsRequest(android.net.Uri updateUri);
    method public android.net.Uri getUpdateUri();
    property public android.net.Uri updateUri;
  }

}

package androidx.privacysandbox.ads.adservices.topics {

  @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext11OptIn public final class EncryptedTopic {
    ctor public EncryptedTopic(byte[] encryptedTopic, String keyIdentifier, byte[] encapsulatedKey);
    method public byte[] getEncapsulatedKey();
    method public byte[] getEncryptedTopic();
    method public String getKeyIdentifier();
    property public byte[] encapsulatedKey;
    property public byte[] encryptedTopic;
    property public String keyIdentifier;
  }

  public final class GetTopicsRequest {
    ctor public GetTopicsRequest();
    ctor public GetTopicsRequest(optional String adsSdkName, optional boolean shouldRecordObservation);
    method public String getAdsSdkName();
    method public boolean shouldRecordObservation();
    property public String adsSdkName;
    property public boolean shouldRecordObservation;
  }

  public static final class GetTopicsRequest.Builder {
    ctor public GetTopicsRequest.Builder();
    method public androidx.privacysandbox.ads.adservices.topics.GetTopicsRequest build();
    method public androidx.privacysandbox.ads.adservices.topics.GetTopicsRequest.Builder setAdsSdkName(String adsSdkName);
    method public androidx.privacysandbox.ads.adservices.topics.GetTopicsRequest.Builder setShouldRecordObservation(boolean shouldRecordObservation);
  }

  public final class GetTopicsResponse {
    ctor public GetTopicsResponse(java.util.List<androidx.privacysandbox.ads.adservices.topics.Topic> topics);
    ctor @SuppressCompatibility @androidx.privacysandbox.ads.adservices.common.ExperimentalFeatures.Ext11OptIn public GetTopicsResponse(java.util.List<androidx.privacysandbox.ads.adservices.topics.Topic> topics, java.util.List<androidx.privacysandbox.ads.adservices.topics.EncryptedTopic> encryptedTopics);
    method public java.util.List<androidx.privacysandbox.ads.adservices.topics.EncryptedTopic> getEncryptedTopics();
    method public java.util.List<androidx.privacysandbox.ads.adservices.topics.Topic> getTopics();
    property public java.util.List<androidx.privacysandbox.ads.adservices.topics.EncryptedTopic> encryptedTopics;
    property public java.util.List<androidx.privacysandbox.ads.adservices.topics.Topic> topics;
  }

  public final class Topic {
    ctor public Topic(long taxonomyVersion, long modelVersion, int topicId);
    method public long getModelVersion();
    method public long getTaxonomyVersion();
    method public int getTopicId();
    property public long modelVersion;
    property public long taxonomyVersion;
    property public int topicId;
  }

  public abstract class TopicsManager {
    method @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_TOPICS) public abstract suspend Object? getTopics(androidx.privacysandbox.ads.adservices.topics.GetTopicsRequest request, kotlin.coroutines.Continuation<? super androidx.privacysandbox.ads.adservices.topics.GetTopicsResponse>);
    method public static final androidx.privacysandbox.ads.adservices.topics.TopicsManager? obtain(android.content.Context context);
    field public static final androidx.privacysandbox.ads.adservices.topics.TopicsManager.Companion Companion;
  }

  public static final class TopicsManager.Companion {
    method public androidx.privacysandbox.ads.adservices.topics.TopicsManager? obtain(android.content.Context context);
  }

}

