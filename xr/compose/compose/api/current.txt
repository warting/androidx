// Signature format: 4.0
package androidx.xr.compose.platform {

  public final class LocalSessionKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.xr.runtime.Session?> getLocalSession();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.xr.runtime.Session?> LocalSession;
  }

  public interface SpatialCapabilities {
    method public boolean isAppEnvironmentEnabled();
    method public boolean isContent3dEnabled();
    method public boolean isPassthroughControlEnabled();
    method public boolean isSpatialAudioEnabled();
    method public boolean isSpatialUiEnabled();
    property public abstract boolean isAppEnvironmentEnabled;
    property public abstract boolean isContent3dEnabled;
    property public abstract boolean isPassthroughControlEnabled;
    property public abstract boolean isSpatialAudioEnabled;
    property public abstract boolean isSpatialUiEnabled;
    field public static final androidx.xr.compose.platform.SpatialCapabilities.Companion Companion;
  }

  public static final class SpatialCapabilities.Companion {
    method public androidx.xr.compose.platform.SpatialCapabilities getNoCapabilities();
    property public androidx.xr.compose.platform.SpatialCapabilities NoCapabilities;
  }

  public final class SpatialCapabilitiesKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.xr.compose.platform.SpatialCapabilities> getLocalSpatialCapabilities();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.xr.compose.platform.SpatialCapabilities> LocalSpatialCapabilities;
  }

  public interface SpatialConfiguration {
    method public default androidx.xr.compose.unit.DpVolumeSize getBounds();
    method public default boolean hasXrSpatialFeature();
    method public default void requestFullSpaceMode();
    method public default void requestHomeSpaceMode();
    property public default androidx.xr.compose.unit.DpVolumeSize bounds;
    property public default boolean hasXrSpatialFeature;
    field public static final androidx.xr.compose.platform.SpatialConfiguration.Companion Companion;
  }

  public static final class SpatialConfiguration.Companion {
    method public boolean hasXrSpatialFeature(android.content.Context context);
  }

  public final class SpatialConfigurationKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.xr.compose.platform.SpatialConfiguration> getLocalSpatialConfiguration();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.xr.compose.platform.SpatialConfiguration> LocalSpatialConfiguration;
  }

}

package androidx.xr.compose.spatial {

  public sealed interface ContentEdge {
    field public static final androidx.xr.compose.spatial.ContentEdge.Companion Companion;
  }

  public static final class ContentEdge.Companion {
    method public androidx.xr.compose.spatial.ContentEdge.Horizontal getBottom();
    method public androidx.xr.compose.spatial.ContentEdge.Vertical getEnd();
    method public androidx.xr.compose.spatial.ContentEdge.Vertical getStart();
    method public androidx.xr.compose.spatial.ContentEdge.Horizontal getTop();
    property public androidx.xr.compose.spatial.ContentEdge.Horizontal Bottom;
    property public androidx.xr.compose.spatial.ContentEdge.Vertical End;
    property public androidx.xr.compose.spatial.ContentEdge.Vertical Start;
    property public androidx.xr.compose.spatial.ContentEdge.Horizontal Top;
  }

  public static final class ContentEdge.Horizontal implements androidx.xr.compose.spatial.ContentEdge {
    field public static final androidx.xr.compose.spatial.ContentEdge.Horizontal.Companion Companion;
  }

  public static final class ContentEdge.Horizontal.Companion {
    method public androidx.xr.compose.spatial.ContentEdge.Horizontal getBottom();
    method public androidx.xr.compose.spatial.ContentEdge.Horizontal getTop();
    property public androidx.xr.compose.spatial.ContentEdge.Horizontal Bottom;
    property public androidx.xr.compose.spatial.ContentEdge.Horizontal Top;
  }

  public static final class ContentEdge.Vertical implements androidx.xr.compose.spatial.ContentEdge {
    field public static final androidx.xr.compose.spatial.ContentEdge.Vertical.Companion Companion;
  }

  public static final class ContentEdge.Vertical.Companion {
    method public androidx.xr.compose.spatial.ContentEdge.Vertical getEnd();
    method public androidx.xr.compose.spatial.ContentEdge.Vertical getStart();
    property public androidx.xr.compose.spatial.ContentEdge.Vertical End;
    property public androidx.xr.compose.spatial.ContentEdge.Vertical Start;
  }

  public final class OrbiterDefaults {
    method @BytecodeOnly public float getElevation-D9Ej5fM();
    method public androidx.xr.compose.subspace.layout.SpatialShape getShape();
    property public androidx.compose.ui.unit.Dp Elevation;
    property public androidx.xr.compose.subspace.layout.SpatialShape Shape;
    field public static final androidx.xr.compose.spatial.OrbiterDefaults INSTANCE;
  }

  public final class OrbiterKt {
    method @KotlinOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableOpenTarget(index=0xffffffff) public static void Orbiter(androidx.xr.compose.spatial.ContentEdge.Horizontal position, optional androidx.compose.ui.unit.Dp offset, optional androidx.xr.compose.spatial.OrbiterOffsetType offsetType, optional androidx.compose.ui.Alignment.Horizontal alignment, optional androidx.xr.compose.subspace.layout.SpatialShape shape, optional androidx.compose.ui.unit.Dp elevation, optional boolean shouldRenderInNonSpatial, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @KotlinOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableOpenTarget(index=0xffffffff) public static void Orbiter(androidx.xr.compose.spatial.ContentEdge.Vertical position, optional androidx.compose.ui.unit.Dp offset, optional androidx.xr.compose.spatial.OrbiterOffsetType offsetType, optional androidx.compose.ui.Alignment.Vertical alignment, optional androidx.xr.compose.subspace.layout.SpatialShape shape, optional androidx.compose.ui.unit.Dp elevation, optional boolean shouldRenderInNonSpatial, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableOpenTarget(index=0xffffffff) public static void Orbiter-K8oyVJY(androidx.xr.compose.spatial.ContentEdge.Horizontal, float, int, androidx.compose.ui.Alignment.Horizontal?, androidx.xr.compose.subspace.layout.SpatialShape?, float, boolean, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableOpenTarget(index=0xffffffff) public static void Orbiter-K8oyVJY(androidx.xr.compose.spatial.ContentEdge.Vertical, float, int, androidx.compose.ui.Alignment.Vertical?, androidx.xr.compose.subspace.layout.SpatialShape?, float, boolean, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  @kotlin.jvm.JvmInline public final value class OrbiterOffsetType {
    method @BytecodeOnly public static androidx.xr.compose.spatial.OrbiterOffsetType! box-impl(int);
    method @BytecodeOnly public int unbox-impl();
    field public static final androidx.xr.compose.spatial.OrbiterOffsetType.Companion Companion;
  }

  public static final class OrbiterOffsetType.Companion {
    method @BytecodeOnly public int getInnerEdge-daoJdME();
    method @BytecodeOnly public int getOuterEdge-daoJdME();
    method @BytecodeOnly public int getOverlap-daoJdME();
    property public androidx.xr.compose.spatial.OrbiterOffsetType InnerEdge;
    property public androidx.xr.compose.spatial.OrbiterOffsetType OuterEdge;
    property public androidx.xr.compose.spatial.OrbiterOffsetType Overlap;
  }

  public final class SpatialDialogKt {
    method @androidx.compose.runtime.Composable public static void SpatialDialog(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, optional androidx.xr.compose.spatial.SpatialDialogProperties properties, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void SpatialDialog(kotlin.jvm.functions.Function0<kotlin.Unit!>, androidx.xr.compose.spatial.SpatialDialogProperties?, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  public final class SpatialDialogProperties {
    ctor public SpatialDialogProperties();
    ctor @BytecodeOnly public SpatialDialogProperties(boolean, boolean, boolean, androidx.compose.animation.core.FiniteAnimationSpec!, float, kotlin.jvm.internal.DefaultConstructorMarker!);
    ctor @KotlinOnly public SpatialDialogProperties(optional boolean dismissOnBackPress, optional boolean dismissOnClickOutside, optional boolean usePlatformDefaultWidth, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> backgroundContentAnimationSpec, optional androidx.compose.ui.unit.Dp elevation);
    method @KotlinOnly public androidx.xr.compose.spatial.SpatialDialogProperties copy(optional boolean dismissOnBackPress, optional boolean dismissOnClickOutside, optional boolean usePlatformDefaultWidth, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> restingLevelAnimationSpec, optional androidx.compose.ui.unit.Dp elevation);
    method @BytecodeOnly public androidx.xr.compose.spatial.SpatialDialogProperties copy-M2VBTUQ(boolean, boolean, boolean, androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float!>, float);
    method public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> getBackgroundContentAnimationSpec();
    method public boolean getDismissOnBackPress();
    method public boolean getDismissOnClickOutside();
    method @BytecodeOnly public float getElevation-D9Ej5fM();
    method public boolean getUsePlatformDefaultWidth();
    property public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> backgroundContentAnimationSpec;
    property public boolean dismissOnBackPress;
    property public boolean dismissOnClickOutside;
    property public androidx.compose.ui.unit.Dp elevation;
    property public boolean usePlatformDefaultWidth;
  }

  public final class SpatialElevationKt {
    method @KotlinOnly @androidx.compose.runtime.Composable public static void SpatialElevation(optional androidx.compose.ui.unit.Dp elevation, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void SpatialElevation--orJrPs(float, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  public final class SpatialElevationLevel {
    method @BytecodeOnly public float getActivityDefault-D9Ej5fM();
    method @BytecodeOnly public float getDialogDefault-D9Ej5fM();
    method @BytecodeOnly public float getLevel0-D9Ej5fM();
    method @BytecodeOnly public float getLevel1-D9Ej5fM();
    method @BytecodeOnly public float getLevel2-D9Ej5fM();
    method @BytecodeOnly public float getLevel3-D9Ej5fM();
    method @BytecodeOnly public float getLevel4-D9Ej5fM();
    method @BytecodeOnly public float getLevel5-D9Ej5fM();
    property public androidx.compose.ui.unit.Dp ActivityDefault;
    property public androidx.compose.ui.unit.Dp DialogDefault;
    property public androidx.compose.ui.unit.Dp Level0;
    property public androidx.compose.ui.unit.Dp Level1;
    property public androidx.compose.ui.unit.Dp Level2;
    property public androidx.compose.ui.unit.Dp Level3;
    property public androidx.compose.ui.unit.Dp Level4;
    property public androidx.compose.ui.unit.Dp Level5;
    field public static final androidx.xr.compose.spatial.SpatialElevationLevel INSTANCE;
  }

  public final class SpatialPopupKt {
    method @KotlinOnly @androidx.compose.runtime.Composable public static void SpatialPopup(optional androidx.compose.ui.Alignment alignment, optional androidx.compose.ui.unit.IntOffset offset, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onDismissRequest, optional androidx.compose.ui.unit.Dp elevation, optional androidx.compose.ui.window.PopupProperties properties, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void SpatialPopup-nw0TIBo(androidx.compose.ui.Alignment?, long, kotlin.jvm.functions.Function0<kotlin.Unit!>?, float, androidx.compose.ui.window.PopupProperties?, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  public final class SubspaceKt {
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableOpenTarget(index=0xffffffff) public static void ApplicationSubspace(optional androidx.xr.compose.unit.VolumeConstraints? constraints, kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.SpatialBoxScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableOpenTarget(index=0xffffffff) public static void ApplicationSubspace(androidx.xr.compose.unit.VolumeConstraints?, kotlin.jvm.functions.Function3<? super androidx.xr.compose.subspace.SpatialBoxScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableOpenTarget(index=0xffffffff) public static void Subspace(kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.SpatialBoxScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableOpenTarget(index=0xffffffff) public static void Subspace(kotlin.jvm.functions.Function3<? super androidx.xr.compose.subspace.SpatialBoxScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int);
  }

}

package androidx.xr.compose.subspace {

  public final class AnchorPolicy extends androidx.xr.compose.subspace.DragPolicy {
    ctor public AnchorPolicy();
    ctor public AnchorPolicy(optional boolean isEnabled, optional java.util.Set<androidx.xr.compose.subspace.layout.PlaneOrientation> anchorPlaneOrientations, optional java.util.Set<androidx.xr.compose.subspace.layout.PlaneSemantic> anchorPlaneSemantics);
    method public java.util.Set<androidx.xr.compose.subspace.layout.PlaneOrientation> getAnchorPlaneOrientations();
    method public java.util.Set<androidx.xr.compose.subspace.layout.PlaneSemantic> getAnchorPlaneSemantics();
    method public boolean isEnabled();
    property public java.util.Set<androidx.xr.compose.subspace.layout.PlaneOrientation> anchorPlaneOrientations;
    property public java.util.Set<androidx.xr.compose.subspace.layout.PlaneSemantic> anchorPlaneSemantics;
    property public boolean isEnabled;
  }

  public abstract class DragPolicy {
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(level=kotlin.RequiresOptIn.Level.ERROR, message="This is an experimental API. It may be changed or removed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalSubspaceVolumeApi {
  }

  public final class MovePolicy extends androidx.xr.compose.subspace.DragPolicy {
    ctor public MovePolicy();
    ctor public MovePolicy(optional boolean isEnabled, optional boolean isStickyPose, optional boolean shouldScaleWithDistance, optional kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.layout.SpatialMoveStartEvent,kotlin.Unit>? onMoveStart, optional kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.layout.SpatialMoveEndEvent,kotlin.Unit>? onMoveEnd, optional kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.layout.SpatialMoveEvent,java.lang.Boolean>? onMove);
    method public kotlin.jvm.functions.Function1<androidx.xr.compose.subspace.layout.SpatialMoveEvent,java.lang.Boolean>? getOnMove();
    method public kotlin.jvm.functions.Function1<androidx.xr.compose.subspace.layout.SpatialMoveEndEvent,kotlin.Unit>? getOnMoveEnd();
    method public kotlin.jvm.functions.Function1<androidx.xr.compose.subspace.layout.SpatialMoveStartEvent,kotlin.Unit>? getOnMoveStart();
    method public boolean isEnabled();
    method public boolean isStickyPose();
    method public boolean shouldScaleWithDistance();
    property public boolean isEnabled;
    property public boolean isStickyPose;
    property public kotlin.jvm.functions.Function1<androidx.xr.compose.subspace.layout.SpatialMoveEvent,java.lang.Boolean>? onMove;
    property public kotlin.jvm.functions.Function1<androidx.xr.compose.subspace.layout.SpatialMoveEndEvent,kotlin.Unit>? onMoveEnd;
    property public kotlin.jvm.functions.Function1<androidx.xr.compose.subspace.layout.SpatialMoveStartEvent,kotlin.Unit>? onMoveStart;
    property public boolean shouldScaleWithDistance;
  }

  public final class ResizePolicy {
    ctor public ResizePolicy();
    ctor public ResizePolicy(optional boolean isEnabled, optional androidx.xr.compose.unit.DpVolumeSize minimumSize, optional androidx.xr.compose.unit.DpVolumeSize maximumSize, optional boolean shouldMaintainAspectRatio, optional kotlin.jvm.functions.Function1<? super androidx.xr.compose.unit.IntVolumeSize,java.lang.Boolean>? onSizeChange);
    method public androidx.xr.compose.unit.DpVolumeSize getMaximumSize();
    method public androidx.xr.compose.unit.DpVolumeSize getMinimumSize();
    method public kotlin.jvm.functions.Function1<androidx.xr.compose.unit.IntVolumeSize,java.lang.Boolean>? getOnSizeChange();
    method public boolean isEnabled();
    method public boolean shouldMaintainAspectRatio();
    property public boolean isEnabled;
    property public androidx.xr.compose.unit.DpVolumeSize maximumSize;
    property public androidx.xr.compose.unit.DpVolumeSize minimumSize;
    property public kotlin.jvm.functions.Function1<androidx.xr.compose.unit.IntVolumeSize,java.lang.Boolean>? onSizeChange;
    property public boolean shouldMaintainAspectRatio;
  }

  public final class SceneCoreEntityKt {
    method @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static <T extends androidx.xr.scenecore.Entity> void SceneCoreEntity(kotlin.jvm.functions.Function0<? extends T> factory, optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional kotlin.jvm.functions.Function1<? super T,kotlin.Unit> update, optional androidx.xr.compose.subspace.SceneCoreEntitySizeAdapter<T>? sizeAdapter, optional kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static <T extends androidx.xr.scenecore.Entity> void SceneCoreEntity(kotlin.jvm.functions.Function0<? extends T!>, androidx.xr.compose.subspace.layout.SubspaceModifier?, kotlin.jvm.functions.Function1<? super T!,kotlin.Unit!>?, androidx.xr.compose.subspace.SceneCoreEntitySizeAdapter<T!>?, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>?, androidx.compose.runtime.Composer?, int, int);
  }

  public final class SceneCoreEntitySizeAdapter<T extends androidx.xr.scenecore.Entity> {
    ctor public SceneCoreEntitySizeAdapter(kotlin.jvm.functions.Function2<? super T,? super androidx.xr.compose.unit.IntVolumeSize,kotlin.Unit> onLayoutSizeChanged, optional kotlin.jvm.functions.Function1<? super T,androidx.xr.compose.unit.IntVolumeSize>? intrinsicSize);
    method public kotlin.jvm.functions.Function1<T,androidx.xr.compose.unit.IntVolumeSize>? getIntrinsicSize();
    method public kotlin.jvm.functions.Function2<T,androidx.xr.compose.unit.IntVolumeSize,kotlin.Unit> getOnLayoutSizeChanged();
    property public kotlin.jvm.functions.Function1<T,androidx.xr.compose.unit.IntVolumeSize>? intrinsicSize;
    property public kotlin.jvm.functions.Function2<T,androidx.xr.compose.unit.IntVolumeSize,kotlin.Unit> onLayoutSizeChanged;
  }

  public final class SpatialBoxKt {
    method @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialBox(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional androidx.xr.compose.subspace.layout.SpatialAlignment alignment, optional boolean propagateMinConstraints, kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.SpatialBoxScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialBox(androidx.xr.compose.subspace.layout.SubspaceModifier?, androidx.xr.compose.subspace.layout.SpatialAlignment?, boolean, kotlin.jvm.functions.Function3<? super androidx.xr.compose.subspace.SpatialBoxScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  @androidx.compose.foundation.layout.LayoutScopeMarker public interface SpatialBoxScope {
    method public androidx.xr.compose.subspace.layout.SubspaceModifier align(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.subspace.layout.SpatialAlignment alignment);
  }

  public final class SpatialColumnKt {
    method @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialColumn(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional androidx.xr.compose.subspace.layout.SpatialAlignment alignment, kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.SpatialColumnScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialColumn(androidx.xr.compose.subspace.layout.SubspaceModifier?, androidx.xr.compose.subspace.layout.SpatialAlignment?, kotlin.jvm.functions.Function3<? super androidx.xr.compose.subspace.SpatialColumnScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  @androidx.compose.foundation.layout.LayoutScopeMarker public interface SpatialColumnScope {
    method public androidx.xr.compose.subspace.layout.SubspaceModifier align(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.subspace.layout.SpatialAlignment.Depth alignment);
    method public androidx.xr.compose.subspace.layout.SubspaceModifier align(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal alignment);
    method public androidx.xr.compose.subspace.layout.SubspaceModifier weight(androidx.xr.compose.subspace.layout.SubspaceModifier, @FloatRange(from=0.0, fromInclusive=false) float weight, optional boolean fill);
  }

  public final class SpatialCurvedRowDefaults {
    method @BytecodeOnly public float getCurveRadius-D9Ej5fM();
    property public androidx.compose.ui.unit.Dp curveRadius;
    field public static final androidx.xr.compose.subspace.SpatialCurvedRowDefaults INSTANCE;
  }

  public final class SpatialLayoutSpacerKt {
    method @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialLayoutSpacer(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialLayoutSpacer(androidx.xr.compose.subspace.layout.SubspaceModifier?, androidx.compose.runtime.Composer?, int, int);
  }

  public final class SpatialPanelDefaults {
    method public androidx.xr.compose.subspace.layout.SpatialShape getShape();
    property public androidx.xr.compose.subspace.layout.SpatialShape shape;
    field public static final androidx.xr.compose.subspace.SpatialPanelDefaults INSTANCE;
  }

  public final class SpatialPanelKt {
    method @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialActivityPanel(android.content.Intent intent, optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional androidx.xr.compose.subspace.layout.SpatialShape shape, optional androidx.xr.compose.subspace.DragPolicy? dragPolicy, optional androidx.xr.compose.subspace.ResizePolicy? resizePolicy);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialActivityPanel(android.content.Intent, androidx.xr.compose.subspace.layout.SubspaceModifier?, androidx.xr.compose.subspace.layout.SpatialShape?, androidx.xr.compose.subspace.DragPolicy?, androidx.xr.compose.subspace.ResizePolicy?, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static <T extends android.view.View> void SpatialAndroidViewPanel(kotlin.jvm.functions.Function1<? super android.content.Context,? extends T> factory, optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional kotlin.jvm.functions.Function1<? super T,kotlin.Unit> update, optional androidx.xr.compose.subspace.layout.SpatialShape shape, optional androidx.xr.compose.subspace.DragPolicy? dragPolicy, optional androidx.xr.compose.subspace.ResizePolicy? resizePolicy);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static <T extends android.view.View> void SpatialAndroidViewPanel(kotlin.jvm.functions.Function1<? super android.content.Context!,? extends T!>, androidx.xr.compose.subspace.layout.SubspaceModifier?, kotlin.jvm.functions.Function1<? super T!,kotlin.Unit!>?, androidx.xr.compose.subspace.layout.SpatialShape?, androidx.xr.compose.subspace.DragPolicy?, androidx.xr.compose.subspace.ResizePolicy?, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialPanel(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional androidx.xr.compose.subspace.layout.SpatialShape shape, optional androidx.xr.compose.subspace.DragPolicy? dragPolicy, optional androidx.xr.compose.subspace.ResizePolicy? resizePolicy, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialPanel(androidx.xr.compose.subspace.layout.SubspaceModifier?, androidx.xr.compose.subspace.layout.SpatialShape?, androidx.xr.compose.subspace.DragPolicy?, androidx.xr.compose.subspace.ResizePolicy?, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  public final class SpatialRowKt {
    method @KotlinOnly @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialCurvedRow(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional androidx.xr.compose.subspace.layout.SpatialAlignment alignment, optional androidx.compose.ui.unit.Dp curveRadius, kotlin.jvm.functions.Function1<androidx.xr.compose.subspace.SpatialRowScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialCurvedRow-942rkJo(androidx.xr.compose.subspace.layout.SubspaceModifier?, androidx.xr.compose.subspace.layout.SpatialAlignment?, float, kotlin.jvm.functions.Function3<? super androidx.xr.compose.subspace.SpatialRowScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialRow(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional androidx.xr.compose.subspace.layout.SpatialAlignment alignment, kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.SpatialRowScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialRow(androidx.xr.compose.subspace.layout.SubspaceModifier?, androidx.xr.compose.subspace.layout.SpatialAlignment?, kotlin.jvm.functions.Function3<? super androidx.xr.compose.subspace.SpatialRowScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  @androidx.compose.foundation.layout.LayoutScopeMarker public interface SpatialRowScope {
    method public androidx.xr.compose.subspace.layout.SubspaceModifier align(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.subspace.layout.SpatialAlignment.Depth alignment);
    method public androidx.xr.compose.subspace.layout.SubspaceModifier align(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.subspace.layout.SpatialAlignment.Vertical alignment);
    method public androidx.xr.compose.subspace.layout.SubspaceModifier weight(androidx.xr.compose.subspace.layout.SubspaceModifier, @FloatRange(from=0.0, fromInclusive=false) float weight, optional boolean fill);
  }

  @androidx.compose.runtime.ComposableTargetMarker(description="Subspace Composable") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.FILE, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.TYPE, kotlin.annotation.AnnotationTarget.TYPE_PARAMETER}) public @interface SubspaceComposable {
  }

  public final class VolumeKt {
    method @SuppressCompatibility @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.ExperimentalSubspaceVolumeApi @androidx.xr.compose.subspace.SubspaceComposable public static void Volume(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, kotlin.jvm.functions.Function1<? super androidx.xr.scenecore.Entity,kotlin.Unit> onVolumeEntity);
    method @BytecodeOnly @SuppressCompatibility @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.ExperimentalSubspaceVolumeApi @androidx.xr.compose.subspace.SubspaceComposable public static void Volume(androidx.xr.compose.subspace.layout.SubspaceModifier?, kotlin.jvm.functions.Function1<? super androidx.xr.scenecore.Entity!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

}

package androidx.xr.compose.subspace.layout {

  public final class AlphaKt {
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier alpha(androidx.xr.compose.subspace.layout.SubspaceModifier, @FloatRange(from=0.0, to=1.0) float alpha);
  }

  public final class AspectRatioKt {
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier aspectRatio(androidx.xr.compose.subspace.layout.SubspaceModifier, @FloatRange(from=0.0, fromInclusive=false) float ratio, optional boolean matchHeightConstraintsFirst);
  }

  public final class MovableKt {
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier movable(androidx.xr.compose.subspace.layout.SubspaceModifier, optional boolean enabled, optional boolean stickyPose, optional boolean scaleWithDistance, optional kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.layout.SpatialMoveStartEvent,kotlin.Unit>? onMoveStart, optional kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.layout.SpatialMoveEndEvent,kotlin.Unit>? onMoveEnd, optional kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.layout.SpatialMoveEvent,java.lang.Boolean>? onMove);
  }

  public final class OffsetKt {
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier offset(androidx.xr.compose.subspace.layout.SubspaceModifier, optional androidx.compose.ui.unit.Dp x, optional androidx.compose.ui.unit.Dp y, optional androidx.compose.ui.unit.Dp z);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier offset-qQh39rQ(androidx.xr.compose.subspace.layout.SubspaceModifier, float, float, float);
  }

  public final class OnGloballyPositionedModifierKt {
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier onGloballyPositioned(androidx.xr.compose.subspace.layout.SubspaceModifier, kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.layout.SubspaceLayoutCoordinates,kotlin.Unit> onGloballyPositioned);
  }

  public final class OnPointSourceParamsAvailableKt {
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier onPointSourceParamsAvailable(androidx.xr.compose.subspace.layout.SubspaceModifier, kotlin.jvm.functions.Function1<? super androidx.xr.scenecore.PointSourceParams,kotlin.Unit> onPointSourceParamsAvailable);
  }

  public final class PaddingKt {
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier padding(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.compose.ui.unit.Dp all);
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier padding(androidx.xr.compose.subspace.layout.SubspaceModifier, optional androidx.compose.ui.unit.Dp horizontal, optional androidx.compose.ui.unit.Dp vertical, optional androidx.compose.ui.unit.Dp depth);
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier padding(androidx.xr.compose.subspace.layout.SubspaceModifier, optional androidx.compose.ui.unit.Dp left, optional androidx.compose.ui.unit.Dp top, optional androidx.compose.ui.unit.Dp right, optional androidx.compose.ui.unit.Dp bottom, optional androidx.compose.ui.unit.Dp front, optional androidx.compose.ui.unit.Dp back);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier padding-0tawpAo(androidx.xr.compose.subspace.layout.SubspaceModifier, float, float, float, float, float, float);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier padding-3ABfNKs(androidx.xr.compose.subspace.layout.SubspaceModifier, float);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier padding-qQh39rQ(androidx.xr.compose.subspace.layout.SubspaceModifier, float, float, float);
  }

  public interface ParentLayoutParamsAdjustable {
  }

  public interface ParentLayoutParamsModifier {
    method public void adjustParams(androidx.xr.compose.subspace.layout.ParentLayoutParamsAdjustable params);
  }

  @kotlin.jvm.JvmInline public final value class PlaneOrientation {
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.PlaneOrientation! box-impl(int);
    method @BytecodeOnly public int unbox-impl();
    field public static final androidx.xr.compose.subspace.layout.PlaneOrientation.Companion Companion;
  }

  public static final class PlaneOrientation.Companion {
    method @BytecodeOnly public int getAny-rnqRDCc();
    method @BytecodeOnly public int getHorizontal-rnqRDCc();
    method @BytecodeOnly public int getVertical-rnqRDCc();
    property public androidx.xr.compose.subspace.layout.PlaneOrientation Any;
    property public androidx.xr.compose.subspace.layout.PlaneOrientation Horizontal;
    property public androidx.xr.compose.subspace.layout.PlaneOrientation Vertical;
  }

  @kotlin.jvm.JvmInline public final value class PlaneSemantic {
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.PlaneSemantic! box-impl(int);
    method @BytecodeOnly public int unbox-impl();
    field public static final androidx.xr.compose.subspace.layout.PlaneSemantic.Companion Companion;
  }

  public static final class PlaneSemantic.Companion {
    method @BytecodeOnly public int getAny-FWya8ks();
    method @BytecodeOnly public int getCeiling-FWya8ks();
    method @BytecodeOnly public int getFloor-FWya8ks();
    method @BytecodeOnly public int getTable-FWya8ks();
    method @BytecodeOnly public int getWall-FWya8ks();
    property public androidx.xr.compose.subspace.layout.PlaneSemantic Any;
    property public androidx.xr.compose.subspace.layout.PlaneSemantic Ceiling;
    property public androidx.xr.compose.subspace.layout.PlaneSemantic Floor;
    property public androidx.xr.compose.subspace.layout.PlaneSemantic Table;
    property public androidx.xr.compose.subspace.layout.PlaneSemantic Wall;
  }

  public final class PointerHoverIconKt {
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier pointerHoverIcon(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.scenecore.SpatialPointerIcon icon);
  }

  public final class ResizableKt {
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier resizable(androidx.xr.compose.subspace.layout.SubspaceModifier, optional boolean enabled, optional androidx.xr.compose.unit.DpVolumeSize minimumSize, optional androidx.xr.compose.unit.DpVolumeSize maximumSize, optional boolean maintainAspectRatio, optional kotlin.jvm.functions.Function1<? super androidx.xr.compose.unit.IntVolumeSize,java.lang.Boolean>? onSizeChange);
  }

  public final class RotateKt {
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier rotate(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.runtime.math.Quaternion quaternion);
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier rotate(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.runtime.math.Vector3 axisAngle, float rotation);
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier rotate(androidx.xr.compose.subspace.layout.SubspaceModifier, float pitch, float yaw, float roll);
  }

  public final class ScaleKt {
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier scale(androidx.xr.compose.subspace.layout.SubspaceModifier, float scale);
  }

  public final class SemanticsModifierKt {
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier semantics(androidx.xr.compose.subspace.layout.SubspaceModifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.semantics.SemanticsPropertyReceiver,kotlin.Unit> properties);
  }

  public final class SizeKt {
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier depth(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.compose.ui.unit.Dp depth);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier depth-3ABfNKs(androidx.xr.compose.subspace.layout.SubspaceModifier, float);
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier depthIn(androidx.xr.compose.subspace.layout.SubspaceModifier, optional androidx.compose.ui.unit.Dp min, optional androidx.compose.ui.unit.Dp max);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier depthIn-VpY3zN4(androidx.xr.compose.subspace.layout.SubspaceModifier, float, float);
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier fillMaxDepth(androidx.xr.compose.subspace.layout.SubspaceModifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier fillMaxHeight(androidx.xr.compose.subspace.layout.SubspaceModifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier fillMaxSize(androidx.xr.compose.subspace.layout.SubspaceModifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier fillMaxWidth(androidx.xr.compose.subspace.layout.SubspaceModifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier height(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.compose.ui.unit.Dp height);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier height-3ABfNKs(androidx.xr.compose.subspace.layout.SubspaceModifier, float);
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier heightIn(androidx.xr.compose.subspace.layout.SubspaceModifier, optional androidx.compose.ui.unit.Dp min, optional androidx.compose.ui.unit.Dp max);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier heightIn-VpY3zN4(androidx.xr.compose.subspace.layout.SubspaceModifier, float, float);
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredDepth(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.compose.ui.unit.Dp depth);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredDepth-3ABfNKs(androidx.xr.compose.subspace.layout.SubspaceModifier, float);
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredHeight(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.compose.ui.unit.Dp height);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredHeight-3ABfNKs(androidx.xr.compose.subspace.layout.SubspaceModifier, float);
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredSize(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.compose.ui.unit.Dp size);
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredSize(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.unit.DpVolumeSize size);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredSize-3ABfNKs(androidx.xr.compose.subspace.layout.SubspaceModifier, float);
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredWidth(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.compose.ui.unit.Dp width);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredWidth-3ABfNKs(androidx.xr.compose.subspace.layout.SubspaceModifier, float);
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier size(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.compose.ui.unit.Dp size);
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier size(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.unit.DpVolumeSize size);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier size-3ABfNKs(androidx.xr.compose.subspace.layout.SubspaceModifier, float);
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier sizeIn(androidx.xr.compose.subspace.layout.SubspaceModifier, optional androidx.compose.ui.unit.Dp minWidth, optional androidx.compose.ui.unit.Dp maxWidth, optional androidx.compose.ui.unit.Dp minHeight, optional androidx.compose.ui.unit.Dp maxHeight, optional androidx.compose.ui.unit.Dp minDepth, optional androidx.compose.ui.unit.Dp maxDepth);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier sizeIn-0tawpAo(androidx.xr.compose.subspace.layout.SubspaceModifier, float, float, float, float, float, float);
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier width(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.compose.ui.unit.Dp width);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier width-3ABfNKs(androidx.xr.compose.subspace.layout.SubspaceModifier, float);
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier widthIn(androidx.xr.compose.subspace.layout.SubspaceModifier, optional androidx.compose.ui.unit.Dp min, optional androidx.compose.ui.unit.Dp max);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SubspaceModifier widthIn-VpY3zN4(androidx.xr.compose.subspace.layout.SubspaceModifier, float, float);
  }

  public final class SpatialAbsoluteAlignment {
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getBottomLeft();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getBottomRight();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getCenterLeft();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getCenterRight();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal getLeft();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal getRight();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getTopLeft();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getTopRight();
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment BottomLeft;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment BottomRight;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment CenterLeft;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment CenterRight;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal Left;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal Right;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment TopLeft;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment TopRight;
    field public static final androidx.xr.compose.subspace.layout.SpatialAbsoluteAlignment INSTANCE;
  }

  public interface SpatialAlignment {
    method public int depthOffset(int depth, int space);
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment.Depth getBack();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment.Vertical getBottom();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getBottomCenter();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getBottomEnd();
    method @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment getBottomLeft();
    method @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment getBottomRight();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getBottomStart();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getCenter();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment.Depth getCenterDepthwise();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getCenterEnd();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal getCenterHorizontally();
    method @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment getCenterLeft();
    method @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment getCenterRight();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getCenterStart();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment.Vertical getCenterVertically();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal getEnd();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment.Depth getFront();
    method @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal getLeft();
    method @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal getRight();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal getStart();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment.Vertical getTop();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getTopCenter();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getTopEnd();
    method @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment getTopLeft();
    method @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment getTopRight();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getTopStart();
    method public int horizontalOffset(int width, int space, optional androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method public androidx.xr.runtime.math.Vector3 position(androidx.xr.compose.unit.IntVolumeSize size, androidx.xr.compose.unit.IntVolumeSize space, optional androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method public int verticalOffset(int height, int space);
    field public static final androidx.xr.compose.subspace.layout.SpatialAlignment.Companion Companion;
  }

  public static final class SpatialAlignment.Companion {
    method public androidx.xr.compose.subspace.layout.SpatialAlignment.Depth getBack();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment.Vertical getBottom();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getBottomCenter();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getBottomEnd();
    method @Deprecated public androidx.xr.compose.subspace.layout.SpatialAlignment getBottomLeft();
    method @Deprecated public androidx.xr.compose.subspace.layout.SpatialAlignment getBottomRight();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getBottomStart();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getCenter();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment.Depth getCenterDepthwise();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getCenterEnd();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal getCenterHorizontally();
    method @Deprecated public androidx.xr.compose.subspace.layout.SpatialAlignment getCenterLeft();
    method @Deprecated public androidx.xr.compose.subspace.layout.SpatialAlignment getCenterRight();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getCenterStart();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment.Vertical getCenterVertically();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal getEnd();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment.Depth getFront();
    method @Deprecated public androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal getLeft();
    method @Deprecated public androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal getRight();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal getStart();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment.Vertical getTop();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getTopCenter();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getTopEnd();
    method @Deprecated public androidx.xr.compose.subspace.layout.SpatialAlignment getTopLeft();
    method @Deprecated public androidx.xr.compose.subspace.layout.SpatialAlignment getTopRight();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getTopStart();
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment.Depth Back;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment.Vertical Bottom;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment BottomCenter;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment BottomEnd;
    property @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment BottomLeft;
    property @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment BottomRight;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment BottomStart;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment Center;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment.Depth CenterDepthwise;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment CenterEnd;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal CenterHorizontally;
    property @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment CenterLeft;
    property @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment CenterRight;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment CenterStart;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment.Vertical CenterVertically;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal End;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment.Depth Front;
    property @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal Left;
    property @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal Right;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal Start;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment.Vertical Top;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment TopCenter;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment TopEnd;
    property @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment TopLeft;
    property @Deprecated public static androidx.xr.compose.subspace.layout.SpatialAlignment TopRight;
    property public static androidx.xr.compose.subspace.layout.SpatialAlignment TopStart;
  }

  public static interface SpatialAlignment.Depth {
    method public int offset(int depth, int space);
  }

  public static interface SpatialAlignment.Horizontal {
    method public int offset(int width, int space, optional androidx.compose.ui.unit.LayoutDirection layoutDirection);
  }

  public static interface SpatialAlignment.Vertical {
    method public int offset(int height, int space);
  }

  public final class SpatialBiasAbsoluteAlignment implements androidx.xr.compose.subspace.layout.SpatialAlignment {
    ctor public SpatialBiasAbsoluteAlignment(float horizontalBias, float verticalBias, float depthBias);
    method public androidx.xr.compose.subspace.layout.SpatialBiasAbsoluteAlignment copy(optional float horizontalBias, optional float verticalBias, optional float depthBias);
    method public int depthOffset(int depth, int space);
    method public float getDepthBias();
    method public float getHorizontalBias();
    method public float getVerticalBias();
    method public int horizontalOffset(int width, int space, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method public androidx.xr.runtime.math.Vector3 position(androidx.xr.compose.unit.IntVolumeSize size, androidx.xr.compose.unit.IntVolumeSize space, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method public int verticalOffset(int height, int space);
    property public float depthBias;
    property public float horizontalBias;
    property public float verticalBias;
    field public static final androidx.xr.compose.subspace.layout.SpatialBiasAbsoluteAlignment.Companion Companion;
  }

  public static final class SpatialBiasAbsoluteAlignment.Companion {
  }

  public static final class SpatialBiasAbsoluteAlignment.Horizontal implements androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal {
    ctor public SpatialBiasAbsoluteAlignment.Horizontal(float bias);
    method public androidx.xr.compose.subspace.layout.SpatialBiasAbsoluteAlignment.Horizontal copy(optional float bias);
    method public float getBias();
    method public int offset(int width, int space, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    property public float bias;
  }

  public final class SpatialBiasAlignment implements androidx.xr.compose.subspace.layout.SpatialAlignment {
    ctor public SpatialBiasAlignment(float horizontalBias, float verticalBias, float depthBias);
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment copy(optional float horizontalBias, optional float verticalBias, optional float depthBias);
    method public int depthOffset(int depth, int space);
    method public float getDepthBias();
    method public float getHorizontalBias();
    method public float getVerticalBias();
    method public int horizontalOffset(int width, int space, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method public androidx.xr.runtime.math.Vector3 position(androidx.xr.compose.unit.IntVolumeSize size, androidx.xr.compose.unit.IntVolumeSize space, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method public int verticalOffset(int height, int space);
    property public float depthBias;
    property public float horizontalBias;
    property public float verticalBias;
    field public static final androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Companion Companion;
  }

  public static final class SpatialBiasAlignment.Companion {
  }

  public static final class SpatialBiasAlignment.Depth implements androidx.xr.compose.subspace.layout.SpatialAlignment.Depth {
    ctor public SpatialBiasAlignment.Depth(float bias);
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Depth copy(optional float bias);
    method public float getBias();
    method public int offset(int depth, int space);
    property public float bias;
  }

  public static final class SpatialBiasAlignment.Horizontal implements androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal {
    ctor public SpatialBiasAlignment.Horizontal(float bias);
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Horizontal copy(optional float bias);
    method public float getBias();
    method public int offset(int width, int space, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    property public float bias;
  }

  public static final class SpatialBiasAlignment.Vertical implements androidx.xr.compose.subspace.layout.SpatialAlignment.Vertical {
    ctor public SpatialBiasAlignment.Vertical(float bias);
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Vertical copy(optional float bias);
    method public float getBias();
    method public int offset(int height, int space);
    property public float bias;
  }

  public abstract class SpatialFeatheringEffect {
  }

  public final class SpatialFeatheringEffectKt {
    method @KotlinOnly public static androidx.xr.compose.subspace.layout.SpatialFeatheringEffect SpatialSmoothFeatheringEffect(androidx.compose.ui.unit.Dp horizontal, androidx.compose.ui.unit.Dp vertical);
    method public static androidx.xr.compose.subspace.layout.SpatialFeatheringEffect SpatialSmoothFeatheringEffect(float horizontal, float vertical);
    method public static androidx.xr.compose.subspace.layout.SpatialFeatheringEffect SpatialSmoothFeatheringEffect(@IntRange(from=0L, to=50L) int percentHorizontal, @IntRange(from=0L, to=50L) int percentVertical);
    method @BytecodeOnly public static androidx.xr.compose.subspace.layout.SpatialFeatheringEffect SpatialSmoothFeatheringEffect-YgX7TsA(float, float);
    method public static androidx.xr.compose.subspace.layout.SpatialFeatheringEffect getZeroFeatheringEffect();
    property public static androidx.xr.compose.subspace.layout.SpatialFeatheringEffect ZeroFeatheringEffect;
  }

  public final class SpatialMoveEndEvent {
    ctor public SpatialMoveEndEvent(androidx.xr.runtime.math.Pose pose, float scale, androidx.xr.compose.unit.IntVolumeSize size);
    method public androidx.xr.runtime.math.Pose getPose();
    method public float getScale();
    method public androidx.xr.compose.unit.IntVolumeSize getSize();
    property public androidx.xr.runtime.math.Pose pose;
    property public float scale;
    property public androidx.xr.compose.unit.IntVolumeSize size;
  }

  public final class SpatialMoveEvent {
    ctor public SpatialMoveEvent();
    ctor public SpatialMoveEvent(optional androidx.xr.runtime.math.Pose pose, optional float scale, optional androidx.xr.compose.unit.IntVolumeSize size);
    method public androidx.xr.runtime.math.Pose getPose();
    method public float getScale();
    method public androidx.xr.compose.unit.IntVolumeSize getSize();
    method public void setPose(androidx.xr.runtime.math.Pose);
    method public void setScale(float);
    method public void setSize(androidx.xr.compose.unit.IntVolumeSize);
    property public androidx.xr.runtime.math.Pose pose;
    property public float scale;
    property public androidx.xr.compose.unit.IntVolumeSize size;
  }

  public final class SpatialMoveStartEvent {
    ctor public SpatialMoveStartEvent(androidx.xr.runtime.math.Pose pose, float scale, androidx.xr.compose.unit.IntVolumeSize size);
    method public androidx.xr.runtime.math.Pose getPose();
    method public float getScale();
    method public androidx.xr.compose.unit.IntVolumeSize getSize();
    property public androidx.xr.runtime.math.Pose pose;
    property public float scale;
    property public androidx.xr.compose.unit.IntVolumeSize size;
  }

  public final class SpatialRoundedCornerShape extends androidx.xr.compose.subspace.layout.SpatialShape {
    ctor public SpatialRoundedCornerShape(androidx.compose.foundation.shape.CornerSize size);
  }

  public abstract class SpatialShape {
  }

  public interface SubspaceLayoutCoordinates {
    method public androidx.xr.runtime.math.Pose getPose();
    method public androidx.xr.runtime.math.Pose getPoseInParentEntity();
    method public androidx.xr.runtime.math.Pose getPoseInRoot();
    method public androidx.xr.compose.unit.IntVolumeSize getSize();
    property public abstract androidx.xr.runtime.math.Pose pose;
    property public abstract androidx.xr.runtime.math.Pose poseInParentEntity;
    property public abstract androidx.xr.runtime.math.Pose poseInRoot;
    property public abstract androidx.xr.compose.unit.IntVolumeSize size;
  }

  public final class SubspaceLayoutKt {
    method @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static inline void SubspaceLayout(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, androidx.xr.compose.subspace.layout.SubspaceMeasurePolicy measurePolicy);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SubspaceLayout(androidx.xr.compose.subspace.layout.SubspaceModifier?, androidx.xr.compose.subspace.layout.SubspaceMeasurePolicy, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static inline void SubspaceLayout(kotlin.jvm.functions.Function0<kotlin.Unit> content, optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, androidx.xr.compose.subspace.layout.SubspaceMeasurePolicy measurePolicy);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SubspaceLayout(kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.xr.compose.subspace.layout.SubspaceModifier?, androidx.xr.compose.subspace.layout.SubspaceMeasurePolicy, androidx.compose.runtime.Composer?, int, int);
  }

  public interface SubspaceMeasurable {
    method public void adjustParams(androidx.xr.compose.subspace.layout.ParentLayoutParamsAdjustable params);
    method public androidx.xr.compose.subspace.layout.SubspacePlaceable measure(androidx.xr.compose.unit.VolumeConstraints constraints);
  }

  public fun interface SubspaceMeasurePolicy {
    method public androidx.xr.compose.subspace.layout.SubspaceMeasureResult measure(androidx.xr.compose.subspace.layout.SubspaceMeasureScope, java.util.List<? extends androidx.xr.compose.subspace.layout.SubspaceMeasurable> measurables, androidx.xr.compose.unit.VolumeConstraints constraints);
  }

  public interface SubspaceMeasureResult {
    method public int getDepth();
    method public int getHeight();
    method public int getWidth();
    method public void placeChildren(androidx.xr.compose.subspace.layout.SubspacePlaceable.SubspacePlacementScope placementScope);
    property public abstract int depth;
    property public abstract int height;
    property public abstract int width;
  }

  public interface SubspaceMeasureScope extends androidx.compose.ui.unit.Density {
    method public androidx.compose.ui.unit.LayoutDirection getLayoutDirection();
    method public default androidx.xr.compose.subspace.layout.SubspaceMeasureResult layout(int width, int height, int depth, kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.layout.SubspacePlaceable.SubspacePlacementScope,kotlin.Unit> placementBlock);
    property public abstract androidx.compose.ui.unit.LayoutDirection layoutDirection;
  }

  public interface SubspaceModifier {
    method public default boolean all(kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.node.SubspaceModifierNodeElement<androidx.xr.compose.subspace.layout.SubspaceModifier.Node>,java.lang.Boolean> predicate);
    method public default boolean any(kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.node.SubspaceModifierNodeElement<androidx.xr.compose.subspace.layout.SubspaceModifier.Node>,java.lang.Boolean> predicate);
    method public default <R> R foldIn(R initial, kotlin.jvm.functions.Function2<? super R,? super androidx.xr.compose.subspace.node.SubspaceModifierNodeElement<androidx.xr.compose.subspace.layout.SubspaceModifier.Node>,? extends R> operation);
    method public default <R> R foldOut(R initial, kotlin.jvm.functions.Function2<? super androidx.xr.compose.subspace.node.SubspaceModifierNodeElement<androidx.xr.compose.subspace.layout.SubspaceModifier.Node>,? super R,? extends R> operation);
    method public default infix androidx.xr.compose.subspace.layout.SubspaceModifier then(androidx.xr.compose.subspace.layout.SubspaceModifier other);
    field public static final androidx.xr.compose.subspace.layout.SubspaceModifier.Companion Companion;
  }

  public static final class SubspaceModifier.Companion implements androidx.xr.compose.subspace.layout.SubspaceModifier {
    method public infix androidx.xr.compose.subspace.layout.SubspaceModifier then(androidx.xr.compose.subspace.node.SubspaceModifierNodeElement<androidx.xr.compose.subspace.layout.SubspaceModifier.Node> other);
  }

  public abstract static class SubspaceModifier.Node {
    ctor public SubspaceModifier.Node();
    method public final boolean isAttached();
    method public void onAttach();
    method public void onDetach();
    property public final boolean isAttached;
  }

  public abstract class SubspacePlaceable {
    ctor public SubspacePlaceable();
    method public final int getMeasuredDepth();
    method public final int getMeasuredHeight();
    method public final int getMeasuredWidth();
    method protected abstract void placeAt(androidx.xr.runtime.math.Pose pose);
    method protected final void setMeasuredDepth(int);
    method protected final void setMeasuredHeight(int);
    method protected final void setMeasuredWidth(int);
    property public final int measuredDepth;
    property public final int measuredHeight;
    property public final int measuredWidth;
  }

  public abstract static class SubspacePlaceable.SubspacePlacementScope {
    ctor public SubspacePlaceable.SubspacePlacementScope();
    method public androidx.xr.compose.subspace.layout.SubspaceLayoutCoordinates? getCoordinates();
    method public final void place(androidx.xr.compose.subspace.layout.SubspacePlaceable, androidx.xr.runtime.math.Pose pose);
    property public androidx.xr.compose.subspace.layout.SubspaceLayoutCoordinates? coordinates;
  }

  public final class TestTagKt {
    method public static androidx.xr.compose.subspace.layout.SubspaceModifier testTag(androidx.xr.compose.subspace.layout.SubspaceModifier, String tag);
  }

}

package androidx.xr.compose.subspace.node {

  public interface CompositionLocalConsumerSubspaceModifierNode {
  }

  public final class CompositionLocalConsumerSubspaceModifierNodeKt {
    method public static <T> T currentValueOf(androidx.xr.compose.subspace.node.CompositionLocalConsumerSubspaceModifierNode, androidx.compose.runtime.CompositionLocal<T> local);
  }

  public interface LayoutCoordinatesAwareModifierNode {
    method public void onLayoutCoordinates(androidx.xr.compose.subspace.layout.SubspaceLayoutCoordinates coordinates);
  }

  public interface SubspaceLayoutModifierNode {
    method public androidx.xr.compose.subspace.layout.SubspaceMeasureResult measure(androidx.xr.compose.subspace.layout.SubspaceMeasureScope, androidx.xr.compose.subspace.layout.SubspaceMeasurable measurable, androidx.xr.compose.unit.VolumeConstraints constraints);
  }

  public final class SubspaceLayoutModifierNodeKt {
    method public static void requestRelayout(androidx.xr.compose.subspace.node.SubspaceLayoutModifierNode);
  }

  public abstract class SubspaceModifierNodeElement<N extends androidx.xr.compose.subspace.layout.SubspaceModifier.Node> implements androidx.xr.compose.subspace.layout.SubspaceModifier {
    ctor public SubspaceModifierNodeElement();
    method public abstract N create();
    method public abstract boolean equals(Object? other);
    method public abstract int hashCode();
    method public abstract void update(N node);
  }

  public sealed interface SubspaceSemanticsInfo {
    method public default java.util.List<androidx.xr.scenecore.Component>? getComponents();
    method public androidx.compose.ui.semantics.SemanticsConfiguration getConfig();
    method public androidx.xr.runtime.math.Pose getPose();
    method public androidx.xr.runtime.math.Pose getPoseInRoot();
    method public default float getScale();
    method public java.util.List<androidx.xr.compose.subspace.node.SubspaceSemanticsInfo> getSemanticsChildren();
    method public androidx.xr.scenecore.Entity? getSemanticsEntity();
    method public int getSemanticsId();
    method public androidx.xr.compose.subspace.node.SubspaceSemanticsInfo? getSemanticsParent();
    method public androidx.xr.compose.unit.IntVolumeSize getSize();
    method public default boolean isRoot();
    property public default java.util.List<androidx.xr.scenecore.Component>? components;
    property public abstract androidx.compose.ui.semantics.SemanticsConfiguration config;
    property public default boolean isRoot;
    property public abstract androidx.xr.runtime.math.Pose pose;
    property public abstract androidx.xr.runtime.math.Pose poseInRoot;
    property public default float scale;
    property public abstract java.util.List<androidx.xr.compose.subspace.node.SubspaceSemanticsInfo> semanticsChildren;
    property public abstract androidx.xr.scenecore.Entity? semanticsEntity;
    property public abstract int semanticsId;
    property public abstract androidx.xr.compose.subspace.node.SubspaceSemanticsInfo? semanticsParent;
    property public abstract androidx.xr.compose.unit.IntVolumeSize size;
  }

  public interface SubspaceSemanticsModifierNode {
    method public void applySemantics(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
  }

}

package androidx.xr.compose.unit {

  public final class DpVolumeSize {
    ctor @KotlinOnly public DpVolumeSize(androidx.compose.ui.unit.Dp width, androidx.compose.ui.unit.Dp height, androidx.compose.ui.unit.Dp depth);
    ctor @BytecodeOnly public DpVolumeSize(float, float, float, kotlin.jvm.internal.DefaultConstructorMarker!);
    method @BytecodeOnly public float getDepth-D9Ej5fM();
    method @BytecodeOnly public float getHeight-D9Ej5fM();
    method @BytecodeOnly public float getWidth-D9Ej5fM();
    property public androidx.compose.ui.unit.Dp depth;
    property public androidx.compose.ui.unit.Dp height;
    property public androidx.compose.ui.unit.Dp width;
    field public static final androidx.xr.compose.unit.DpVolumeSize.Companion Companion;
  }

  public static final class DpVolumeSize.Companion {
    method public androidx.xr.compose.unit.DpVolumeSize getZero();
    property public androidx.xr.compose.unit.DpVolumeSize Zero;
  }

  public final class IntVolumeSize {
    ctor public IntVolumeSize(int width, int height, int depth);
    method public int getDepth();
    method public int getHeight();
    method public int getWidth();
    property public int depth;
    property public int height;
    property public int width;
    field public static final androidx.xr.compose.unit.IntVolumeSize.Companion Companion;
  }

  public static final class IntVolumeSize.Companion {
    method public androidx.xr.compose.unit.IntVolumeSize getZero();
    property public androidx.xr.compose.unit.IntVolumeSize Zero;
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class Meter implements java.lang.Comparable<androidx.xr.compose.unit.Meter> {
    ctor @KotlinOnly public Meter(float value);
    method @BytecodeOnly public static androidx.xr.compose.unit.Meter! box-impl(float);
    method @KotlinOnly public operator int compareTo(androidx.xr.compose.unit.Meter other);
    method @BytecodeOnly public int compareTo-355lp2w(float);
    method @BytecodeOnly public static int compareTo-355lp2w(float, float);
    method @BytecodeOnly public static float constructor-impl(float);
    method @KotlinOnly public inline operator androidx.xr.compose.unit.Meter div(double other);
    method @KotlinOnly public inline operator androidx.xr.compose.unit.Meter div(float other);
    method @KotlinOnly public inline operator androidx.xr.compose.unit.Meter div(int other);
    method @BytecodeOnly public static float div-zRPQRcA(float, double);
    method @BytecodeOnly public static float div-zRPQRcA(float, float);
    method @BytecodeOnly public static float div-zRPQRcA(float, int);
    method public float getValue();
    method @BytecodeOnly public static boolean isFinite-impl(float);
    method @BytecodeOnly public static boolean isSpecified-impl(float);
    method @KotlinOnly public inline operator androidx.xr.compose.unit.Meter minus(androidx.xr.compose.unit.Meter other);
    method @BytecodeOnly public static float minus-kO1jj0k(float, float);
    method @KotlinOnly public inline operator androidx.xr.compose.unit.Meter plus(androidx.xr.compose.unit.Meter other);
    method @BytecodeOnly public static float plus-kO1jj0k(float, float);
    method @KotlinOnly public inline int roundToPx(androidx.compose.ui.unit.Density density);
    method @BytecodeOnly public static int roundToPx-impl(float, androidx.compose.ui.unit.Density);
    method @KotlinOnly public inline operator androidx.xr.compose.unit.Meter times(double other);
    method @KotlinOnly public inline operator androidx.xr.compose.unit.Meter times(float other);
    method @KotlinOnly public inline operator androidx.xr.compose.unit.Meter times(int other);
    method @BytecodeOnly public static float times-zRPQRcA(float, double);
    method @BytecodeOnly public static float times-zRPQRcA(float, float);
    method @BytecodeOnly public static float times-zRPQRcA(float, int);
    method @KotlinOnly public inline float toCm();
    method @BytecodeOnly public static float toCm-impl(float);
    method @KotlinOnly public inline androidx.compose.ui.unit.Dp toDp();
    method @BytecodeOnly public static float toDp-D9Ej5fM(float);
    method @KotlinOnly public inline float toM();
    method @BytecodeOnly public static float toM-impl(float);
    method @KotlinOnly public inline float toMm();
    method @BytecodeOnly public static float toMm-impl(float);
    method @KotlinOnly public inline float toPx(androidx.compose.ui.unit.Density density);
    method @BytecodeOnly public static float toPx-impl(float, androidx.compose.ui.unit.Density);
    method @BytecodeOnly public float unbox-impl();
    property public inline boolean isFinite;
    property public inline boolean isSpecified;
    property public float value;
    field public static final androidx.xr.compose.unit.Meter.Companion Companion;
  }

  public static final class Meter.Companion {
    method @KotlinOnly public inline androidx.xr.compose.unit.Meter fromPixel(float px, androidx.compose.ui.unit.Density density);
    method @BytecodeOnly public float fromPixel-e1Hw3dI(float, androidx.compose.ui.unit.Density);
    method @BytecodeOnly public float getCentimeters-zRPQRcA(double);
    method @BytecodeOnly public float getCentimeters-zRPQRcA(float);
    method @BytecodeOnly public float getCentimeters-zRPQRcA(int);
    method @BytecodeOnly public float getInfinity-sx7laI0();
    method @BytecodeOnly public float getMeters-zRPQRcA(double);
    method @BytecodeOnly public float getMeters-zRPQRcA(float);
    method @BytecodeOnly public float getMeters-zRPQRcA(int);
    method @BytecodeOnly public float getMillimeters-zRPQRcA(double);
    method @BytecodeOnly public float getMillimeters-zRPQRcA(float);
    method @BytecodeOnly public float getMillimeters-zRPQRcA(int);
    method @BytecodeOnly public float getNaN-sx7laI0();
    property public androidx.xr.compose.unit.Meter Infinity;
    property public androidx.xr.compose.unit.Meter NaN;
    property public androidx.xr.compose.unit.Meter int.centimeters;
    property public androidx.xr.compose.unit.Meter float.centimeters;
    property public androidx.xr.compose.unit.Meter double.centimeters;
    property public androidx.xr.compose.unit.Meter int.meters;
    property public androidx.xr.compose.unit.Meter float.meters;
    property public androidx.xr.compose.unit.Meter double.meters;
    property public androidx.xr.compose.unit.Meter int.millimeters;
    property public androidx.xr.compose.unit.Meter float.millimeters;
    property public androidx.xr.compose.unit.Meter double.millimeters;
  }

  public final class MeterKt {
    method @KotlinOnly public static inline operator androidx.xr.compose.unit.Meter div(double, androidx.xr.compose.unit.Meter other);
    method @KotlinOnly public static inline operator androidx.xr.compose.unit.Meter div(float, androidx.xr.compose.unit.Meter other);
    method @KotlinOnly public static inline operator androidx.xr.compose.unit.Meter div(int, androidx.xr.compose.unit.Meter other);
    method @BytecodeOnly public static float div-1IImi1c(double, float);
    method @BytecodeOnly public static float div-1IImi1c(float, float);
    method @BytecodeOnly public static float div-1IImi1c(int, float);
    method @KotlinOnly public static inline operator androidx.xr.compose.unit.Meter times(double, androidx.xr.compose.unit.Meter other);
    method @KotlinOnly public static inline operator androidx.xr.compose.unit.Meter times(float, androidx.xr.compose.unit.Meter other);
    method @KotlinOnly public static inline operator androidx.xr.compose.unit.Meter times(int, androidx.xr.compose.unit.Meter other);
    method @BytecodeOnly public static float times-1IImi1c(double, float);
    method @BytecodeOnly public static float times-1IImi1c(float, float);
    method @BytecodeOnly public static float times-1IImi1c(int, float);
    method @KotlinOnly public static inline androidx.xr.compose.unit.Meter toMeter(androidx.compose.ui.unit.Dp);
    method @BytecodeOnly public static float toMeter-0680j_4(float);
  }

  public final class VolumeConstraints {
    ctor public VolumeConstraints();
    ctor public VolumeConstraints(optional @IntRange(from=0L) int minWidth, optional @IntRange(from=0L) int maxWidth, optional @IntRange(from=0L) int minHeight, optional @IntRange(from=0L) int maxHeight, optional @IntRange(from=0L) int minDepth, optional @IntRange(from=0L) int maxDepth);
    method public androidx.xr.compose.unit.VolumeConstraints copy(optional int minWidth, optional int maxWidth, optional int minHeight, optional int maxHeight, optional int minDepth, optional int maxDepth);
    method public int getMaxDepth();
    method public int getMaxHeight();
    method public int getMaxWidth();
    method public int getMinDepth();
    method public int getMinHeight();
    method public int getMinWidth();
    method public boolean hasBoundedDepth();
    method public boolean hasBoundedHeight();
    method public boolean hasBoundedWidth();
    property public boolean hasBoundedDepth;
    property public boolean hasBoundedHeight;
    property public boolean hasBoundedWidth;
    property public int maxDepth;
    property public int maxHeight;
    property public int maxWidth;
    property public int minDepth;
    property public int minHeight;
    property public int minWidth;
    field public static final androidx.xr.compose.unit.VolumeConstraints.Companion Companion;
    field public static final int INFINITY = 2147483647; // 0x7fffffff
  }

  public static final class VolumeConstraints.Companion {
    property public static int INFINITY;
  }

  public final class VolumeConstraintsKt {
    method public static androidx.xr.compose.unit.VolumeConstraints constrain(androidx.xr.compose.unit.VolumeConstraints, androidx.xr.compose.unit.VolumeConstraints otherConstraints);
    method public static int constrainDepth(androidx.xr.compose.unit.VolumeConstraints, int depth);
    method public static int constrainHeight(androidx.xr.compose.unit.VolumeConstraints, int height);
    method public static int constrainWidth(androidx.xr.compose.unit.VolumeConstraints, int width);
    method public static androidx.xr.compose.unit.VolumeConstraints offset(androidx.xr.compose.unit.VolumeConstraints, optional int horizontal, optional int vertical, optional int depth, optional boolean resetMins);
  }

}

