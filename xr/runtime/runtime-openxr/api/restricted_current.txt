// Signature format: 4.0
package androidx.xr.runtime.openxr {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class AnchorState {
    ctor public AnchorState();
    ctor public AnchorState(optional androidx.xr.runtime.TrackingState trackingState, optional androidx.xr.runtime.math.Pose? pose);
    method public androidx.xr.runtime.TrackingState component1();
    method public androidx.xr.runtime.math.Pose? component2();
    method public androidx.xr.runtime.openxr.AnchorState copy(optional androidx.xr.runtime.TrackingState trackingState, optional androidx.xr.runtime.math.Pose? pose);
    method public androidx.xr.runtime.math.Pose? getPose();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    property public androidx.xr.runtime.math.Pose? pose;
    property public androidx.xr.runtime.TrackingState trackingState;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ExportableAnchor extends androidx.xr.runtime.internal.Anchor {
    method public android.os.IBinder getAnchorToken();
    method public long getNativePointer();
    property public abstract android.os.IBinder anchorToken;
    property public abstract long nativePointer;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class HandState {
    ctor public HandState();
    ctor public HandState(optional androidx.xr.runtime.TrackingState trackingState, optional java.util.List<androidx.xr.runtime.math.Pose> handJoints);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class HitData {
    ctor public HitData(androidx.xr.runtime.math.Pose pose, long id);
    method public androidx.xr.runtime.math.Pose component1();
    method public long component2();
    method public androidx.xr.runtime.openxr.HitData copy(optional androidx.xr.runtime.math.Pose pose, optional long id);
    method public long getId();
    method public androidx.xr.runtime.math.Pose getPose();
    property public long id;
    property public androidx.xr.runtime.math.Pose pose;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class OpenXrAnchor implements androidx.xr.runtime.openxr.ExportableAnchor {
    method public void detach();
    method public android.os.IBinder getAnchorToken();
    method public long getNativePointer();
    method public androidx.xr.runtime.internal.Anchor.PersistenceState getPersistenceState();
    method public androidx.xr.runtime.math.Pose getPose();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public java.util.UUID? getUuid();
    method public void persist();
    method public void update(long xrTime);
    property public android.os.IBinder anchorToken;
    property public long nativePointer;
    property public androidx.xr.runtime.internal.Anchor.PersistenceState persistenceState;
    property public androidx.xr.runtime.math.Pose pose;
    property public androidx.xr.runtime.TrackingState trackingState;
    property public java.util.UUID? uuid;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class OpenXrEarth implements androidx.xr.runtime.internal.Earth {
    method public androidx.xr.runtime.internal.Anchor createAnchor(double latitude, double longitude, double altitude, androidx.xr.runtime.math.Quaternion eastUpSouthQuaternion);
    method public suspend Object? createAnchorOnSurface(double latitude, double longitude, double altitudeAboveSurface, androidx.xr.runtime.math.Quaternion eastUpSouthQuaternion, androidx.xr.runtime.internal.Earth.Surface surface, kotlin.coroutines.Continuation<? super androidx.xr.runtime.internal.Anchor>);
    method public androidx.xr.runtime.internal.Earth.GeospatialPoseResult createGeospatialPoseFromDevicePose();
    method public androidx.xr.runtime.internal.Earth.GeospatialPoseResult createGeospatialPoseFromPose(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.runtime.math.Pose createPoseFromGeospatialPose(androidx.xr.runtime.math.GeospatialPose geospatialPose);
    method public androidx.xr.runtime.internal.Earth.State getState();
    method public void update(long xrTime);
    property public androidx.xr.runtime.internal.Earth.State state;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class OpenXrHand implements androidx.xr.runtime.internal.Hand {
    method public java.nio.FloatBuffer getHandJointsBuffer();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public void update(long xrTime);
    property public java.nio.FloatBuffer handJointsBuffer;
    property public androidx.xr.runtime.TrackingState trackingState;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class OpenXrManager implements androidx.xr.runtime.internal.LifecycleManager {
    method public void configure(androidx.xr.runtime.Config config);
    method public void create();
    method public androidx.xr.runtime.Config getConfig();
    method public void pause();
    method public void resume();
    method public void stop();
    method public suspend Object? update(kotlin.coroutines.Continuation<? super kotlin.time.ComparableTimeMark>);
    property public androidx.xr.runtime.Config config;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class OpenXrPerceptionManager implements androidx.xr.runtime.internal.PerceptionManager {
    method public androidx.xr.runtime.internal.Anchor createAnchor(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.runtime.openxr.OpenXrEarth getEarth();
    method public androidx.xr.runtime.internal.Hand getLeftHand();
    method public java.util.List<java.util.UUID> getPersistedAnchorUuids();
    method public androidx.xr.runtime.internal.Hand getRightHand();
    method public java.util.Collection<androidx.xr.runtime.internal.Trackable> getTrackables();
    method public java.util.List<androidx.xr.runtime.internal.HitResult> hitTest(androidx.xr.runtime.math.Ray ray);
    method public androidx.xr.runtime.internal.Anchor loadAnchor(java.util.UUID uuid);
    method public androidx.xr.runtime.internal.Anchor loadAnchorFromNativePointer(long nativePointer);
    method public void unpersistAnchor(java.util.UUID uuid);
    method public void update(long xrTime);
    property public androidx.xr.runtime.openxr.OpenXrEarth earth;
    property public androidx.xr.runtime.internal.Hand leftHand;
    property public androidx.xr.runtime.internal.Hand rightHand;
    property public java.util.Collection<androidx.xr.runtime.internal.Trackable> trackables;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class OpenXrPlane implements androidx.xr.runtime.internal.Plane {
    method public androidx.xr.runtime.internal.Anchor createAnchor(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.runtime.math.Pose getCenterPose();
    method public androidx.xr.runtime.math.Vector2 getExtents();
    method public androidx.xr.runtime.internal.Plane.Label getLabel();
    method public androidx.xr.runtime.internal.Plane? getSubsumedBy();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public androidx.xr.runtime.internal.Plane.Type getType();
    method public java.util.List<androidx.xr.runtime.math.Vector2> getVertices();
    method public void update(long xrTime);
    property public androidx.xr.runtime.math.Pose centerPose;
    property public androidx.xr.runtime.math.Vector2 extents;
    property public androidx.xr.runtime.internal.Plane.Label label;
    property public androidx.xr.runtime.internal.Plane? subsumedBy;
    property public androidx.xr.runtime.TrackingState trackingState;
    property public androidx.xr.runtime.internal.Plane.Type type;
    property public java.util.List<androidx.xr.runtime.math.Vector2> vertices;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class OpenXrRuntime implements androidx.xr.runtime.internal.Runtime {
    method public androidx.xr.runtime.openxr.OpenXrManager getLifecycleManager();
    method public androidx.xr.runtime.openxr.OpenXrPerceptionManager getPerceptionManager();
    property public androidx.xr.runtime.openxr.OpenXrManager lifecycleManager;
    property public androidx.xr.runtime.openxr.OpenXrPerceptionManager perceptionManager;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class OpenXrRuntimeFactory implements androidx.xr.runtime.internal.RuntimeFactory {
    ctor public OpenXrRuntimeFactory();
    method public androidx.xr.runtime.internal.Runtime createRuntime(android.app.Activity activity);
    method public java.util.Set<androidx.xr.runtime.internal.Feature> getRequirements();
    property public java.util.Set<androidx.xr.runtime.internal.Feature> requirements;
    field public static final androidx.xr.runtime.openxr.OpenXrRuntimeFactory.Companion Companion;
  }

  public static final class OpenXrRuntimeFactory.Companion {
  }

}

