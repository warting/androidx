// Signature format: 4.0
package androidx.xr.runtime.testing {

  public final class FakeSpatialModeChangeListener {
    ctor public FakeSpatialModeChangeListener();
    method public androidx.xr.runtime.math.Pose? getLastRecommendedPose();
    method public androidx.xr.runtime.math.Vector3? getLastRecommendedScale();
    method public int getUpdateCount();
    method public void onSpatialModeChanged(androidx.xr.runtime.math.Pose recommendedPose, androidx.xr.runtime.math.Vector3 recommendedScale);
    method public void reset();
    method public void setLastRecommendedPose(androidx.xr.runtime.math.Pose?);
    method public void setLastRecommendedScale(androidx.xr.runtime.math.Vector3?);
    method public void setUpdateCount(int);
    property public androidx.xr.runtime.math.Pose? lastRecommendedPose;
    property public androidx.xr.runtime.math.Vector3? lastRecommendedScale;
    property public int updateCount;
  }

}

package androidx.xr.runtime.testing.math {

  public final class MathAssertions {
    method public static void assertPose(androidx.xr.runtime.math.Pose actual, androidx.xr.runtime.math.Pose expected);
    method public static void assertPose(androidx.xr.runtime.math.Pose actual, androidx.xr.runtime.math.Pose expected, optional float epsilon);
    method public static void assertRotation(androidx.xr.runtime.math.Quaternion actual, androidx.xr.runtime.math.Quaternion expected);
    method public static void assertRotation(androidx.xr.runtime.math.Quaternion actual, androidx.xr.runtime.math.Quaternion expected, optional float epsilon);
    method public static void assertVector3(androidx.xr.runtime.math.Vector3 actual, androidx.xr.runtime.math.Vector3 expected);
    method public static void assertVector3(androidx.xr.runtime.math.Vector3 actual, androidx.xr.runtime.math.Vector3 expected, optional float epsilon);
  }

}

