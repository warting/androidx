// Signature format: 4.0
package androidx.xr.runtime.testing {

  public final class FakeAnchorPlacement {
  }

  public final class FakeLifecycleManager {
    ctor public FakeLifecycleManager();
    ctor public FakeLifecycleManager(optional boolean hasCreatePermission);
    method public void allowOneMoreCallToUpdate();
    method public void configure(androidx.xr.runtime.Config config);
    method public void create();
    method public androidx.xr.runtime.Config getConfig();
    method public androidx.xr.runtime.testing.FakeLifecycleManager.State getState();
    method public kotlin.time.TestTimeSource getTimeSource();
    method public boolean hasCreatePermission();
    method public boolean hasMissingPermission();
    method public void pause();
    method public void resume();
    method public void setConfig(androidx.xr.runtime.Config);
    method public void setHasCreatePermission(boolean);
    method public void setHasMissingPermission(boolean);
    method public void setShouldSupportPlaneTracking(boolean);
    method public boolean shouldSupportPlaneTracking();
    method public void stop();
    method public suspend Object? update(kotlin.coroutines.Continuation<? super kotlin.time.ComparableTimeMark>);
    property public androidx.xr.runtime.Config config;
    property public boolean hasCreatePermission;
    property public boolean hasMissingPermission;
    property public boolean shouldSupportPlaneTracking;
    property public androidx.xr.runtime.testing.FakeLifecycleManager.State state;
    property public kotlin.time.TestTimeSource timeSource;
    field public static final androidx.xr.runtime.testing.FakeLifecycleManager.Companion Companion;
    field public static final java.util.List<java.lang.String> TestPermissions;
  }

  public static final class FakeLifecycleManager.Companion {
    property public java.util.List<java.lang.String> TestPermissions;
  }

  public enum FakeLifecycleManager.State {
    enum_constant public static final androidx.xr.runtime.testing.FakeLifecycleManager.State DESTROYED;
    enum_constant public static final androidx.xr.runtime.testing.FakeLifecycleManager.State INITIALIZED;
    enum_constant public static final androidx.xr.runtime.testing.FakeLifecycleManager.State NOT_INITIALIZED;
    enum_constant public static final androidx.xr.runtime.testing.FakeLifecycleManager.State PAUSED;
    enum_constant public static final androidx.xr.runtime.testing.FakeLifecycleManager.State RESUMED;
  }

  public final class FakePerceptionManager {
    ctor public FakePerceptionManager();
    method public void addHitResult(androidx.xr.arcore.internal.HitResult hitResult);
    method public void addTrackable(androidx.xr.arcore.internal.Trackable trackable);
    method public void clearHitResults();
    method public void clearTrackables();
    method public androidx.xr.arcore.internal.Anchor createAnchor(androidx.xr.runtime.math.Pose pose);
    method public void detachAnchor(androidx.xr.arcore.internal.Anchor anchor);
    method public java.util.List<androidx.xr.arcore.internal.Anchor> getAnchors();
    method public androidx.xr.arcore.internal.Hand? getLeftHand();
    method public java.util.List<java.util.UUID> getPersistedAnchorUuids();
    method public androidx.xr.arcore.internal.Hand? getRightHand();
    method public java.util.List<androidx.xr.arcore.internal.Trackable> getTrackables();
    method public java.util.List<androidx.xr.arcore.internal.HitResult> hitTest(androidx.xr.runtime.math.Ray ray);
    method public boolean isTrackingAvailable();
    method public androidx.xr.arcore.internal.Anchor loadAnchor(java.util.UUID uuid);
    method public androidx.xr.arcore.internal.Anchor loadAnchorFromNativePointer(long nativePointer);
    method public void setTrackingAvailable(boolean);
    method public void unpersistAnchor(java.util.UUID uuid);
    property public java.util.List<androidx.xr.arcore.internal.Anchor> anchors;
    property public boolean isTrackingAvailable;
    property public androidx.xr.arcore.internal.Hand? leftHand;
    property public androidx.xr.arcore.internal.Hand? rightHand;
    property public java.util.List<androidx.xr.arcore.internal.Trackable> trackables;
  }

  public final class FakeRuntimeAnchor {
    method public void detach();
    method public static int getAnchorsCreatedCount();
    method public androidx.xr.arcore.internal.Anchor.PersistenceState getPersistenceState();
    method public androidx.xr.runtime.math.Pose getPose();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public java.util.UUID? getUuid();
    method public boolean isAttached();
    method public boolean isTrackingAvailable();
    method public void persist();
    method public static void setAnchorsCreatedCount(int);
    method public void setPersistenceState(androidx.xr.arcore.internal.Anchor.PersistenceState);
    method public void setPose(androidx.xr.runtime.math.Pose);
    method public void setTrackingState(androidx.xr.runtime.TrackingState);
    method public void setUuid(java.util.UUID?);
    property public boolean isAttached;
    property public boolean isTrackingAvailable;
    property public androidx.xr.arcore.internal.Anchor.PersistenceState persistenceState;
    property public androidx.xr.runtime.math.Pose pose;
    property public androidx.xr.runtime.TrackingState trackingState;
    property public java.util.UUID? uuid;
    field public static final int ANCHOR_RESOURCE_LIMIT = 6; // 0x6
    field public static final androidx.xr.runtime.testing.FakeRuntimeAnchor.Companion Companion;
  }

  public static final class FakeRuntimeAnchor.Companion {
    method public int getAnchorsCreatedCount();
    method public void setAnchorsCreatedCount(int);
    property public static int ANCHOR_RESOURCE_LIMIT;
    property public static int anchorsCreatedCount;
  }

  public final class FakeRuntimeAugmentedObject {
    ctor public FakeRuntimeAugmentedObject();
    ctor public FakeRuntimeAugmentedObject(optional androidx.xr.runtime.math.Pose centerPose, optional androidx.xr.runtime.math.FloatSize3d extents, optional androidx.xr.runtime.AugmentedObjectCategory category, optional androidx.xr.runtime.TrackingState trackingState, optional java.util.Collection<androidx.xr.arcore.internal.Anchor> anchors);
    method public androidx.xr.arcore.internal.Anchor createAnchor(androidx.xr.runtime.math.Pose pose);
    method public void detachAnchor(androidx.xr.arcore.internal.Anchor anchor);
    method public java.util.Collection<androidx.xr.arcore.internal.Anchor> getAnchors();
    method public androidx.xr.runtime.AugmentedObjectCategory getCategory();
    method public androidx.xr.runtime.math.Pose getCenterPose();
    method public androidx.xr.runtime.math.FloatSize3d getExtents();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public void setCategory(androidx.xr.runtime.AugmentedObjectCategory);
    method public void setCenterPose(androidx.xr.runtime.math.Pose);
    method public void setExtents(androidx.xr.runtime.math.FloatSize3d);
    method public void setTrackingState(androidx.xr.runtime.TrackingState);
    property public java.util.Collection<androidx.xr.arcore.internal.Anchor> anchors;
    property public androidx.xr.runtime.AugmentedObjectCategory category;
    property public androidx.xr.runtime.math.Pose centerPose;
    property public androidx.xr.runtime.math.FloatSize3d extents;
    property public androidx.xr.runtime.TrackingState trackingState;
  }

  public final class FakeRuntimeHand {
    ctor public FakeRuntimeHand();
    ctor public FakeRuntimeHand(optional androidx.xr.runtime.TrackingState trackingState, optional java.nio.FloatBuffer handJointsBuffer);
    method public java.nio.FloatBuffer getHandJointsBuffer();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public void setHandJointsBuffer(java.nio.FloatBuffer);
    method public void setTrackingState(androidx.xr.runtime.TrackingState);
    property public java.nio.FloatBuffer handJointsBuffer;
    property public androidx.xr.runtime.TrackingState trackingState;
    field public static final androidx.xr.runtime.testing.FakeRuntimeHand.Companion Companion;
  }

  public static final class FakeRuntimeHand.Companion {
  }

  public final class FakeRuntimePlane {
    ctor public FakeRuntimePlane();
    ctor public FakeRuntimePlane(optional androidx.xr.arcore.internal.Plane.Type type, optional androidx.xr.arcore.internal.Plane.Label label, optional androidx.xr.runtime.TrackingState trackingState, optional androidx.xr.runtime.math.Pose centerPose, optional androidx.xr.runtime.math.FloatSize2d extents, optional java.util.List<androidx.xr.runtime.math.Vector2> vertices, optional androidx.xr.arcore.internal.Plane? subsumedBy, optional java.util.Collection<androidx.xr.arcore.internal.Anchor> anchors);
    method public androidx.xr.arcore.internal.Anchor createAnchor(androidx.xr.runtime.math.Pose pose);
    method public void detachAnchor(androidx.xr.arcore.internal.Anchor anchor);
    method public java.util.Collection<androidx.xr.arcore.internal.Anchor> getAnchors();
    method public androidx.xr.runtime.math.Pose getCenterPose();
    method public androidx.xr.runtime.math.FloatSize2d getExtents();
    method public androidx.xr.arcore.internal.Plane.Label getLabel();
    method public androidx.xr.arcore.internal.Plane? getSubsumedBy();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public androidx.xr.arcore.internal.Plane.Type getType();
    method public java.util.List<androidx.xr.runtime.math.Vector2> getVertices();
    method public void setCenterPose(androidx.xr.runtime.math.Pose);
    method public void setExtents(androidx.xr.runtime.math.FloatSize2d);
    method public void setSubsumedBy(androidx.xr.arcore.internal.Plane?);
    method public void setTrackingState(androidx.xr.runtime.TrackingState);
    method public void setVertices(java.util.List<androidx.xr.runtime.math.Vector2>);
    property public java.util.Collection<androidx.xr.arcore.internal.Anchor> anchors;
    property public androidx.xr.runtime.math.Pose centerPose;
    property public androidx.xr.runtime.math.FloatSize2d extents;
    property public androidx.xr.arcore.internal.Plane.Label label;
    property public androidx.xr.arcore.internal.Plane? subsumedBy;
    property public androidx.xr.runtime.TrackingState trackingState;
    property public androidx.xr.arcore.internal.Plane.Type type;
    property public java.util.List<androidx.xr.runtime.math.Vector2> vertices;
  }

  public final class FakeSpatialModeChangeListener {
    ctor public FakeSpatialModeChangeListener();
    method public androidx.xr.runtime.math.Pose? getLastRecommendedPose();
    method public androidx.xr.runtime.math.Vector3? getLastRecommendedScale();
    method public int getUpdateCount();
    method public void onSpatialModeChanged(androidx.xr.runtime.math.Pose recommendedPose, androidx.xr.runtime.math.Vector3 recommendedScale);
    method public void reset();
    method public void setLastRecommendedPose(androidx.xr.runtime.math.Pose?);
    method public void setLastRecommendedScale(androidx.xr.runtime.math.Vector3?);
    method public void setUpdateCount(int);
    property public androidx.xr.runtime.math.Pose? lastRecommendedPose;
    property public androidx.xr.runtime.math.Vector3? lastRecommendedScale;
    property public int updateCount;
  }

}

package androidx.xr.runtime.testing.math {

  public final class MathAssertions {
    method public static void assertPose(androidx.xr.runtime.math.Pose actual, androidx.xr.runtime.math.Pose expected);
    method public static void assertPose(androidx.xr.runtime.math.Pose actual, androidx.xr.runtime.math.Pose expected, optional float epsilon);
    method public static void assertRotation(androidx.xr.runtime.math.Quaternion actual, androidx.xr.runtime.math.Quaternion expected);
    method public static void assertRotation(androidx.xr.runtime.math.Quaternion actual, androidx.xr.runtime.math.Quaternion expected, optional float epsilon);
    method public static void assertVector3(androidx.xr.runtime.math.Vector3 actual, androidx.xr.runtime.math.Vector3 expected);
    method public static void assertVector3(androidx.xr.runtime.math.Vector3 actual, androidx.xr.runtime.math.Vector3 expected, optional float epsilon);
  }

}

