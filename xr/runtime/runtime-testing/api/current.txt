// Signature format: 4.0
package androidx.xr.runtime.testing {

  public final class FakeLifecycleManager {
    ctor public FakeLifecycleManager();
    ctor public FakeLifecycleManager(optional boolean hasCreatePermission);
    method public void allowOneMoreCallToUpdate();
    method public void configure(androidx.xr.runtime.Config config);
    method public void create();
    method public androidx.xr.runtime.Config getConfig();
    method public androidx.xr.runtime.testing.FakeLifecycleManager.State getState();
    method public kotlin.time.TestTimeSource getTimeSource();
    method public boolean hasCreatePermission();
    method public boolean hasMissingPermission();
    method public void pause();
    method public void resume();
    method public void setConfig(androidx.xr.runtime.Config);
    method public void setHasCreatePermission(boolean);
    method public void setHasMissingPermission(boolean);
    method public void setShouldSupportPlaneTracking(boolean);
    method public boolean shouldSupportPlaneTracking();
    method public void stop();
    method public suspend Object? update(kotlin.coroutines.Continuation<? super kotlin.time.ComparableTimeMark>);
    property public androidx.xr.runtime.Config config;
    property public boolean hasCreatePermission;
    property public boolean hasMissingPermission;
    property public boolean shouldSupportPlaneTracking;
    property public androidx.xr.runtime.testing.FakeLifecycleManager.State state;
    property public kotlin.time.TestTimeSource timeSource;
    field public static final androidx.xr.runtime.testing.FakeLifecycleManager.Companion Companion;
    field public static final java.util.List<java.lang.String> TestPermissions;
  }

  public static final class FakeLifecycleManager.Companion {
    property public java.util.List<? extends java.lang.String> TestPermissions;
  }

  public enum FakeLifecycleManager.State {
    enum_constant public static final androidx.xr.runtime.testing.FakeLifecycleManager.State INITIALIZED;
    enum_constant public static final androidx.xr.runtime.testing.FakeLifecycleManager.State NOT_INITIALIZED;
    enum_constant public static final androidx.xr.runtime.testing.FakeLifecycleManager.State PAUSED;
    enum_constant public static final androidx.xr.runtime.testing.FakeLifecycleManager.State RESUMED;
    enum_constant public static final androidx.xr.runtime.testing.FakeLifecycleManager.State STOPPED;
  }

  public final class FakeSpatialModeChangeListener {
    ctor public FakeSpatialModeChangeListener();
    method public androidx.xr.runtime.math.Pose? getLastRecommendedPose();
    method public androidx.xr.runtime.math.Vector3? getLastRecommendedScale();
    method public int getUpdateCount();
    method public void onSpatialModeChanged(androidx.xr.runtime.math.Pose recommendedPose, androidx.xr.runtime.math.Vector3 recommendedScale);
    method public void reset();
    method public void setLastRecommendedPose(androidx.xr.runtime.math.Pose?);
    method public void setLastRecommendedScale(androidx.xr.runtime.math.Vector3?);
    method public void setUpdateCount(int);
    property public androidx.xr.runtime.math.Pose? lastRecommendedPose;
    property public androidx.xr.runtime.math.Vector3? lastRecommendedScale;
    property public int updateCount;
  }

}

package androidx.xr.runtime.testing.math {

  public final class MathAssertions {
    method public static void assertPose(androidx.xr.runtime.math.Pose actual, androidx.xr.runtime.math.Pose expected);
    method public static void assertPose(androidx.xr.runtime.math.Pose actual, androidx.xr.runtime.math.Pose expected, optional float epsilon);
    method public static void assertRotation(androidx.xr.runtime.math.Quaternion actual, androidx.xr.runtime.math.Quaternion expected);
    method public static void assertRotation(androidx.xr.runtime.math.Quaternion actual, androidx.xr.runtime.math.Quaternion expected, optional float epsilon);
    method public static void assertVector3(androidx.xr.runtime.math.Vector3 actual, androidx.xr.runtime.math.Vector3 expected);
    method public static void assertVector3(androidx.xr.runtime.math.Vector3 actual, androidx.xr.runtime.math.Vector3 expected, optional float epsilon);
  }

}

