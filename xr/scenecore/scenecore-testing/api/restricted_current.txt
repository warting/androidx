// Signature format: 4.0
package androidx.xr.scenecore.testing {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeActivityPanelEntity extends androidx.xr.scenecore.testing.FakePanelEntity implements androidx.xr.scenecore.internal.ActivityPanelEntity {
    ctor public FakeActivityPanelEntity();
    method public android.os.Bundle? getLaunchBundle();
    method public android.content.Intent getLaunchIntent();
    method public android.app.Activity getMovedActivity();
    method public void launchActivity(android.content.Intent intent, android.os.Bundle? bundle);
    method public void moveActivity(android.app.Activity activity);
    property public android.os.Bundle? launchBundle;
    property public android.content.Intent launchIntent;
    property public android.app.Activity movedActivity;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class FakeActivityPose implements androidx.xr.scenecore.internal.ActivityPose {
    ctor public FakeActivityPose();
    method public androidx.xr.runtime.math.Pose getActivitySpacePose();
    method public androidx.xr.runtime.math.Vector3 getActivitySpaceScale();
    method public final androidx.xr.scenecore.internal.HitTestResult getHitTestResult();
    method public androidx.xr.runtime.math.Vector3 getWorldSpaceScale();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.HitTestResult> hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, @androidx.xr.scenecore.internal.ActivityPose.HitTestFilterValue int hitTestFilter);
    method public final void setHitTestResult(androidx.xr.scenecore.internal.HitTestResult);
    method public androidx.xr.runtime.math.Pose transformPoseTo(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.ActivityPose destination);
    property public androidx.xr.runtime.math.Pose activitySpacePose;
    property public androidx.xr.runtime.math.Vector3 activitySpaceScale;
    property public final androidx.xr.scenecore.internal.HitTestResult hitTestResult;
    property public androidx.xr.runtime.math.Vector3 worldSpaceScale;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeActivitySpace extends androidx.xr.scenecore.testing.FakeSystemSpaceEntity implements androidx.xr.scenecore.internal.ActivitySpace {
    ctor public FakeActivitySpace();
    method public void addOnBoundsChangedListener(androidx.xr.scenecore.internal.ActivitySpace.OnBoundsChangedListener listener);
    method public androidx.xr.scenecore.internal.HitTestResult getActivitySpaceHitTestResult();
    method public androidx.xr.scenecore.internal.Dimensions getBounds();
    method public java.util.Set<androidx.xr.scenecore.internal.ActivitySpace.OnBoundsChangedListener> getOnBoundsChangedListeners();
    method public androidx.xr.runtime.math.BoundingBox getRecommendedContentBoxInFullSpace();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.HitTestResult> hitTestRelativeToActivityPose(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, @androidx.xr.scenecore.internal.ActivityPose.HitTestFilterValue int hitTestFilter, androidx.xr.scenecore.internal.ActivityPose activityPose);
    method public void onBoundsChanged(androidx.xr.scenecore.internal.Dimensions bounds);
    method public void removeOnBoundsChangedListener(androidx.xr.scenecore.internal.ActivitySpace.OnBoundsChangedListener listener);
    method public void setActivitySpaceHitTestResult(androidx.xr.scenecore.internal.HitTestResult);
    property public androidx.xr.scenecore.internal.HitTestResult activitySpaceHitTestResult;
    property public androidx.xr.scenecore.internal.Dimensions bounds;
    property public java.util.Set<androidx.xr.scenecore.internal.ActivitySpace.OnBoundsChangedListener> onBoundsChangedListeners;
    property public androidx.xr.runtime.math.BoundingBox recommendedContentBoxInFullSpace;
  }

  @RequiresApi(android.os.Build.VERSION_CODES.O) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeAnchorEntity extends androidx.xr.scenecore.testing.FakeSystemSpaceEntity implements androidx.xr.scenecore.internal.AnchorEntity {
    ctor public FakeAnchorEntity();
    ctor public FakeAnchorEntity(optional androidx.xr.scenecore.testing.FakeAnchorEntity.AnchorCreationData anchorCreationData, optional androidx.xr.arcore.internal.Anchor anchor);
    method public long getNativePointer();
    method public int getState();
    method public void onStateChanged(int newState);
    method public void setOnStateChangedListener(androidx.xr.scenecore.internal.AnchorEntity.OnStateChangedListener onStateChangedListener);
    property public long nativePointer;
    property public int state;
  }

  @RequiresApi(android.os.Build.VERSION_CODES.O) public static final class FakeAnchorEntity.AnchorCreationData {
    ctor public FakeAnchorEntity.AnchorCreationData();
    ctor public FakeAnchorEntity.AnchorCreationData(optional androidx.xr.scenecore.internal.Dimensions bounds, optional androidx.xr.scenecore.internal.PlaneType planeType, optional androidx.xr.scenecore.internal.PlaneSemantic planeSemantic, optional java.time.Duration searchTimeout, optional java.util.UUID uuid);
    method public androidx.xr.scenecore.internal.Dimensions component1();
    method public androidx.xr.scenecore.internal.PlaneType component2();
    method public androidx.xr.scenecore.internal.PlaneSemantic component3();
    method public java.time.Duration component4();
    method public java.util.UUID component5();
    method public androidx.xr.scenecore.testing.FakeAnchorEntity.AnchorCreationData copy(optional androidx.xr.scenecore.internal.Dimensions bounds, optional androidx.xr.scenecore.internal.PlaneType planeType, optional androidx.xr.scenecore.internal.PlaneSemantic planeSemantic, optional java.time.Duration searchTimeout, optional java.util.UUID uuid);
    method public androidx.xr.scenecore.internal.Dimensions getBounds();
    method public androidx.xr.scenecore.internal.PlaneSemantic getPlaneSemantic();
    method public androidx.xr.scenecore.internal.PlaneType getPlaneType();
    method public java.time.Duration getSearchTimeout();
    method public java.util.UUID getUuid();
    property public androidx.xr.scenecore.internal.Dimensions bounds;
    property public androidx.xr.scenecore.internal.PlaneSemantic planeSemantic;
    property public androidx.xr.scenecore.internal.PlaneType planeType;
    property public java.time.Duration searchTimeout;
    property public java.util.UUID uuid;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeAnchorPlacement implements androidx.xr.scenecore.internal.AnchorPlacement {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeAudioTrackExtensionsWrapper implements androidx.xr.scenecore.internal.AudioTrackExtensionsWrapper {
    ctor public FakeAudioTrackExtensionsWrapper();
    method public androidx.xr.scenecore.internal.PointSourceParams? getPointSourceParams(android.media.AudioTrack track);
    method public androidx.xr.scenecore.internal.SoundFieldAttributes? getSoundFieldAttributes(android.media.AudioTrack track);
    method public java.util.Map<android.media.AudioTrack,androidx.xr.scenecore.internal.SoundFieldAttributes?> getSoundFieldAttributesMap();
    method @androidx.xr.scenecore.internal.SpatializerConstants.SourceType public int getSpatialSourceType(android.media.AudioTrack track);
    method public java.util.Map<android.media.AudioTrack,java.lang.Integer> getSpatialSourceTypeMap();
    method public void setPointSourceParams(android.media.AudioTrack track, androidx.xr.scenecore.internal.PointSourceParams params);
    method public android.media.AudioTrack.Builder setPointSourceParams(android.media.AudioTrack.Builder builder, androidx.xr.scenecore.internal.PointSourceParams params);
    method public android.media.AudioTrack.Builder setSoundFieldAttributes(android.media.AudioTrack.Builder builder, androidx.xr.scenecore.internal.SoundFieldAttributes attributes);
    method public void setSoundFieldAttributesMap(java.util.Map<android.media.AudioTrack,androidx.xr.scenecore.internal.SoundFieldAttributes?>);
    method public void setSpatialSourceTypeMap(java.util.Map<android.media.AudioTrack,java.lang.Integer>);
    property public java.util.Map<android.media.AudioTrack,androidx.xr.scenecore.internal.SoundFieldAttributes?> soundFieldAttributesMap;
    property public java.util.Map<android.media.AudioTrack,java.lang.Integer> spatialSourceTypeMap;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class FakeBaseRenderingFeature implements androidx.xr.scenecore.internal.RenderingFeature {
    ctor public FakeBaseRenderingFeature(androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> nodeHolder);
    method public void dispose();
    method public androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> getNodeHolder();
    property public androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> nodeHolder;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class FakeCameraViewActivityPose extends androidx.xr.scenecore.testing.FakeActivityPose implements androidx.xr.scenecore.internal.CameraViewActivityPose {
    ctor public FakeCameraViewActivityPose();
    method public int getCameraType();
    method public androidx.xr.scenecore.internal.PixelDimensions getDisplayResolutionInPixels();
    method public androidx.xr.scenecore.internal.CameraViewActivityPose.Fov getFov();
    method public void setCameraType(int);
    method public void setDisplayResolutionInPixels(androidx.xr.scenecore.internal.PixelDimensions);
    method public void setFov(androidx.xr.scenecore.internal.CameraViewActivityPose.Fov);
    property @androidx.xr.scenecore.internal.CameraViewActivityPose.CameraType public int cameraType;
    property public androidx.xr.scenecore.internal.PixelDimensions displayResolutionInPixels;
    property public androidx.xr.scenecore.internal.CameraViewActivityPose.Fov fov;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class FakeComponent implements androidx.xr.scenecore.internal.Component {
    ctor public FakeComponent();
    method public final boolean getCanBeAttached();
    method public boolean onAttach(androidx.xr.scenecore.internal.Entity entity);
    method public void onDetach(androidx.xr.scenecore.internal.Entity entity);
    method public final void setCanBeAttached(boolean);
    property public final boolean canBeAttached;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class FakeEntity extends androidx.xr.scenecore.testing.FakeActivityPose implements androidx.xr.scenecore.internal.Entity {
    ctor public FakeEntity();
    method public void addChild(androidx.xr.scenecore.internal.Entity child);
    method public void addChildren(java.util.List<? extends androidx.xr.scenecore.internal.Entity> children);
    method public boolean addComponent(androidx.xr.scenecore.internal.Component component);
    method public void addInputEventListener(java.util.concurrent.Executor executor, androidx.xr.scenecore.internal.InputEventListener listener);
    method public void dispose();
    method public float getAlpha(@androidx.xr.scenecore.internal.SpaceValue int relativeTo);
    method public java.util.List<androidx.xr.scenecore.internal.Entity> getChildren();
    method public java.util.List<androidx.xr.scenecore.internal.Component> getComponents();
    method public <T extends androidx.xr.scenecore.internal.Component> java.util.List<T> getComponentsOfType(Class<? extends T> type);
    method public CharSequence getContentDescription();
    method public final java.util.Map<androidx.xr.scenecore.internal.InputEventListener,java.util.concurrent.Executor> getInputEventListenerMap();
    method public androidx.xr.scenecore.internal.Entity? getParent();
    method public androidx.xr.runtime.math.Pose getPose(@androidx.xr.scenecore.internal.SpaceValue int relativeTo);
    method public androidx.xr.runtime.math.Vector3 getScale(@androidx.xr.scenecore.internal.SpaceValue int relativeTo);
    method public boolean isHidden(boolean includeParents);
    method public void removeAllComponents();
    method public void removeComponent(androidx.xr.scenecore.internal.Component component);
    method public void removeInputEventListener(androidx.xr.scenecore.internal.InputEventListener listener);
    method public void setAlpha(float alpha, @androidx.xr.scenecore.internal.SpaceValue int relativeTo);
    method public void setContentDescription(CharSequence);
    method public void setHidden(boolean hidden);
    method public void setParent(androidx.xr.scenecore.internal.Entity?);
    method public void setPose(androidx.xr.runtime.math.Pose pose, @androidx.xr.scenecore.internal.SpaceValue int relativeTo);
    method public void setScale(androidx.xr.runtime.math.Vector3 scale, @androidx.xr.scenecore.internal.SpaceValue int relativeTo);
    property public java.util.List<androidx.xr.scenecore.internal.Entity> children;
    property public CharSequence contentDescription;
    property public final java.util.Map<androidx.xr.scenecore.internal.InputEventListener,java.util.concurrent.Executor> inputEventListenerMap;
    property public androidx.xr.scenecore.internal.Entity? parent;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeGltfEntity extends androidx.xr.scenecore.testing.FakeEntity implements androidx.xr.scenecore.internal.GltfEntity {
    ctor public FakeGltfEntity();
    method public int getAnimationState();
    method public void setMaterialOverride(androidx.xr.scenecore.internal.MaterialResource material, String meshName);
    method public void startAnimation(boolean loop, String? animationName);
    method public void stopAnimation();
    property @androidx.xr.scenecore.internal.GltfEntity.AnimationStateValue public int animationState;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeGltfFeature extends androidx.xr.scenecore.testing.FakeBaseRenderingFeature implements androidx.xr.scenecore.internal.GltfFeature {
    ctor public FakeGltfFeature(androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> nodeHolder);
    method public int getAnimationState();
    method public void setColliderEnabled(boolean enableCollider);
    method public void setMaterialOverride(androidx.xr.scenecore.internal.MaterialResource material, String meshName);
    method public void startAnimation(boolean loop, String? animationName, java.util.concurrent.Executor executor);
    method public void stopAnimation();
    property public int animationState;
    field public static final androidx.xr.scenecore.testing.FakeGltfFeature.Companion Companion;
  }

  public static final class FakeGltfFeature.Companion {
    method public androidx.xr.scenecore.internal.GltfFeature createWithMockFeature(androidx.xr.scenecore.internal.GltfFeature feature, androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> nodeHolder);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeHeadActivityPose extends androidx.xr.scenecore.testing.FakeActivityPose implements androidx.xr.scenecore.internal.HeadActivityPose {
    ctor public FakeHeadActivityPose();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeInteractableComponent extends androidx.xr.scenecore.testing.FakeComponent implements androidx.xr.scenecore.internal.InteractableComponent {
    ctor public FakeInteractableComponent();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeJxrPlatformAdapter implements androidx.xr.scenecore.internal.JxrPlatformAdapter {
    ctor public FakeJxrPlatformAdapter();
    method public void addPerceivedResolutionChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions> listener);
    method public void addSpatialCapabilitiesChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialCapabilities> listener);
    method public androidx.xr.scenecore.internal.TextureResource? borrowReflectionTexture();
    method public void clearSpatialVisibilityChangedListener();
    method public androidx.xr.scenecore.internal.ActivityPanelEntity createActivityPanelEntity(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.PixelDimensions windowBoundsPx, String name, android.app.Activity hostActivity, androidx.xr.scenecore.internal.Entity parent);
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public androidx.xr.scenecore.testing.FakeAnchorEntity createAnchorEntity(androidx.xr.arcore.internal.Anchor anchor);
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public androidx.xr.scenecore.testing.FakeAnchorEntity createAnchorEntity(androidx.xr.scenecore.internal.Dimensions bounds, androidx.xr.scenecore.internal.PlaneType planeType, androidx.xr.scenecore.internal.PlaneSemantic planeSemantic, java.time.Duration searchTimeout);
    method public androidx.xr.scenecore.testing.FakeAnchorPlacement createAnchorPlacementForPlanes(java.util.Set<androidx.xr.scenecore.internal.PlaneType> planeTypeFilter, java.util.Set<androidx.xr.scenecore.internal.PlaneSemantic> planeSemanticFilter);
    method public androidx.xr.runtime.SubspaceNodeHolder<androidx.xr.scenecore.testing.FakeSubspaceNode> createFakeSubspaceNode(androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> nodeHolder);
    method public androidx.xr.scenecore.internal.GltfEntity createGltfEntity(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.GltfModelResource loadedGltf, androidx.xr.scenecore.internal.Entity parentEntity);
    method public androidx.xr.scenecore.internal.Entity createGroupEntity(androidx.xr.runtime.math.Pose pose, String name, androidx.xr.scenecore.internal.Entity parent);
    method public androidx.xr.scenecore.internal.InteractableComponent createInteractableComponent(java.util.concurrent.Executor executor, androidx.xr.scenecore.internal.InputEventListener listener);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.MaterialResource> createKhronosPbrMaterial(androidx.xr.scenecore.internal.KhronosPbrMaterialSpec spec);
    method public androidx.xr.scenecore.internal.LoggingEntity createLoggingEntity(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.scenecore.testing.FakeMovableComponent createMovableComponent(boolean systemMovable, boolean scaleInZ, java.util.Set<androidx.xr.scenecore.internal.AnchorPlacement> anchorPlacement, boolean shouldDisposeParentAnchor);
    method public androidx.xr.scenecore.internal.PanelEntity createPanelEntity(android.content.Context context, androidx.xr.runtime.math.Pose pose, android.view.View view, androidx.xr.scenecore.internal.Dimensions dimensions, String name, androidx.xr.scenecore.internal.Entity parent);
    method public androidx.xr.scenecore.internal.PanelEntity createPanelEntity(android.content.Context context, androidx.xr.runtime.math.Pose pose, android.view.View view, androidx.xr.scenecore.internal.PixelDimensions pixelDimensions, String name, androidx.xr.scenecore.internal.Entity parent);
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public androidx.xr.scenecore.testing.FakeAnchorEntity createPersistedAnchorEntity(java.util.UUID uuid, java.time.Duration searchTimeout);
    method public androidx.xr.scenecore.testing.FakePointerCaptureComponent createPointerCaptureComponent(java.util.concurrent.Executor executor, androidx.xr.scenecore.internal.PointerCaptureComponent.StateListener stateListener, androidx.xr.scenecore.internal.InputEventListener inputListener);
    method public androidx.xr.scenecore.testing.FakeResizableComponent createResizableComponent(androidx.xr.scenecore.internal.Dimensions minimumSize, androidx.xr.scenecore.internal.Dimensions maximumSize);
    method public androidx.xr.scenecore.internal.SpatialPointerComponent createSpatialPointerComponent();
    method public androidx.xr.scenecore.internal.SubspaceNodeEntity createSubspaceNodeEntity(androidx.xr.runtime.SubspaceNodeHolder<? extends java.lang.Object?> subspaceNodeHolder, androidx.xr.scenecore.internal.Dimensions size);
    method public androidx.xr.scenecore.internal.SurfaceEntity createSurfaceEntity(int stereoMode, androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.SurfaceEntity.Shape shape, int surfaceProtection, int superSampling, androidx.xr.scenecore.internal.Entity parentEntity);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.MaterialResource> createWaterMaterial(boolean isAlphaMapVersion);
    method public void destroyKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material);
    method public void destroyTexture(androidx.xr.scenecore.internal.TextureResource texture);
    method public void destroyWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material);
    method public void dispose();
    method public void enablePanelDepthTest(boolean enabled);
    method public androidx.xr.scenecore.internal.ActivitySpace getActivitySpace();
    method public androidx.xr.scenecore.internal.Entity getActivitySpaceRootImpl();
    method public androidx.xr.scenecore.internal.AudioTrackExtensionsWrapper getAudioTrackExtensionsWrapper();
    method public androidx.xr.scenecore.internal.CameraViewActivityPose? getCameraViewActivityPose(@androidx.xr.scenecore.internal.CameraViewActivityPose.CameraType int cameraType);
    method public java.util.List<androidx.xr.scenecore.testing.FakeJxrPlatformAdapter.FakeKhronosPbrMaterial> getCreatedKhronosPbrMaterials();
    method public java.util.List<androidx.xr.scenecore.testing.FakeJxrPlatformAdapter.FakeWaterMaterial> getCreatedWaterMaterials();
    method public androidx.xr.scenecore.internal.HeadActivityPose? getHeadActivityPose();
    method public android.app.Activity? getLastSetPreferredAspectRatioActivity();
    method public float getLastSetPreferredAspectRatioRatio();
    method public androidx.xr.scenecore.internal.PanelEntity getMainPanelEntity();
    method public androidx.xr.scenecore.internal.MediaPlayerExtensionsWrapper getMediaPlayerExtensionsWrapper();
    method public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions>> getPerceivedResolutionChangedMap();
    method public androidx.xr.scenecore.internal.PerceptionSpaceActivityPose getPerceptionSpaceActivityPose();
    method public androidx.xr.scenecore.internal.TextureResource? getReflectionTextureFromIbl(androidx.xr.scenecore.internal.ExrImageResource iblToken);
    method public boolean getRequestedFullSpaceMode();
    method public boolean getRequestedHomeSpaceMode();
    method public androidx.xr.scenecore.internal.SoundPoolExtensionsWrapper getSoundPoolExtensionsWrapper();
    method public androidx.xr.scenecore.internal.SpatialCapabilities getSpatialCapabilities();
    method public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialCapabilities>> getSpatialCapabilitiesChangedMap();
    method public androidx.xr.scenecore.internal.SpatialEnvironment getSpatialEnvironment();
    method public androidx.xr.scenecore.internal.SpatialModeChangeListener getSpatialModeChangeListener();
    method public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialVisibility>> getSpatialVisibilityChangedMap();
    method public Enum<androidx.xr.scenecore.testing.FakeJxrPlatformAdapter.State> getState();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.ExrImageResource> loadExrImageByAssetName(String assetName);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.ExrImageResource> loadExrImageByByteArray(byte[] assetData, String assetKey);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.GltfModelResource> loadGltfByAssetName(String assetName);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.GltfModelResource> loadGltfByByteArray(byte[] assetData, String assetKey);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.TextureResource>? loadTexture(String assetName);
    method public void removePerceivedResolutionChangedListener(java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions> listener);
    method public void removeSpatialCapabilitiesChangedListener(java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialCapabilities> listener);
    method public void requestFullSpaceMode();
    method public void requestHomeSpaceMode();
    method public void setAlphaCutoffOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float alphaCutoff);
    method public void setAlphaMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource alphaMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setAlphaStepMultiplierOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float alphaStepMultiplier);
    method public void setAmbientOcclusionFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setAmbientOcclusionTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource ambientOcclusion, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setAmbientOcclusionUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setBaseColorFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Vector4 factors);
    method public void setBaseColorTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource baseColor, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setBaseColorUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setClearcoatFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float intensity, float roughness, float normal);
    method public void setClearcoatNormalTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource clearcoatNormal, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setClearcoatRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource clearcoatRoughness, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setClearcoatTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource clearcoat, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setEmissiveFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Vector3 factors);
    method public void setEmissiveTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource emissive, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setEmissiveUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public android.os.Bundle setFullSpaceMode(android.os.Bundle bundle);
    method public android.os.Bundle setFullSpaceModeWithEnvironmentInherited(android.os.Bundle bundle);
    method public void setIndexOfRefractionOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float indexOfRefraction);
    method public void setLastSetPreferredAspectRatioActivity(android.app.Activity?);
    method public void setLastSetPreferredAspectRatioRatio(float);
    method public void setMetallicFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setMetallicRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource metallicRoughness, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setMetallicRoughnessUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setNormalBoundaryOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalBoundary);
    method public void setNormalFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setNormalMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource normalMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setNormalSpeedOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalSpeed);
    method public void setNormalTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource normal, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setNormalTilingOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalTiling);
    method public void setNormalUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setNormalZOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalZ);
    method public void setPreferredAspectRatio(android.app.Activity activity, float preferredRatio);
    method public void setReflectionMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource reflectionMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setRequestedFullSpaceMode(boolean);
    method public void setRequestedHomeSpaceMode(boolean);
    method public void setRoughnessFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setSheenColorFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Vector3 factors);
    method public void setSheenColorTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource sheenColor, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setSheenRoughnessFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setSheenRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource sheenRoughness, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setSpatialModeChangeListener(androidx.xr.scenecore.internal.SpatialModeChangeListener);
    method public void setSpatialVisibilityChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialVisibility> listener);
    method public void setTransmissionFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setTransmissionTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource transmission, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setTransmissionUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void startRenderer();
    method public void stopRenderer();
    property public androidx.xr.scenecore.internal.ActivitySpace activitySpace;
    property public androidx.xr.scenecore.internal.Entity activitySpaceRootImpl;
    property public androidx.xr.scenecore.internal.AudioTrackExtensionsWrapper audioTrackExtensionsWrapper;
    property public java.util.List<androidx.xr.scenecore.testing.FakeJxrPlatformAdapter.FakeKhronosPbrMaterial> createdKhronosPbrMaterials;
    property public java.util.List<androidx.xr.scenecore.testing.FakeJxrPlatformAdapter.FakeWaterMaterial> createdWaterMaterials;
    property public androidx.xr.scenecore.internal.HeadActivityPose? headActivityPose;
    property public android.app.Activity? lastSetPreferredAspectRatioActivity;
    property public float lastSetPreferredAspectRatioRatio;
    property public androidx.xr.scenecore.internal.PanelEntity mainPanelEntity;
    property public androidx.xr.scenecore.internal.MediaPlayerExtensionsWrapper mediaPlayerExtensionsWrapper;
    property public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions>> perceivedResolutionChangedMap;
    property public androidx.xr.scenecore.internal.PerceptionSpaceActivityPose perceptionSpaceActivityPose;
    property public boolean requestedFullSpaceMode;
    property public boolean requestedHomeSpaceMode;
    property public androidx.xr.scenecore.internal.SoundPoolExtensionsWrapper soundPoolExtensionsWrapper;
    property public androidx.xr.scenecore.internal.SpatialCapabilities spatialCapabilities;
    property public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialCapabilities>> spatialCapabilitiesChangedMap;
    property public androidx.xr.scenecore.internal.SpatialEnvironment spatialEnvironment;
    property public androidx.xr.scenecore.internal.SpatialModeChangeListener spatialModeChangeListener;
    property public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialVisibility>> spatialVisibilityChangedMap;
    property public Enum<androidx.xr.scenecore.testing.FakeJxrPlatformAdapter.State> state;
  }

  public static final class FakeJxrPlatformAdapter.FakeKhronosPbrMaterial implements androidx.xr.scenecore.internal.MaterialResource {
    ctor public FakeJxrPlatformAdapter.FakeKhronosPbrMaterial(androidx.xr.scenecore.internal.KhronosPbrMaterialSpec spec);
    method public Float? getAlphaCutoff();
    method public Float? getAmbientOcclusionFactor();
    method public androidx.xr.scenecore.internal.TextureResource? getAmbientOcclusionTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getAmbientOcclusionTextureSampler();
    method public androidx.xr.runtime.math.Matrix3? getAmbientOcclusionUvTransform();
    method public androidx.xr.runtime.math.Vector4? getBaseColorFactors();
    method public androidx.xr.scenecore.internal.TextureResource? getBaseColorTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getBaseColorTextureSampler();
    method public androidx.xr.runtime.math.Matrix3? getBaseColorUvTransform();
    method public Float? getClearcoatIntensity();
    method public Float? getClearcoatNormalFactor();
    method public androidx.xr.scenecore.internal.TextureResource? getClearcoatNormalTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getClearcoatNormalTextureSampler();
    method public Float? getClearcoatRoughness();
    method public androidx.xr.scenecore.internal.TextureResource? getClearcoatRoughnessTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getClearcoatRoughnessTextureSampler();
    method public androidx.xr.scenecore.internal.TextureResource? getClearcoatTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getClearcoatTextureSampler();
    method public androidx.xr.runtime.math.Vector3? getEmissiveFactors();
    method public androidx.xr.scenecore.internal.TextureResource? getEmissiveTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getEmissiveTextureSampler();
    method public androidx.xr.runtime.math.Matrix3? getEmissiveUvTransform();
    method public Float? getIndexOfRefraction();
    method public Float? getMetallicFactor();
    method public androidx.xr.scenecore.internal.TextureResource? getMetallicRoughnessTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getMetallicRoughnessTextureSampler();
    method public androidx.xr.runtime.math.Matrix3? getMetallicRoughnessUvTransform();
    method public Float? getNormalFactor();
    method public androidx.xr.scenecore.internal.TextureResource? getNormalTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getNormalTextureSampler();
    method public androidx.xr.runtime.math.Matrix3? getNormalUvTransform();
    method public Float? getRoughnessFactor();
    method public androidx.xr.runtime.math.Vector3? getSheenColorFactors();
    method public androidx.xr.scenecore.internal.TextureResource? getSheenColorTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getSheenColorTextureSampler();
    method public Float? getSheenRoughnessFactor();
    method public androidx.xr.scenecore.internal.TextureResource? getSheenRoughnessTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getSheenRoughnessTextureSampler();
    method public androidx.xr.scenecore.internal.KhronosPbrMaterialSpec getSpec();
    method public Float? getTransmissionFactor();
    method public androidx.xr.scenecore.internal.TextureResource? getTransmissionTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getTransmissionTextureSampler();
    method public androidx.xr.runtime.math.Matrix3? getTransmissionUvTransform();
    method public void setAlphaCutoff(Float?);
    method public void setAmbientOcclusionFactor(Float?);
    method public void setAmbientOcclusionTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setAmbientOcclusionTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setAmbientOcclusionUvTransform(androidx.xr.runtime.math.Matrix3?);
    method public void setBaseColorFactors(androidx.xr.runtime.math.Vector4?);
    method public void setBaseColorTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setBaseColorTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setBaseColorUvTransform(androidx.xr.runtime.math.Matrix3?);
    method public void setClearcoatIntensity(Float?);
    method public void setClearcoatNormalFactor(Float?);
    method public void setClearcoatNormalTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setClearcoatNormalTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setClearcoatRoughness(Float?);
    method public void setClearcoatRoughnessTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setClearcoatRoughnessTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setClearcoatTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setClearcoatTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setEmissiveFactors(androidx.xr.runtime.math.Vector3?);
    method public void setEmissiveTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setEmissiveTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setEmissiveUvTransform(androidx.xr.runtime.math.Matrix3?);
    method public void setIndexOfRefraction(Float?);
    method public void setMetallicFactor(Float?);
    method public void setMetallicRoughnessTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setMetallicRoughnessTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setMetallicRoughnessUvTransform(androidx.xr.runtime.math.Matrix3?);
    method public void setNormalFactor(Float?);
    method public void setNormalTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setNormalTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setNormalUvTransform(androidx.xr.runtime.math.Matrix3?);
    method public void setRoughnessFactor(Float?);
    method public void setSheenColorFactors(androidx.xr.runtime.math.Vector3?);
    method public void setSheenColorTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setSheenColorTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setSheenRoughnessFactor(Float?);
    method public void setSheenRoughnessTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setSheenRoughnessTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setTransmissionFactor(Float?);
    method public void setTransmissionTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setTransmissionTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setTransmissionUvTransform(androidx.xr.runtime.math.Matrix3?);
    property public Float? alphaCutoff;
    property public Float? ambientOcclusionFactor;
    property public androidx.xr.scenecore.internal.TextureResource? ambientOcclusionTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? ambientOcclusionTextureSampler;
    property public androidx.xr.runtime.math.Matrix3? ambientOcclusionUvTransform;
    property public androidx.xr.runtime.math.Vector4? baseColorFactors;
    property public androidx.xr.scenecore.internal.TextureResource? baseColorTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? baseColorTextureSampler;
    property public androidx.xr.runtime.math.Matrix3? baseColorUvTransform;
    property public Float? clearcoatIntensity;
    property public Float? clearcoatNormalFactor;
    property public androidx.xr.scenecore.internal.TextureResource? clearcoatNormalTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? clearcoatNormalTextureSampler;
    property public Float? clearcoatRoughness;
    property public androidx.xr.scenecore.internal.TextureResource? clearcoatRoughnessTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? clearcoatRoughnessTextureSampler;
    property public androidx.xr.scenecore.internal.TextureResource? clearcoatTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? clearcoatTextureSampler;
    property public androidx.xr.runtime.math.Vector3? emissiveFactors;
    property public androidx.xr.scenecore.internal.TextureResource? emissiveTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? emissiveTextureSampler;
    property public androidx.xr.runtime.math.Matrix3? emissiveUvTransform;
    property public Float? indexOfRefraction;
    property public Float? metallicFactor;
    property public androidx.xr.scenecore.internal.TextureResource? metallicRoughnessTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? metallicRoughnessTextureSampler;
    property public androidx.xr.runtime.math.Matrix3? metallicRoughnessUvTransform;
    property public Float? normalFactor;
    property public androidx.xr.scenecore.internal.TextureResource? normalTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? normalTextureSampler;
    property public androidx.xr.runtime.math.Matrix3? normalUvTransform;
    property public Float? roughnessFactor;
    property public androidx.xr.runtime.math.Vector3? sheenColorFactors;
    property public androidx.xr.scenecore.internal.TextureResource? sheenColorTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? sheenColorTextureSampler;
    property public Float? sheenRoughnessFactor;
    property public androidx.xr.scenecore.internal.TextureResource? sheenRoughnessTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? sheenRoughnessTextureSampler;
    property public androidx.xr.scenecore.internal.KhronosPbrMaterialSpec spec;
    property public Float? transmissionFactor;
    property public androidx.xr.scenecore.internal.TextureResource? transmissionTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? transmissionTextureSampler;
    property public androidx.xr.runtime.math.Matrix3? transmissionUvTransform;
  }

  public static final class FakeJxrPlatformAdapter.FakeWaterMaterial implements androidx.xr.scenecore.internal.MaterialResource {
    ctor public FakeJxrPlatformAdapter.FakeWaterMaterial(boolean isAlphaMapVersion);
    method public androidx.xr.scenecore.internal.TextureResource? getAlphaMap();
    method public androidx.xr.scenecore.internal.TextureSampler? getAlphaMapSampler();
    method public float getAlphaStepMultiplier();
    method public float getNormalBoundary();
    method public androidx.xr.scenecore.internal.TextureResource? getNormalMap();
    method public androidx.xr.scenecore.internal.TextureSampler? getNormalMapSampler();
    method public float getNormalSpeed();
    method public float getNormalTiling();
    method public float getNormalZ();
    method public androidx.xr.scenecore.internal.TextureResource? getReflectionMap();
    method public androidx.xr.scenecore.internal.TextureSampler? getReflectionMapSampler();
    method public boolean isAlphaMapVersion();
    method public void setAlphaMap(androidx.xr.scenecore.internal.TextureResource?);
    method public void setAlphaMapSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setAlphaStepMultiplier(float);
    method public void setNormalBoundary(float);
    method public void setNormalMap(androidx.xr.scenecore.internal.TextureResource?);
    method public void setNormalMapSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setNormalSpeed(float);
    method public void setNormalTiling(float);
    method public void setNormalZ(float);
    method public void setReflectionMap(androidx.xr.scenecore.internal.TextureResource?);
    method public void setReflectionMapSampler(androidx.xr.scenecore.internal.TextureSampler?);
    property public androidx.xr.scenecore.internal.TextureResource? alphaMap;
    property public androidx.xr.scenecore.internal.TextureSampler? alphaMapSampler;
    property public float alphaStepMultiplier;
    property public boolean isAlphaMapVersion;
    property public float normalBoundary;
    property public androidx.xr.scenecore.internal.TextureResource? normalMap;
    property public androidx.xr.scenecore.internal.TextureSampler? normalMapSampler;
    property public float normalSpeed;
    property public float normalTiling;
    property public float normalZ;
    property public androidx.xr.scenecore.internal.TextureResource? reflectionMap;
    property public androidx.xr.scenecore.internal.TextureSampler? reflectionMapSampler;
  }

  public enum FakeJxrPlatformAdapter.State {
    enum_constant public static final androidx.xr.scenecore.testing.FakeJxrPlatformAdapter.State CREATED;
    enum_constant public static final androidx.xr.scenecore.testing.FakeJxrPlatformAdapter.State DESTROYED;
    enum_constant public static final androidx.xr.scenecore.testing.FakeJxrPlatformAdapter.State PAUSED;
    enum_constant public static final androidx.xr.scenecore.testing.FakeJxrPlatformAdapter.State STARTED;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeJxrPlatformAdapterFactory implements androidx.xr.runtime.internal.JxrPlatformAdapterFactory {
    ctor public FakeJxrPlatformAdapterFactory();
    method public androidx.xr.scenecore.testing.FakeJxrPlatformAdapter createPlatformAdapter(android.app.Activity activity, boolean unscaledGravityAlignedActivitySpace);
    method public java.util.Set<androidx.xr.runtime.internal.Feature> getRequirements();
    property public java.util.Set<androidx.xr.runtime.internal.Feature> requirements;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeMediaPlayerExtensionsWrapper implements androidx.xr.scenecore.internal.MediaPlayerExtensionsWrapper {
    ctor public FakeMediaPlayerExtensionsWrapper();
    method public java.util.Map<android.media.MediaPlayer,androidx.xr.scenecore.internal.PointSourceParams> getPointSourceParams();
    method public java.util.Map<android.media.MediaPlayer,androidx.xr.scenecore.internal.SoundFieldAttributes> getSoundFieldAttributes();
    method public void setPointSourceParams(android.media.MediaPlayer mediaPlayer, androidx.xr.scenecore.internal.PointSourceParams params);
    method public void setSoundFieldAttributes(android.media.MediaPlayer mediaPlayer, androidx.xr.scenecore.internal.SoundFieldAttributes attributes);
    property public java.util.Map<android.media.MediaPlayer,androidx.xr.scenecore.internal.PointSourceParams> pointSourceParams;
    property public java.util.Map<android.media.MediaPlayer,androidx.xr.scenecore.internal.SoundFieldAttributes> soundFieldAttributes;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeMovableComponent extends androidx.xr.scenecore.testing.FakeComponent implements androidx.xr.scenecore.internal.MovableComponent {
    ctor public FakeMovableComponent();
    method public void addMoveEventListener(java.util.concurrent.Executor executor, androidx.xr.scenecore.internal.MoveEventListener moveEventListener);
    method public java.util.Map<androidx.xr.scenecore.internal.MoveEventListener,java.util.concurrent.Executor> getMoveEventListenersMap();
    method public int getScaleWithDistanceMode();
    method public androidx.xr.scenecore.internal.Dimensions getSize();
    method public void removeMoveEventListener(androidx.xr.scenecore.internal.MoveEventListener moveEventListener);
    method public void setScaleWithDistanceMode(int);
    method public void setSize(androidx.xr.scenecore.internal.Dimensions);
    property public java.util.Map<androidx.xr.scenecore.internal.MoveEventListener,java.util.concurrent.Executor> moveEventListenersMap;
    property public int scaleWithDistanceMode;
    property public androidx.xr.scenecore.internal.Dimensions size;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface FakeNode {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class FakePanelEntity extends androidx.xr.scenecore.testing.FakeEntity implements androidx.xr.scenecore.internal.PanelEntity {
    ctor public FakePanelEntity();
    method public float getCornerRadius();
    method public androidx.xr.scenecore.internal.PerceivedResolutionResult getPerceivedResolution();
    method public androidx.xr.scenecore.internal.Dimensions getSize();
    method public androidx.xr.scenecore.internal.PixelDimensions getSizeInPixels();
    method public void setCornerRadius(float);
    method public final void setPerceivedResolution(androidx.xr.scenecore.internal.PerceivedResolutionResult perceivedResolution);
    method public void setSize(androidx.xr.scenecore.internal.Dimensions);
    method public void setSizeInPixels(androidx.xr.scenecore.internal.PixelDimensions);
    property public float cornerRadius;
    property public androidx.xr.scenecore.internal.Dimensions size;
    property public androidx.xr.scenecore.internal.PixelDimensions sizeInPixels;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakePerceptionSpaceActivityPose extends androidx.xr.scenecore.testing.FakeActivityPose implements androidx.xr.scenecore.internal.PerceptionSpaceActivityPose {
    ctor public FakePerceptionSpaceActivityPose();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakePointerCaptureComponent extends androidx.xr.scenecore.testing.FakeComponent implements androidx.xr.scenecore.internal.PointerCaptureComponent {
    ctor public FakePointerCaptureComponent();
    ctor public FakePointerCaptureComponent(optional java.util.concurrent.Executor? executor, optional androidx.xr.scenecore.internal.PointerCaptureComponent.StateListener? stateListener);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeRenderingRuntime implements androidx.xr.scenecore.internal.RenderingRuntime {
    ctor public FakeRenderingRuntime(androidx.xr.scenecore.internal.RenderingEntityFactory entityFactory);
    method public androidx.xr.scenecore.internal.TextureResource? borrowReflectionTexture();
    method public androidx.xr.scenecore.internal.GltfEntity createGltfEntity(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.GltfModelResource loadedGltf, androidx.xr.scenecore.internal.Entity parentEntity);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.MaterialResource>? createKhronosPbrMaterial(androidx.xr.scenecore.internal.KhronosPbrMaterialSpec spec);
    method public androidx.xr.scenecore.internal.SurfaceEntity createSurfaceEntity(int stereoMode, androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.SurfaceEntity.Shape shape, int surfaceProtection, int superSampling, androidx.xr.scenecore.internal.Entity parentEntity);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.MaterialResource> createWaterMaterial(boolean isAlphaMapVersion);
    method public void destroyKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material);
    method public void destroyTexture(androidx.xr.scenecore.internal.TextureResource texture);
    method public void destroyWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material);
    method public void dispose();
    method public java.util.List<androidx.xr.scenecore.testing.FakeRenderingRuntime.FakeKhronosPbrMaterial> getCreatedKhronosPbrMaterials();
    method public java.util.List<androidx.xr.scenecore.testing.FakeRenderingRuntime.FakeWaterMaterial> getCreatedWaterMaterials();
    method public androidx.xr.scenecore.internal.TextureResource? getReflectionTextureFromIbl(androidx.xr.scenecore.internal.ExrImageResource iblToken);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.ExrImageResource> loadExrImageByAssetName(String assetName);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.ExrImageResource> loadExrImageByByteArray(byte[] assetData, String assetKey);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.GltfModelResource> loadGltfByAssetName(String assetName);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.GltfModelResource> loadGltfByByteArray(byte[] assetData, String assetKey);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.TextureResource> loadTexture(String assetName);
    method public void setAlphaCutoffOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float alphaCutoff);
    method public void setAlphaMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource alphaMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setAlphaStepMultiplierOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float alphaStepMultiplier);
    method public void setAmbientOcclusionFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setAmbientOcclusionTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource ambientOcclusion, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setAmbientOcclusionUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setBaseColorFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Vector4 factors);
    method public void setBaseColorTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource baseColor, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setBaseColorUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setClearcoatFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float intensity, float roughness, float normal);
    method public void setClearcoatNormalTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource clearcoatNormal, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setClearcoatRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource clearcoatRoughness, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setClearcoatTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource clearcoat, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setEmissiveFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Vector3 factors);
    method public void setEmissiveTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource emissive, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setEmissiveUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setIndexOfRefractionOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float indexOfRefraction);
    method public void setMetallicFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setMetallicRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource metallicRoughness, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setMetallicRoughnessUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setNormalBoundaryOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalBoundary);
    method public void setNormalFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setNormalMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource normalMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setNormalSpeedOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalSpeed);
    method public void setNormalTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource normal, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setNormalTilingOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalTiling);
    method public void setNormalUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setNormalZOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalZ);
    method public void setReflectionMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource reflectionMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setRoughnessFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setSheenColorFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Vector3 factors);
    method public void setSheenColorTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource sheenColor, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setSheenRoughnessFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setSheenRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource sheenRoughness, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setTransmissionFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setTransmissionTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource transmission, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setTransmissionUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void startRenderer();
    method public void stopRenderer();
    property public java.util.List<androidx.xr.scenecore.testing.FakeRenderingRuntime.FakeKhronosPbrMaterial> createdKhronosPbrMaterials;
    property public java.util.List<androidx.xr.scenecore.testing.FakeRenderingRuntime.FakeWaterMaterial> createdWaterMaterials;
  }

  public static final class FakeRenderingRuntime.FakeKhronosPbrMaterial implements androidx.xr.scenecore.internal.MaterialResource {
    ctor public FakeRenderingRuntime.FakeKhronosPbrMaterial(androidx.xr.scenecore.internal.KhronosPbrMaterialSpec spec);
    method public Float? getAlphaCutoff();
    method public Float? getAmbientOcclusionFactor();
    method public androidx.xr.scenecore.internal.TextureResource? getAmbientOcclusionTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getAmbientOcclusionTextureSampler();
    method public androidx.xr.runtime.math.Matrix3? getAmbientOcclusionUvTransform();
    method public androidx.xr.runtime.math.Vector4? getBaseColorFactors();
    method public androidx.xr.scenecore.internal.TextureResource? getBaseColorTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getBaseColorTextureSampler();
    method public androidx.xr.runtime.math.Matrix3? getBaseColorUvTransform();
    method public Float? getClearcoatIntensity();
    method public Float? getClearcoatNormalFactor();
    method public androidx.xr.scenecore.internal.TextureResource? getClearcoatNormalTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getClearcoatNormalTextureSampler();
    method public Float? getClearcoatRoughness();
    method public androidx.xr.scenecore.internal.TextureResource? getClearcoatRoughnessTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getClearcoatRoughnessTextureSampler();
    method public androidx.xr.scenecore.internal.TextureResource? getClearcoatTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getClearcoatTextureSampler();
    method public androidx.xr.runtime.math.Vector3? getEmissiveFactors();
    method public androidx.xr.scenecore.internal.TextureResource? getEmissiveTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getEmissiveTextureSampler();
    method public androidx.xr.runtime.math.Matrix3? getEmissiveUvTransform();
    method public Float? getIndexOfRefraction();
    method public Float? getMetallicFactor();
    method public androidx.xr.scenecore.internal.TextureResource? getMetallicRoughnessTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getMetallicRoughnessTextureSampler();
    method public androidx.xr.runtime.math.Matrix3? getMetallicRoughnessUvTransform();
    method public Float? getNormalFactor();
    method public androidx.xr.scenecore.internal.TextureResource? getNormalTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getNormalTextureSampler();
    method public androidx.xr.runtime.math.Matrix3? getNormalUvTransform();
    method public Float? getRoughnessFactor();
    method public androidx.xr.runtime.math.Vector3? getSheenColorFactors();
    method public androidx.xr.scenecore.internal.TextureResource? getSheenColorTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getSheenColorTextureSampler();
    method public Float? getSheenRoughnessFactor();
    method public androidx.xr.scenecore.internal.TextureResource? getSheenRoughnessTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getSheenRoughnessTextureSampler();
    method public androidx.xr.scenecore.internal.KhronosPbrMaterialSpec getSpec();
    method public Float? getTransmissionFactor();
    method public androidx.xr.scenecore.internal.TextureResource? getTransmissionTexture();
    method public androidx.xr.scenecore.internal.TextureSampler? getTransmissionTextureSampler();
    method public androidx.xr.runtime.math.Matrix3? getTransmissionUvTransform();
    method public void setAlphaCutoff(Float?);
    method public void setAmbientOcclusionFactor(Float?);
    method public void setAmbientOcclusionTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setAmbientOcclusionTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setAmbientOcclusionUvTransform(androidx.xr.runtime.math.Matrix3?);
    method public void setBaseColorFactors(androidx.xr.runtime.math.Vector4?);
    method public void setBaseColorTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setBaseColorTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setBaseColorUvTransform(androidx.xr.runtime.math.Matrix3?);
    method public void setClearcoatIntensity(Float?);
    method public void setClearcoatNormalFactor(Float?);
    method public void setClearcoatNormalTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setClearcoatNormalTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setClearcoatRoughness(Float?);
    method public void setClearcoatRoughnessTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setClearcoatRoughnessTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setClearcoatTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setClearcoatTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setEmissiveFactors(androidx.xr.runtime.math.Vector3?);
    method public void setEmissiveTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setEmissiveTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setEmissiveUvTransform(androidx.xr.runtime.math.Matrix3?);
    method public void setIndexOfRefraction(Float?);
    method public void setMetallicFactor(Float?);
    method public void setMetallicRoughnessTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setMetallicRoughnessTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setMetallicRoughnessUvTransform(androidx.xr.runtime.math.Matrix3?);
    method public void setNormalFactor(Float?);
    method public void setNormalTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setNormalTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setNormalUvTransform(androidx.xr.runtime.math.Matrix3?);
    method public void setRoughnessFactor(Float?);
    method public void setSheenColorFactors(androidx.xr.runtime.math.Vector3?);
    method public void setSheenColorTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setSheenColorTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setSheenRoughnessFactor(Float?);
    method public void setSheenRoughnessTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setSheenRoughnessTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setTransmissionFactor(Float?);
    method public void setTransmissionTexture(androidx.xr.scenecore.internal.TextureResource?);
    method public void setTransmissionTextureSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setTransmissionUvTransform(androidx.xr.runtime.math.Matrix3?);
    property public Float? alphaCutoff;
    property public Float? ambientOcclusionFactor;
    property public androidx.xr.scenecore.internal.TextureResource? ambientOcclusionTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? ambientOcclusionTextureSampler;
    property public androidx.xr.runtime.math.Matrix3? ambientOcclusionUvTransform;
    property public androidx.xr.runtime.math.Vector4? baseColorFactors;
    property public androidx.xr.scenecore.internal.TextureResource? baseColorTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? baseColorTextureSampler;
    property public androidx.xr.runtime.math.Matrix3? baseColorUvTransform;
    property public Float? clearcoatIntensity;
    property public Float? clearcoatNormalFactor;
    property public androidx.xr.scenecore.internal.TextureResource? clearcoatNormalTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? clearcoatNormalTextureSampler;
    property public Float? clearcoatRoughness;
    property public androidx.xr.scenecore.internal.TextureResource? clearcoatRoughnessTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? clearcoatRoughnessTextureSampler;
    property public androidx.xr.scenecore.internal.TextureResource? clearcoatTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? clearcoatTextureSampler;
    property public androidx.xr.runtime.math.Vector3? emissiveFactors;
    property public androidx.xr.scenecore.internal.TextureResource? emissiveTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? emissiveTextureSampler;
    property public androidx.xr.runtime.math.Matrix3? emissiveUvTransform;
    property public Float? indexOfRefraction;
    property public Float? metallicFactor;
    property public androidx.xr.scenecore.internal.TextureResource? metallicRoughnessTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? metallicRoughnessTextureSampler;
    property public androidx.xr.runtime.math.Matrix3? metallicRoughnessUvTransform;
    property public Float? normalFactor;
    property public androidx.xr.scenecore.internal.TextureResource? normalTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? normalTextureSampler;
    property public androidx.xr.runtime.math.Matrix3? normalUvTransform;
    property public Float? roughnessFactor;
    property public androidx.xr.runtime.math.Vector3? sheenColorFactors;
    property public androidx.xr.scenecore.internal.TextureResource? sheenColorTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? sheenColorTextureSampler;
    property public Float? sheenRoughnessFactor;
    property public androidx.xr.scenecore.internal.TextureResource? sheenRoughnessTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? sheenRoughnessTextureSampler;
    property public androidx.xr.scenecore.internal.KhronosPbrMaterialSpec spec;
    property public Float? transmissionFactor;
    property public androidx.xr.scenecore.internal.TextureResource? transmissionTexture;
    property public androidx.xr.scenecore.internal.TextureSampler? transmissionTextureSampler;
    property public androidx.xr.runtime.math.Matrix3? transmissionUvTransform;
  }

  public static final class FakeRenderingRuntime.FakeWaterMaterial implements androidx.xr.scenecore.internal.MaterialResource {
    ctor public FakeRenderingRuntime.FakeWaterMaterial(boolean isAlphaMapVersion);
    method public androidx.xr.scenecore.internal.TextureResource? getAlphaMap();
    method public androidx.xr.scenecore.internal.TextureSampler? getAlphaMapSampler();
    method public float getAlphaStepMultiplier();
    method public float getNormalBoundary();
    method public androidx.xr.scenecore.internal.TextureResource? getNormalMap();
    method public androidx.xr.scenecore.internal.TextureSampler? getNormalMapSampler();
    method public float getNormalSpeed();
    method public float getNormalTiling();
    method public float getNormalZ();
    method public androidx.xr.scenecore.internal.TextureResource? getReflectionMap();
    method public androidx.xr.scenecore.internal.TextureSampler? getReflectionMapSampler();
    method public boolean isAlphaMapVersion();
    method public void setAlphaMap(androidx.xr.scenecore.internal.TextureResource?);
    method public void setAlphaMapSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setAlphaStepMultiplier(float);
    method public void setNormalBoundary(float);
    method public void setNormalMap(androidx.xr.scenecore.internal.TextureResource?);
    method public void setNormalMapSampler(androidx.xr.scenecore.internal.TextureSampler?);
    method public void setNormalSpeed(float);
    method public void setNormalTiling(float);
    method public void setNormalZ(float);
    method public void setReflectionMap(androidx.xr.scenecore.internal.TextureResource?);
    method public void setReflectionMapSampler(androidx.xr.scenecore.internal.TextureSampler?);
    property public androidx.xr.scenecore.internal.TextureResource? alphaMap;
    property public androidx.xr.scenecore.internal.TextureSampler? alphaMapSampler;
    property public float alphaStepMultiplier;
    property public boolean isAlphaMapVersion;
    property public float normalBoundary;
    property public androidx.xr.scenecore.internal.TextureResource? normalMap;
    property public androidx.xr.scenecore.internal.TextureSampler? normalMapSampler;
    property public float normalSpeed;
    property public float normalTiling;
    property public float normalZ;
    property public androidx.xr.scenecore.internal.TextureResource? reflectionMap;
    property public androidx.xr.scenecore.internal.TextureSampler? reflectionMapSampler;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeRenderingRuntimeFactory implements androidx.xr.runtime.internal.RenderingRuntimeFactory {
    ctor public FakeRenderingRuntimeFactory();
    method public androidx.xr.scenecore.internal.RenderingRuntime create(java.util.List<? extends androidx.xr.runtime.internal.JxrRuntime> runtimes, android.app.Activity activity);
    method public java.util.Set<androidx.xr.runtime.internal.Feature> getRequirements();
    property public java.util.Set<androidx.xr.runtime.internal.Feature> requirements;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeResizableComponent extends androidx.xr.scenecore.testing.FakeComponent implements androidx.xr.scenecore.internal.ResizableComponent {
    ctor public FakeResizableComponent();
    ctor public FakeResizableComponent(optional androidx.xr.scenecore.internal.Dimensions size, optional androidx.xr.scenecore.internal.Dimensions minimumSize, optional androidx.xr.scenecore.internal.Dimensions maximumSize, optional float fixedAspectRatio, optional boolean autoHideContent, optional boolean autoUpdateSize, optional boolean forceShowResizeOverlay);
    method public void addResizeEventListener(java.util.concurrent.Executor executor, androidx.xr.scenecore.internal.ResizeEventListener resizeEventListener);
    method public boolean getAutoHideContent();
    method public boolean getAutoUpdateSize();
    method public float getFixedAspectRatio();
    method public boolean getForceShowResizeOverlay();
    method public androidx.xr.scenecore.internal.Dimensions getMaximumSize();
    method public androidx.xr.scenecore.internal.Dimensions getMinimumSize();
    method public java.util.Map<androidx.xr.scenecore.internal.ResizeEventListener,java.util.concurrent.Executor> getResizeEventListenersMap();
    method public androidx.xr.scenecore.internal.Dimensions getSize();
    method public void removeResizeEventListener(androidx.xr.scenecore.internal.ResizeEventListener resizeEventListener);
    method public void setAutoHideContent(boolean);
    method public void setAutoUpdateSize(boolean);
    method public void setFixedAspectRatio(float);
    method public void setForceShowResizeOverlay(boolean);
    method public void setMaximumSize(androidx.xr.scenecore.internal.Dimensions);
    method public void setMinimumSize(androidx.xr.scenecore.internal.Dimensions);
    method public void setSize(androidx.xr.scenecore.internal.Dimensions);
    property public boolean autoHideContent;
    property public boolean autoUpdateSize;
    property public float fixedAspectRatio;
    property public boolean forceShowResizeOverlay;
    property public androidx.xr.scenecore.internal.Dimensions maximumSize;
    property public androidx.xr.scenecore.internal.Dimensions minimumSize;
    property public java.util.Map<androidx.xr.scenecore.internal.ResizeEventListener,java.util.concurrent.Executor> resizeEventListenersMap;
    property public androidx.xr.scenecore.internal.Dimensions size;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) internal final class FakeResource implements androidx.xr.scenecore.internal.ExrImageResource androidx.xr.scenecore.internal.GltfModelResource androidx.xr.scenecore.internal.MaterialResource androidx.xr.scenecore.internal.Resource androidx.xr.scenecore.internal.TextureResource {
    ctor public FakeResource(long token);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeSceneRuntime implements androidx.xr.scenecore.internal.RenderingEntityFactory androidx.xr.scenecore.internal.SceneRuntime {
    ctor public FakeSceneRuntime();
    method public void addPerceivedResolutionChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions> listener);
    method public void addSpatialCapabilitiesChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialCapabilities> listener);
    method public void clearSpatialVisibilityChangedListener();
    method public androidx.xr.scenecore.internal.ActivityPanelEntity createActivityPanelEntity(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.PixelDimensions windowBoundsPx, String name, android.app.Activity hostActivity, androidx.xr.scenecore.internal.Entity parent);
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public androidx.xr.scenecore.internal.AnchorEntity createAnchorEntity(androidx.xr.arcore.internal.Anchor anchor);
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public androidx.xr.scenecore.internal.AnchorEntity createAnchorEntity(androidx.xr.scenecore.internal.Dimensions bounds, androidx.xr.scenecore.internal.PlaneType planeType, androidx.xr.scenecore.internal.PlaneSemantic planeSemantic, java.time.Duration searchTimeout);
    method public androidx.xr.scenecore.internal.AnchorPlacement createAnchorPlacementForPlanes(java.util.Set<androidx.xr.scenecore.internal.PlaneType> planeTypeFilter, java.util.Set<androidx.xr.scenecore.internal.PlaneSemantic> planeSemanticFilter);
    method public androidx.xr.scenecore.internal.GltfEntity createGltfEntity(androidx.xr.scenecore.internal.GltfFeature feature, androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.Entity parentEntity);
    method public androidx.xr.scenecore.internal.Entity createGroupEntity(androidx.xr.runtime.math.Pose pose, String name, androidx.xr.scenecore.internal.Entity parent);
    method public androidx.xr.scenecore.internal.InteractableComponent createInteractableComponent(java.util.concurrent.Executor executor, androidx.xr.scenecore.internal.InputEventListener listener);
    method public androidx.xr.scenecore.internal.LoggingEntity createLoggingEntity(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.scenecore.testing.FakeMovableComponent createMovableComponent(boolean systemMovable, boolean scaleInZ, java.util.Set<androidx.xr.scenecore.internal.AnchorPlacement> anchorPlacement, boolean shouldDisposeParentAnchor);
    method public androidx.xr.scenecore.internal.PanelEntity createPanelEntity(android.content.Context context, androidx.xr.runtime.math.Pose pose, android.view.View view, androidx.xr.scenecore.internal.Dimensions dimensions, String name, androidx.xr.scenecore.internal.Entity parent);
    method public androidx.xr.scenecore.internal.PanelEntity createPanelEntity(android.content.Context context, androidx.xr.runtime.math.Pose pose, android.view.View view, androidx.xr.scenecore.internal.PixelDimensions pixelDimensions, String name, androidx.xr.scenecore.internal.Entity parent);
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public androidx.xr.scenecore.testing.FakeAnchorEntity createPersistedAnchorEntity(java.util.UUID uuid, java.time.Duration searchTimeout);
    method public androidx.xr.scenecore.testing.FakePointerCaptureComponent createPointerCaptureComponent(java.util.concurrent.Executor executor, androidx.xr.scenecore.internal.PointerCaptureComponent.StateListener stateListener, androidx.xr.scenecore.internal.InputEventListener inputListener);
    method public androidx.xr.scenecore.testing.FakeResizableComponent createResizableComponent(androidx.xr.scenecore.internal.Dimensions minimumSize, androidx.xr.scenecore.internal.Dimensions maximumSize);
    method public androidx.xr.scenecore.internal.SpatialPointerComponent createSpatialPointerComponent();
    method public androidx.xr.scenecore.internal.SubspaceNodeEntity createSubspaceNodeEntity(androidx.xr.scenecore.internal.SubspaceNodeFeature feature);
    method public androidx.xr.scenecore.internal.SurfaceEntity createSurfaceEntity(androidx.xr.scenecore.internal.SurfaceFeature feature, androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.Entity parentEntity);
    method public void dispose();
    method public void enablePanelDepthTest(boolean enabled);
    method public androidx.xr.scenecore.internal.ActivitySpace getActivitySpace();
    method public androidx.xr.scenecore.internal.AudioTrackExtensionsWrapper getAudioTrackExtensionsWrapper();
    method public androidx.xr.scenecore.internal.CameraViewActivityPose? getCameraViewActivityPose(@androidx.xr.scenecore.internal.CameraViewActivityPose.CameraType int cameraType);
    method public androidx.xr.scenecore.internal.HeadActivityPose? getHeadActivityPose();
    method public android.app.Activity? getLastSetPreferredAspectRatioActivity();
    method public float getLastSetPreferredAspectRatioRatio();
    method public androidx.xr.scenecore.internal.PanelEntity getMainPanelEntity();
    method public androidx.xr.scenecore.internal.MediaPlayerExtensionsWrapper getMediaPlayerExtensionsWrapper();
    method public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions>> getPerceivedResolutionChangedMap();
    method public androidx.xr.scenecore.internal.PerceptionSpaceActivityPose getPerceptionSpaceActivityPose();
    method public boolean getRequestedFullSpaceMode();
    method public boolean getRequestedHomeSpaceMode();
    method public androidx.xr.scenecore.internal.SoundPoolExtensionsWrapper getSoundPoolExtensionsWrapper();
    method public androidx.xr.scenecore.internal.SpatialCapabilities getSpatialCapabilities();
    method public androidx.xr.scenecore.internal.SpatialEnvironment getSpatialEnvironment();
    method public androidx.xr.scenecore.internal.SpatialModeChangeListener? getSpatialModeChangeListener();
    method public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialVisibility>> getSpatialVisibilityChangedMap();
    method public void removePerceivedResolutionChangedListener(java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions> listener);
    method public void removeSpatialCapabilitiesChangedListener(java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialCapabilities> listener);
    method public void requestFullSpaceMode();
    method public void requestHomeSpaceMode();
    method public android.os.Bundle setFullSpaceMode(android.os.Bundle bundle);
    method public android.os.Bundle setFullSpaceModeWithEnvironmentInherited(android.os.Bundle bundle);
    method public void setLastSetPreferredAspectRatioActivity(android.app.Activity?);
    method public void setLastSetPreferredAspectRatioRatio(float);
    method public void setPreferredAspectRatio(android.app.Activity activity, float preferredRatio);
    method public void setRequestedFullSpaceMode(boolean);
    method public void setRequestedHomeSpaceMode(boolean);
    method public void setSpatialModeChangeListener(androidx.xr.scenecore.internal.SpatialModeChangeListener?);
    method public void setSpatialVisibilityChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialVisibility> listener);
    property public androidx.xr.scenecore.internal.ActivitySpace activitySpace;
    property public androidx.xr.scenecore.internal.AudioTrackExtensionsWrapper audioTrackExtensionsWrapper;
    property public androidx.xr.scenecore.internal.HeadActivityPose? headActivityPose;
    property public android.app.Activity? lastSetPreferredAspectRatioActivity;
    property public float lastSetPreferredAspectRatioRatio;
    property public androidx.xr.scenecore.internal.PanelEntity mainPanelEntity;
    property public androidx.xr.scenecore.internal.MediaPlayerExtensionsWrapper mediaPlayerExtensionsWrapper;
    property public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions>> perceivedResolutionChangedMap;
    property public androidx.xr.scenecore.internal.PerceptionSpaceActivityPose perceptionSpaceActivityPose;
    property public boolean requestedFullSpaceMode;
    property public boolean requestedHomeSpaceMode;
    property public androidx.xr.scenecore.internal.SoundPoolExtensionsWrapper soundPoolExtensionsWrapper;
    property public androidx.xr.scenecore.internal.SpatialCapabilities spatialCapabilities;
    property public androidx.xr.scenecore.internal.SpatialEnvironment spatialEnvironment;
    property public androidx.xr.scenecore.internal.SpatialModeChangeListener? spatialModeChangeListener;
    property public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialVisibility>> spatialVisibilityChangedMap;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeSceneRuntimeFactory implements androidx.xr.runtime.internal.SceneRuntimeFactory {
    ctor public FakeSceneRuntimeFactory();
    method public androidx.xr.scenecore.internal.SceneRuntime create(android.app.Activity activity);
    method public java.util.Set<androidx.xr.runtime.internal.Feature> getRequirements();
    property public java.util.Set<androidx.xr.runtime.internal.Feature> requirements;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class FakeScheduledExecutorService extends java.util.concurrent.AbstractExecutorService implements java.lang.AutoCloseable java.util.concurrent.ScheduledExecutorService {
    ctor public FakeScheduledExecutorService();
    method public boolean awaitTermination(long, java.util.concurrent.TimeUnit?);
    method public void close();
    method public void execute(Runnable?);
    method public boolean hasNext();
    method @com.google.errorprone.annotations.CheckReturnValue public boolean isEmpty();
    method public boolean isShutdown();
    method public boolean isTerminated();
    method public void runAll();
    method public void runNext();
    method public java.util.concurrent.ScheduledFuture<? extends java.lang.Object!> schedule(Runnable?, long, java.util.concurrent.TimeUnit?);
    method public <V> java.util.concurrent.ScheduledFuture<V!> schedule(java.util.concurrent.Callable<V!>?, long, java.util.concurrent.TimeUnit?);
    method public java.util.concurrent.ScheduledFuture<? extends java.lang.Object!> scheduleAtFixedRate(Runnable?, long, long, java.util.concurrent.TimeUnit?);
    method public java.util.concurrent.ScheduledFuture<? extends java.lang.Object!> scheduleWithFixedDelay(Runnable?, long, long, java.util.concurrent.TimeUnit?);
    method public void shutdown();
    method public java.util.List<java.lang.Runnable!> shutdownNow();
    method public void simulateSleepExecutingAllTasks(java.time.Duration);
    method public boolean simulateSleepExecutingAtMostOneTask();
    method public boolean simulateSleepExecutingAtMostOneTask(java.time.Duration);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeSoundPoolExtensionsWrapper implements androidx.xr.scenecore.internal.SoundPoolExtensionsWrapper {
    ctor public FakeSoundPoolExtensionsWrapper();
    method public int getSourceType();
    method @androidx.xr.scenecore.internal.SpatializerConstants.SourceType public int getSpatialSourceType(android.media.SoundPool soundPool, int streamId);
    method public int play(android.media.SoundPool soundPool, int soundId, androidx.xr.scenecore.internal.PointSourceParams params, float volume, int priority, int loop, float rate);
    method public int play(android.media.SoundPool soundPool, int soundId, androidx.xr.scenecore.internal.SoundFieldAttributes attributes, float volume, int priority, int loop, float rate);
    method public void setPlayAsPointSourceResult(int result);
    method public void setPlayAsSoundFieldResult(int result);
    method public void setSourceType(int);
    property @androidx.xr.scenecore.internal.SpatializerConstants.SourceType public int sourceType;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeSpatialEnvironment implements androidx.xr.scenecore.internal.SpatialEnvironment {
    ctor public FakeSpatialEnvironment();
    method public void addOnPassthroughOpacityChangedListener(java.util.concurrent.Executor executor, java.util.function.Consumer<java.lang.Float> listener);
    method public void addOnSpatialEnvironmentChangedListener(java.util.concurrent.Executor executor, java.util.function.Consumer<java.lang.Boolean> listener);
    method public float getCurrentPassthroughOpacity();
    method public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Float>> getPassthroughOpacityChangedListenerMap();
    method public float getPreferredPassthroughOpacity();
    method public androidx.xr.scenecore.internal.SpatialEnvironment.SpatialEnvironmentPreference? getPreferredSpatialEnvironment();
    method public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>> getSpatialEnvironmentChangedListenerMap();
    method public boolean isPreferredSpatialEnvironmentActive();
    method public void removeOnPassthroughOpacityChangedListener(java.util.function.Consumer<java.lang.Float> listener);
    method public void removeOnSpatialEnvironmentChangedListener(java.util.function.Consumer<java.lang.Boolean> listener);
    method public void setPreferredPassthroughOpacity(float);
    method public void setPreferredSpatialEnvironment(androidx.xr.scenecore.internal.SpatialEnvironment.SpatialEnvironmentPreference?);
    property public float currentPassthroughOpacity;
    property public boolean isPreferredSpatialEnvironmentActive;
    property public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Float>> passthroughOpacityChangedListenerMap;
    property public float preferredPassthroughOpacity;
    property public androidx.xr.scenecore.internal.SpatialEnvironment.SpatialEnvironmentPreference? preferredSpatialEnvironment;
    property public java.util.Map<java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>> spatialEnvironmentChangedListenerMap;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeSpatialModeChangeListener implements androidx.xr.scenecore.internal.SpatialModeChangeListener {
    ctor public FakeSpatialModeChangeListener();
    method public androidx.xr.runtime.math.Pose? getLastRecommendedPose();
    method public androidx.xr.runtime.math.Vector3? getLastRecommendedScale();
    method public int getUpdateCount();
    method public void onSpatialModeChanged(androidx.xr.runtime.math.Pose recommendedPose, androidx.xr.runtime.math.Vector3 recommendedScale);
    method public void reset();
    method public void setLastRecommendedPose(androidx.xr.runtime.math.Pose?);
    method public void setLastRecommendedScale(androidx.xr.runtime.math.Vector3?);
    method public void setUpdateCount(int);
    property public androidx.xr.runtime.math.Pose? lastRecommendedPose;
    property public androidx.xr.runtime.math.Vector3? lastRecommendedScale;
    property public int updateCount;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeSpatialPointerComponent extends androidx.xr.scenecore.testing.FakeComponent implements androidx.xr.scenecore.internal.SpatialPointerComponent {
    ctor public FakeSpatialPointerComponent();
    method @androidx.xr.scenecore.internal.SpatialPointerIconType public int getSpatialPointerIcon();
    method public void setSpatialPointerIcon(@androidx.xr.scenecore.internal.SpatialPointerIconType int iconType);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface FakeSubspaceNode {
    method public androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> getNodeHolder();
    property public abstract androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> nodeHolder;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeSubspaceNodeEntity extends androidx.xr.scenecore.testing.FakeEntity implements androidx.xr.scenecore.internal.SubspaceNodeEntity {
    ctor public FakeSubspaceNodeEntity();
    ctor public FakeSubspaceNodeEntity(optional androidx.xr.scenecore.internal.SubspaceNodeFeature? mockSubspaceNodeFeature, optional androidx.xr.scenecore.internal.Dimensions size);
    method public androidx.xr.scenecore.internal.Dimensions getSize();
    method public void setSize(androidx.xr.scenecore.internal.Dimensions);
    property public androidx.xr.scenecore.internal.Dimensions size;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeSubspaceNodeFeature extends androidx.xr.scenecore.testing.FakeBaseRenderingFeature implements androidx.xr.scenecore.internal.SubspaceNodeFeature {
    ctor public FakeSubspaceNodeFeature(androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> nodeHolder, optional androidx.xr.scenecore.internal.Dimensions initSize);
    method public androidx.xr.scenecore.internal.Dimensions getSize();
    method public void setAlpha(float alpha);
    method public void setHidden(boolean hidden);
    method public void setPose(androidx.xr.runtime.math.Pose pose);
    method public void setScale(androidx.xr.runtime.math.Vector3 scaleActivity);
    method public void setSize(androidx.xr.scenecore.internal.Dimensions);
    property public androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> nodeHolder;
    property public androidx.xr.scenecore.internal.Dimensions size;
    field public static final androidx.xr.scenecore.testing.FakeSubspaceNodeFeature.Companion Companion;
  }

  public static final class FakeSubspaceNodeFeature.Companion {
    method public androidx.xr.scenecore.internal.SubspaceNodeFeature createWithMockFeature(androidx.xr.scenecore.internal.SubspaceNodeFeature mockFeature, androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> nodeHolder, androidx.xr.scenecore.internal.Dimensions size);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeSurfaceEntity extends androidx.xr.scenecore.testing.FakeEntity implements androidx.xr.scenecore.internal.SurfaceEntity {
    ctor public FakeSurfaceEntity();
    method public androidx.xr.scenecore.internal.TextureResource? getAuxiliaryAlphaMask();
    method public int getColorRange();
    method public int getColorSpace();
    method public int getColorTransfer();
    method public boolean getContentColorMetadataSet();
    method public androidx.xr.scenecore.internal.Dimensions getDimensions();
    method public androidx.xr.scenecore.internal.SurfaceEntity.EdgeFeather getEdgeFeather();
    method public boolean getMContentColorMetadataSet();
    method public int getMaxContentLightLevel();
    method public androidx.xr.scenecore.internal.PerceivedResolutionResult getPerceivedResolution();
    method public androidx.xr.scenecore.internal.PerceivedResolutionResult getPerceivedResolutionResult();
    method public androidx.xr.scenecore.internal.TextureResource? getPrimaryAlphaMask();
    method public androidx.xr.scenecore.internal.SurfaceEntity.Shape getShape();
    method public int getStereoMode();
    method public android.view.Surface getSurface();
    method public void resetContentColorMetadata();
    method public void setAuxiliaryAlphaMaskTexture(androidx.xr.scenecore.internal.TextureResource? alphaMask);
    method public void setContentColorMetadata(int colorSpace, int colorTransfer, int colorRange, int maxContentLightLevel);
    method public void setEdgeFeather(androidx.xr.scenecore.internal.SurfaceEntity.EdgeFeather);
    method public void setMContentColorMetadataSet(boolean);
    method public void setPerceivedResolutionResult(androidx.xr.scenecore.internal.PerceivedResolutionResult);
    method public void setPrimaryAlphaMaskTexture(androidx.xr.scenecore.internal.TextureResource? alphaMask);
    method public void setShape(androidx.xr.scenecore.internal.SurfaceEntity.Shape);
    method public void setStereoMode(int);
    method public void setSurface(android.view.Surface surface);
    property public androidx.xr.scenecore.internal.TextureResource? auxiliaryAlphaMask;
    property public int colorRange;
    property public int colorSpace;
    property public int colorTransfer;
    property public boolean contentColorMetadataSet;
    property public androidx.xr.scenecore.internal.Dimensions dimensions;
    property public androidx.xr.scenecore.internal.SurfaceEntity.EdgeFeather edgeFeather;
    property public boolean mContentColorMetadataSet;
    property public int maxContentLightLevel;
    property public androidx.xr.scenecore.internal.PerceivedResolutionResult perceivedResolutionResult;
    property public androidx.xr.scenecore.internal.TextureResource? primaryAlphaMask;
    property public androidx.xr.scenecore.internal.SurfaceEntity.Shape shape;
    property public int stereoMode;
    property public android.view.Surface surface;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FakeSurfaceFeature extends androidx.xr.scenecore.testing.FakeBaseRenderingFeature implements androidx.xr.scenecore.internal.SurfaceFeature {
    ctor public FakeSurfaceFeature(androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> nodeHolder);
    method public int getColorRange();
    method public int getColorSpace();
    method public int getColorTransfer();
    method public boolean getContentColorMetadataSet();
    method public androidx.xr.scenecore.internal.Dimensions getDimensions();
    method public androidx.xr.scenecore.internal.SurfaceEntity.EdgeFeather getEdgeFeather();
    method public int getMaxContentLightLevel();
    method public androidx.xr.scenecore.internal.TextureResource? getPrimaryAlphaMask();
    method public androidx.xr.scenecore.internal.SurfaceEntity.Shape getShape();
    method public int getStereoMode();
    method public android.view.Surface getSurface();
    method public void resetContentColorMetadata();
    method public void setAuxiliaryAlphaMaskTexture(androidx.xr.scenecore.internal.TextureResource? alphaMask);
    method public void setContentColorMetadata(int colorSpace, int colorTransfer, int colorRange, int maxCLL);
    method public void setEdgeFeather(androidx.xr.scenecore.internal.SurfaceEntity.EdgeFeather);
    method public void setPrimaryAlphaMaskTexture(androidx.xr.scenecore.internal.TextureResource? alphaMask);
    method public void setShape(androidx.xr.scenecore.internal.SurfaceEntity.Shape);
    method public void setStereoMode(int);
    method public void setSurface(android.view.Surface surface);
    property public int colorRange;
    property public int colorSpace;
    property public int colorTransfer;
    property public boolean contentColorMetadataSet;
    property public androidx.xr.scenecore.internal.Dimensions dimensions;
    property public androidx.xr.scenecore.internal.SurfaceEntity.EdgeFeather edgeFeather;
    property public int maxContentLightLevel;
    property public androidx.xr.scenecore.internal.TextureResource? primaryAlphaMask;
    property public androidx.xr.scenecore.internal.SurfaceEntity.Shape shape;
    property public int stereoMode;
    property public android.view.Surface surface;
    field public static final androidx.xr.scenecore.testing.FakeSurfaceFeature.Companion Companion;
  }

  public static final class FakeSurfaceFeature.Companion {
    method public androidx.xr.scenecore.internal.SurfaceFeature createWithMockFeature(androidx.xr.scenecore.internal.SurfaceFeature feature, androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> nodeHolder);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class FakeSystemSpaceEntity extends androidx.xr.scenecore.testing.FakeEntity implements androidx.xr.scenecore.internal.SystemSpaceEntity {
    ctor public FakeSystemSpaceEntity();
    method public final void onSpaceUpdated();
    method public void setOnSpaceUpdatedListener(Runnable? listener, java.util.concurrent.Executor? executor);
  }

}

