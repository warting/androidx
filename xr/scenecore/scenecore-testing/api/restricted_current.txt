// Signature format: 4.0
package androidx.xr.scenecore.testing {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class FakeImpressApi implements com.google.ar.imp.apibindings.ImpressApi {
    ctor public FakeImpressApi();
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Void!> animateGltfModel(int, String?, boolean);
    method public com.google.ar.imp.apibindings.Texture borrowReflectionTexture();
    method public void clearPreferredEnvironmentIblAsset();
    method public int createImpressNode();
    method public int createStereoSurface(@com.google.ar.imp.apibindings.ImpressApi.StereoMode int);
    method public int createStereoSurface(@com.google.ar.imp.apibindings.ImpressApi.StereoMode int, @com.google.ar.imp.apibindings.ImpressApi.ContentSecurityLevel int);
    method public com.google.common.util.concurrent.ListenableFuture<com.google.ar.imp.apibindings.WaterMaterial!> createWaterMaterial(boolean);
    method public void destroyImpressNode(int);
    method public void destroyNativeObject(long);
    method public void disposeAllResources();
    method public long getCurrentEnvironmentLight();
    method public java.util.Map<java.lang.Long!,java.util.List<java.lang.Integer!>!> getGltfModels();
    method public java.util.List<java.lang.Long!> getImageBasedLightingAssets();
    method public int getImpressNodeParent(int);
    method public java.util.Map<androidx.xr.scenecore.testing.FakeImpressApi.GltfNodeData!,androidx.xr.scenecore.testing.FakeImpressApi.GltfNodeData!> getImpressNodes();
    method public java.util.List<java.lang.Integer!> getImpressNodesForToken(long);
    method public java.util.Map<java.lang.Long!,androidx.xr.scenecore.testing.FakeImpressApi.MaterialData!> getMaterials();
    method public com.google.ar.imp.apibindings.Texture getReflectionTextureFromIbl(long);
    method public java.util.Map<java.lang.Integer!,androidx.xr.scenecore.testing.FakeImpressApi.StereoSurfaceEntityData!> getStereoSurfaceEntities();
    method public android.view.Surface getSurfaceFromStereoSurface(int);
    method public java.util.Map<java.lang.Long!,com.google.ar.imp.apibindings.Texture!> getTextureImages();
    method public int impressNodeAnimatingSize();
    method public boolean impressNodeHasParent(int);
    method public int impressNodeLoopAnimatingSize();
    method public int instanceGltfModel(long);
    method public int instanceGltfModel(long, boolean);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long!> loadGltfAsset(byte[], String);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long!> loadGltfAsset(String);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long!> loadImageBasedLightingAsset(byte[], String);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long!> loadImageBasedLightingAsset(String);
    method public com.google.common.util.concurrent.ListenableFuture<com.google.ar.imp.apibindings.Texture!> loadTexture(String, com.google.ar.imp.apibindings.TextureSampler);
    method public void onPause();
    method public void onResume();
    method public void releaseGltfAsset(long);
    method public void releaseImageBasedLightingAsset(long);
    method public void setAlphaMapOnWaterMaterial(long, long);
    method public void setAlphaStepMultiplierOnWaterMaterial(long, float);
    method public void setAlphaStepUOnWaterMaterial(long, float, float, float, float);
    method public void setAlphaStepVOnWaterMaterial(long, float, float, float, float);
    method public void setAuxiliaryAlphaMaskForStereoSurface(int, long);
    method public void setFeatherRadiusForStereoSurface(int, float, float);
    method public void setGltfModelColliderEnabled(int, boolean);
    method public void setImpressNodeParent(int, int);
    method public void setMaterialOverride(int, long, String);
    method public void setNormalBoundaryOnWaterMaterial(long, float);
    method public void setNormalMapOnWaterMaterial(long, long);
    method public void setNormalSpeedOnWaterMaterial(long, float);
    method public void setNormalTilingOnWaterMaterial(long, float);
    method public void setNormalZOnWaterMaterial(long, float);
    method public void setPreferredEnvironmentLight(long);
    method public void setPrimaryAlphaMaskForStereoSurface(int, long);
    method public void setReflectionMapOnWaterMaterial(long, long);
    method public void setStereoModeForStereoSurface(int, @com.google.ar.imp.apibindings.ImpressApi.StereoMode int);
    method public void setStereoSurfaceEntityCanvasShapeHemisphere(int, float);
    method public void setStereoSurfaceEntityCanvasShapeQuad(int, float, float);
    method public void setStereoSurfaceEntityCanvasShapeSphere(int, float);
    method public void setup(com.google.ar.imp.view.View);
    method public void stopGltfModelAnimation(int);
  }

  public static class FakeImpressApi.GltfNodeData {
    ctor public FakeImpressApi.GltfNodeData();
    method public int getEntityId();
    method public androidx.xr.scenecore.testing.FakeImpressApi.MaterialData? getMaterialOverride();
    method public void setEntityId(int);
    method public void setMaterialOverride(androidx.xr.scenecore.testing.FakeImpressApi.MaterialData?);
  }

  public static class FakeImpressApi.MaterialData {
    ctor public FakeImpressApi.MaterialData(androidx.xr.scenecore.testing.FakeImpressApi.MaterialData.Type, long);
    method public long getMaterialHandle();
    method public androidx.xr.scenecore.testing.FakeImpressApi.MaterialData.Type getType();
  }

  public enum FakeImpressApi.MaterialData.Type {
    enum_constant public static final androidx.xr.scenecore.testing.FakeImpressApi.MaterialData.Type GENERIC;
    enum_constant public static final androidx.xr.scenecore.testing.FakeImpressApi.MaterialData.Type WATER;
    enum_constant public static final androidx.xr.scenecore.testing.FakeImpressApi.MaterialData.Type WATER_ALPHA;
  }

  public static class FakeImpressApi.StereoSurfaceEntityData {
    ctor public FakeImpressApi.StereoSurfaceEntityData();
    method public androidx.xr.scenecore.testing.FakeImpressApi.StereoSurfaceEntityData.CanvasShape? getCanvasShape();
    method public float getFeatherRadiusX();
    method public float getFeatherRadiusY();
    method public float getHeight();
    method public float getRadius();
    method @com.google.ar.imp.apibindings.ImpressApi.StereoMode public int getStereoMode();
    method public android.view.Surface? getSurface();
    method public float getWidth();
  }

  public enum FakeImpressApi.StereoSurfaceEntityData.CanvasShape {
    enum_constant public static final androidx.xr.scenecore.testing.FakeImpressApi.StereoSurfaceEntityData.CanvasShape QUAD;
    enum_constant public static final androidx.xr.scenecore.testing.FakeImpressApi.StereoSurfaceEntityData.CanvasShape VR_180_HEMISPHERE;
    enum_constant public static final androidx.xr.scenecore.testing.FakeImpressApi.StereoSurfaceEntityData.CanvasShape VR_360_SPHERE;
  }

  public static class FakeImpressApi.TestSurface extends android.view.Surface {
    ctor public FakeImpressApi.TestSurface(int);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class FakeScheduledExecutorService extends java.util.concurrent.AbstractExecutorService implements java.lang.AutoCloseable java.util.concurrent.ScheduledExecutorService {
    ctor public FakeScheduledExecutorService();
    method public boolean awaitTermination(long, java.util.concurrent.TimeUnit?);
    method public void close();
    method public void execute(Runnable?);
    method public boolean hasNext();
    method @com.google.errorprone.annotations.CheckReturnValue public boolean isEmpty();
    method public boolean isShutdown();
    method public boolean isTerminated();
    method public void runAll();
    method public void runNext();
    method public java.util.concurrent.ScheduledFuture<? extends java.lang.Object!> schedule(Runnable?, long, java.util.concurrent.TimeUnit?);
    method public <V> java.util.concurrent.ScheduledFuture<V!> schedule(java.util.concurrent.Callable<V!>?, long, java.util.concurrent.TimeUnit?);
    method public java.util.concurrent.ScheduledFuture<? extends java.lang.Object!> scheduleAtFixedRate(Runnable?, long, long, java.util.concurrent.TimeUnit?);
    method public java.util.concurrent.ScheduledFuture<? extends java.lang.Object!> scheduleWithFixedDelay(Runnable?, long, long, java.util.concurrent.TimeUnit?);
    method public void shutdown();
    method public java.util.List<java.lang.Runnable!> shutdownNow();
    method public void simulateSleepExecutingAllTasks(java.time.Duration);
    method public boolean simulateSleepExecutingAtMostOneTask();
    method public boolean simulateSleepExecutingAtMostOneTask(java.time.Duration);
  }

}

