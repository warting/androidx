// Signature format: 4.0
package androidx.xr.scenecore {

  public final class ActivityPanelEntity extends androidx.xr.scenecore.PanelEntity {
    method public static androidx.xr.scenecore.ActivityPanelEntity create(androidx.xr.runtime.Session session, androidx.xr.runtime.math.IntSize2d pixelDimensions, String name);
    method public static androidx.xr.scenecore.ActivityPanelEntity create(androidx.xr.runtime.Session session, androidx.xr.runtime.math.IntSize2d pixelDimensions, String name, optional androidx.xr.runtime.math.Pose pose);
    method public void moveActivity(android.app.Activity activity);
    method public void startActivity(android.content.Intent intent);
    field public static final androidx.xr.scenecore.ActivityPanelEntity.Companion Companion;
  }

  public static final class ActivityPanelEntity.Companion {
    method public androidx.xr.scenecore.ActivityPanelEntity create(androidx.xr.runtime.Session session, androidx.xr.runtime.math.IntSize2d pixelDimensions, String name);
    method public androidx.xr.scenecore.ActivityPanelEntity create(androidx.xr.runtime.Session session, androidx.xr.runtime.math.IntSize2d pixelDimensions, String name, optional androidx.xr.runtime.math.Pose pose);
  }

  public final class ActivitySpace extends androidx.xr.scenecore.BaseEntity<androidx.xr.scenecore.internal.ActivitySpace> {
    method public void addOnBoundsChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.runtime.math.FloatSize3d> listener);
    method public void addOnBoundsChangedListener(java.util.function.Consumer<androidx.xr.runtime.math.FloatSize3d> listener);
    method public void addOnSpaceUpdatedListener(Runnable listener);
    method public void addOnSpaceUpdatedListener(java.util.concurrent.Executor executor, Runnable listener);
    method public androidx.xr.runtime.math.FloatSize3d getBounds();
    method public androidx.xr.runtime.math.BoundingBox getRecommendedContentBoxInFullSpace();
    method public void removeOnBoundsChangedListener(java.util.function.Consumer<androidx.xr.runtime.math.FloatSize3d> listener);
    method public void removeOnSpaceUpdatedListener(Runnable listener);
    property public androidx.xr.runtime.math.FloatSize3d bounds;
    property public androidx.xr.runtime.math.BoundingBox recommendedContentBoxInFullSpace;
  }

  public final class AnchorEntity extends androidx.xr.scenecore.BaseEntity<androidx.xr.scenecore.internal.AnchorEntity> {
    method public static androidx.xr.scenecore.AnchorEntity create(androidx.xr.runtime.Session session, androidx.xr.arcore.Anchor anchor);
    method public static androidx.xr.scenecore.AnchorEntity create(androidx.xr.runtime.Session session, androidx.xr.runtime.math.FloatSize2d minimumPlaneExtents, int planeOrientation, int planeSemanticType);
    method public static androidx.xr.scenecore.AnchorEntity create(androidx.xr.runtime.Session session, androidx.xr.runtime.math.FloatSize2d minimumPlaneExtents, int planeOrientation, int planeSemanticType, optional java.time.Duration timeout);
    method public androidx.xr.arcore.Anchor getAnchor(androidx.xr.runtime.Session session);
    method public int getState();
    method public void setOnSpaceUpdatedListener(Runnable? listener);
    method public void setOnSpaceUpdatedListener(java.util.concurrent.Executor executor, Runnable? listener);
    method public void setOnStateChangedListener(java.util.concurrent.Executor executor, java.util.function.Consumer<java.lang.Integer>? listener);
    method public void setOnStateChangedListener(java.util.function.Consumer<java.lang.Integer>? listener);
    property public int state;
    field public static final androidx.xr.scenecore.AnchorEntity.Companion Companion;
  }

  public static final class AnchorEntity.Companion {
    method public androidx.xr.scenecore.AnchorEntity create(androidx.xr.runtime.Session session, androidx.xr.arcore.Anchor anchor);
    method public androidx.xr.scenecore.AnchorEntity create(androidx.xr.runtime.Session session, androidx.xr.runtime.math.FloatSize2d minimumPlaneExtents, int planeOrientation, int planeSemanticType);
    method public androidx.xr.scenecore.AnchorEntity create(androidx.xr.runtime.Session session, androidx.xr.runtime.math.FloatSize2d minimumPlaneExtents, int planeOrientation, int planeSemanticType, optional java.time.Duration timeout);
  }

  public static final class AnchorEntity.State {
    property public static int ANCHORED;
    property public static int ERROR;
    property public static int TIMEDOUT;
    property public static int UNANCHORED;
    field public static final int ANCHORED = 0; // 0x0
    field public static final int ERROR = 3; // 0x3
    field public static final androidx.xr.scenecore.AnchorEntity.State INSTANCE;
    field public static final int TIMEDOUT = 2; // 0x2
    field public static final int UNANCHORED = 1; // 0x1
  }

  public final class AnchorPlacement {
    method public static androidx.xr.scenecore.AnchorPlacement createForPlanes();
    method public static androidx.xr.scenecore.AnchorPlacement createForPlanes(optional java.util.Set<java.lang.Integer> anchorablePlaneOrientations);
    method public static androidx.xr.scenecore.AnchorPlacement createForPlanes(optional java.util.Set<java.lang.Integer> anchorablePlaneOrientations, optional java.util.Set<java.lang.Integer> anchorablePlaneSemanticTypes);
    method public java.util.Set<java.lang.Integer> getAnchorablePlaneOrientations();
    method public java.util.Set<java.lang.Integer> getAnchorablePlaneSemanticTypes();
    property public java.util.Set<java.lang.Integer> anchorablePlaneOrientations;
    property public java.util.Set<java.lang.Integer> anchorablePlaneSemanticTypes;
    field public static final androidx.xr.scenecore.AnchorPlacement.Companion Companion;
  }

  public static final class AnchorPlacement.Companion {
    method public androidx.xr.scenecore.AnchorPlacement createForPlanes();
    method public androidx.xr.scenecore.AnchorPlacement createForPlanes(optional java.util.Set<java.lang.Integer> anchorablePlaneOrientations);
    method public androidx.xr.scenecore.AnchorPlacement createForPlanes(optional java.util.Set<java.lang.Integer> anchorablePlaneOrientations, optional java.util.Set<java.lang.Integer> anchorablePlaneSemanticTypes);
  }

  public abstract class BaseEntity<RtEntityType extends androidx.xr.scenecore.internal.Entity> extends androidx.xr.scenecore.BaseScenePose<androidx.xr.scenecore.internal.ActivityPose> implements androidx.xr.scenecore.Entity {
    method public void addChild(androidx.xr.scenecore.Entity child);
    method public boolean addComponent(androidx.xr.scenecore.Component component);
    method public void dispose();
    method public float getAlpha(@androidx.xr.scenecore.SpaceValue int relativeTo);
    method public java.util.List<androidx.xr.scenecore.Component> getComponents();
    method public <T extends androidx.xr.scenecore.Component> java.util.List<T> getComponentsOfType(Class<? extends T> type);
    method public CharSequence getContentDescription();
    method public androidx.xr.scenecore.Entity? getParent();
    method public androidx.xr.runtime.math.Pose getPose(@androidx.xr.scenecore.SpaceValue int relativeTo);
    method public float getScale(@androidx.xr.scenecore.SpaceValue int relativeTo);
    method public boolean isEnabled(boolean includeParents);
    method public void removeAllComponents();
    method public void removeComponent(androidx.xr.scenecore.Component component);
    method public void setAlpha(float alpha, @androidx.xr.scenecore.SpaceValue int relativeTo);
    method public void setContentDescription(CharSequence);
    method public void setEnabled(boolean enabled);
    method public void setParent(androidx.xr.scenecore.Entity?);
    method public void setPose(androidx.xr.runtime.math.Pose pose, @androidx.xr.scenecore.SpaceValue int relativeTo);
    method public void setScale(float scale, int relativeTo);
    property public CharSequence contentDescription;
    property public androidx.xr.scenecore.Entity? parent;
  }

  public abstract class BaseScenePose<RtActivityPoseType extends androidx.xr.scenecore.internal.ActivityPose> implements androidx.xr.scenecore.ScenePose {
    ctor protected BaseScenePose(RtActivityPoseType rtActivityPose);
    method public androidx.xr.runtime.math.Pose getActivitySpacePose();
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int hitTestFilter, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public androidx.xr.runtime.math.Pose transformPoseTo(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.ScenePose destination);
    property public androidx.xr.runtime.math.Pose activitySpacePose;
  }

  public final class CameraView extends androidx.xr.scenecore.BaseScenePose<androidx.xr.scenecore.internal.CameraViewActivityPose> {
    method public androidx.xr.scenecore.CameraView.CameraType getCameraType();
    method public androidx.xr.runtime.FieldOfView getFov();
    property public androidx.xr.scenecore.CameraView.CameraType cameraType;
    property public androidx.xr.runtime.FieldOfView fov;
  }

  public enum CameraView.CameraType {
    enum_constant public static final androidx.xr.scenecore.CameraView.CameraType LEFT_EYE;
    enum_constant public static final androidx.xr.scenecore.CameraView.CameraType RIGHT_EYE;
    enum_constant public static final androidx.xr.scenecore.CameraView.CameraType UNKNOWN;
  }

  public interface Component {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public boolean onAttach(androidx.xr.scenecore.Entity entity);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void onDetach(androidx.xr.scenecore.Entity entity);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class CubeMapTexture extends androidx.xr.scenecore.Texture {
    method @MainThread public static androidx.xr.scenecore.CubeMapTexture borrowReflectionTexture(androidx.xr.runtime.Session session);
    field public static final androidx.xr.scenecore.CubeMapTexture.Companion Companion;
  }

  public static final class CubeMapTexture.Companion {
    method @MainThread public androidx.xr.scenecore.CubeMapTexture borrowReflectionTexture(androidx.xr.runtime.Session session);
  }

  public interface Entity extends androidx.xr.scenecore.ScenePose {
    method public void addChild(androidx.xr.scenecore.Entity child);
    method public boolean addComponent(androidx.xr.scenecore.Component component);
    method public void dispose();
    method @FloatRange(from=0.0, to=1.0) public default float getAlpha();
    method @FloatRange(from=0.0, to=1.0) public float getAlpha(optional @androidx.xr.scenecore.SpaceValue int relativeTo);
    method public java.util.List<androidx.xr.scenecore.Component> getComponents();
    method public <T extends androidx.xr.scenecore.Component> java.util.List<T> getComponentsOfType(Class<? extends T> type);
    method public CharSequence getContentDescription();
    method public androidx.xr.scenecore.Entity? getParent();
    method public default androidx.xr.runtime.math.Pose getPose();
    method public androidx.xr.runtime.math.Pose getPose(optional @androidx.xr.scenecore.SpaceValue int relativeTo);
    method @FloatRange(from=0.0) public default float getScale();
    method @FloatRange(from=0.0) public float getScale(optional @androidx.xr.scenecore.SpaceValue int relativeTo);
    method public boolean isEnabled(optional boolean includeParents);
    method public void removeAllComponents();
    method public void removeComponent(androidx.xr.scenecore.Component component);
    method public default void setAlpha(@FloatRange(from=0.0, to=1.0) float alpha);
    method public void setAlpha(@FloatRange(from=0.0, to=1.0) float alpha, optional @androidx.xr.scenecore.SpaceValue int relativeTo);
    method public void setContentDescription(CharSequence);
    method public void setEnabled(boolean enabled);
    method public void setParent(androidx.xr.scenecore.Entity?);
    method public default void setPose(androidx.xr.runtime.math.Pose pose);
    method public void setPose(androidx.xr.runtime.math.Pose pose, optional @androidx.xr.scenecore.SpaceValue int relativeTo);
    method public default void setScale(@FloatRange(from=0.0) float scale);
    method public void setScale(@FloatRange(from=0.0) float scale, optional @androidx.xr.scenecore.SpaceValue int relativeTo);
    property public abstract CharSequence contentDescription;
    property public abstract androidx.xr.scenecore.Entity? parent;
  }

  public interface EntityMoveListener {
    method public default void onMoveEnd(androidx.xr.scenecore.Entity entity, androidx.xr.runtime.math.Ray finalInputRay, androidx.xr.runtime.math.Pose finalPose, float finalScale, androidx.xr.scenecore.Entity? updatedParent);
    method public default void onMoveStart(androidx.xr.scenecore.Entity entity, androidx.xr.runtime.math.Ray initialInputRay, androidx.xr.runtime.math.Pose initialPose, float initialScale, androidx.xr.scenecore.Entity initialParent);
    method public default void onMoveUpdate(androidx.xr.scenecore.Entity entity, androidx.xr.runtime.math.Ray currentInputRay, androidx.xr.runtime.math.Pose currentPose, float currentScale);
  }

  public final class ExrImage {
    method @MainThread public static suspend Object? createFromZip(androidx.xr.runtime.Session session, android.net.Uri uri, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.ExrImage>);
    method @MainThread @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static suspend Object? createFromZip(androidx.xr.runtime.Session session, byte[] assetData, String assetKey, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.ExrImage>);
    method @MainThread public static suspend Object? createFromZip(androidx.xr.runtime.Session session, java.nio.file.Path path, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.ExrImage>);
    method @MainThread @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.scenecore.CubeMapTexture getReflectionTexture();
    field public static final androidx.xr.scenecore.ExrImage.Companion Companion;
  }

  public static final class ExrImage.Companion {
    method @MainThread public suspend Object? createFromZip(androidx.xr.runtime.Session session, android.net.Uri uri, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.ExrImage>);
    method @MainThread @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public suspend Object? createFromZip(androidx.xr.runtime.Session session, byte[] assetData, String assetKey, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.ExrImage>);
    method @MainThread public suspend Object? createFromZip(androidx.xr.runtime.Session session, java.nio.file.Path path, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.ExrImage>);
  }

  public final class GltfModel {
    method @MainThread public static suspend Object? create(androidx.xr.runtime.Session session, android.net.Uri uri, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.GltfModel>);
    method @MainThread @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static suspend Object? create(androidx.xr.runtime.Session session, byte[] assetData, String assetKey, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.GltfModel>);
    method @MainThread public static suspend Object? create(androidx.xr.runtime.Session session, java.nio.file.Path path, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.GltfModel>);
    field public static final androidx.xr.scenecore.GltfModel.Companion Companion;
  }

  public static final class GltfModel.Companion {
    method @MainThread public suspend Object? create(androidx.xr.runtime.Session session, android.net.Uri uri, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.GltfModel>);
    method @MainThread @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public suspend Object? create(androidx.xr.runtime.Session session, byte[] assetData, String assetKey, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.GltfModel>);
    method @MainThread public suspend Object? create(androidx.xr.runtime.Session session, java.nio.file.Path path, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.GltfModel>);
  }

  public final class GltfModelEntity extends androidx.xr.scenecore.BaseEntity<androidx.xr.scenecore.internal.GltfEntity> {
    method @MainThread public static androidx.xr.scenecore.GltfModelEntity create(androidx.xr.runtime.Session session, androidx.xr.scenecore.GltfModel model);
    method @MainThread public static androidx.xr.scenecore.GltfModelEntity create(androidx.xr.runtime.Session session, androidx.xr.scenecore.GltfModel model, optional androidx.xr.runtime.math.Pose pose);
    method public int getAnimationState();
    method @MainThread @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void setMaterialOverride(androidx.xr.scenecore.Material material, String meshName);
    method @MainThread public void startAnimation();
    method @MainThread public void startAnimation(optional boolean loop);
    method @MainThread public void startAnimation(boolean loop, String animationName);
    method @MainThread public void stopAnimation();
    property public int animationState;
    field public static final androidx.xr.scenecore.GltfModelEntity.Companion Companion;
  }

  public static final class GltfModelEntity.AnimationState {
    property public static int PLAYING;
    property public static int STOPPED;
    field public static final androidx.xr.scenecore.GltfModelEntity.AnimationState INSTANCE;
    field public static final int PLAYING = 0; // 0x0
    field public static final int STOPPED = 1; // 0x1
  }

  public static final class GltfModelEntity.Companion {
    method @MainThread public androidx.xr.scenecore.GltfModelEntity create(androidx.xr.runtime.Session session, androidx.xr.scenecore.GltfModel model);
    method @MainThread public androidx.xr.scenecore.GltfModelEntity create(androidx.xr.runtime.Session session, androidx.xr.scenecore.GltfModel model, optional androidx.xr.runtime.math.Pose pose);
  }

  public final class GroupEntity extends androidx.xr.scenecore.BaseEntity<androidx.xr.scenecore.internal.Entity> {
    method public static androidx.xr.scenecore.GroupEntity create(androidx.xr.runtime.Session session, String name);
    method public static androidx.xr.scenecore.GroupEntity create(androidx.xr.runtime.Session session, String name, optional androidx.xr.runtime.math.Pose pose);
    field public static final androidx.xr.scenecore.GroupEntity.Companion Companion;
  }

  public static final class GroupEntity.Companion {
    method public androidx.xr.scenecore.GroupEntity create(androidx.xr.runtime.Session session, String name);
    method public androidx.xr.scenecore.GroupEntity create(androidx.xr.runtime.Session session, String name, optional androidx.xr.runtime.math.Pose pose);
  }

  public final class Head extends androidx.xr.scenecore.BaseScenePose<androidx.xr.scenecore.internal.HeadActivityPose> {
  }

  public final class HitTestResult {
    ctor public HitTestResult(androidx.xr.runtime.math.Vector3? hitPosition, androidx.xr.runtime.math.Vector3? surfaceNormal, int surfaceType, float distance);
    method public float getDistance();
    method public androidx.xr.runtime.math.Vector3? getHitPosition();
    method public androidx.xr.runtime.math.Vector3? getSurfaceNormal();
    method public int getSurfaceType();
    property public float distance;
    property public androidx.xr.runtime.math.Vector3? hitPosition;
    property public androidx.xr.runtime.math.Vector3? surfaceNormal;
    property public int surfaceType;
  }

  public static final class HitTestResult.SurfaceType {
    property public static int OBJECT;
    property public static int PLANE;
    property public static int UNKNOWN;
    field public static final androidx.xr.scenecore.HitTestResult.SurfaceType INSTANCE;
    field public static final int OBJECT = 2; // 0x2
    field public static final int PLANE = 1; // 0x1
    field public static final int UNKNOWN = 0; // 0x0
  }

  public final class InputEvent {
    ctor public InputEvent(int source, int pointerType, long timestamp, androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int action, optional java.util.List<androidx.xr.scenecore.InputEvent.HitInfo> hitInfoList);
    method public int getAction();
    method public androidx.xr.runtime.math.Vector3 getDirection();
    method public java.util.List<androidx.xr.scenecore.InputEvent.HitInfo> getHitInfoList();
    method public androidx.xr.runtime.math.Vector3 getOrigin();
    method public int getPointerType();
    method public int getSource();
    method public long getTimestamp();
    property public int action;
    property public androidx.xr.runtime.math.Vector3 direction;
    property public java.util.List<androidx.xr.scenecore.InputEvent.HitInfo> hitInfoList;
    property public androidx.xr.runtime.math.Vector3 origin;
    property public int pointerType;
    property public int source;
    property public long timestamp;
  }

  public static final class InputEvent.Action {
    property public static int ACTION_CANCEL;
    property public static int ACTION_DOWN;
    property public static int ACTION_HOVER_ENTER;
    property public static int ACTION_HOVER_EXIT;
    property public static int ACTION_HOVER_MOVE;
    property public static int ACTION_MOVE;
    property public static int ACTION_UP;
    field public static final int ACTION_CANCEL = 3; // 0x3
    field public static final int ACTION_DOWN = 0; // 0x0
    field public static final int ACTION_HOVER_ENTER = 5; // 0x5
    field public static final int ACTION_HOVER_EXIT = 6; // 0x6
    field public static final int ACTION_HOVER_MOVE = 4; // 0x4
    field public static final int ACTION_MOVE = 2; // 0x2
    field public static final int ACTION_UP = 1; // 0x1
    field public static final androidx.xr.scenecore.InputEvent.Action INSTANCE;
  }

  public static final class InputEvent.HitInfo {
    ctor public InputEvent.HitInfo(androidx.xr.scenecore.Entity inputEntity, androidx.xr.runtime.math.Vector3? hitPosition, androidx.xr.runtime.math.Matrix4 transform);
    method public androidx.xr.runtime.math.Vector3? getHitPosition();
    method public androidx.xr.scenecore.Entity getInputEntity();
    method public androidx.xr.runtime.math.Matrix4 getTransform();
    property public androidx.xr.runtime.math.Vector3? hitPosition;
    property public androidx.xr.scenecore.Entity inputEntity;
    property public androidx.xr.runtime.math.Matrix4 transform;
  }

  public static final class InputEvent.Pointer {
    property public static int POINTER_TYPE_DEFAULT;
    property public static int POINTER_TYPE_LEFT;
    property public static int POINTER_TYPE_RIGHT;
    field public static final androidx.xr.scenecore.InputEvent.Pointer INSTANCE;
    field public static final int POINTER_TYPE_DEFAULT = 0; // 0x0
    field public static final int POINTER_TYPE_LEFT = 1; // 0x1
    field public static final int POINTER_TYPE_RIGHT = 2; // 0x2
  }

  public static final class InputEvent.Source {
    property public static int SOURCE_CONTROLLER;
    property public static int SOURCE_GAZE_AND_GESTURE;
    property public static int SOURCE_HANDS;
    property public static int SOURCE_HEAD;
    property public static int SOURCE_MOUSE;
    property public static int SOURCE_UNKNOWN;
    field public static final androidx.xr.scenecore.InputEvent.Source INSTANCE;
    field public static final int SOURCE_CONTROLLER = 2; // 0x2
    field public static final int SOURCE_GAZE_AND_GESTURE = 5; // 0x5
    field public static final int SOURCE_HANDS = 3; // 0x3
    field public static final int SOURCE_HEAD = 1; // 0x1
    field public static final int SOURCE_MOUSE = 4; // 0x4
    field public static final int SOURCE_UNKNOWN = 0; // 0x0
  }

  public final class InteractableComponent implements androidx.xr.scenecore.Component {
    method public static androidx.xr.scenecore.InteractableComponent create(androidx.xr.runtime.Session session, java.util.concurrent.Executor executor, java.util.function.Consumer<androidx.xr.scenecore.InputEvent> inputEventListener);
    method public static androidx.xr.scenecore.InteractableComponent create(androidx.xr.runtime.Session session, java.util.function.Consumer<androidx.xr.scenecore.InputEvent> inputEventListener);
    method public boolean onAttach(androidx.xr.scenecore.Entity entity);
    method public void onDetach(androidx.xr.scenecore.Entity entity);
    field public static final androidx.xr.scenecore.InteractableComponent.Companion Companion;
  }

  public static final class InteractableComponent.Companion {
    method public androidx.xr.scenecore.InteractableComponent create(androidx.xr.runtime.Session session, java.util.concurrent.Executor executor, java.util.function.Consumer<androidx.xr.scenecore.InputEvent> inputEventListener);
    method public androidx.xr.scenecore.InteractableComponent create(androidx.xr.runtime.Session session, java.util.function.Consumer<androidx.xr.scenecore.InputEvent> inputEventListener);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class KhronosPbrMaterial extends androidx.xr.scenecore.Material {
    method @MainThread public static suspend Object? create(androidx.xr.runtime.Session session, androidx.xr.scenecore.KhronosPbrMaterialSpec spec, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.KhronosPbrMaterial>);
    method @MainThread public void dispose();
    method @MainThread public void setAlphaCutoff(float alphaCutoff);
    method @MainThread public void setAmbientOcclusionFactor(float factor);
    method @MainThread public void setAmbientOcclusionTexture(androidx.xr.scenecore.Texture texture, androidx.xr.scenecore.TextureSampler sampler);
    method @MainThread public void setAmbientOcclusionUvTransform(androidx.xr.runtime.math.Matrix3 transform);
    method @MainThread public void setBaseColorFactors(androidx.xr.runtime.math.Vector4 factors);
    method @MainThread public void setBaseColorTexture(androidx.xr.scenecore.Texture texture, androidx.xr.scenecore.TextureSampler sampler);
    method @MainThread public void setBaseColorUvTransform(androidx.xr.runtime.math.Matrix3 transform);
    method @MainThread public void setClearcoatFactors(float intensity, float roughness, float normal);
    method @MainThread public void setClearcoatNormalTexture(androidx.xr.scenecore.Texture texture, androidx.xr.scenecore.TextureSampler sampler);
    method @MainThread public void setClearcoatRoughnessTexture(androidx.xr.scenecore.Texture texture, androidx.xr.scenecore.TextureSampler sampler);
    method @MainThread public void setClearcoatTexture(androidx.xr.scenecore.Texture texture, androidx.xr.scenecore.TextureSampler sampler);
    method @MainThread public void setEmissiveFactors(androidx.xr.runtime.math.Vector3 factors);
    method @MainThread public void setEmissiveTexture(androidx.xr.scenecore.Texture texture, androidx.xr.scenecore.TextureSampler sampler);
    method @MainThread public void setEmissiveUvTransform(androidx.xr.runtime.math.Matrix3 transform);
    method @MainThread public void setIndexOfRefraction(float indexOfRefraction);
    method @MainThread public void setMetallicFactor(float factor);
    method @MainThread public void setMetallicRoughnessTexture(androidx.xr.scenecore.Texture texture, androidx.xr.scenecore.TextureSampler sampler);
    method @MainThread public void setMetallicRoughnessUvTransform(androidx.xr.runtime.math.Matrix3 transform);
    method @MainThread public void setNormalFactor(float factor);
    method @MainThread public void setNormalTexture(androidx.xr.scenecore.Texture texture, androidx.xr.scenecore.TextureSampler sampler);
    method @MainThread public void setNormalUvTransform(androidx.xr.runtime.math.Matrix3 transform);
    method @MainThread public void setRoughnessFactor(float factor);
    method @MainThread public void setSheenColorFactors(androidx.xr.runtime.math.Vector3 factors);
    method @MainThread public void setSheenColorTexture(androidx.xr.scenecore.Texture texture, androidx.xr.scenecore.TextureSampler sampler);
    method @MainThread public void setSheenRoughnessFactor(float factor);
    method @MainThread public void setSheenRoughnessTexture(androidx.xr.scenecore.Texture texture, androidx.xr.scenecore.TextureSampler sampler);
    method @MainThread public void setTransmissionFactor(float factor);
    method @MainThread public void setTransmissionTexture(androidx.xr.scenecore.Texture texture, androidx.xr.scenecore.TextureSampler sampler);
    method @MainThread public void setTransmissionUvTransform(androidx.xr.runtime.math.Matrix3 transform);
    field public static final androidx.xr.scenecore.KhronosPbrMaterial.Companion Companion;
  }

  public static final class KhronosPbrMaterial.Companion {
    method @MainThread public suspend Object? create(androidx.xr.runtime.Session session, androidx.xr.scenecore.KhronosPbrMaterialSpec spec, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.KhronosPbrMaterial>);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class KhronosPbrMaterialSpec {
    method public static androidx.xr.scenecore.KhronosPbrMaterialSpec create();
    method public static androidx.xr.scenecore.KhronosPbrMaterialSpec create(optional int lightingModel);
    method public static androidx.xr.scenecore.KhronosPbrMaterialSpec create(optional int lightingModel, optional int blendMode);
    method public static androidx.xr.scenecore.KhronosPbrMaterialSpec create(optional int lightingModel, optional int blendMode, optional int doubleSidedMode);
    method public int getBlendMode();
    method public int getDoubleSidedMode();
    method public int getLightingModel();
    property public int blendMode;
    property public int doubleSidedMode;
    property public int lightingModel;
    field public static final androidx.xr.scenecore.KhronosPbrMaterialSpec.Companion Companion;
  }

  public static final class KhronosPbrMaterialSpec.BlendMode {
    property public static int MASKED;
    property public static int OPAQUE;
    property public static int REFRACTIVE;
    property public static int TRANSPARENT;
    field public static final androidx.xr.scenecore.KhronosPbrMaterialSpec.BlendMode INSTANCE;
    field public static final int MASKED = 1; // 0x1
    field public static final int OPAQUE = 0; // 0x0
    field public static final int REFRACTIVE = 3; // 0x3
    field public static final int TRANSPARENT = 2; // 0x2
  }

  public static final class KhronosPbrMaterialSpec.Companion {
    method public androidx.xr.scenecore.KhronosPbrMaterialSpec create();
    method public androidx.xr.scenecore.KhronosPbrMaterialSpec create(optional int lightingModel);
    method public androidx.xr.scenecore.KhronosPbrMaterialSpec create(optional int lightingModel, optional int blendMode);
    method public androidx.xr.scenecore.KhronosPbrMaterialSpec create(optional int lightingModel, optional int blendMode, optional int doubleSidedMode);
  }

  public static final class KhronosPbrMaterialSpec.DoubleSidedMode {
    property public static int DOUBLE_SIDED;
    property public static int SINGLE_SIDED;
    field public static final int DOUBLE_SIDED = 1; // 0x1
    field public static final androidx.xr.scenecore.KhronosPbrMaterialSpec.DoubleSidedMode INSTANCE;
    field public static final int SINGLE_SIDED = 0; // 0x0
  }

  public static final class KhronosPbrMaterialSpec.LightingModel {
    property public static int LIT;
    property public static int UNLIT;
    field public static final androidx.xr.scenecore.KhronosPbrMaterialSpec.LightingModel INSTANCE;
    field public static final int LIT = 0; // 0x0
    field public static final int UNLIT = 1; // 0x1
  }

  public final class LaunchUtils {
    method public static android.os.Bundle createBundleForFullSpaceModeLaunch(androidx.xr.runtime.Session session, android.os.Bundle bundle);
    method public static android.os.Bundle createBundleForFullSpaceModeLaunchWithEnvironmentInherited(androidx.xr.runtime.Session session, android.os.Bundle bundle);
  }

  public final class MainPanelEntity extends androidx.xr.scenecore.PanelEntity {
    method public void addPerceivedResolutionChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.runtime.math.IntSize2d> listener);
    method public void addPerceivedResolutionChangedListener(java.util.function.Consumer<androidx.xr.runtime.math.IntSize2d> listener);
    method public void removePerceivedResolutionChangedListener(java.util.function.Consumer<androidx.xr.runtime.math.IntSize2d> listener);
    field public static final androidx.xr.scenecore.MainPanelEntity.Companion Companion;
  }

  public static final class MainPanelEntity.Companion {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class Material {
    ctor public Material(androidx.xr.scenecore.internal.MaterialResource? material);
  }

  public final class MovableComponent implements androidx.xr.scenecore.Component {
    method public void addMoveListener(androidx.xr.scenecore.EntityMoveListener entityMoveListener);
    method public void addMoveListener(java.util.concurrent.Executor executor, androidx.xr.scenecore.EntityMoveListener entityMoveListener);
    method public static androidx.xr.scenecore.MovableComponent createAnchorable(androidx.xr.runtime.Session session);
    method public static androidx.xr.scenecore.MovableComponent createAnchorable(androidx.xr.runtime.Session session, optional java.util.Set<androidx.xr.scenecore.AnchorPlacement> anchorPlacement);
    method public static androidx.xr.scenecore.MovableComponent createAnchorable(androidx.xr.runtime.Session session, optional java.util.Set<androidx.xr.scenecore.AnchorPlacement> anchorPlacement, optional boolean disposeParentOnReAnchor);
    method public static androidx.xr.scenecore.MovableComponent createCustomMovable(androidx.xr.runtime.Session session, boolean scaleInZ, java.util.concurrent.Executor? executor, androidx.xr.scenecore.EntityMoveListener entityMoveListener);
    method public static androidx.xr.scenecore.MovableComponent createSystemMovable(androidx.xr.runtime.Session session);
    method public static androidx.xr.scenecore.MovableComponent createSystemMovable(androidx.xr.runtime.Session session, optional boolean scaleInZ);
    method public androidx.xr.runtime.math.FloatSize3d getSize();
    method public boolean onAttach(androidx.xr.scenecore.Entity entity);
    method public void onDetach(androidx.xr.scenecore.Entity entity);
    method public void removeMoveListener(androidx.xr.scenecore.EntityMoveListener entityMoveListener);
    method public void setSize(androidx.xr.runtime.math.FloatSize3d);
    property public androidx.xr.runtime.math.FloatSize3d size;
    field public static final androidx.xr.scenecore.MovableComponent.Companion Companion;
  }

  public static final class MovableComponent.Companion {
    method public androidx.xr.scenecore.MovableComponent createAnchorable(androidx.xr.runtime.Session session);
    method public androidx.xr.scenecore.MovableComponent createAnchorable(androidx.xr.runtime.Session session, optional java.util.Set<androidx.xr.scenecore.AnchorPlacement> anchorPlacement);
    method public androidx.xr.scenecore.MovableComponent createAnchorable(androidx.xr.runtime.Session session, optional java.util.Set<androidx.xr.scenecore.AnchorPlacement> anchorPlacement, optional boolean disposeParentOnReAnchor);
    method public androidx.xr.scenecore.MovableComponent createCustomMovable(androidx.xr.runtime.Session session, boolean scaleInZ, java.util.concurrent.Executor? executor, androidx.xr.scenecore.EntityMoveListener entityMoveListener);
    method public androidx.xr.scenecore.MovableComponent createSystemMovable(androidx.xr.runtime.Session session);
    method public androidx.xr.scenecore.MovableComponent createSystemMovable(androidx.xr.runtime.Session session, optional boolean scaleInZ);
  }

  public final class PanelClippingConfig {
    ctor public PanelClippingConfig();
    ctor public PanelClippingConfig(optional boolean isDepthTestEnabled);
    method public androidx.xr.scenecore.PanelClippingConfig copy();
    method public androidx.xr.scenecore.PanelClippingConfig copy(optional boolean isDepthTestEnabled);
    method public boolean isDepthTestEnabled();
    property public boolean isDepthTestEnabled;
  }

  public class PanelEntity extends androidx.xr.scenecore.BaseEntity<androidx.xr.scenecore.internal.PanelEntity> {
    method public static final androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.FloatSize2d dimensions, String name);
    method public static final androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.FloatSize2d dimensions, String name, optional androidx.xr.runtime.math.Pose pose);
    method public static final androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.IntSize2d pixelDimensions, String name);
    method public static final androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.IntSize2d pixelDimensions, String name, optional androidx.xr.runtime.math.Pose pose);
    method public final float getCornerRadius();
    method public final androidx.xr.scenecore.PerceivedResolutionResult getPerceivedResolution();
    method public final androidx.xr.runtime.math.FloatSize2d getSize();
    method public final androidx.xr.runtime.math.IntSize2d getSizeInPixels();
    method public final boolean isMainPanelEntity();
    method public final void setCornerRadius(float);
    method public final void setSize(androidx.xr.runtime.math.FloatSize2d);
    method public final void setSizeInPixels(androidx.xr.runtime.math.IntSize2d);
    property public final float cornerRadius;
    property public final boolean isMainPanelEntity;
    property public final androidx.xr.runtime.math.FloatSize2d size;
    property public final androidx.xr.runtime.math.IntSize2d sizeInPixels;
    field public static final androidx.xr.scenecore.PanelEntity.Companion Companion;
  }

  public static final class PanelEntity.Companion {
    method public androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.FloatSize2d dimensions, String name);
    method public androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.FloatSize2d dimensions, String name, optional androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.IntSize2d pixelDimensions, String name);
    method public androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.IntSize2d pixelDimensions, String name, optional androidx.xr.runtime.math.Pose pose);
  }

  public abstract class PerceivedResolutionResult {
  }

  public static final class PerceivedResolutionResult.EntityTooClose extends androidx.xr.scenecore.PerceivedResolutionResult {
    ctor public PerceivedResolutionResult.EntityTooClose();
  }

  public static final class PerceivedResolutionResult.InvalidCameraView extends androidx.xr.scenecore.PerceivedResolutionResult {
    ctor public PerceivedResolutionResult.InvalidCameraView();
  }

  public static final class PerceivedResolutionResult.Success extends androidx.xr.scenecore.PerceivedResolutionResult {
    ctor public PerceivedResolutionResult.Success(androidx.xr.runtime.math.IntSize2d perceivedResolution);
    method public androidx.xr.runtime.math.IntSize2d getPerceivedResolution();
    property public androidx.xr.runtime.math.IntSize2d perceivedResolution;
  }

  public final class PerceptionSpace extends androidx.xr.scenecore.BaseScenePose<androidx.xr.scenecore.internal.PerceptionSpaceActivityPose> {
  }

  public final class PlaneOrientation {
    property public static int ANY;
    property public static int HORIZONTAL;
    property public static int VERTICAL;
    field public static final int ANY = 2; // 0x2
    field public static final int HORIZONTAL = 0; // 0x0
    field public static final androidx.xr.scenecore.PlaneOrientation INSTANCE;
    field public static final int VERTICAL = 1; // 0x1
  }

  public final class PlaneSemanticType {
    property public static int ANY;
    property public static int CEILING;
    property public static int FLOOR;
    property public static int TABLE;
    property public static int WALL;
    field public static final int ANY = 4; // 0x4
    field public static final int CEILING = 2; // 0x2
    field public static final int FLOOR = 1; // 0x1
    field public static final androidx.xr.scenecore.PlaneSemanticType INSTANCE;
    field public static final int TABLE = 3; // 0x3
    field public static final int WALL = 0; // 0x0
  }

  public final class PointSourceParams {
    ctor public PointSourceParams(androidx.xr.scenecore.Entity entity);
  }

  public final class PointerCaptureComponent implements androidx.xr.scenecore.Component {
    method public static androidx.xr.scenecore.PointerCaptureComponent create(androidx.xr.runtime.Session session, java.util.concurrent.Executor executor, java.util.function.Consumer<java.lang.Integer> stateListener, java.util.function.Consumer<androidx.xr.scenecore.InputEvent> inputListener);
    method public boolean onAttach(androidx.xr.scenecore.Entity entity);
    method public void onDetach(androidx.xr.scenecore.Entity entity);
    field public static final androidx.xr.scenecore.PointerCaptureComponent.Companion Companion;
  }

  public static final class PointerCaptureComponent.Companion {
    method public androidx.xr.scenecore.PointerCaptureComponent create(androidx.xr.runtime.Session session, java.util.concurrent.Executor executor, java.util.function.Consumer<java.lang.Integer> stateListener, java.util.function.Consumer<androidx.xr.scenecore.InputEvent> inputListener);
  }

  public static final class PointerCaptureComponent.PointerCaptureState {
    property public static int POINTER_CAPTURE_ACTIVE;
    property public static int POINTER_CAPTURE_PAUSED;
    property public static int POINTER_CAPTURE_STOPPED;
    field public static final androidx.xr.scenecore.PointerCaptureComponent.PointerCaptureState INSTANCE;
    field public static final int POINTER_CAPTURE_ACTIVE = 1; // 0x1
    field public static final int POINTER_CAPTURE_PAUSED = 0; // 0x0
    field public static final int POINTER_CAPTURE_STOPPED = 2; // 0x2
  }

  public final class ResizableComponent implements androidx.xr.scenecore.Component {
    method public void addResizeEventListener(optional java.util.concurrent.Executor executor, java.util.function.Consumer<androidx.xr.scenecore.ResizeEvent> resizeEventListener);
    method public void addResizeEventListener(java.util.function.Consumer<androidx.xr.scenecore.ResizeEvent> resizeEventListener);
    method public static androidx.xr.scenecore.ResizableComponent create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.FloatSize3d minimumSize, optional androidx.xr.runtime.math.FloatSize3d maximumSize, optional java.util.concurrent.Executor executor, java.util.function.Consumer<androidx.xr.scenecore.ResizeEvent> resizeEventListener);
    method public static androidx.xr.scenecore.ResizableComponent create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.FloatSize3d minimumSize, optional androidx.xr.runtime.math.FloatSize3d maximumSize, java.util.function.Consumer<androidx.xr.scenecore.ResizeEvent> resizeEventListener);
    method public static androidx.xr.scenecore.ResizableComponent create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.FloatSize3d minimumSize, java.util.function.Consumer<androidx.xr.scenecore.ResizeEvent> resizeEventListener);
    method public static androidx.xr.scenecore.ResizableComponent create(androidx.xr.runtime.Session session, java.util.function.Consumer<androidx.xr.scenecore.ResizeEvent> resizeEventListener);
    method public androidx.xr.runtime.math.FloatSize3d getAffordanceSize();
    method public float getFixedAspectRatio();
    method public androidx.xr.runtime.math.FloatSize3d getMaximumEntitySize();
    method public androidx.xr.runtime.math.FloatSize3d getMinimumEntitySize();
    method public boolean isAlwaysShowOverlayEnabled();
    method public boolean isAutoHideContentWhileResizingEnabled();
    method public boolean onAttach(androidx.xr.scenecore.Entity entity);
    method public void onDetach(androidx.xr.scenecore.Entity entity);
    method public void removeResizeEventListener(java.util.function.Consumer<androidx.xr.scenecore.ResizeEvent> resizeEventListener);
    method public void setAffordanceSize(androidx.xr.runtime.math.FloatSize3d);
    method public void setAlwaysShowOverlayEnabled(boolean);
    method public void setAutoHideContentWhileResizingEnabled(boolean);
    method public void setFixedAspectRatio(float);
    method public void setMaximumEntitySize(androidx.xr.runtime.math.FloatSize3d);
    method public void setMinimumEntitySize(androidx.xr.runtime.math.FloatSize3d);
    method public void setShouldAutoUpdateOverlay(boolean);
    method public boolean shouldAutoUpdateOverlay();
    property public androidx.xr.runtime.math.FloatSize3d affordanceSize;
    property public float fixedAspectRatio;
    property public boolean isAlwaysShowOverlayEnabled;
    property public boolean isAutoHideContentWhileResizingEnabled;
    property public androidx.xr.runtime.math.FloatSize3d maximumEntitySize;
    property public androidx.xr.runtime.math.FloatSize3d minimumEntitySize;
    property public boolean shouldAutoUpdateOverlay;
    field public static final androidx.xr.scenecore.ResizableComponent.Companion Companion;
  }

  public static final class ResizableComponent.Companion {
    method public androidx.xr.scenecore.ResizableComponent create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.FloatSize3d minimumSize, optional androidx.xr.runtime.math.FloatSize3d maximumSize, optional java.util.concurrent.Executor executor, java.util.function.Consumer<androidx.xr.scenecore.ResizeEvent> resizeEventListener);
    method public androidx.xr.scenecore.ResizableComponent create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.FloatSize3d minimumSize, optional androidx.xr.runtime.math.FloatSize3d maximumSize, java.util.function.Consumer<androidx.xr.scenecore.ResizeEvent> resizeEventListener);
    method public androidx.xr.scenecore.ResizableComponent create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.FloatSize3d minimumSize, java.util.function.Consumer<androidx.xr.scenecore.ResizeEvent> resizeEventListener);
    method public androidx.xr.scenecore.ResizableComponent create(androidx.xr.runtime.Session session, java.util.function.Consumer<androidx.xr.scenecore.ResizeEvent> resizeEventListener);
  }

  public final class ResizeEvent {
    ctor public ResizeEvent(androidx.xr.scenecore.Entity entity, int resizeState, androidx.xr.runtime.math.FloatSize3d newSize);
    method public androidx.xr.scenecore.Entity getEntity();
    method public androidx.xr.runtime.math.FloatSize3d getNewSize();
    method public int getResizeState();
    property public androidx.xr.scenecore.Entity entity;
    property public androidx.xr.runtime.math.FloatSize3d newSize;
    property public int resizeState;
  }

  public static final class ResizeEvent.ResizeState {
    property public static int RESIZE_STATE_END;
    property public static int RESIZE_STATE_ONGOING;
    property public static int RESIZE_STATE_START;
    property public static int RESIZE_STATE_UNKNOWN;
    field public static final androidx.xr.scenecore.ResizeEvent.ResizeState INSTANCE;
    field public static final int RESIZE_STATE_END = 3; // 0x3
    field public static final int RESIZE_STATE_ONGOING = 2; // 0x2
    field public static final int RESIZE_STATE_START = 1; // 0x1
    field public static final int RESIZE_STATE_UNKNOWN = 0; // 0x0
  }

  public final class Scene implements androidx.xr.runtime.SessionConnector {
    ctor public Scene();
    method public void addSpatialCapabilitiesChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.SpatialCapabilities> listener);
    method public void addSpatialCapabilitiesChangedListener(java.util.function.Consumer<androidx.xr.scenecore.SpatialCapabilities> listener);
    method public void clearSpatialModeChangedListener();
    method public void clearSpatialVisibilityChangedListener();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void close();
    method public androidx.xr.scenecore.ActivitySpace getActivitySpace();
    method public <T extends androidx.xr.scenecore.Entity> java.util.List<T> getEntitiesOfType(Class<? extends T> type);
    method public androidx.xr.scenecore.Entity? getKeyEntity();
    method public androidx.xr.scenecore.MainPanelEntity getMainPanelEntity();
    method public androidx.xr.scenecore.PanelClippingConfig getPanelClippingConfig();
    method public androidx.xr.scenecore.PerceptionSpace getPerceptionSpace();
    method public androidx.xr.scenecore.SpatialCapabilities getSpatialCapabilities();
    method public androidx.xr.scenecore.SpatialEnvironment getSpatialEnvironment();
    method public androidx.xr.scenecore.SpatialUser getSpatialUser();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void initialize(java.util.List<? extends androidx.xr.runtime.internal.JxrRuntime> runtimes);
    method public void removeSpatialCapabilitiesChangedListener(java.util.function.Consumer<androidx.xr.scenecore.SpatialCapabilities> listener);
    method public void requestFullSpaceMode();
    method public void requestHomeSpaceMode();
    method public void setKeyEntity(androidx.xr.scenecore.Entity?);
    method public void setPanelClippingConfig(androidx.xr.scenecore.PanelClippingConfig);
    method public void setSpatialModeChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.SpatialModeChangeEvent> listener);
    method public void setSpatialModeChangedListener(java.util.function.Consumer<androidx.xr.scenecore.SpatialModeChangeEvent> listener);
    method public void setSpatialVisibilityChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<java.lang.Integer> listener);
    method public void setSpatialVisibilityChangedListener(java.util.function.Consumer<java.lang.Integer> listener);
    property public androidx.xr.scenecore.ActivitySpace activitySpace;
    property public androidx.xr.scenecore.Entity? keyEntity;
    property public androidx.xr.scenecore.MainPanelEntity mainPanelEntity;
    property public androidx.xr.scenecore.PanelClippingConfig panelClippingConfig;
    property public androidx.xr.scenecore.PerceptionSpace perceptionSpace;
    property public androidx.xr.scenecore.SpatialCapabilities spatialCapabilities;
    property public androidx.xr.scenecore.SpatialEnvironment spatialEnvironment;
    property public androidx.xr.scenecore.SpatialUser spatialUser;
  }

  public interface ScenePose {
    method public androidx.xr.runtime.math.Pose getActivitySpacePose();
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int hitTestFilter, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public androidx.xr.runtime.math.Pose transformPoseTo(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.ScenePose destination);
    property public abstract androidx.xr.runtime.math.Pose activitySpacePose;
  }

  public static final class ScenePose.HitTestFilter {
    property public static int OTHER_SCENES;
    property public static int SELF_SCENE;
    field public static final androidx.xr.scenecore.ScenePose.HitTestFilter INSTANCE;
    field public static final int OTHER_SCENES = 2; // 0x2
    field public static final int SELF_SCENE = 1; // 0x1
  }

  public final class SessionExt {
    method public static androidx.xr.scenecore.Scene getScene(androidx.xr.runtime.Session);
    property public static androidx.xr.scenecore.Scene androidx.xr.runtime.Session.scene;
  }

  public final class SoundFieldAttributes {
    ctor public SoundFieldAttributes(int order);
    method public int getOrder();
    property public int order;
  }

  public final class Space {
    property public static int ACTIVITY;
    property public static int PARENT;
    property public static int REAL_WORLD;
    field public static final int ACTIVITY = 1; // 0x1
    field public static final androidx.xr.scenecore.Space INSTANCE;
    field public static final int PARENT = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int REAL_WORLD = 2; // 0x2
  }

  @IntDef({androidx.xr.scenecore.Space.PARENT, androidx.xr.scenecore.Space.ACTIVITY, androidx.xr.scenecore.Space.REAL_WORLD}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) internal @interface SpaceValue {
  }

  public final class SpatialAudioTrack {
    method public static androidx.xr.scenecore.PointSourceParams? getPointSourceParams(androidx.xr.runtime.Session session, android.media.AudioTrack track);
    method public static androidx.xr.scenecore.SoundFieldAttributes? getSoundFieldAttributes(androidx.xr.runtime.Session session, android.media.AudioTrack track);
    method public static int getSpatialSourceType(androidx.xr.runtime.Session session, android.media.AudioTrack track);
    method public static void setPointSourceParams(androidx.xr.runtime.Session session, android.media.AudioTrack track, androidx.xr.scenecore.PointSourceParams params);
    field public static final androidx.xr.scenecore.SpatialAudioTrack INSTANCE;
  }

  public final class SpatialAudioTrackBuilder {
    method public static void setPointSourceParams(androidx.xr.runtime.Session session, android.media.AudioTrack.Builder builder, androidx.xr.scenecore.PointSourceParams params);
    method public static void setSoundFieldAttributes(androidx.xr.runtime.Session session, android.media.AudioTrack.Builder builder, androidx.xr.scenecore.SoundFieldAttributes attributes);
    field public static final androidx.xr.scenecore.SpatialAudioTrackBuilder INSTANCE;
  }

  public final class SpatialCapabilities {
    method public boolean hasCapability(int capability);
    field public static final androidx.xr.scenecore.SpatialCapabilities.Companion Companion;
    field public static final int SPATIAL_CAPABILITY_3D_CONTENT = 2; // 0x2
    field public static final int SPATIAL_CAPABILITY_APP_ENVIRONMENT = 8; // 0x8
    field public static final int SPATIAL_CAPABILITY_EMBED_ACTIVITY = 32; // 0x20
    field public static final int SPATIAL_CAPABILITY_PASSTHROUGH_CONTROL = 4; // 0x4
    field public static final int SPATIAL_CAPABILITY_SPATIAL_AUDIO = 16; // 0x10
    field public static final int SPATIAL_CAPABILITY_UI = 1; // 0x1
  }

  public static final class SpatialCapabilities.Companion {
    property public static int SPATIAL_CAPABILITY_3D_CONTENT;
    property public static int SPATIAL_CAPABILITY_APP_ENVIRONMENT;
    property public static int SPATIAL_CAPABILITY_EMBED_ACTIVITY;
    property public static int SPATIAL_CAPABILITY_PASSTHROUGH_CONTROL;
    property public static int SPATIAL_CAPABILITY_SPATIAL_AUDIO;
    property public static int SPATIAL_CAPABILITY_UI;
  }

  public final class SpatialEnvironment {
    method public void addOnPassthroughOpacityChangedListener(java.util.concurrent.Executor executor, java.util.function.Consumer<java.lang.Float> listener);
    method public void addOnPassthroughOpacityChangedListener(java.util.function.Consumer<java.lang.Float> listener);
    method public void addOnSpatialEnvironmentChangedListener(java.util.concurrent.Executor executor, java.util.function.Consumer<java.lang.Boolean> listener);
    method public void addOnSpatialEnvironmentChangedListener(java.util.function.Consumer<java.lang.Boolean> listener);
    method public float getCurrentPassthroughOpacity();
    method public float getPreferredPassthroughOpacity();
    method public androidx.xr.scenecore.SpatialEnvironment.SpatialEnvironmentPreference? getPreferredSpatialEnvironment();
    method public boolean isPreferredSpatialEnvironmentActive();
    method public void removeOnPassthroughOpacityChangedListener(java.util.function.Consumer<java.lang.Float> listener);
    method public void removeOnSpatialEnvironmentChangedListener(java.util.function.Consumer<java.lang.Boolean> listener);
    method public void setPreferredPassthroughOpacity(float);
    method public void setPreferredSpatialEnvironment(androidx.xr.scenecore.SpatialEnvironment.SpatialEnvironmentPreference?);
    property public float currentPassthroughOpacity;
    property public boolean isPreferredSpatialEnvironmentActive;
    property public float preferredPassthroughOpacity;
    property public androidx.xr.scenecore.SpatialEnvironment.SpatialEnvironmentPreference? preferredSpatialEnvironment;
    field public static final androidx.xr.scenecore.SpatialEnvironment.Companion Companion;
    field public static final float NO_PASSTHROUGH_OPACITY_PREFERENCE = (-1.0f/0.0f);
  }

  public static final class SpatialEnvironment.Companion {
    property public static float NO_PASSTHROUGH_OPACITY_PREFERENCE;
  }

  public static final class SpatialEnvironment.SpatialEnvironmentPreference {
    ctor public SpatialEnvironment.SpatialEnvironmentPreference(androidx.xr.scenecore.ExrImage? skybox, androidx.xr.scenecore.GltfModel? geometry);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public SpatialEnvironment.SpatialEnvironmentPreference(androidx.xr.scenecore.ExrImage? skybox, androidx.xr.scenecore.GltfModel? geometry, androidx.xr.scenecore.Material? geometryMaterial);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public SpatialEnvironment.SpatialEnvironmentPreference(androidx.xr.scenecore.ExrImage? skybox, androidx.xr.scenecore.GltfModel? geometry, androidx.xr.scenecore.Material? geometryMaterial, optional String? geometryMeshName);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public SpatialEnvironment.SpatialEnvironmentPreference(androidx.xr.scenecore.ExrImage? skybox, androidx.xr.scenecore.GltfModel? geometry, androidx.xr.scenecore.Material? geometryMaterial, optional String? geometryMeshName, optional String? geometryAnimationName);
    method public androidx.xr.scenecore.GltfModel? getGeometry();
    method public androidx.xr.scenecore.ExrImage? getSkybox();
    property public androidx.xr.scenecore.GltfModel? geometry;
    property public androidx.xr.scenecore.ExrImage? skybox;
  }

  public final class SpatialMediaPlayer {
    method public static void setPointSourceParams(androidx.xr.runtime.Session session, android.media.MediaPlayer mediaPlayer, androidx.xr.scenecore.PointSourceParams params);
    method public static void setSoundFieldAttributes(androidx.xr.runtime.Session session, android.media.MediaPlayer mediaPlayer, androidx.xr.scenecore.SoundFieldAttributes attributes);
    field public static final androidx.xr.scenecore.SpatialMediaPlayer INSTANCE;
  }

  public final class SpatialModeChangeEvent {
    ctor public SpatialModeChangeEvent(androidx.xr.runtime.math.Pose recommendedPose, float recommendedScale);
    method public androidx.xr.runtime.math.Pose getRecommendedPose();
    method public float getRecommendedScale();
    property public androidx.xr.runtime.math.Pose recommendedPose;
    property public float recommendedScale;
  }

  public final class SpatialPointerComponent implements androidx.xr.scenecore.Component {
    method public static androidx.xr.scenecore.SpatialPointerComponent create(androidx.xr.runtime.Session session);
    method public androidx.xr.scenecore.SpatialPointerIcon getSpatialPointerIcon();
    method public boolean onAttach(androidx.xr.scenecore.Entity entity);
    method public void onDetach(androidx.xr.scenecore.Entity entity);
    method public void setSpatialPointerIcon(androidx.xr.scenecore.SpatialPointerIcon);
    property public androidx.xr.scenecore.SpatialPointerIcon spatialPointerIcon;
    field public static final androidx.xr.scenecore.SpatialPointerComponent.Companion Companion;
  }

  public static final class SpatialPointerComponent.Companion {
    method public androidx.xr.scenecore.SpatialPointerComponent create(androidx.xr.runtime.Session session);
  }

  public final class SpatialPointerIcon {
    field public static final androidx.xr.scenecore.SpatialPointerIcon CIRCLE;
    field public static final androidx.xr.scenecore.SpatialPointerIcon.Companion Companion;
    field public static final androidx.xr.scenecore.SpatialPointerIcon DEFAULT;
    field public static final androidx.xr.scenecore.SpatialPointerIcon NONE;
  }

  public static final class SpatialPointerIcon.Companion {
    property public androidx.xr.scenecore.SpatialPointerIcon CIRCLE;
    property public androidx.xr.scenecore.SpatialPointerIcon DEFAULT;
    property public androidx.xr.scenecore.SpatialPointerIcon NONE;
  }

  public final class SpatialSoundPool {
    method public static int getSpatialSourceType(androidx.xr.runtime.Session session, android.media.SoundPool soundPool, int streamId);
    method public static int play(androidx.xr.runtime.Session session, android.media.SoundPool soundPool, int soundID, androidx.xr.scenecore.PointSourceParams params);
    method public static int play(androidx.xr.runtime.Session session, android.media.SoundPool soundPool, int soundID, androidx.xr.scenecore.PointSourceParams params, optional @FloatRange(from=0.0, to=1.0) float volume);
    method public static int play(androidx.xr.runtime.Session session, android.media.SoundPool soundPool, int soundID, androidx.xr.scenecore.PointSourceParams params, optional @FloatRange(from=0.0, to=1.0) float volume, optional @IntRange(from=0L) int priority);
    method public static int play(androidx.xr.runtime.Session session, android.media.SoundPool soundPool, int soundID, androidx.xr.scenecore.PointSourceParams params, optional @FloatRange(from=0.0, to=1.0) float volume, optional @IntRange(from=0L) int priority, optional @IntRange(from=-1L) int loop);
    method public static int play(androidx.xr.runtime.Session session, android.media.SoundPool soundPool, int soundID, androidx.xr.scenecore.PointSourceParams params, optional @FloatRange(from=0.0, to=1.0) float volume, optional @IntRange(from=0L) int priority, optional @IntRange(from=-1L) int loop, optional @FloatRange(from=0.5, to=2.0) float rate);
    method public static int play(androidx.xr.runtime.Session session, android.media.SoundPool soundPool, int soundID, androidx.xr.scenecore.SoundFieldAttributes attributes);
    method public static int play(androidx.xr.runtime.Session session, android.media.SoundPool soundPool, int soundID, androidx.xr.scenecore.SoundFieldAttributes attributes, optional @FloatRange(from=0.0, to=1.0) float volume);
    method public static int play(androidx.xr.runtime.Session session, android.media.SoundPool soundPool, int soundID, androidx.xr.scenecore.SoundFieldAttributes attributes, optional @FloatRange(from=0.0, to=1.0) float volume, optional @IntRange(from=0L) int priority);
    method public static int play(androidx.xr.runtime.Session session, android.media.SoundPool soundPool, int soundID, androidx.xr.scenecore.SoundFieldAttributes attributes, optional @FloatRange(from=0.0, to=1.0) float volume, optional @IntRange(from=0L) int priority, optional @IntRange(from=-1L) int loop);
    method public static int play(androidx.xr.runtime.Session session, android.media.SoundPool soundPool, int soundID, androidx.xr.scenecore.SoundFieldAttributes attributes, optional @FloatRange(from=0.0, to=1.0) float volume, optional @IntRange(from=0L) int priority, optional @IntRange(from=-1L) int loop, optional @FloatRange(from=0.5, to=2.0) float rate);
    property public static int PLAY_FAILED;
    field public static final androidx.xr.scenecore.SpatialSoundPool INSTANCE;
    field public static final int PLAY_FAILED = 0; // 0x0
  }

  public final class SpatialUser {
    ctor public SpatialUser(androidx.xr.runtime.internal.LifecycleManager lifecycleManager, androidx.xr.scenecore.internal.JxrPlatformAdapter runtime);
    method public java.util.Map<androidx.xr.scenecore.CameraView.CameraType,androidx.xr.scenecore.CameraView> getCameraViews();
    method public androidx.xr.scenecore.Head? getHead();
    property public java.util.Map<androidx.xr.scenecore.CameraView.CameraType,androidx.xr.scenecore.CameraView> cameraViews;
    property public androidx.xr.scenecore.Head? head;
  }

  public final class SpatialVisibility {
    property public static int SPATIAL_VISIBILITY_OUTSIDE_FIELD_OF_VIEW;
    property public static int SPATIAL_VISIBILITY_PARTIALLY_WITHIN_FIELD_OF_VIEW;
    property public static int SPATIAL_VISIBILITY_UNKNOWN;
    property public static int SPATIAL_VISIBILITY_WITHIN_FIELD_OF_VIEW;
    field public static final androidx.xr.scenecore.SpatialVisibility INSTANCE;
    field public static final int SPATIAL_VISIBILITY_OUTSIDE_FIELD_OF_VIEW = 1; // 0x1
    field public static final int SPATIAL_VISIBILITY_PARTIALLY_WITHIN_FIELD_OF_VIEW = 2; // 0x2
    field public static final int SPATIAL_VISIBILITY_UNKNOWN = 0; // 0x0
    field public static final int SPATIAL_VISIBILITY_WITHIN_FIELD_OF_VIEW = 3; // 0x3
  }

  public final class SpatialWindow {
    method public void setPreferredAspectRatio(androidx.xr.runtime.Session session, android.app.Activity activity, float preferredRatio);
    property public static float NO_PREFERRED_ASPECT_RATIO;
    field public static final androidx.xr.scenecore.SpatialWindow INSTANCE;
    field public static final float NO_PREFERRED_ASPECT_RATIO = -1.0f;
  }

  public interface SpatializerConstants {
    field public static final int AMBISONICS_ORDER_FIRST_ORDER = 0; // 0x0
    field public static final int AMBISONICS_ORDER_SECOND_ORDER = 1; // 0x1
    field public static final int AMBISONICS_ORDER_THIRD_ORDER = 2; // 0x2
    field public static final androidx.xr.scenecore.SpatializerConstants.Companion Companion;
    field public static final int SOURCE_TYPE_DEFAULT = 0; // 0x0
    field public static final int SOURCE_TYPE_POINT_SOURCE = 1; // 0x1
    field public static final int SOURCE_TYPE_SOUND_FIELD = 2; // 0x2
  }

  public static final class SpatializerConstants.Companion {
    property public static int AMBISONICS_ORDER_FIRST_ORDER;
    property public static int AMBISONICS_ORDER_SECOND_ORDER;
    property public static int AMBISONICS_ORDER_THIRD_ORDER;
    property public static int SOURCE_TYPE_DEFAULT;
    property public static int SOURCE_TYPE_POINT_SOURCE;
    property public static int SOURCE_TYPE_SOUND_FIELD;
    field public static final int AMBISONICS_ORDER_FIRST_ORDER = 0; // 0x0
    field public static final int AMBISONICS_ORDER_SECOND_ORDER = 1; // 0x1
    field public static final int AMBISONICS_ORDER_THIRD_ORDER = 2; // 0x2
    field public static final int SOURCE_TYPE_DEFAULT = 0; // 0x0
    field public static final int SOURCE_TYPE_POINT_SOURCE = 1; // 0x1
    field public static final int SOURCE_TYPE_SOUND_FIELD = 2; // 0x2
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SubspaceNodeEntity extends androidx.xr.scenecore.BaseEntity<androidx.xr.scenecore.internal.SubspaceNodeEntity> {
    method public static androidx.xr.scenecore.SubspaceNodeEntity create(androidx.xr.runtime.Session session, androidx.xr.runtime.SubspaceNodeHolder<? extends java.lang.Object?> subspaceNodeHolder, androidx.xr.runtime.math.FloatSize3d size);
    method public static androidx.xr.scenecore.SubspaceNodeEntity create(androidx.xr.runtime.Session session, com.google.androidxr.splitengine.SubspaceNode subspaceNode, androidx.xr.runtime.math.FloatSize3d size);
    method public androidx.xr.runtime.math.FloatSize3d getSize();
    method public void setSize(androidx.xr.runtime.math.FloatSize3d);
    property public androidx.xr.runtime.math.FloatSize3d size;
    field public static final androidx.xr.scenecore.SubspaceNodeEntity.Companion Companion;
  }

  public static final class SubspaceNodeEntity.Companion {
    method public androidx.xr.scenecore.SubspaceNodeEntity create(androidx.xr.runtime.Session session, androidx.xr.runtime.SubspaceNodeHolder<? extends java.lang.Object?> subspaceNodeHolder, androidx.xr.runtime.math.FloatSize3d size);
    method public androidx.xr.scenecore.SubspaceNodeEntity create(androidx.xr.runtime.Session session, com.google.androidxr.splitengine.SubspaceNode subspaceNode, androidx.xr.runtime.math.FloatSize3d size);
  }

  public final class SurfaceEntity extends androidx.xr.scenecore.BaseEntity<androidx.xr.scenecore.internal.SurfaceEntity> {
    method @MainThread public static androidx.xr.scenecore.SurfaceEntity create(androidx.xr.runtime.Session session);
    method @MainThread public static androidx.xr.scenecore.SurfaceEntity create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.Pose pose);
    method @MainThread public static androidx.xr.scenecore.SurfaceEntity create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.Pose pose, optional androidx.xr.scenecore.SurfaceEntity.Shape shape);
    method @MainThread public static androidx.xr.scenecore.SurfaceEntity create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.Pose pose, optional androidx.xr.scenecore.SurfaceEntity.Shape shape, optional int stereoMode);
    method @MainThread public static androidx.xr.scenecore.SurfaceEntity create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.Pose pose, optional androidx.xr.scenecore.SurfaceEntity.Shape shape, optional int stereoMode, optional int superSampling);
    method @MainThread public static androidx.xr.scenecore.SurfaceEntity create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.Pose pose, optional androidx.xr.scenecore.SurfaceEntity.Shape shape, optional int stereoMode, optional int superSampling, optional int surfaceProtection);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.scenecore.Texture? getAuxiliaryAlphaMaskTexture();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.scenecore.SurfaceEntity.ContentColorMetadata? getContentColorMetadata();
    method public androidx.xr.runtime.math.FloatSize3d getDimensions();
    method public androidx.xr.scenecore.SurfaceEntity.EdgeFeatheringParams getEdgeFeatheringParams();
    method public androidx.xr.scenecore.PerceivedResolutionResult getPerceivedResolution();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.scenecore.Texture? getPrimaryAlphaMaskTexture();
    method public androidx.xr.scenecore.SurfaceEntity.Shape getShape();
    method public int getStereoMode();
    method @MainThread public android.view.Surface getSurface();
    method @MainThread @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void setAuxiliaryAlphaMaskTexture(androidx.xr.scenecore.Texture?);
    method @MainThread @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void setContentColorMetadata(androidx.xr.scenecore.SurfaceEntity.ContentColorMetadata?);
    method @MainThread public void setEdgeFeatheringParams(androidx.xr.scenecore.SurfaceEntity.EdgeFeatheringParams);
    method @MainThread @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void setPrimaryAlphaMaskTexture(androidx.xr.scenecore.Texture?);
    method @MainThread public void setShape(androidx.xr.scenecore.SurfaceEntity.Shape);
    method @MainThread public void setStereoMode(int);
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.scenecore.Texture? auxiliaryAlphaMaskTexture;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.scenecore.SurfaceEntity.ContentColorMetadata? contentColorMetadata;
    property public androidx.xr.runtime.math.FloatSize3d dimensions;
    property public androidx.xr.scenecore.SurfaceEntity.EdgeFeatheringParams edgeFeatheringParams;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.scenecore.Texture? primaryAlphaMaskTexture;
    property public androidx.xr.scenecore.SurfaceEntity.Shape shape;
    property public int stereoMode;
    field public static final androidx.xr.scenecore.SurfaceEntity.Companion Companion;
  }

  public static final class SurfaceEntity.Companion {
    method @MainThread public androidx.xr.scenecore.SurfaceEntity create(androidx.xr.runtime.Session session);
    method @MainThread public androidx.xr.scenecore.SurfaceEntity create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.Pose pose);
    method @MainThread public androidx.xr.scenecore.SurfaceEntity create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.Pose pose, optional androidx.xr.scenecore.SurfaceEntity.Shape shape);
    method @MainThread public androidx.xr.scenecore.SurfaceEntity create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.Pose pose, optional androidx.xr.scenecore.SurfaceEntity.Shape shape, optional int stereoMode);
    method @MainThread public androidx.xr.scenecore.SurfaceEntity create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.Pose pose, optional androidx.xr.scenecore.SurfaceEntity.Shape shape, optional int stereoMode, optional int superSampling);
    method @MainThread public androidx.xr.scenecore.SurfaceEntity create(androidx.xr.runtime.Session session, optional androidx.xr.runtime.math.Pose pose, optional androidx.xr.scenecore.SurfaceEntity.Shape shape, optional int stereoMode, optional int superSampling, optional int surfaceProtection);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final class SurfaceEntity.ContentColorMetadata {
    ctor public SurfaceEntity.ContentColorMetadata();
    ctor public SurfaceEntity.ContentColorMetadata(optional int colorSpace, optional int colorTransfer, optional int colorRange, optional int maxContentLightLevel);
    method public int getColorRange();
    method public int getColorSpace();
    method public int getColorTransfer();
    method public int getMaxContentLightLevel();
    property public int colorRange;
    property public int colorSpace;
    property public int colorTransfer;
    property public int maxContentLightLevel;
    field public static final androidx.xr.scenecore.SurfaceEntity.ContentColorMetadata.Companion Companion;
    field public static final int MAX_CONTENT_LIGHT_LEVEL_UNKNOWN = 0; // 0x0
  }

  public static final class SurfaceEntity.ContentColorMetadata.ColorRange {
    property public static int COLOR_RANGE_FULL;
    property public static int COLOR_RANGE_LIMITED;
    field public static final int COLOR_RANGE_FULL = 1; // 0x1
    field public static final int COLOR_RANGE_LIMITED = 2; // 0x2
    field public static final androidx.xr.scenecore.SurfaceEntity.ContentColorMetadata.ColorRange INSTANCE;
  }

  public static final class SurfaceEntity.ContentColorMetadata.ColorSpace {
    property public static int COLOR_SPACE_ADOBE_RGB;
    property public static int COLOR_SPACE_BT2020;
    property public static int COLOR_SPACE_BT601_525;
    property public static int COLOR_SPACE_BT601_PAL;
    property public static int COLOR_SPACE_BT709;
    property public static int COLOR_SPACE_DCI_P3;
    property public static int COLOR_SPACE_DISPLAY_P3;
    field public static final int COLOR_SPACE_ADOBE_RGB = 243; // 0xf3
    field public static final int COLOR_SPACE_BT2020 = 6; // 0x6
    field public static final int COLOR_SPACE_BT601_525 = 240; // 0xf0
    field public static final int COLOR_SPACE_BT601_PAL = 2; // 0x2
    field public static final int COLOR_SPACE_BT709 = 1; // 0x1
    field public static final int COLOR_SPACE_DCI_P3 = 242; // 0xf2
    field public static final int COLOR_SPACE_DISPLAY_P3 = 241; // 0xf1
    field public static final androidx.xr.scenecore.SurfaceEntity.ContentColorMetadata.ColorSpace INSTANCE;
  }

  public static final class SurfaceEntity.ContentColorMetadata.ColorTransfer {
    property public static int COLOR_TRANSFER_GAMMA_2_2;
    property public static int COLOR_TRANSFER_HLG;
    property public static int COLOR_TRANSFER_LINEAR;
    property public static int COLOR_TRANSFER_SDR;
    property public static int COLOR_TRANSFER_SRGB;
    property public static int COLOR_TRANSFER_ST2084;
    field public static final int COLOR_TRANSFER_GAMMA_2_2 = 10; // 0xa
    field public static final int COLOR_TRANSFER_HLG = 7; // 0x7
    field public static final int COLOR_TRANSFER_LINEAR = 1; // 0x1
    field public static final int COLOR_TRANSFER_SDR = 3; // 0x3
    field public static final int COLOR_TRANSFER_SRGB = 2; // 0x2
    field public static final int COLOR_TRANSFER_ST2084 = 6; // 0x6
    field public static final androidx.xr.scenecore.SurfaceEntity.ContentColorMetadata.ColorTransfer INSTANCE;
  }

  public static final class SurfaceEntity.ContentColorMetadata.Companion {
    method public androidx.xr.scenecore.SurfaceEntity.ContentColorMetadata getDEFAULT_UNSET_CONTENT_COLOR_METADATA();
    property public androidx.xr.scenecore.SurfaceEntity.ContentColorMetadata DEFAULT_UNSET_CONTENT_COLOR_METADATA;
    property public static int MAX_CONTENT_LIGHT_LEVEL_UNKNOWN;
  }

  public abstract static class SurfaceEntity.EdgeFeatheringParams {
  }

  public static final class SurfaceEntity.EdgeFeatheringParams.NoFeathering extends androidx.xr.scenecore.SurfaceEntity.EdgeFeatheringParams {
    ctor public SurfaceEntity.EdgeFeatheringParams.NoFeathering();
  }

  public static final class SurfaceEntity.EdgeFeatheringParams.RectangleFeather extends androidx.xr.scenecore.SurfaceEntity.EdgeFeatheringParams {
    ctor public SurfaceEntity.EdgeFeatheringParams.RectangleFeather();
    ctor public SurfaceEntity.EdgeFeatheringParams.RectangleFeather(optional @FloatRange(from=0.0, to=0.5) float leftRight, optional @FloatRange(from=0.0, to=0.5) float topBottom);
    method public float getLeftRight();
    method public float getTopBottom();
    property public float leftRight;
    property public float topBottom;
  }

  public static interface SurfaceEntity.Shape {
  }

  public static final class SurfaceEntity.Shape.Hemisphere implements androidx.xr.scenecore.SurfaceEntity.Shape {
    ctor public SurfaceEntity.Shape.Hemisphere(float radius);
    method public float getRadius();
    property public float radius;
  }

  public static final class SurfaceEntity.Shape.Quad implements androidx.xr.scenecore.SurfaceEntity.Shape {
    ctor public SurfaceEntity.Shape.Quad(androidx.xr.runtime.math.FloatSize2d extents);
    method public androidx.xr.runtime.math.FloatSize2d getExtents();
    property public androidx.xr.runtime.math.FloatSize2d extents;
  }

  public static final class SurfaceEntity.Shape.Sphere implements androidx.xr.scenecore.SurfaceEntity.Shape {
    ctor public SurfaceEntity.Shape.Sphere(float radius);
    method public float getRadius();
    property public float radius;
  }

  public static final class SurfaceEntity.StereoMode {
    property public static int STEREO_MODE_MONO;
    property public static int STEREO_MODE_MULTIVIEW_LEFT_PRIMARY;
    property public static int STEREO_MODE_MULTIVIEW_RIGHT_PRIMARY;
    property public static int STEREO_MODE_SIDE_BY_SIDE;
    property public static int STEREO_MODE_TOP_BOTTOM;
    field public static final androidx.xr.scenecore.SurfaceEntity.StereoMode INSTANCE;
    field public static final int STEREO_MODE_MONO = 0; // 0x0
    field public static final int STEREO_MODE_MULTIVIEW_LEFT_PRIMARY = 4; // 0x4
    field public static final int STEREO_MODE_MULTIVIEW_RIGHT_PRIMARY = 5; // 0x5
    field public static final int STEREO_MODE_SIDE_BY_SIDE = 2; // 0x2
    field public static final int STEREO_MODE_TOP_BOTTOM = 1; // 0x1
  }

  public static final class SurfaceEntity.SuperSampling {
    property public static int SUPER_SAMPLING_NONE;
    property public static int SUPER_SAMPLING_PENTAGON;
    field public static final androidx.xr.scenecore.SurfaceEntity.SuperSampling INSTANCE;
    field public static final int SUPER_SAMPLING_NONE = 0; // 0x0
    field public static final int SUPER_SAMPLING_PENTAGON = 1; // 0x1
  }

  public static final class SurfaceEntity.SurfaceProtection {
    property public static int SURFACE_PROTECTION_NONE;
    property public static int SURFACE_PROTECTION_PROTECTED;
    field public static final androidx.xr.scenecore.SurfaceEntity.SurfaceProtection INSTANCE;
    field public static final int SURFACE_PROTECTION_NONE = 0; // 0x0
    field public static final int SURFACE_PROTECTION_PROTECTED = 1; // 0x1
  }

  public class Texture {
    method @MainThread public static final suspend Object? create(androidx.xr.runtime.Session session, java.nio.file.Path path, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.Texture>);
    method @MainThread public void dispose();
    field public static final androidx.xr.scenecore.Texture.Companion Companion;
  }

  public static final class Texture.Companion {
    method @MainThread public suspend Object? create(androidx.xr.runtime.Session session, java.nio.file.Path path, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.Texture>);
  }

  public final class TextureSampler {
    ctor public TextureSampler();
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public TextureSampler();
    ctor public TextureSampler(optional int minificationFilter);
    ctor public TextureSampler(optional int minificationFilter, optional int magnificationFilter);
    ctor public TextureSampler(optional int minificationFilter, optional int magnificationFilter, optional int wrapModeHorizontal);
    ctor public TextureSampler(optional int minificationFilter, optional int magnificationFilter, optional int wrapModeHorizontal, optional int wrapModeVertical);
    ctor public TextureSampler(optional int minificationFilter, optional int magnificationFilter, optional int wrapModeHorizontal, optional int wrapModeVertical, optional int wrapModeDepth);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public TextureSampler(optional int minificationFilter, optional int magnificationFilter, optional int wrapModeHorizontal, optional int wrapModeVertical, optional int wrapModeDepth, optional int compareMode, optional int compareFunction, optional @IntRange(from=0L) int anisotropyLog2);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public int getAnisotropyLog2();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public int getCompareFunction();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public int getCompareMode();
    method public int getMagnificationFilter();
    method public int getMinificationFilter();
    method public int getWrapModeDepth();
    method public int getWrapModeHorizontal();
    method public int getWrapModeVertical();
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public int anisotropyLog2;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public int compareFunction;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public int compareMode;
    property public int magnificationFilter;
    property public int minificationFilter;
    property public int wrapModeDepth;
    property public int wrapModeHorizontal;
    property public int wrapModeVertical;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int COMPARE_FUNCTION_ALWAYS = 6; // 0x6
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int COMPARE_FUNCTION_EQUAL = 4; // 0x4
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int COMPARE_FUNCTION_GREATER = 3; // 0x3
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int COMPARE_FUNCTION_GREATER_OR_EQUAL = 1; // 0x1
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int COMPARE_FUNCTION_LESSER = 2; // 0x2
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int COMPARE_FUNCTION_LESSER_OR_EQUAL = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int COMPARE_FUNCTION_NEVER = 7; // 0x7
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int COMPARE_FUNCTION_NOT_EQUAL = 5; // 0x5
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int COMPARE_MODE_COMPARE_TO_TEXTURE = 1; // 0x1
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int COMPARE_MODE_NONE = 0; // 0x0
    field public static final androidx.xr.scenecore.TextureSampler.Companion Companion;
    field public static final int MAGNIFICATION_FILTER_LINEAR = 1; // 0x1
    field public static final int MAGNIFICATION_FILTER_NEAREST = 0; // 0x0
    field public static final int MINIFICATION_FILTER_LINEAR = 1; // 0x1
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int MINIFICATION_FILTER_LINEAR_MIPMAP_LINEAR = 5; // 0x5
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int MINIFICATION_FILTER_LINEAR_MIPMAP_NEAREST = 3; // 0x3
    field public static final int MINIFICATION_FILTER_NEAREST = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int MINIFICATION_FILTER_NEAREST_MIPMAP_LINEAR = 4; // 0x4
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int MINIFICATION_FILTER_NEAREST_MIPMAP_NEAREST = 2; // 0x2
    field public static final int WRAP_MODE_CLAMP_TO_EDGE = 0; // 0x0
    field public static final int WRAP_MODE_MIRRORED_REPEAT = 2; // 0x2
    field public static final int WRAP_MODE_REPEAT = 1; // 0x1
  }

  public static final class TextureSampler.Companion {
    property public static int COMPARE_FUNCTION_ALWAYS;
    property public static int COMPARE_FUNCTION_EQUAL;
    property public static int COMPARE_FUNCTION_GREATER;
    property public static int COMPARE_FUNCTION_GREATER_OR_EQUAL;
    property public static int COMPARE_FUNCTION_LESSER;
    property public static int COMPARE_FUNCTION_LESSER_OR_EQUAL;
    property public static int COMPARE_FUNCTION_NEVER;
    property public static int COMPARE_FUNCTION_NOT_EQUAL;
    property public static int COMPARE_MODE_COMPARE_TO_TEXTURE;
    property public static int COMPARE_MODE_NONE;
    property public static int MAGNIFICATION_FILTER_LINEAR;
    property public static int MAGNIFICATION_FILTER_NEAREST;
    property public static int MINIFICATION_FILTER_LINEAR;
    property public static int MINIFICATION_FILTER_LINEAR_MIPMAP_LINEAR;
    property public static int MINIFICATION_FILTER_LINEAR_MIPMAP_NEAREST;
    property public static int MINIFICATION_FILTER_NEAREST;
    property public static int MINIFICATION_FILTER_NEAREST_MIPMAP_LINEAR;
    property public static int MINIFICATION_FILTER_NEAREST_MIPMAP_NEAREST;
    property public static int WRAP_MODE_CLAMP_TO_EDGE;
    property public static int WRAP_MODE_MIRRORED_REPEAT;
    property public static int WRAP_MODE_REPEAT;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class WaterMaterial extends androidx.xr.scenecore.Material {
    method @MainThread public static suspend Object? create(androidx.xr.runtime.Session session, boolean isAlphaMapVersion, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.WaterMaterial>);
    method @MainThread public void dispose();
    method @MainThread public void setAlphaMap(androidx.xr.scenecore.Texture alphaMap, androidx.xr.scenecore.TextureSampler sampler);
    method @MainThread public void setAlphaStepMultiplier(float alphaStepMultiplier);
    method @MainThread public void setNormalBoundary(float normalBoundary);
    method @MainThread public void setNormalMap(androidx.xr.scenecore.Texture normalMap, androidx.xr.scenecore.TextureSampler sampler);
    method @MainThread public void setNormalSpeed(float normalSpeed);
    method @MainThread public void setNormalTiling(float normalTiling);
    method @MainThread public void setNormalZ(float normalZ);
    method @MainThread public void setReflectionMap(androidx.xr.scenecore.CubeMapTexture reflectionMap, androidx.xr.scenecore.TextureSampler sampler);
    field public static final androidx.xr.scenecore.WaterMaterial.Companion Companion;
  }

  public static final class WaterMaterial.Companion {
    method @MainThread public suspend Object? create(androidx.xr.runtime.Session session, boolean isAlphaMapVersion, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.WaterMaterial>);
  }

}

package androidx.xr.scenecore.impl {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class JxrPlatformAdapterAxr implements androidx.xr.scenecore.internal.JxrPlatformAdapter {
    method public void addPerceivedResolutionChangedListener(java.util.concurrent.Executor, java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions!>);
    method public void addSpatialCapabilitiesChangedListener(java.util.concurrent.Executor, java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialCapabilities!>);
    method public androidx.xr.scenecore.internal.TextureResource? borrowReflectionTexture();
    method public void clearSpatialVisibilityChangedListener();
    method public static androidx.xr.scenecore.impl.JxrPlatformAdapterAxr create(android.app.Activity, boolean, java.util.concurrent.ScheduledExecutorService);
    method public static androidx.xr.scenecore.impl.JxrPlatformAdapterAxr create(android.app.Activity, java.util.concurrent.ScheduledExecutorService, boolean);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.scenecore.impl.JxrPlatformAdapterAxr create(android.app.Activity, java.util.concurrent.ScheduledExecutorService, com.android.extensions.xr.node.Node, com.android.extensions.xr.node.Node);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.scenecore.impl.JxrPlatformAdapterAxr create(android.app.Activity, java.util.concurrent.ScheduledExecutorService, com.android.extensions.xr.XrExtensions, androidx.xr.scenecore.impl.impress.ImpressApi?, androidx.xr.scenecore.impl.perception.PerceptionLibrary, com.google.androidxr.splitengine.SplitEngineSubspaceManager?, com.google.ar.imp.view.splitengine.ImpSplitEngineRenderer?);
    method public androidx.xr.scenecore.internal.ActivityPanelEntity createActivityPanelEntity(androidx.xr.runtime.math.Pose, androidx.xr.scenecore.internal.PixelDimensions, String, android.app.Activity, androidx.xr.scenecore.internal.Entity);
    method public androidx.xr.scenecore.internal.AnchorEntity createAnchorEntity(androidx.xr.arcore.internal.Anchor);
    method public androidx.xr.scenecore.internal.AnchorEntity createAnchorEntity(androidx.xr.scenecore.internal.Dimensions, androidx.xr.scenecore.internal.PlaneType, androidx.xr.scenecore.internal.PlaneSemantic, java.time.Duration);
    method public androidx.xr.scenecore.internal.AnchorPlacement createAnchorPlacementForPlanes(java.util.Set<androidx.xr.scenecore.internal.PlaneType!>, java.util.Set<androidx.xr.scenecore.internal.PlaneSemantic!>);
    method public androidx.xr.scenecore.internal.GltfEntity createGltfEntity(androidx.xr.runtime.math.Pose, androidx.xr.scenecore.internal.GltfModelResource, androidx.xr.scenecore.internal.Entity?);
    method public androidx.xr.scenecore.internal.Entity createGroupEntity(androidx.xr.runtime.math.Pose, String, androidx.xr.scenecore.internal.Entity);
    method public androidx.xr.scenecore.internal.InteractableComponent createInteractableComponent(java.util.concurrent.Executor, androidx.xr.scenecore.internal.InputEventListener);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.MaterialResource!> createKhronosPbrMaterial(androidx.xr.scenecore.internal.KhronosPbrMaterialSpec);
    method public androidx.xr.scenecore.internal.LoggingEntity createLoggingEntity(androidx.xr.runtime.math.Pose);
    method public androidx.xr.scenecore.internal.MovableComponent createMovableComponent(boolean, boolean, java.util.Set<androidx.xr.scenecore.internal.AnchorPlacement!>, boolean);
    method public androidx.xr.scenecore.internal.PanelEntity createPanelEntity(android.content.Context, androidx.xr.runtime.math.Pose, android.view.View, androidx.xr.scenecore.internal.Dimensions, String, androidx.xr.scenecore.internal.Entity);
    method public androidx.xr.scenecore.internal.PanelEntity createPanelEntity(android.content.Context, androidx.xr.runtime.math.Pose, android.view.View, androidx.xr.scenecore.internal.PixelDimensions, String, androidx.xr.scenecore.internal.Entity);
    method public androidx.xr.scenecore.internal.AnchorEntity createPersistedAnchorEntity(java.util.UUID, java.time.Duration);
    method public androidx.xr.scenecore.internal.PointerCaptureComponent createPointerCaptureComponent(java.util.concurrent.Executor, androidx.xr.scenecore.internal.PointerCaptureComponent.StateListener, androidx.xr.scenecore.internal.InputEventListener);
    method public androidx.xr.scenecore.internal.ResizableComponent createResizableComponent(androidx.xr.scenecore.internal.Dimensions, androidx.xr.scenecore.internal.Dimensions);
    method public androidx.xr.scenecore.internal.SpatialPointerComponent createSpatialPointerComponent();
    method public androidx.xr.scenecore.internal.SubspaceNodeEntity createSubspaceNodeEntity(androidx.xr.runtime.SubspaceNodeHolder<? extends java.lang.Object!>, androidx.xr.scenecore.internal.Dimensions);
    method public androidx.xr.scenecore.internal.SurfaceEntity createSurfaceEntity(@androidx.xr.scenecore.internal.SurfaceEntity.StereoMode int, androidx.xr.runtime.math.Pose, androidx.xr.scenecore.internal.SurfaceEntity.Shape, @androidx.xr.scenecore.internal.SurfaceEntity.SurfaceProtection int, @androidx.xr.scenecore.internal.SurfaceEntity.SuperSampling int, androidx.xr.scenecore.internal.Entity);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.MaterialResource!> createWaterMaterial(boolean);
    method public void destroyKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource);
    method public void destroyTexture(androidx.xr.scenecore.internal.TextureResource);
    method public void destroyWaterMaterial(androidx.xr.scenecore.internal.MaterialResource);
    method public void dispose();
    method public void enablePanelDepthTest(boolean);
    method public androidx.xr.scenecore.internal.ActivitySpace getActivitySpace();
    method public androidx.xr.scenecore.internal.Entity getActivitySpaceRootImpl();
    method public androidx.xr.scenecore.internal.AudioTrackExtensionsWrapper getAudioTrackExtensionsWrapper();
    method public androidx.xr.scenecore.internal.CameraViewActivityPose? getCameraViewActivityPose(@androidx.xr.scenecore.internal.CameraViewActivityPose.CameraType int);
    method public androidx.xr.scenecore.internal.HeadActivityPose? getHeadActivityPose();
    method public androidx.xr.scenecore.internal.PanelEntity getMainPanelEntity();
    method public androidx.xr.scenecore.internal.MediaPlayerExtensionsWrapper getMediaPlayerExtensionsWrapper();
    method public long getNativeInstance();
    method public long getNativeSession();
    method public androidx.xr.scenecore.internal.PerceptionSpaceActivityPose getPerceptionSpaceActivityPose();
    method public androidx.xr.scenecore.internal.TextureResource? getReflectionTextureFromIbl(androidx.xr.scenecore.internal.ExrImageResource);
    method public androidx.xr.scenecore.internal.SoundPoolExtensionsWrapper getSoundPoolExtensionsWrapper();
    method public androidx.xr.scenecore.internal.SpatialCapabilities getSpatialCapabilities();
    method public androidx.xr.scenecore.internal.SpatialEnvironment getSpatialEnvironment();
    method public androidx.xr.scenecore.internal.SpatialModeChangeListener getSpatialModeChangeListener();
    method public androidx.xr.scenecore.impl.perception.ViewProjections? getStereoViewsInOpenXrUnboundedSpace();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.ExrImageResource!> loadExrImageByAssetName(String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.ExrImageResource!> loadExrImageByByteArray(byte[], String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.GltfModelResource!> loadGltfByAssetName(String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.GltfModelResource!> loadGltfByByteArray(byte[], String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.TextureResource!> loadTexture(String);
    method public void removePerceivedResolutionChangedListener(java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions!>);
    method public void removeSpatialCapabilitiesChangedListener(java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialCapabilities!>);
    method public void requestFullSpaceMode();
    method public void requestHomeSpaceMode();
    method public void setAlphaCutoffOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, float);
    method public void setAlphaMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setAlphaStepMultiplierOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource, float);
    method public void setAmbientOcclusionFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, float);
    method public void setAmbientOcclusionTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setAmbientOcclusionUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.runtime.math.Matrix3);
    method public void setBaseColorFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.runtime.math.Vector4);
    method public void setBaseColorTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setBaseColorUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.runtime.math.Matrix3);
    method public void setClearcoatFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, float, float, float);
    method public void setClearcoatNormalTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setClearcoatRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setClearcoatTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setEmissiveFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.runtime.math.Vector3);
    method public void setEmissiveTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setEmissiveUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.runtime.math.Matrix3);
    method public android.os.Bundle setFullSpaceMode(android.os.Bundle);
    method public android.os.Bundle setFullSpaceModeWithEnvironmentInherited(android.os.Bundle);
    method public void setIndexOfRefractionOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, float);
    method public void setMetallicFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, float);
    method public void setMetallicRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setMetallicRoughnessUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.runtime.math.Matrix3);
    method public void setNormalBoundaryOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource, float);
    method public void setNormalFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, float);
    method public void setNormalMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setNormalSpeedOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource, float);
    method public void setNormalTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setNormalTilingOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource, float);
    method public void setNormalUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.runtime.math.Matrix3);
    method public void setNormalZOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource, float);
    method public void setPreferredAspectRatio(android.app.Activity, float);
    method public void setReflectionMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setRoughnessFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, float);
    method public void setSheenColorFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.runtime.math.Vector3);
    method public void setSheenColorTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setSheenRoughnessFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, float);
    method public void setSheenRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setSpatialModeChangeListener(androidx.xr.scenecore.internal.SpatialModeChangeListener);
    method public void setSpatialVisibilityChangedListener(java.util.concurrent.Executor, java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialVisibility!>);
    method public void setSplitEngineSubspaceManager(com.google.androidxr.splitengine.SplitEngineSubspaceManager?);
    method public void setTransmissionFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, float);
    method public void setTransmissionTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.scenecore.internal.TextureResource, androidx.xr.scenecore.internal.TextureSampler);
    method public void setTransmissionUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource, androidx.xr.runtime.math.Matrix3);
    method public void startRenderer();
    method public void stopRenderer();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class JxrPlatformAdapterFactoryAxr implements androidx.xr.runtime.internal.JxrPlatformAdapterFactory {
    ctor public JxrPlatformAdapterFactoryAxr();
    method public androidx.xr.scenecore.impl.JxrPlatformAdapterAxr createPlatformAdapter(android.app.Activity activity, boolean unscaledGravityAlignedActivitySpace);
    method public java.util.Set<androidx.xr.runtime.internal.Feature> getRequirements();
    property public java.util.Set<androidx.xr.runtime.internal.Feature> requirements;
  }

  public final class Matrix4Ext {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.runtime.math.Matrix4 getUnscaled(androidx.xr.runtime.math.Matrix4);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class MediaUtils {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SubspaceNodeEntityImpl implements androidx.xr.scenecore.internal.ActivityPose androidx.xr.scenecore.internal.Entity androidx.xr.scenecore.internal.SubspaceNodeEntity {
    method public void addChild(androidx.xr.scenecore.internal.Entity);
    method public void addChildren(java.util.List<? extends androidx.xr.scenecore.internal.Entity!>);
    method public boolean addComponent(androidx.xr.scenecore.internal.Component);
    method public void addInputEventListener(java.util.concurrent.Executor, androidx.xr.scenecore.internal.InputEventListener);
    method public void addReformEventConsumer(com.android.extensions.xr.function.Consumer<com.android.extensions.xr.node.ReformEvent!>!, java.util.concurrent.Executor!);
    method public void dispose();
    method public androidx.xr.runtime.math.Pose getActivitySpacePose();
    method public androidx.xr.runtime.math.Vector3 getActivitySpaceScale();
    method public float getAlpha(@androidx.xr.scenecore.internal.SpaceValue int);
    method public java.util.List<androidx.xr.scenecore.internal.Entity!> getChildren();
    method public java.util.List<androidx.xr.scenecore.internal.Component!> getComponents();
    method public <T extends androidx.xr.scenecore.internal.Component> java.util.List<T!> getComponentsOfType(Class<? extends T!>);
    method public CharSequence getContentDescription();
    method public com.android.extensions.xr.node.Node! getNode();
    method public androidx.xr.scenecore.internal.Entity? getParent();
    method public androidx.xr.runtime.math.Pose getPose(@androidx.xr.scenecore.internal.SpaceValue int);
    method public androidx.xr.runtime.math.Pose! getPoseInActivitySpace();
    method public com.android.extensions.xr.node.ReformOptions! getReformOptions();
    method public androidx.xr.runtime.math.Vector3 getScale(@androidx.xr.scenecore.internal.SpaceValue int);
    method public androidx.xr.scenecore.internal.Dimensions getSize();
    method public androidx.xr.runtime.math.Vector3 getWorldSpaceScale();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.HitTestResult!> hitTest(androidx.xr.runtime.math.Vector3, androidx.xr.runtime.math.Vector3, @androidx.xr.scenecore.internal.ActivityPose.HitTestFilterValue int);
    method public boolean isHidden(boolean);
    method public void removeAllComponents();
    method public void removeComponent(androidx.xr.scenecore.internal.Component);
    method public void removeInputEventListener(androidx.xr.scenecore.internal.InputEventListener);
    method public void removeReformEventConsumer(com.android.extensions.xr.function.Consumer<com.android.extensions.xr.node.ReformEvent!>!);
    method public boolean requestPointerCapture(java.util.concurrent.Executor!, androidx.xr.scenecore.internal.InputEventListener!, androidx.xr.scenecore.internal.PointerCaptureComponent.StateListener!);
    method public void setAlpha(float, @androidx.xr.scenecore.internal.SpaceValue int);
    method public void setContentDescription(CharSequence);
    method public void setHidden(boolean);
    method public void setParent(androidx.xr.scenecore.internal.Entity!);
    method public void setPose(androidx.xr.runtime.math.Pose, @androidx.xr.scenecore.internal.SpaceValue int);
    method public void setScale(androidx.xr.runtime.math.Vector3, @androidx.xr.scenecore.internal.SpaceValue int);
    method public void setSize(androidx.xr.scenecore.internal.Dimensions);
    method public void stopPointerCapture();
    method public androidx.xr.runtime.math.Pose transformPoseTo(androidx.xr.runtime.math.Pose, androidx.xr.scenecore.internal.ActivityPose);
    method public void updateReformOptions();
  }

}

package androidx.xr.scenecore.impl.extensions {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class XrExtensionsProvider {
    method public static com.android.extensions.xr.XrExtensions? getXrExtensions();
  }

}

package androidx.xr.scenecore.impl.impress {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class BindingsObjectPhantomReference extends java.lang.ref.PhantomReference<java.lang.Object!> {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract class BindingsResource {
    ctor protected BindingsResource(androidx.xr.scenecore.impl.impress.BindingsResourceManager, long);
    method public final void destroy();
    method public long getNativeHandle();
    method protected abstract void releaseBindingsResource(long);
    method protected void throwIfDestroyed();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class BindingsResourceManager {
    ctor public BindingsResourceManager(android.os.Handler);
    method public void register(Object, Runnable);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class FakeImpressApiImpl implements androidx.xr.scenecore.impl.impress.ImpressApi {
    ctor public FakeImpressApiImpl();
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Void!> animateGltfModel(int, String?, boolean);
    method public androidx.xr.scenecore.impl.impress.Texture borrowReflectionTexture();
    method public void clearPreferredEnvironmentIblAsset();
    method public int createImpressNode();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.impl.impress.KhronosPbrMaterial!> createKhronosPbrMaterial(androidx.xr.scenecore.internal.KhronosPbrMaterialSpec);
    method public int createStereoSurface(@androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode int);
    method public int createStereoSurface(@androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode int, @androidx.xr.scenecore.impl.impress.ImpressApi.ContentSecurityLevel int);
    method public int createStereoSurface(@androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode int, @androidx.xr.scenecore.impl.impress.ImpressApi.ContentSecurityLevel int, boolean);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.impl.impress.WaterMaterial!> createWaterMaterial(boolean);
    method public void destroyImpressNode(int);
    method public void destroyNativeObject(long);
    method public void disposeAllResources();
    method public androidx.xr.scenecore.impl.impress.BindingsResourceManager getBindingsResourceManager();
    method public long getCurrentEnvironmentLight();
    method public java.util.Map<java.lang.Long!,java.util.List<java.lang.Integer!>!> getGltfModels();
    method public java.util.List<java.lang.Long!> getImageBasedLightingAssets();
    method public int getImpressNodeParent(int);
    method public java.util.Map<androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.GltfNodeData!,androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.GltfNodeData!> getImpressNodes();
    method public java.util.List<java.lang.Integer!> getImpressNodesForToken(long);
    method public java.util.Map<java.lang.Long!,androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.MaterialData!> getMaterials();
    method public androidx.xr.scenecore.impl.impress.Texture getReflectionTextureFromIbl(long);
    method public java.util.Map<java.lang.Integer!,androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.StereoSurfaceEntityData!> getStereoSurfaceEntities();
    method public android.view.Surface getSurfaceFromStereoSurface(int);
    method public java.util.Map<java.lang.Long!,androidx.xr.scenecore.impl.impress.Texture!> getTextureImages();
    method public int impressNodeAnimatingSize();
    method public boolean impressNodeHasParent(int);
    method public int impressNodeLoopAnimatingSize();
    method public int instanceGltfModel(long);
    method public int instanceGltfModel(long, boolean);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long!> loadGltfAsset(byte[], String);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long!> loadGltfAsset(String);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long!> loadImageBasedLightingAsset(byte[], String);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long!> loadImageBasedLightingAsset(String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.impl.impress.Texture!> loadTexture(String);
    method public void onPause();
    method public void onResume();
    method public void releaseGltfAsset(long);
    method public void releaseImageBasedLightingAsset(long);
    method public void resetContentColorMetadataForStereoSurface(int);
    method public void setAlphaCutoffOnKhronosPbrMaterial(long, float);
    method public void setAlphaMapOnWaterMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setAlphaStepMultiplierOnWaterMaterial(long, float);
    method public void setAlphaStepUOnWaterMaterial(long, float, float, float, float);
    method public void setAlphaStepVOnWaterMaterial(long, float, float, float, float);
    method public void setAmbientOcclusionFactorOnKhronosPbrMaterial(long, float);
    method public void setAmbientOcclusionTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setAmbientOcclusionUvTransformOnKhronosPbrMaterial(long, float, float, float, float, float, float, float, float, float);
    method public void setAuxiliaryAlphaMaskForStereoSurface(int, long);
    method public void setBaseColorFactorsOnKhronosPbrMaterial(long, float, float, float, float);
    method public void setBaseColorTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setBaseColorUvTransformOnKhronosPbrMaterial(long, float, float, float, float, float, float, float, float, float);
    method public void setClearcoatFactorsOnKhronosPbrMaterial(long, float, float, float);
    method public void setClearcoatNormalTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setClearcoatRoughnessTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setClearcoatTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setContentColorMetadataForStereoSurface(int, @androidx.xr.scenecore.impl.impress.ImpressApi.ColorSpace int, @androidx.xr.scenecore.impl.impress.ImpressApi.ColorTransfer int, @androidx.xr.scenecore.impl.impress.ImpressApi.ColorRange int, int);
    method public void setEmissiveFactorsOnKhronosPbrMaterial(long, float, float, float);
    method public void setEmissiveTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setEmissiveUvTransformOnKhronosPbrMaterial(long, float, float, float, float, float, float, float, float, float);
    method public void setFeatherRadiusForStereoSurface(int, float, float);
    method public void setGltfModelColliderEnabled(int, boolean);
    method public void setImpressNodeParent(int, int);
    method public void setIndexOfRefractionOnKhronosPbrMaterial(long, float);
    method public void setMaterialOverride(int, long, String);
    method public void setMetallicFactorOnKhronosPbrMaterial(long, float);
    method public void setMetallicRoughnessTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setMetallicRoughnessUvTransformOnKhronosPbrMaterial(long, float, float, float, float, float, float, float, float, float);
    method public void setNormalBoundaryOnWaterMaterial(long, float);
    method public void setNormalFactorOnKhronosPbrMaterial(long, float);
    method public void setNormalMapOnWaterMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setNormalSpeedOnWaterMaterial(long, float);
    method public void setNormalTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setNormalTilingOnWaterMaterial(long, float);
    method public void setNormalUvTransformOnKhronosPbrMaterial(long, float, float, float, float, float, float, float, float, float);
    method public void setNormalZOnWaterMaterial(long, float);
    method public void setPreferredEnvironmentLight(long);
    method public void setPrimaryAlphaMaskForStereoSurface(int, long);
    method public void setReflectionMapOnWaterMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setRoughnessFactorOnKhronosPbrMaterial(long, float);
    method public void setSheenColorFactorsOnKhronosPbrMaterial(long, float, float, float);
    method public void setSheenColorTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setSheenRoughnessFactorOnKhronosPbrMaterial(long, float);
    method public void setSheenRoughnessTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setStereoModeForStereoSurface(int, @androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode int);
    method public void setStereoSurfaceEntityCanvasShapeHemisphere(int, float);
    method public void setStereoSurfaceEntityCanvasShapeQuad(int, float, float);
    method public void setStereoSurfaceEntityCanvasShapeSphere(int, float);
    method public void setTransmissionFactorOnKhronosPbrMaterial(long, float);
    method public void setTransmissionTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setTransmissionUvTransformOnKhronosPbrMaterial(long, float, float, float, float, float, float, float, float, float);
    method public void setup(com.google.ar.imp.view.View);
    method public void stopGltfModelAnimation(int);
  }

  public static class FakeImpressApiImpl.GltfNodeData {
    ctor public FakeImpressApiImpl.GltfNodeData();
    method public int getEntityId();
    method public androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.MaterialData? getMaterialOverride();
    method public void setEntityId(int);
    method public void setMaterialOverride(androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.MaterialData?);
  }

  public static class FakeImpressApiImpl.MaterialData {
    ctor public FakeImpressApiImpl.MaterialData(androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.MaterialData.Type, long);
    method public long getMaterialHandle();
    method public androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.MaterialData.Type getType();
  }

  public enum FakeImpressApiImpl.MaterialData.Type {
    enum_constant public static final androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.MaterialData.Type GENERIC;
    enum_constant public static final androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.MaterialData.Type KHRONOS_PBR;
    enum_constant public static final androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.MaterialData.Type WATER;
    enum_constant public static final androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.MaterialData.Type WATER_ALPHA;
  }

  public static class FakeImpressApiImpl.StereoSurfaceEntityData {
    ctor public FakeImpressApiImpl.StereoSurfaceEntityData();
    method public androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.StereoSurfaceEntityData.CanvasShape? getCanvasShape();
    method public float getFeatherRadiusX();
    method public float getFeatherRadiusY();
    method public float getHeight();
    method public float getRadius();
    method @androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode public int getStereoMode();
    method public android.view.Surface? getSurface();
    method public float getWidth();
  }

  public enum FakeImpressApiImpl.StereoSurfaceEntityData.CanvasShape {
    enum_constant public static final androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.StereoSurfaceEntityData.CanvasShape QUAD;
    enum_constant public static final androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.StereoSurfaceEntityData.CanvasShape VR_180_HEMISPHERE;
    enum_constant public static final androidx.xr.scenecore.impl.impress.FakeImpressApiImpl.StereoSurfaceEntityData.CanvasShape VR_360_SPHERE;
  }

  public static class FakeImpressApiImpl.TestSurface extends android.view.Surface {
    ctor public FakeImpressApiImpl.TestSurface(int);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ImpressApi {
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Void?> animateGltfModel(int impressNode, String? animationName, boolean looping);
    method public androidx.xr.scenecore.impl.impress.Texture borrowReflectionTexture();
    method public void clearPreferredEnvironmentIblAsset();
    method public int createImpressNode();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.impl.impress.KhronosPbrMaterial> createKhronosPbrMaterial(androidx.xr.scenecore.internal.KhronosPbrMaterialSpec spec);
    method public int createStereoSurface(@androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode int stereoMode);
    method public int createStereoSurface(@androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode int stereoMode, @androidx.xr.scenecore.impl.impress.ImpressApi.ContentSecurityLevel int contentSecurityLevel);
    method public int createStereoSurface(@androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode int stereoMode, @androidx.xr.scenecore.impl.impress.ImpressApi.ContentSecurityLevel int contentSecurityLevel, boolean useSuperSampling);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.impl.impress.WaterMaterial> createWaterMaterial(boolean isAlphaMapVersion);
    method public void destroyImpressNode(int impressNode);
    method public void destroyNativeObject(long nativeHandle);
    method public void disposeAllResources();
    method public androidx.xr.scenecore.impl.impress.BindingsResourceManager getBindingsResourceManager();
    method public androidx.xr.scenecore.impl.impress.Texture getReflectionTextureFromIbl(long iblToken);
    method public android.view.Surface getSurfaceFromStereoSurface(int panelImpressNode);
    method public int instanceGltfModel(long gltfToken);
    method public int instanceGltfModel(long gltfToken, boolean enableCollider);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long> loadGltfAsset(byte[] data, String key);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long> loadGltfAsset(String path);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long> loadImageBasedLightingAsset(byte[] data, String key);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long> loadImageBasedLightingAsset(String path);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.impl.impress.Texture> loadTexture(String path);
    method public void onPause();
    method public void onResume();
    method public void releaseGltfAsset(long gltfToken);
    method public void releaseImageBasedLightingAsset(long iblToken);
    method public void resetContentColorMetadataForStereoSurface(int stereoSurfaceNode);
    method public void setAlphaCutoffOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float alphaCutoff);
    method public void setAlphaMapOnWaterMaterial(long nativeWaterMaterial, long alphaMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setAlphaStepMultiplierOnWaterMaterial(long nativeWaterMaterial, float alphaStepMultiplier);
    method public void setAlphaStepUOnWaterMaterial(long nativeWaterMaterial, float x, float y, float z, float w);
    method public void setAlphaStepVOnWaterMaterial(long nativeWaterMaterial, float x, float y, float z, float w);
    method public void setAmbientOcclusionFactorOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float factor);
    method public void setAmbientOcclusionTextureOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, long ambientOcclusionTexture, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setAmbientOcclusionUvTransformOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float ux, float uy, float uz, float vx, float vy, float vz, float wx, float wy, float wz);
    method public void setAuxiliaryAlphaMaskForStereoSurface(int panelImpressNode, long alphaMask);
    method public void setBaseColorFactorsOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float x, float y, float z, float w);
    method public void setBaseColorTextureOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, long baseColorTexture, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setBaseColorUvTransformOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float ux, float uy, float uz, float vx, float vy, float vz, float wx, float wy, float wz);
    method public void setClearcoatFactorsOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float intensity, float roughness, float normal);
    method public void setClearcoatNormalTextureOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, long clearcoatNormalTexture, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setClearcoatRoughnessTextureOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, long clearcoatRoughnessTexture, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setClearcoatTextureOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, long clearcoatTexture, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setContentColorMetadataForStereoSurface(int stereoSurfaceNode, @androidx.xr.scenecore.impl.impress.ImpressApi.ColorSpace int colorSpace, @androidx.xr.scenecore.impl.impress.ImpressApi.ColorTransfer int colorTransfer, @androidx.xr.scenecore.impl.impress.ImpressApi.ColorRange int colorRange, int maxLuminance);
    method public void setEmissiveFactorsOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float x, float y, float z);
    method public void setEmissiveTextureOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, long emissiveTexture, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setEmissiveUvTransformOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float ux, float uy, float uz, float vx, float vy, float vz, float wx, float wy, float wz);
    method public void setFeatherRadiusForStereoSurface(int panelImpressNode, float radiusX, float radiusY);
    method public void setGltfModelColliderEnabled(int impressNode, boolean enableCollider);
    method public void setImpressNodeParent(int impressNodeChild, int impressNodeParent);
    method public void setIndexOfRefractionOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float indexOfRefraction);
    method public void setMaterialOverride(int impressNode, long nativeMaterial, String meshName);
    method public void setMetallicFactorOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float factor);
    method public void setMetallicRoughnessTextureOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, long metallicRoughnessTexture, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setMetallicRoughnessUvTransformOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float ux, float uy, float uz, float vx, float vy, float vz, float wx, float wy, float wz);
    method public void setNormalBoundaryOnWaterMaterial(long nativeWaterMaterial, float boundary);
    method public void setNormalFactorOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float factor);
    method public void setNormalMapOnWaterMaterial(long nativeWaterMaterial, long normalMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setNormalSpeedOnWaterMaterial(long nativeWaterMaterial, float normalSpeed);
    method public void setNormalTextureOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, long normalTexture, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setNormalTilingOnWaterMaterial(long nativeWaterMaterial, float normalTiling);
    method public void setNormalUvTransformOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float ux, float uy, float uz, float vx, float vy, float vz, float wx, float wy, float wz);
    method public void setNormalZOnWaterMaterial(long nativeWaterMaterial, float normalZ);
    method public void setPreferredEnvironmentLight(long iblToken);
    method public void setPrimaryAlphaMaskForStereoSurface(int panelImpressNode, long alphaMask);
    method public void setReflectionMapOnWaterMaterial(long nativeWaterMaterial, long reflectionMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setRoughnessFactorOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float factor);
    method public void setSheenColorFactorsOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float x, float y, float z);
    method public void setSheenColorTextureOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, long sheenColorTexture, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setSheenRoughnessFactorOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float factor);
    method public void setSheenRoughnessTextureOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, long sheenRoughnessTexture, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setStereoModeForStereoSurface(int panelImpressNode, @androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode int stereoMode);
    method public void setStereoSurfaceEntityCanvasShapeHemisphere(int impressNode, float radius);
    method public void setStereoSurfaceEntityCanvasShapeQuad(int impressNode, float width, float height);
    method public void setStereoSurfaceEntityCanvasShapeSphere(int impressNode, float radius);
    method public void setTransmissionFactorOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float factor);
    method public void setTransmissionTextureOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, long transmissionTexture, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setTransmissionUvTransformOnKhronosPbrMaterial(long nativeKhronosPbrMaterial, float ux, float uy, float uz, float vx, float vy, float vz, float wx, float wy, float wz);
    method public void setup(com.google.ar.imp.view.View view);
    method public void stopGltfModelAnimation(int impressNode);
    field public static final androidx.xr.scenecore.impl.impress.ImpressApi.Companion Companion;
    field public static final int MAX_CONTENT_LIGHT_LEVEL_UNKNOWN = 0; // 0x0
  }

  @IntDef({androidx.xr.scenecore.impl.impress.ImpressApi.ColorRange.Companion.FULL, androidx.xr.scenecore.impl.impress.ImpressApi.ColorRange.Companion.LIMITED}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) public static @interface ImpressApi.ColorRange {
    field public static final androidx.xr.scenecore.impl.impress.ImpressApi.ColorRange.Companion Companion;
    field public static final int FULL = 1; // 0x1
    field public static final int LIMITED = 2; // 0x2
  }

  public static final class ImpressApi.ColorRange.Companion {
    property public static int FULL;
    property public static int LIMITED;
    field public static final int FULL = 1; // 0x1
    field public static final int LIMITED = 2; // 0x2
  }

  @IntDef({androidx.xr.scenecore.impl.impress.ImpressApi.ColorSpace.Companion.BT709, androidx.xr.scenecore.impl.impress.ImpressApi.ColorSpace.Companion.BT601_PAL, androidx.xr.scenecore.impl.impress.ImpressApi.ColorSpace.Companion.BT2020, androidx.xr.scenecore.impl.impress.ImpressApi.ColorSpace.Companion.BT601_525, androidx.xr.scenecore.impl.impress.ImpressApi.ColorSpace.Companion.DISPLAY_P3, androidx.xr.scenecore.impl.impress.ImpressApi.ColorSpace.Companion.DCI_P3, androidx.xr.scenecore.impl.impress.ImpressApi.ColorSpace.Companion.ADOBE_RGB}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) public static @interface ImpressApi.ColorSpace {
    field public static final int ADOBE_RGB = 243; // 0xf3
    field public static final int BT2020 = 6; // 0x6
    field public static final int BT601_525 = 240; // 0xf0
    field public static final int BT601_PAL = 2; // 0x2
    field public static final int BT709 = 1; // 0x1
    field public static final androidx.xr.scenecore.impl.impress.ImpressApi.ColorSpace.Companion Companion;
    field public static final int DCI_P3 = 242; // 0xf2
    field public static final int DISPLAY_P3 = 241; // 0xf1
  }

  public static final class ImpressApi.ColorSpace.Companion {
    property public static int ADOBE_RGB;
    property public static int BT2020;
    property public static int BT601_525;
    property public static int BT601_PAL;
    property public static int BT709;
    property public static int DCI_P3;
    property public static int DISPLAY_P3;
    field public static final int ADOBE_RGB = 243; // 0xf3
    field public static final int BT2020 = 6; // 0x6
    field public static final int BT601_525 = 240; // 0xf0
    field public static final int BT601_PAL = 2; // 0x2
    field public static final int BT709 = 1; // 0x1
    field public static final int DCI_P3 = 242; // 0xf2
    field public static final int DISPLAY_P3 = 241; // 0xf1
  }

  @IntDef({androidx.xr.scenecore.impl.impress.ImpressApi.ColorTransfer.Companion.LINEAR, androidx.xr.scenecore.impl.impress.ImpressApi.ColorTransfer.Companion.SRGB, androidx.xr.scenecore.impl.impress.ImpressApi.ColorTransfer.Companion.SDR, androidx.xr.scenecore.impl.impress.ImpressApi.ColorTransfer.Companion.GAMMA_2_2, androidx.xr.scenecore.impl.impress.ImpressApi.ColorTransfer.Companion.ST2084, androidx.xr.scenecore.impl.impress.ImpressApi.ColorTransfer.Companion.HLG}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) public static @interface ImpressApi.ColorTransfer {
    field public static final androidx.xr.scenecore.impl.impress.ImpressApi.ColorTransfer.Companion Companion;
    field public static final int GAMMA_2_2 = 10; // 0xa
    field public static final int HLG = 7; // 0x7
    field public static final int LINEAR = 1; // 0x1
    field public static final int SDR = 3; // 0x3
    field public static final int SRGB = 2; // 0x2
    field public static final int ST2084 = 6; // 0x6
  }

  public static final class ImpressApi.ColorTransfer.Companion {
    property public static int GAMMA_2_2;
    property public static int HLG;
    property public static int LINEAR;
    property public static int SDR;
    property public static int SRGB;
    property public static int ST2084;
    field public static final int GAMMA_2_2 = 10; // 0xa
    field public static final int HLG = 7; // 0x7
    field public static final int LINEAR = 1; // 0x1
    field public static final int SDR = 3; // 0x3
    field public static final int SRGB = 2; // 0x2
    field public static final int ST2084 = 6; // 0x6
  }

  public static final class ImpressApi.Companion {
    property public static int MAX_CONTENT_LIGHT_LEVEL_UNKNOWN;
    field public static final int MAX_CONTENT_LIGHT_LEVEL_UNKNOWN = 0; // 0x0
  }

  @IntDef({androidx.xr.scenecore.impl.impress.ImpressApi.ContentSecurityLevel.Companion.NONE, androidx.xr.scenecore.impl.impress.ImpressApi.ContentSecurityLevel.Companion.PROTECTED}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) public static @interface ImpressApi.ContentSecurityLevel {
    field public static final androidx.xr.scenecore.impl.impress.ImpressApi.ContentSecurityLevel.Companion Companion;
    field public static final int NONE = 0; // 0x0
    field public static final int PROTECTED = 1; // 0x1
  }

  public static final class ImpressApi.ContentSecurityLevel.Companion {
    property public static int NONE;
    property public static int PROTECTED;
    field public static final int NONE = 0; // 0x0
    field public static final int PROTECTED = 1; // 0x1
  }

  @IntDef({androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode.Companion.MONO, androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode.Companion.TOP_BOTTOM, androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode.Companion.SIDE_BY_SIDE, androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode.Companion.MULTIVIEW_LEFT_PRIMARY, androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode.Companion.MULTIVIEW_RIGHT_PRIMARY}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) public static @interface ImpressApi.StereoMode {
    field public static final androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode.Companion Companion;
    field public static final int MONO = 0; // 0x0
    field public static final int MULTIVIEW_LEFT_PRIMARY = 4; // 0x4
    field public static final int MULTIVIEW_RIGHT_PRIMARY = 5; // 0x5
    field public static final int SIDE_BY_SIDE = 2; // 0x2
    field public static final int TOP_BOTTOM = 1; // 0x1
  }

  public static final class ImpressApi.StereoMode.Companion {
    property public static int MONO;
    property public static int MULTIVIEW_LEFT_PRIMARY;
    property public static int MULTIVIEW_RIGHT_PRIMARY;
    property public static int SIDE_BY_SIDE;
    property public static int TOP_BOTTOM;
    field public static final int MONO = 0; // 0x0
    field public static final int MULTIVIEW_LEFT_PRIMARY = 4; // 0x4
    field public static final int MULTIVIEW_RIGHT_PRIMARY = 5; // 0x5
    field public static final int SIDE_BY_SIDE = 2; // 0x2
    field public static final int TOP_BOTTOM = 1; // 0x1
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ImpressApiImpl implements androidx.xr.scenecore.impl.impress.ImpressApi {
    ctor public ImpressApiImpl();
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Void!> animateGltfModel(int, String?, boolean);
    method public androidx.xr.scenecore.impl.impress.Texture borrowReflectionTexture();
    method public void clearPreferredEnvironmentIblAsset();
    method public int createImpressNode();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.impl.impress.KhronosPbrMaterial!> createKhronosPbrMaterial(androidx.xr.scenecore.internal.KhronosPbrMaterialSpec);
    method public int createStereoSurface(@androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode int);
    method public int createStereoSurface(@androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode int, @androidx.xr.scenecore.impl.impress.ImpressApi.ContentSecurityLevel int);
    method public int createStereoSurface(@androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode int, @androidx.xr.scenecore.impl.impress.ImpressApi.ContentSecurityLevel int, boolean);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.impl.impress.WaterMaterial!> createWaterMaterial(boolean);
    method public void destroyImpressNode(int);
    method public void destroyNativeObject(long);
    method public void disposeAllResources();
    method public androidx.xr.scenecore.impl.impress.BindingsResourceManager getBindingsResourceManager();
    method public androidx.xr.scenecore.impl.impress.Texture getReflectionTextureFromIbl(long);
    method public android.view.Surface getSurfaceFromStereoSurface(int);
    method public int instanceGltfModel(long);
    method public int instanceGltfModel(long, boolean);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long!> loadGltfAsset(byte[], String);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long!> loadGltfAsset(String);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long!> loadImageBasedLightingAsset(byte[], String);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Long!> loadImageBasedLightingAsset(String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.impl.impress.Texture!> loadTexture(String);
    method public void onPause();
    method public void onResume();
    method public void releaseGltfAsset(long);
    method public void releaseImageBasedLightingAsset(long);
    method public void resetContentColorMetadataForStereoSurface(int);
    method public void setAlphaCutoffOnKhronosPbrMaterial(long, float);
    method public void setAlphaMapOnWaterMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setAlphaStepMultiplierOnWaterMaterial(long, float);
    method public void setAlphaStepUOnWaterMaterial(long, float, float, float, float);
    method public void setAlphaStepVOnWaterMaterial(long, float, float, float, float);
    method public void setAmbientOcclusionFactorOnKhronosPbrMaterial(long, float);
    method public void setAmbientOcclusionTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setAmbientOcclusionUvTransformOnKhronosPbrMaterial(long, float, float, float, float, float, float, float, float, float);
    method public void setAuxiliaryAlphaMaskForStereoSurface(int, long);
    method public void setBaseColorFactorsOnKhronosPbrMaterial(long, float, float, float, float);
    method public void setBaseColorTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setBaseColorUvTransformOnKhronosPbrMaterial(long, float, float, float, float, float, float, float, float, float);
    method public void setClearcoatFactorsOnKhronosPbrMaterial(long, float, float, float);
    method public void setClearcoatNormalTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setClearcoatRoughnessTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setClearcoatTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setContentColorMetadataForStereoSurface(int, @androidx.xr.scenecore.impl.impress.ImpressApi.ColorSpace int, @androidx.xr.scenecore.impl.impress.ImpressApi.ColorTransfer int, @androidx.xr.scenecore.impl.impress.ImpressApi.ColorRange int, int);
    method public void setEmissiveFactorsOnKhronosPbrMaterial(long, float, float, float);
    method public void setEmissiveTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setEmissiveUvTransformOnKhronosPbrMaterial(long, float, float, float, float, float, float, float, float, float);
    method public void setFeatherRadiusForStereoSurface(int, float, float);
    method public void setGltfModelColliderEnabled(int, boolean);
    method public void setImpressNodeParent(int, int);
    method public void setIndexOfRefractionOnKhronosPbrMaterial(long, float);
    method public void setMaterialOverride(int, long, String);
    method public void setMetallicFactorOnKhronosPbrMaterial(long, float);
    method public void setMetallicRoughnessTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setMetallicRoughnessUvTransformOnKhronosPbrMaterial(long, float, float, float, float, float, float, float, float, float);
    method public void setNormalBoundaryOnWaterMaterial(long, float);
    method public void setNormalFactorOnKhronosPbrMaterial(long, float);
    method public void setNormalMapOnWaterMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setNormalSpeedOnWaterMaterial(long, float);
    method public void setNormalTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setNormalTilingOnWaterMaterial(long, float);
    method public void setNormalUvTransformOnKhronosPbrMaterial(long, float, float, float, float, float, float, float, float, float);
    method public void setNormalZOnWaterMaterial(long, float);
    method public void setPreferredEnvironmentLight(long);
    method public void setPrimaryAlphaMaskForStereoSurface(int, long);
    method public void setReflectionMapOnWaterMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setRoughnessFactorOnKhronosPbrMaterial(long, float);
    method public void setSheenColorFactorsOnKhronosPbrMaterial(long, float, float, float);
    method public void setSheenColorTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setSheenRoughnessFactorOnKhronosPbrMaterial(long, float);
    method public void setSheenRoughnessTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setStereoModeForStereoSurface(int, @androidx.xr.scenecore.impl.impress.ImpressApi.StereoMode int);
    method public void setStereoSurfaceEntityCanvasShapeHemisphere(int, float);
    method public void setStereoSurfaceEntityCanvasShapeQuad(int, float, float);
    method public void setStereoSurfaceEntityCanvasShapeSphere(int, float);
    method public void setTransmissionFactorOnKhronosPbrMaterial(long, float);
    method public void setTransmissionTextureOnKhronosPbrMaterial(long, long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setTransmissionUvTransformOnKhronosPbrMaterial(long, float, float, float, float, float, float, float, float, float);
    method public void setup(com.google.ar.imp.view.View);
    method public void stopGltfModelAnimation(int);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class KhronosPbrMaterial extends androidx.xr.scenecore.impl.impress.Material {
    method public void setAlphaCutoff(float);
    method public void setAmbientOcclusionFactor(float);
    method public void setAmbientOcclusionTexture(long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setAmbientOcclusionUvTransform(float, float, float, float, float, float, float, float, float);
    method public void setBaseColorFactors(float, float, float, float);
    method public void setBaseColorTexture(long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setBaseColorUvTransform(float, float, float, float, float, float, float, float, float);
    method public void setClearcoatFactors(float, float, float);
    method public void setClearcoatNormalTexture(long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setClearcoatRoughnessTexture(long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setClearcoatTexture(long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setEmissiveFactors(float, float, float);
    method public void setEmissiveTexture(long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setEmissiveUvTransform(float, float, float, float, float, float, float, float, float);
    method public void setIndexOfRefraction(float);
    method public void setMetallicFactor(float);
    method public void setMetallicRoughnessTexture(long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setMetallicRoughnessUvTransform(float, float, float, float, float, float, float, float, float);
    method public void setNormalFactor(float);
    method public void setNormalTexture(long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setNormalUvTransform(float, float, float, float, float, float, float, float, float);
    method public void setRoughnessFactor(float);
    method public void setSheenColorFactors(float, float, float);
    method public void setSheenColorTexture(long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setSheenRoughnessFactor(float);
    method public void setSheenRoughnessTexture(long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setTransmissionFactor(float);
    method public void setTransmissionTexture(long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setTransmissionUvTransform(float, float, float, float, float, float, float, float, float);
  }

  public static class KhronosPbrMaterial.Builder {
    ctor public KhronosPbrMaterial.Builder();
    method public androidx.xr.scenecore.impl.impress.KhronosPbrMaterial build();
    method public androidx.xr.scenecore.impl.impress.KhronosPbrMaterial.Builder setImpressApi(androidx.xr.scenecore.impl.impress.ImpressApi);
    method public androidx.xr.scenecore.impl.impress.KhronosPbrMaterial.Builder setNativeMaterial(long);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract class Material extends androidx.xr.scenecore.impl.impress.BindingsResource implements androidx.xr.scenecore.internal.MaterialResource {
    ctor protected Material(androidx.xr.scenecore.impl.impress.ImpressApi, long);
    method protected void releaseBindingsResource(long);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class Texture extends androidx.xr.scenecore.impl.impress.BindingsResource implements androidx.xr.scenecore.internal.TextureResource {
    method protected void releaseBindingsResource(long);
  }

  public static class Texture.Builder {
    ctor public Texture.Builder();
    method public androidx.xr.scenecore.impl.impress.Texture build();
    method public androidx.xr.scenecore.impl.impress.Texture.Builder setImpressApi(androidx.xr.scenecore.impl.impress.ImpressApi);
    method public androidx.xr.scenecore.impl.impress.Texture.Builder setNativeTexture(long);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class WaterMaterial extends androidx.xr.scenecore.impl.impress.Material {
    method public void setAlphaMap(long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setAlphaStepMultiplier(float);
    method public void setNormalBoundary(float);
    method public void setNormalMap(long, androidx.xr.scenecore.internal.TextureSampler);
    method public void setNormalSpeed(float);
    method public void setNormalTiling(float);
    method public void setNormalZ(float);
    method public void setReflectionMap(long, androidx.xr.scenecore.internal.TextureSampler);
  }

  public static class WaterMaterial.Builder {
    ctor public WaterMaterial.Builder();
    method public androidx.xr.scenecore.impl.impress.WaterMaterial build();
    method public androidx.xr.scenecore.impl.impress.WaterMaterial.Builder setImpressApi(androidx.xr.scenecore.impl.impress.ImpressApi);
    method public androidx.xr.scenecore.impl.impress.WaterMaterial.Builder setNativeMaterial(long);
  }

}

package androidx.xr.scenecore.impl.perception {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class Anchor {
    ctor public Anchor(long, android.os.IBinder);
    method public boolean detach();
    method public long getAnchorId();
    method public android.os.IBinder getAnchorToken();
    method public androidx.xr.scenecore.impl.perception.Anchor.PersistState getPersistState();
    method public java.util.UUID? persist();
  }

  public enum Anchor.PersistState {
    enum_constant public static final androidx.xr.scenecore.impl.perception.Anchor.PersistState NOT_VALID;
    enum_constant public static final androidx.xr.scenecore.impl.perception.Anchor.PersistState PERSISTED;
    enum_constant public static final androidx.xr.scenecore.impl.perception.Anchor.PersistState PERSIST_NOT_REQUESTED;
    enum_constant public static final androidx.xr.scenecore.impl.perception.Anchor.PersistState PERSIST_PENDING;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class Fov {
    ctor public Fov(float, float, float, float);
    method public float getAngleDown();
    method public float getAngleLeft();
    method public float getAngleRight();
    method public float getAngleUp();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class PerceptionLibrary {
    ctor public PerceptionLibrary();
    method public android.app.Activity getActivity();
    method public androidx.xr.scenecore.impl.perception.Session? getSession();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.impl.perception.Session!>? initSession(android.app.Activity, int, java.util.concurrent.ExecutorService);
    method protected static void loadLibraryAsync(String);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class PerceptionLibraryConstants {
    field public static final int OPEN_XR_SPACE_TYPE_LOCAL = 2; // 0x2
    field public static final int OPEN_XR_SPACE_TYPE_LOCAL_FLOOR = 1000426000; // 0x3ba14a10
    field public static final int OPEN_XR_SPACE_TYPE_STAGE = 3; // 0x3
    field public static final int OPEN_XR_SPACE_TYPE_UNBOUNDED = 1000467000; // 0x3ba1ea38
    field public static final int OPEN_XR_SPACE_TYPE_VIEW = 1; // 0x1
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class Plane implements androidx.xr.scenecore.impl.perception.Trackable {
    ctor public Plane(Long, int);
    method public androidx.xr.scenecore.impl.perception.Anchor? createAnchor(androidx.xr.scenecore.impl.perception.Pose, Long?);
    method public java.util.List<androidx.xr.scenecore.impl.perception.Anchor!> getAnchors();
    method public androidx.xr.scenecore.impl.perception.Plane.PlaneData? getData(Long?);
  }

  public enum Plane.Label {
    enum_constant public static final androidx.xr.scenecore.impl.perception.Plane.Label CEILING;
    enum_constant public static final androidx.xr.scenecore.impl.perception.Plane.Label FLOOR;
    enum_constant public static final androidx.xr.scenecore.impl.perception.Plane.Label TABLE;
    enum_constant public static final androidx.xr.scenecore.impl.perception.Plane.Label UNKNOWN;
    enum_constant public static final androidx.xr.scenecore.impl.perception.Plane.Label WALL;
    field public final int intValue;
  }

  public static class Plane.PlaneData {
    ctor public Plane.PlaneData(androidx.xr.scenecore.impl.perception.Pose, float, float, int, int);
    field public final androidx.xr.scenecore.impl.perception.Pose centerPose;
    field public final float extentHeight;
    field public final float extentWidth;
    field public final androidx.xr.scenecore.impl.perception.Plane.Label label;
    field public final androidx.xr.scenecore.impl.perception.Plane.Type type;
  }

  public enum Plane.Type {
    enum_constant public static final androidx.xr.scenecore.impl.perception.Plane.Type ARBITRARY;
    enum_constant public static final androidx.xr.scenecore.impl.perception.Plane.Type HORIZONTAL_DOWNWARD_FACING;
    enum_constant public static final androidx.xr.scenecore.impl.perception.Plane.Type HORIZONTAL_UPWARD_FACING;
    enum_constant public static final androidx.xr.scenecore.impl.perception.Plane.Type VERTICAL;
    field public final int intValue;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class Pose {
    ctor public Pose(float, float, float, float, float, float, float);
    method public static androidx.xr.scenecore.impl.perception.Pose identity();
    method public float qw();
    method public float qx();
    method public float qy();
    method public float qz();
    method public float tx();
    method public float ty();
    method public float tz();
    method public void updateRotation(float, float, float, float);
    method public void updateTranslation(float, float, float);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class Session {
    method public androidx.xr.scenecore.impl.perception.Anchor? createAnchor(float, float, androidx.xr.scenecore.impl.perception.Plane.Type, androidx.xr.scenecore.impl.perception.Plane.Label);
    method public androidx.xr.scenecore.impl.perception.Anchor? createAnchorFromUuid(java.util.UUID?);
    method public java.util.List<androidx.xr.scenecore.impl.perception.Plane!> getAllPlanes();
    method public androidx.xr.scenecore.impl.perception.Pose? getHeadPose();
    method public long getNativeInstance();
    method public long getNativeSession();
    method public androidx.xr.scenecore.impl.perception.ViewProjections? getStereoViews();
    method public boolean unpersistAnchor(java.util.UUID?);
    field public static final long XR_NULL_HANDLE = 0L; // 0x0L
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Trackable {
    method public androidx.xr.scenecore.impl.perception.Anchor? createAnchor(androidx.xr.scenecore.impl.perception.Pose, Long?);
    method public java.util.List<androidx.xr.scenecore.impl.perception.Anchor!> getAnchors();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class ViewProjection {
    ctor public ViewProjection(androidx.xr.scenecore.impl.perception.Pose, androidx.xr.scenecore.impl.perception.Fov);
    method public androidx.xr.scenecore.impl.perception.Fov getFov();
    method public androidx.xr.scenecore.impl.perception.Pose getPose();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ViewProjections {
    ctor public ViewProjections(androidx.xr.scenecore.impl.perception.ViewProjection, androidx.xr.scenecore.impl.perception.ViewProjection);
    method public androidx.xr.scenecore.impl.perception.ViewProjection getLeftEye();
    method public androidx.xr.scenecore.impl.perception.ViewProjection getRightEye();
  }

}

package androidx.xr.scenecore.impl.perception.exceptions {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class FailedToInitializeException extends java.lang.RuntimeException {
    ctor public FailedToInitializeException(String);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class LibraryLoadingException extends java.lang.RuntimeException {
    ctor public LibraryLoadingException(String);
  }

}

package androidx.xr.scenecore.internal {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ActivityPanelEntity extends androidx.xr.scenecore.internal.PanelEntity {
    method public void launchActivity(android.content.Intent intent, android.os.Bundle? bundle);
    method public void moveActivity(android.app.Activity activity);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ActivityPose {
    method public androidx.xr.runtime.math.Pose getActivitySpacePose();
    method public androidx.xr.runtime.math.Vector3 getActivitySpaceScale();
    method public androidx.xr.runtime.math.Vector3 getWorldSpaceScale();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.HitTestResult> hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, @androidx.xr.scenecore.internal.ActivityPose.HitTestFilterValue int hitTestFilter);
    method public androidx.xr.runtime.math.Pose transformPoseTo(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.ActivityPose destination);
    property public abstract androidx.xr.runtime.math.Pose activitySpacePose;
    property public abstract androidx.xr.runtime.math.Vector3 activitySpaceScale;
    property public abstract androidx.xr.runtime.math.Vector3 worldSpaceScale;
  }

  public static final class ActivityPose.HitTestFilter {
    property public static int OTHER_SCENES;
    property public static int SELF_SCENE;
    field public static final androidx.xr.scenecore.internal.ActivityPose.HitTestFilter INSTANCE;
    field public static final int OTHER_SCENES = 2; // 0x2
    field public static final int SELF_SCENE = 1; // 0x1
  }

  @IntDef(flag=true, value={androidx.xr.scenecore.internal.ActivityPose.HitTestFilter.SELF_SCENE, androidx.xr.scenecore.internal.ActivityPose.HitTestFilter.OTHER_SCENES}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) public static @interface ActivityPose.HitTestFilterValue {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ActivitySpace extends androidx.xr.scenecore.internal.SystemSpaceEntity {
    method public void addOnBoundsChangedListener(androidx.xr.scenecore.internal.ActivitySpace.OnBoundsChangedListener listener);
    method public androidx.xr.scenecore.internal.Dimensions getBounds();
    method public androidx.xr.runtime.math.BoundingBox getRecommendedContentBoxInFullSpace();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.HitTestResult> hitTestRelativeToActivityPose(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, @androidx.xr.scenecore.internal.ActivityPose.HitTestFilterValue int hitTestFilter, androidx.xr.scenecore.internal.ActivityPose activityPose);
    method public void removeOnBoundsChangedListener(androidx.xr.scenecore.internal.ActivitySpace.OnBoundsChangedListener listener);
    property public abstract androidx.xr.scenecore.internal.Dimensions bounds;
    property public abstract androidx.xr.runtime.math.BoundingBox recommendedContentBoxInFullSpace;
  }

  public static fun interface ActivitySpace.OnBoundsChangedListener {
    method public void onBoundsChanged(androidx.xr.scenecore.internal.Dimensions bounds);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface AnchorEntity extends androidx.xr.scenecore.internal.SystemSpaceEntity {
    method public long getNativePointer();
    method public int getState();
    method public void setOnStateChangedListener(androidx.xr.scenecore.internal.AnchorEntity.OnStateChangedListener onStateChangedListener);
    property public abstract long nativePointer;
    property public abstract int state;
  }

  public static fun interface AnchorEntity.OnStateChangedListener {
    method public void onStateChanged(int newState);
  }

  @IntDef({androidx.xr.scenecore.internal.AnchorEntity.State.Companion.UNANCHORED, androidx.xr.scenecore.internal.AnchorEntity.State.Companion.ANCHORED, androidx.xr.scenecore.internal.AnchorEntity.State.Companion.TIMED_OUT, androidx.xr.scenecore.internal.AnchorEntity.State.Companion.ERROR}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) @kotlin.annotation.Target(allowedTargets=kotlin.annotation.AnnotationTarget.TYPE) public static @interface AnchorEntity.State {
    field public static final int ANCHORED = 1; // 0x1
    field public static final androidx.xr.scenecore.internal.AnchorEntity.State.Companion Companion;
    field public static final int ERROR = 3; // 0x3
    field public static final int TIMED_OUT = 2; // 0x2
    field public static final int UNANCHORED = 0; // 0x0
  }

  public static final class AnchorEntity.State.Companion {
    property public static int ANCHORED;
    property public static int ERROR;
    property public static int TIMED_OUT;
    property public static int UNANCHORED;
    field public static final int ANCHORED = 1; // 0x1
    field public static final int ERROR = 3; // 0x3
    field public static final int TIMED_OUT = 2; // 0x2
    field public static final int UNANCHORED = 0; // 0x0
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface AnchorPlacement {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface AudioTrackExtensionsWrapper {
    method public androidx.xr.scenecore.internal.PointSourceParams? getPointSourceParams(android.media.AudioTrack track);
    method public androidx.xr.scenecore.internal.SoundFieldAttributes? getSoundFieldAttributes(android.media.AudioTrack track);
    method @androidx.xr.scenecore.internal.SpatializerConstants.SourceType public int getSpatialSourceType(android.media.AudioTrack track);
    method public void setPointSourceParams(android.media.AudioTrack track, androidx.xr.scenecore.internal.PointSourceParams params);
    method public android.media.AudioTrack.Builder setPointSourceParams(android.media.AudioTrack.Builder builder, androidx.xr.scenecore.internal.PointSourceParams params);
    method public android.media.AudioTrack.Builder setSoundFieldAttributes(android.media.AudioTrack.Builder builder, androidx.xr.scenecore.internal.SoundFieldAttributes attributes);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface CameraViewActivityPose extends androidx.xr.scenecore.internal.ActivityPose {
    method public int getCameraType();
    method public androidx.xr.scenecore.internal.PixelDimensions getDisplayResolutionInPixels();
    method public androidx.xr.scenecore.internal.CameraViewActivityPose.Fov getFov();
    property @androidx.xr.scenecore.internal.CameraViewActivityPose.CameraType public abstract int cameraType;
    property public abstract androidx.xr.scenecore.internal.PixelDimensions displayResolutionInPixels;
    property public abstract androidx.xr.scenecore.internal.CameraViewActivityPose.Fov fov;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface CameraViewActivityPose.CameraType {
    field public static final int CAMERA_TYPE_LEFT_EYE = 1; // 0x1
    field public static final int CAMERA_TYPE_RIGHT_EYE = 2; // 0x2
    field public static final int CAMERA_TYPE_UNKNOWN = 0; // 0x0
    field public static final androidx.xr.scenecore.internal.CameraViewActivityPose.CameraType.Companion Companion;
  }

  public static final class CameraViewActivityPose.CameraType.Companion {
    property public static int CAMERA_TYPE_LEFT_EYE;
    property public static int CAMERA_TYPE_RIGHT_EYE;
    property public static int CAMERA_TYPE_UNKNOWN;
    field public static final int CAMERA_TYPE_LEFT_EYE = 1; // 0x1
    field public static final int CAMERA_TYPE_RIGHT_EYE = 2; // 0x2
    field public static final int CAMERA_TYPE_UNKNOWN = 0; // 0x0
  }

  public static final class CameraViewActivityPose.Fov {
    ctor public CameraViewActivityPose.Fov(float angleLeft, float angleRight, float angleUp, float angleDown);
    method public float getAngleDown();
    method public float getAngleLeft();
    method public float getAngleRight();
    method public float getAngleUp();
    property public float angleDown;
    property public float angleLeft;
    property public float angleRight;
    property public float angleUp;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Component {
    method public boolean onAttach(androidx.xr.scenecore.internal.Entity entity);
    method public void onDetach(androidx.xr.scenecore.internal.Entity entity);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class Dimensions {
    ctor public Dimensions(float width, float height, float depth);
    property public float depth;
    property public float height;
    property public float width;
    field public final float depth;
    field public final float height;
    field public final float width;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Entity extends androidx.xr.scenecore.internal.ActivityPose {
    method public void addChild(androidx.xr.scenecore.internal.Entity child);
    method public void addChildren(java.util.List<? extends androidx.xr.scenecore.internal.Entity> children);
    method public boolean addComponent(androidx.xr.scenecore.internal.Component component);
    method public void addInputEventListener(java.util.concurrent.Executor executor, androidx.xr.scenecore.internal.InputEventListener listener);
    method public void dispose();
    method public default float getAlpha();
    method public float getAlpha(@androidx.xr.scenecore.internal.SpaceValue int relativeTo);
    method public java.util.List<androidx.xr.scenecore.internal.Entity> getChildren();
    method public java.util.List<androidx.xr.scenecore.internal.Component> getComponents();
    method public <T extends androidx.xr.scenecore.internal.Component> java.util.List<T> getComponentsOfType(Class<? extends T> type);
    method public CharSequence getContentDescription();
    method public androidx.xr.scenecore.internal.Entity? getParent();
    method public default androidx.xr.runtime.math.Pose getPose();
    method public androidx.xr.runtime.math.Pose getPose(@androidx.xr.scenecore.internal.SpaceValue int relativeTo);
    method public default androidx.xr.runtime.math.Vector3 getScale();
    method public androidx.xr.runtime.math.Vector3 getScale(@androidx.xr.scenecore.internal.SpaceValue int relativeTo);
    method public boolean isHidden(boolean includeParents);
    method public void removeAllComponents();
    method public void removeComponent(androidx.xr.scenecore.internal.Component component);
    method public void removeInputEventListener(androidx.xr.scenecore.internal.InputEventListener listener);
    method public default void setAlpha(float alpha);
    method public void setAlpha(float alpha, @androidx.xr.scenecore.internal.SpaceValue int relativeTo);
    method public void setContentDescription(CharSequence);
    method public void setHidden(boolean hidden);
    method public void setParent(androidx.xr.scenecore.internal.Entity?);
    method public default void setPose(androidx.xr.runtime.math.Pose pose);
    method public void setPose(androidx.xr.runtime.math.Pose pose, @androidx.xr.scenecore.internal.SpaceValue int relativeTo);
    method public default void setScale(androidx.xr.runtime.math.Vector3 scale);
    method public void setScale(androidx.xr.runtime.math.Vector3 scale, @androidx.xr.scenecore.internal.SpaceValue int relativeTo);
    property public abstract java.util.List<androidx.xr.scenecore.internal.Entity> children;
    property public abstract CharSequence contentDescription;
    property public abstract androidx.xr.scenecore.internal.Entity? parent;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ExrImageResource extends androidx.xr.scenecore.internal.Resource {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface GltfEntity extends androidx.xr.scenecore.internal.Entity {
    method public int getAnimationState();
    method public void setMaterialOverride(androidx.xr.scenecore.internal.MaterialResource material, String meshName);
    method public void startAnimation(boolean loop, String? animationName);
    method public void stopAnimation();
    property @androidx.xr.scenecore.internal.GltfEntity.AnimationStateValue public abstract int animationState;
  }

  public static final class GltfEntity.AnimationState {
    property public static int PLAYING;
    property public static int STOPPED;
    field public static final androidx.xr.scenecore.internal.GltfEntity.AnimationState INSTANCE;
    field public static final int PLAYING = 0; // 0x0
    field public static final int STOPPED = 1; // 0x1
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface GltfEntity.AnimationStateValue {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface GltfFeature extends androidx.xr.runtime.internal.RenderingFeature {
    method public int getAnimationState();
    method public void setColliderEnabled(boolean enableCollider);
    method public void setMaterialOverride(androidx.xr.scenecore.internal.MaterialResource material, String meshName);
    method public void startAnimation(boolean loop, String? animationName, java.util.concurrent.Executor executor);
    method public void stopAnimation();
    property public abstract int animationState;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface GltfModelResource extends androidx.xr.scenecore.internal.Resource {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface HeadActivityPose extends androidx.xr.scenecore.internal.ActivityPose {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class HitTestResult {
    ctor public HitTestResult(androidx.xr.runtime.math.Vector3? hitPosition, androidx.xr.runtime.math.Vector3? surfaceNormal, @androidx.xr.scenecore.internal.HitTestResult.HitTestSurfaceTypeValue int surfaceType, float distance);
    method public float getDistance();
    method public androidx.xr.runtime.math.Vector3? getHitPosition();
    method public androidx.xr.runtime.math.Vector3? getSurfaceNormal();
    method public int getSurfaceType();
    property public float distance;
    property public androidx.xr.runtime.math.Vector3? hitPosition;
    property public androidx.xr.runtime.math.Vector3? surfaceNormal;
    property public int surfaceType;
  }

  public static final class HitTestResult.HitTestSurfaceType {
    property public static int HIT_TEST_RESULT_SURFACE_TYPE_OBJECT;
    property public static int HIT_TEST_RESULT_SURFACE_TYPE_PLANE;
    property public static int HIT_TEST_RESULT_SURFACE_TYPE_UNKNOWN;
    field public static final int HIT_TEST_RESULT_SURFACE_TYPE_OBJECT = 2; // 0x2
    field public static final int HIT_TEST_RESULT_SURFACE_TYPE_PLANE = 1; // 0x1
    field public static final int HIT_TEST_RESULT_SURFACE_TYPE_UNKNOWN = 0; // 0x0
    field public static final androidx.xr.scenecore.internal.HitTestResult.HitTestSurfaceType INSTANCE;
  }

  @IntDef({androidx.xr.scenecore.internal.HitTestResult.HitTestSurfaceType.HIT_TEST_RESULT_SURFACE_TYPE_UNKNOWN, androidx.xr.scenecore.internal.HitTestResult.HitTestSurfaceType.HIT_TEST_RESULT_SURFACE_TYPE_PLANE, androidx.xr.scenecore.internal.HitTestResult.HitTestSurfaceType.HIT_TEST_RESULT_SURFACE_TYPE_OBJECT}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) public static @interface HitTestResult.HitTestSurfaceTypeValue {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class InputEvent {
    ctor public InputEvent(int source, int pointerType, long timestamp, androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int action, optional java.util.List<androidx.xr.scenecore.internal.InputEvent.HitInfo> hitInfoList);
    method public int getAction();
    method public androidx.xr.runtime.math.Vector3 getDirection();
    method public java.util.List<androidx.xr.scenecore.internal.InputEvent.HitInfo> getHitInfoList();
    method public androidx.xr.runtime.math.Vector3 getOrigin();
    method public int getPointerType();
    method public int getSource();
    method public long getTimestamp();
    property public int action;
    property public androidx.xr.runtime.math.Vector3 direction;
    property public java.util.List<androidx.xr.scenecore.internal.InputEvent.HitInfo> hitInfoList;
    property public androidx.xr.runtime.math.Vector3 origin;
    property public int pointerType;
    property public int source;
    property public long timestamp;
  }

  public static final class InputEvent.Action {
    property public static int CANCEL;
    property public static int DOWN;
    property public static int HOVER_ENTER;
    property public static int HOVER_EXIT;
    property public static int HOVER_MOVE;
    property public static int MOVE;
    property public static int UP;
    field public static final int CANCEL = 3; // 0x3
    field public static final int DOWN = 0; // 0x0
    field public static final int HOVER_ENTER = 5; // 0x5
    field public static final int HOVER_EXIT = 6; // 0x6
    field public static final int HOVER_MOVE = 4; // 0x4
    field public static final androidx.xr.scenecore.internal.InputEvent.Action INSTANCE;
    field public static final int MOVE = 2; // 0x2
    field public static final int UP = 1; // 0x1
  }

  public static final class InputEvent.HitInfo {
    ctor public InputEvent.HitInfo(androidx.xr.scenecore.internal.Entity inputEntity, androidx.xr.runtime.math.Vector3? hitPosition, androidx.xr.runtime.math.Matrix4 transform);
    method public androidx.xr.runtime.math.Vector3? getHitPosition();
    method public androidx.xr.scenecore.internal.Entity getInputEntity();
    method public androidx.xr.runtime.math.Matrix4 getTransform();
    property public androidx.xr.runtime.math.Vector3? hitPosition;
    property public androidx.xr.scenecore.internal.Entity inputEntity;
    property public androidx.xr.runtime.math.Matrix4 transform;
  }

  public static final class InputEvent.Pointer {
    property public static int DEFAULT;
    property public static int LEFT;
    property public static int RIGHT;
    field public static final int DEFAULT = 0; // 0x0
    field public static final androidx.xr.scenecore.internal.InputEvent.Pointer INSTANCE;
    field public static final int LEFT = 1; // 0x1
    field public static final int RIGHT = 2; // 0x2
  }

  public static final class InputEvent.Source {
    property public static int CONTROLLER;
    property public static int GAZE_AND_GESTURE;
    property public static int HANDS;
    property public static int HEAD;
    property public static int MOUSE;
    property public static int UNKNOWN;
    field public static final int CONTROLLER = 2; // 0x2
    field public static final int GAZE_AND_GESTURE = 5; // 0x5
    field public static final int HANDS = 3; // 0x3
    field public static final int HEAD = 1; // 0x1
    field public static final androidx.xr.scenecore.internal.InputEvent.Source INSTANCE;
    field public static final int MOUSE = 4; // 0x4
    field public static final int UNKNOWN = 0; // 0x0
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public fun interface InputEventListener {
    method public void onInputEvent(androidx.xr.scenecore.internal.InputEvent event);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface InteractableComponent extends androidx.xr.scenecore.internal.Component {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface JxrPlatformAdapter extends androidx.xr.runtime.internal.JxrRuntime {
    method public void addPerceivedResolutionChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions> listener);
    method public void addSpatialCapabilitiesChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialCapabilities> listener);
    method public androidx.xr.scenecore.internal.TextureResource? borrowReflectionTexture();
    method public void clearSpatialVisibilityChangedListener();
    method public androidx.xr.scenecore.internal.ActivityPanelEntity createActivityPanelEntity(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.PixelDimensions windowBoundsPx, String name, android.app.Activity hostActivity, androidx.xr.scenecore.internal.Entity parent);
    method public androidx.xr.scenecore.internal.AnchorEntity createAnchorEntity(androidx.xr.arcore.internal.Anchor anchor);
    method public androidx.xr.scenecore.internal.AnchorEntity createAnchorEntity(androidx.xr.scenecore.internal.Dimensions bounds, androidx.xr.scenecore.internal.PlaneType planeType, androidx.xr.scenecore.internal.PlaneSemantic planeSemantic, java.time.Duration searchTimeout);
    method public androidx.xr.scenecore.internal.AnchorPlacement createAnchorPlacementForPlanes(java.util.Set<androidx.xr.scenecore.internal.PlaneType> planeTypeFilter, java.util.Set<androidx.xr.scenecore.internal.PlaneSemantic> planeSemanticFilter);
    method public androidx.xr.scenecore.internal.GltfEntity createGltfEntity(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.GltfModelResource loadedGltf, androidx.xr.scenecore.internal.Entity parentEntity);
    method public androidx.xr.scenecore.internal.Entity createGroupEntity(androidx.xr.runtime.math.Pose pose, String name, androidx.xr.scenecore.internal.Entity parent);
    method public androidx.xr.scenecore.internal.InteractableComponent createInteractableComponent(java.util.concurrent.Executor executor, androidx.xr.scenecore.internal.InputEventListener listener);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.MaterialResource> createKhronosPbrMaterial(androidx.xr.scenecore.internal.KhronosPbrMaterialSpec spec);
    method public androidx.xr.scenecore.internal.LoggingEntity createLoggingEntity(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.scenecore.internal.MovableComponent createMovableComponent(boolean systemMovable, boolean scaleInZ, java.util.Set<androidx.xr.scenecore.internal.AnchorPlacement> anchorPlacement, boolean shouldDisposeParentAnchor);
    method public androidx.xr.scenecore.internal.PanelEntity createPanelEntity(android.content.Context context, androidx.xr.runtime.math.Pose pose, android.view.View view, androidx.xr.scenecore.internal.Dimensions dimensions, String name, androidx.xr.scenecore.internal.Entity parent);
    method public androidx.xr.scenecore.internal.PanelEntity createPanelEntity(android.content.Context context, androidx.xr.runtime.math.Pose pose, android.view.View view, androidx.xr.scenecore.internal.PixelDimensions pixelDimensions, String name, androidx.xr.scenecore.internal.Entity parent);
    method public androidx.xr.scenecore.internal.AnchorEntity createPersistedAnchorEntity(java.util.UUID uuid, java.time.Duration searchTimeout);
    method public androidx.xr.scenecore.internal.PointerCaptureComponent createPointerCaptureComponent(java.util.concurrent.Executor executor, androidx.xr.scenecore.internal.PointerCaptureComponent.StateListener stateListener, androidx.xr.scenecore.internal.InputEventListener inputListener);
    method public androidx.xr.scenecore.internal.ResizableComponent createResizableComponent(androidx.xr.scenecore.internal.Dimensions minimumSize, androidx.xr.scenecore.internal.Dimensions maximumSize);
    method public androidx.xr.scenecore.internal.SpatialPointerComponent createSpatialPointerComponent();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.scenecore.internal.SubspaceNodeEntity createSubspaceNodeEntity(androidx.xr.runtime.SubspaceNodeHolder<? extends java.lang.Object?> subspaceNodeHolder, androidx.xr.scenecore.internal.Dimensions size);
    method public androidx.xr.scenecore.internal.SurfaceEntity createSurfaceEntity(int stereoMode, androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.SurfaceEntity.Shape shape, @androidx.xr.scenecore.internal.SurfaceEntity.SurfaceProtection int surfaceProtection, int superSampling, androidx.xr.scenecore.internal.Entity parentEntity);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.MaterialResource> createWaterMaterial(boolean isAlphaMapVersion);
    method public void destroyKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material);
    method public void destroyTexture(androidx.xr.scenecore.internal.TextureResource texture);
    method public void destroyWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material);
    method public void dispose();
    method public void enablePanelDepthTest(boolean enabled);
    method public androidx.xr.scenecore.internal.ActivitySpace getActivitySpace();
    method public androidx.xr.scenecore.internal.Entity getActivitySpaceRootImpl();
    method public androidx.xr.scenecore.internal.AudioTrackExtensionsWrapper getAudioTrackExtensionsWrapper();
    method public androidx.xr.scenecore.internal.CameraViewActivityPose? getCameraViewActivityPose(@androidx.xr.scenecore.internal.CameraViewActivityPose.CameraType int cameraType);
    method public androidx.xr.scenecore.internal.HeadActivityPose? getHeadActivityPose();
    method public androidx.xr.scenecore.internal.PanelEntity getMainPanelEntity();
    method public androidx.xr.scenecore.internal.MediaPlayerExtensionsWrapper getMediaPlayerExtensionsWrapper();
    method public androidx.xr.scenecore.internal.PerceptionSpaceActivityPose getPerceptionSpaceActivityPose();
    method public androidx.xr.scenecore.internal.TextureResource? getReflectionTextureFromIbl(androidx.xr.scenecore.internal.ExrImageResource iblToken);
    method public androidx.xr.scenecore.internal.SoundPoolExtensionsWrapper getSoundPoolExtensionsWrapper();
    method public androidx.xr.scenecore.internal.SpatialCapabilities getSpatialCapabilities();
    method public androidx.xr.scenecore.internal.SpatialEnvironment getSpatialEnvironment();
    method public androidx.xr.scenecore.internal.SpatialModeChangeListener getSpatialModeChangeListener();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.ExrImageResource> loadExrImageByAssetName(String assetName);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.ExrImageResource> loadExrImageByByteArray(byte[] assetData, String assetKey);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.GltfModelResource> loadGltfByAssetName(String assetName);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.GltfModelResource> loadGltfByByteArray(byte[] assetData, String assetKey);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.TextureResource>? loadTexture(String assetName);
    method public void removePerceivedResolutionChangedListener(java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions> listener);
    method public void removeSpatialCapabilitiesChangedListener(java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialCapabilities> listener);
    method public void requestFullSpaceMode();
    method public void requestHomeSpaceMode();
    method public void setAlphaCutoffOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float alphaCutoff);
    method public void setAlphaMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource alphaMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setAlphaStepMultiplierOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float alphaStepMultiplier);
    method public void setAmbientOcclusionFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setAmbientOcclusionTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource ambientOcclusion, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setAmbientOcclusionUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setBaseColorFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Vector4 factors);
    method public void setBaseColorTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource baseColor, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setBaseColorUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setClearcoatFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float intensity, float roughness, float normal);
    method public void setClearcoatNormalTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource clearcoatNormal, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setClearcoatRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource clearcoatRoughness, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setClearcoatTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource clearcoat, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setEmissiveFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Vector3 factors);
    method public void setEmissiveTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource emissive, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setEmissiveUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public android.os.Bundle setFullSpaceMode(android.os.Bundle bundle);
    method public android.os.Bundle setFullSpaceModeWithEnvironmentInherited(android.os.Bundle bundle);
    method public void setIndexOfRefractionOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float indexOfRefraction);
    method public void setMetallicFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setMetallicRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource metallicRoughness, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setMetallicRoughnessUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setNormalBoundaryOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalBoundary);
    method public void setNormalFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setNormalMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource normalMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setNormalSpeedOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalSpeed);
    method public void setNormalTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource normal, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setNormalTilingOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalTiling);
    method public void setNormalUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setNormalZOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalZ);
    method public void setPreferredAspectRatio(android.app.Activity activity, float preferredRatio);
    method public void setReflectionMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource reflectionMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setRoughnessFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setSheenColorFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Vector3 factors);
    method public void setSheenColorTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource sheenColor, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setSheenRoughnessFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setSheenRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource sheenRoughness, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setSpatialModeChangeListener(androidx.xr.scenecore.internal.SpatialModeChangeListener);
    method public void setSpatialVisibilityChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialVisibility> listener);
    method public void setTransmissionFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setTransmissionTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource transmission, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setTransmissionUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void startRenderer();
    method public void stopRenderer();
    property public abstract androidx.xr.scenecore.internal.ActivitySpace activitySpace;
    property public abstract androidx.xr.scenecore.internal.Entity activitySpaceRootImpl;
    property public abstract androidx.xr.scenecore.internal.AudioTrackExtensionsWrapper audioTrackExtensionsWrapper;
    property public abstract androidx.xr.scenecore.internal.HeadActivityPose? headActivityPose;
    property public abstract androidx.xr.scenecore.internal.PanelEntity mainPanelEntity;
    property public abstract androidx.xr.scenecore.internal.MediaPlayerExtensionsWrapper mediaPlayerExtensionsWrapper;
    property public abstract androidx.xr.scenecore.internal.PerceptionSpaceActivityPose perceptionSpaceActivityPose;
    property public abstract androidx.xr.scenecore.internal.SoundPoolExtensionsWrapper soundPoolExtensionsWrapper;
    property public abstract androidx.xr.scenecore.internal.SpatialCapabilities spatialCapabilities;
    property public abstract androidx.xr.scenecore.internal.SpatialEnvironment spatialEnvironment;
    property public abstract androidx.xr.scenecore.internal.SpatialModeChangeListener spatialModeChangeListener;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class KhronosPbrMaterialSpec {
    ctor public KhronosPbrMaterialSpec(@androidx.xr.scenecore.internal.KhronosPbrMaterialSpec.LightingModel int lightingModel, @androidx.xr.scenecore.internal.KhronosPbrMaterialSpec.BlendMode int blendMode, @androidx.xr.scenecore.internal.KhronosPbrMaterialSpec.DoubleSidedMode int doubleSidedMode);
    method public int getBlendMode();
    method public int getDoubleSidedMode();
    method public int getLightingModel();
    property public int blendMode;
    property public int doubleSidedMode;
    property public int lightingModel;
    field public static final androidx.xr.scenecore.internal.KhronosPbrMaterialSpec.Companion Companion;
    field public static final int DOUBLE_SIDED = 1; // 0x1
    field public static final int LIT = 0; // 0x0
    field public static final int MASKED = 1; // 0x1
    field public static final int OPAQUE = 0; // 0x0
    field public static final int REFRACTIVE = 3; // 0x3
    field public static final int SINGLE_SIDED = 0; // 0x0
    field public static final int TRANSPARENT = 2; // 0x2
    field public static final int UNLIT = 1; // 0x1
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface KhronosPbrMaterialSpec.BlendMode {
    field public static final androidx.xr.scenecore.internal.KhronosPbrMaterialSpec.BlendMode.Companion Companion;
    field public static final int MASKED = 1; // 0x1
    field public static final int OPAQUE = 0; // 0x0
    field public static final int REFRACTIVE = 3; // 0x3
    field public static final int TRANSPARENT = 2; // 0x2
  }

  public static final class KhronosPbrMaterialSpec.BlendMode.Companion {
    property public static int MASKED;
    property public static int OPAQUE;
    property public static int REFRACTIVE;
    property public static int TRANSPARENT;
    field public static final int MASKED = 1; // 0x1
    field public static final int OPAQUE = 0; // 0x0
    field public static final int REFRACTIVE = 3; // 0x3
    field public static final int TRANSPARENT = 2; // 0x2
  }

  public static final class KhronosPbrMaterialSpec.Companion {
    property public static int DOUBLE_SIDED;
    property public static int LIT;
    property public static int MASKED;
    property public static int OPAQUE;
    property public static int REFRACTIVE;
    property public static int SINGLE_SIDED;
    property public static int TRANSPARENT;
    property public static int UNLIT;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface KhronosPbrMaterialSpec.DoubleSidedMode {
    field public static final androidx.xr.scenecore.internal.KhronosPbrMaterialSpec.DoubleSidedMode.Companion Companion;
    field public static final int DOUBLE_SIDED = 1; // 0x1
    field public static final int SINGLE_SIDED = 0; // 0x0
  }

  public static final class KhronosPbrMaterialSpec.DoubleSidedMode.Companion {
    property public static int DOUBLE_SIDED;
    property public static int SINGLE_SIDED;
    field public static final int DOUBLE_SIDED = 1; // 0x1
    field public static final int SINGLE_SIDED = 0; // 0x0
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface KhronosPbrMaterialSpec.LightingModel {
    field public static final androidx.xr.scenecore.internal.KhronosPbrMaterialSpec.LightingModel.Companion Companion;
    field public static final int LIT = 0; // 0x0
    field public static final int UNLIT = 1; // 0x1
  }

  public static final class KhronosPbrMaterialSpec.LightingModel.Companion {
    property public static int LIT;
    property public static int UNLIT;
    field public static final int LIT = 0; // 0x0
    field public static final int UNLIT = 1; // 0x1
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface LoggingEntity extends androidx.xr.scenecore.internal.Entity {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface MaterialResource extends androidx.xr.scenecore.internal.Resource {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface MediaPlayerExtensionsWrapper {
    method public void setPointSourceParams(android.media.MediaPlayer mediaPlayer, androidx.xr.scenecore.internal.PointSourceParams params);
    method public void setSoundFieldAttributes(android.media.MediaPlayer mediaPlayer, androidx.xr.scenecore.internal.SoundFieldAttributes attributes);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface MovableComponent extends androidx.xr.scenecore.internal.Component {
    method public void addMoveEventListener(java.util.concurrent.Executor executor, androidx.xr.scenecore.internal.MoveEventListener moveEventListener);
    method public int getScaleWithDistanceMode();
    method public androidx.xr.scenecore.internal.Dimensions getSize();
    method public void removeMoveEventListener(androidx.xr.scenecore.internal.MoveEventListener moveEventListener);
    method public void setScaleWithDistanceMode(int);
    method public void setSize(androidx.xr.scenecore.internal.Dimensions);
    property @androidx.xr.scenecore.internal.MovableComponent.ScaleWithDistanceMode public abstract int scaleWithDistanceMode;
    property public abstract androidx.xr.scenecore.internal.Dimensions size;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static @interface MovableComponent.ScaleWithDistanceMode {
    field public static final androidx.xr.scenecore.internal.MovableComponent.ScaleWithDistanceMode.Companion Companion;
    field public static final int DEFAULT = 3; // 0x3
    field public static final int DMM = 2; // 0x2
  }

  public static final class MovableComponent.ScaleWithDistanceMode.Companion {
    property public static int DEFAULT;
    property public static int DMM;
    field public static final int DEFAULT = 3; // 0x3
    field public static final int DMM = 2; // 0x2
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class MoveEvent {
    ctor public MoveEvent(int moveState, androidx.xr.runtime.math.Ray initialInputRay, androidx.xr.runtime.math.Ray currentInputRay, androidx.xr.runtime.math.Pose previousPose, androidx.xr.runtime.math.Pose currentPose, androidx.xr.runtime.math.Vector3 previousScale, androidx.xr.runtime.math.Vector3 currentScale, androidx.xr.scenecore.internal.Entity initialParent, androidx.xr.scenecore.internal.Entity? updatedParent, androidx.xr.scenecore.internal.Entity? disposedEntity);
    method public androidx.xr.runtime.math.Ray getCurrentInputRay();
    method public androidx.xr.runtime.math.Pose getCurrentPose();
    method public androidx.xr.runtime.math.Vector3 getCurrentScale();
    method public androidx.xr.scenecore.internal.Entity? getDisposedEntity();
    method public androidx.xr.runtime.math.Ray getInitialInputRay();
    method public androidx.xr.scenecore.internal.Entity getInitialParent();
    method public int getMoveState();
    method public androidx.xr.runtime.math.Pose getPreviousPose();
    method public androidx.xr.runtime.math.Vector3 getPreviousScale();
    method public androidx.xr.scenecore.internal.Entity? getUpdatedParent();
    property public androidx.xr.runtime.math.Ray currentInputRay;
    property public androidx.xr.runtime.math.Pose currentPose;
    property public androidx.xr.runtime.math.Vector3 currentScale;
    property public androidx.xr.scenecore.internal.Entity? disposedEntity;
    property public androidx.xr.runtime.math.Ray initialInputRay;
    property public androidx.xr.scenecore.internal.Entity initialParent;
    property public int moveState;
    property public androidx.xr.runtime.math.Pose previousPose;
    property public androidx.xr.runtime.math.Vector3 previousScale;
    property public androidx.xr.scenecore.internal.Entity? updatedParent;
    field public static final androidx.xr.scenecore.internal.MoveEvent.Companion Companion;
    field public static final int MOVE_STATE_END = 3; // 0x3
    field public static final int MOVE_STATE_ONGOING = 2; // 0x2
    field public static final int MOVE_STATE_START = 1; // 0x1
  }

  public static final class MoveEvent.Companion {
    property public static int MOVE_STATE_END;
    property public static int MOVE_STATE_ONGOING;
    property public static int MOVE_STATE_START;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public fun interface MoveEventListener {
    method public void onMoveEvent(androidx.xr.scenecore.internal.MoveEvent event);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface PanelEntity extends androidx.xr.scenecore.internal.Entity {
    method public float getCornerRadius();
    method public androidx.xr.scenecore.internal.PerceivedResolutionResult getPerceivedResolution();
    method public androidx.xr.scenecore.internal.Dimensions getSize();
    method public androidx.xr.scenecore.internal.PixelDimensions getSizeInPixels();
    method public void setCornerRadius(float);
    method public void setSize(androidx.xr.scenecore.internal.Dimensions);
    method public void setSizeInPixels(androidx.xr.scenecore.internal.PixelDimensions);
    property public abstract float cornerRadius;
    property public abstract androidx.xr.scenecore.internal.Dimensions size;
    property public abstract androidx.xr.scenecore.internal.PixelDimensions sizeInPixels;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract sealed class PerceivedResolutionResult {
  }

  public static final class PerceivedResolutionResult.EntityTooClose extends androidx.xr.scenecore.internal.PerceivedResolutionResult {
    ctor public PerceivedResolutionResult.EntityTooClose();
  }

  public static final class PerceivedResolutionResult.InvalidCameraView extends androidx.xr.scenecore.internal.PerceivedResolutionResult {
    ctor public PerceivedResolutionResult.InvalidCameraView();
  }

  public static final class PerceivedResolutionResult.Success extends androidx.xr.scenecore.internal.PerceivedResolutionResult {
    ctor public PerceivedResolutionResult.Success(androidx.xr.scenecore.internal.PixelDimensions perceivedResolution);
    method public androidx.xr.scenecore.internal.PixelDimensions getPerceivedResolution();
    property public androidx.xr.scenecore.internal.PixelDimensions perceivedResolution;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface PerceptionSpaceActivityPose extends androidx.xr.scenecore.internal.ActivityPose {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class PixelDimensions {
    ctor public PixelDimensions(int width, int height);
    property public int height;
    property public int width;
    field public final int height;
    field public final int width;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public enum PlaneSemantic {
    enum_constant public static final androidx.xr.scenecore.internal.PlaneSemantic ANY;
    enum_constant public static final androidx.xr.scenecore.internal.PlaneSemantic CEILING;
    enum_constant public static final androidx.xr.scenecore.internal.PlaneSemantic FLOOR;
    enum_constant public static final androidx.xr.scenecore.internal.PlaneSemantic TABLE;
    enum_constant public static final androidx.xr.scenecore.internal.PlaneSemantic WALL;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public enum PlaneType {
    enum_constant public static final androidx.xr.scenecore.internal.PlaneType ANY;
    enum_constant public static final androidx.xr.scenecore.internal.PlaneType HORIZONTAL;
    enum_constant public static final androidx.xr.scenecore.internal.PlaneType VERTICAL;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class PointSourceParams {
    ctor public PointSourceParams(androidx.xr.scenecore.internal.Entity entity);
    method public androidx.xr.scenecore.internal.Entity getEntity();
    property public androidx.xr.scenecore.internal.Entity entity;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface PointerCaptureComponent extends androidx.xr.scenecore.internal.Component {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static @interface PointerCaptureComponent.PointerCaptureState {
    field public static final androidx.xr.scenecore.internal.PointerCaptureComponent.PointerCaptureState.Companion Companion;
    field public static final int POINTER_CAPTURE_STATE_ACTIVE = 1; // 0x1
    field public static final int POINTER_CAPTURE_STATE_PAUSED = 0; // 0x0
    field public static final int POINTER_CAPTURE_STATE_STOPPED = 2; // 0x2
  }

  public static final class PointerCaptureComponent.PointerCaptureState.Companion {
    property public static int POINTER_CAPTURE_STATE_ACTIVE;
    property public static int POINTER_CAPTURE_STATE_PAUSED;
    property public static int POINTER_CAPTURE_STATE_STOPPED;
    field public static final int POINTER_CAPTURE_STATE_ACTIVE = 1; // 0x1
    field public static final int POINTER_CAPTURE_STATE_PAUSED = 0; // 0x0
    field public static final int POINTER_CAPTURE_STATE_STOPPED = 2; // 0x2
  }

  public static fun interface PointerCaptureComponent.StateListener {
    method public void onStateChanged(@androidx.xr.scenecore.internal.PointerCaptureComponent.PointerCaptureState int newState);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface RenderingEntityFactory {
    method public androidx.xr.scenecore.internal.GltfEntity createGltfEntity(androidx.xr.scenecore.internal.GltfFeature feature, androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.Entity parentEntity);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface RenderingRuntime extends androidx.xr.runtime.internal.JxrRuntime {
    method public androidx.xr.scenecore.internal.TextureResource? borrowReflectionTexture();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.MaterialResource>? createKhronosPbrMaterial(androidx.xr.scenecore.internal.KhronosPbrMaterialSpec spec);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.MaterialResource> createWaterMaterial(boolean isAlphaMapVersion);
    method public void destroyKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material);
    method public void destroyTexture(androidx.xr.scenecore.internal.TextureResource texture);
    method public void destroyWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material);
    method public void dispose();
    method public androidx.xr.scenecore.internal.TextureResource? getReflectionTextureFromIbl(androidx.xr.scenecore.internal.ExrImageResource iblToken);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.ExrImageResource> loadExrImageByAssetName(String assetName);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.ExrImageResource> loadExrImageByByteArray(byte[] assetData, String assetKey);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.GltfModelResource> loadGltfByAssetName(String assetName);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.GltfModelResource> loadGltfByByteArray(byte[] assetData, String assetKey);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.internal.TextureResource> loadTexture(String assetName);
    method public void setAlphaCutoffOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float alphaCutoff);
    method public void setAlphaMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource alphaMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setAlphaStepMultiplierOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float alphaStepMultiplier);
    method public void setAmbientOcclusionFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setAmbientOcclusionTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource ambientOcclusion, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setAmbientOcclusionUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setBaseColorFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Vector4 factors);
    method public void setBaseColorTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource baseColor, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setBaseColorUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setClearcoatFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float intensity, float roughness, float normal);
    method public void setClearcoatNormalTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource clearcoatNormal, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setClearcoatRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource clearcoatRoughness, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setClearcoatTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource clearcoat, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setEmissiveFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Vector3 factors);
    method public void setEmissiveTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource emissive, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setEmissiveUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setIndexOfRefractionOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float indexOfRefraction);
    method public void setMetallicFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setMetallicRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource metallicRoughness, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setMetallicRoughnessUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setNormalBoundaryOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalBoundary);
    method public void setNormalFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setNormalMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource normalMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setNormalSpeedOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalSpeed);
    method public void setNormalTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource normal, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setNormalTilingOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalTiling);
    method public void setNormalUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setNormalZOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, float normalZ);
    method public void setReflectionMapOnWaterMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource reflectionMap, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setRoughnessFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setSheenColorFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Vector3 factors);
    method public void setSheenColorTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource sheenColor, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setSheenRoughnessFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setSheenRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource sheenRoughness, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setTransmissionFactorOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, float factor);
    method public void setTransmissionTextureOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.scenecore.internal.TextureResource transmission, androidx.xr.scenecore.internal.TextureSampler sampler);
    method public void setTransmissionUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.internal.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void startRenderer();
    method public void stopRenderer();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ResizableComponent extends androidx.xr.scenecore.internal.Component {
    method public void addResizeEventListener(java.util.concurrent.Executor executor, androidx.xr.scenecore.internal.ResizeEventListener resizeEventListener);
    method public boolean getAutoHideContent();
    method public boolean getAutoUpdateSize();
    method public float getFixedAspectRatio();
    method public boolean getForceShowResizeOverlay();
    method public androidx.xr.scenecore.internal.Dimensions getMaximumSize();
    method public androidx.xr.scenecore.internal.Dimensions getMinimumSize();
    method public androidx.xr.scenecore.internal.Dimensions getSize();
    method public void removeResizeEventListener(androidx.xr.scenecore.internal.ResizeEventListener resizeEventListener);
    method public void setAutoHideContent(boolean);
    method public void setAutoUpdateSize(boolean);
    method public void setFixedAspectRatio(float);
    method public void setForceShowResizeOverlay(boolean);
    method public void setMaximumSize(androidx.xr.scenecore.internal.Dimensions);
    method public void setMinimumSize(androidx.xr.scenecore.internal.Dimensions);
    method public void setSize(androidx.xr.scenecore.internal.Dimensions);
    property public abstract boolean autoHideContent;
    property public abstract boolean autoUpdateSize;
    property public abstract float fixedAspectRatio;
    property public abstract boolean forceShowResizeOverlay;
    property public abstract androidx.xr.scenecore.internal.Dimensions maximumSize;
    property public abstract androidx.xr.scenecore.internal.Dimensions minimumSize;
    property public abstract androidx.xr.scenecore.internal.Dimensions size;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ResizeEvent {
    ctor public ResizeEvent(int resizeState, androidx.xr.scenecore.internal.Dimensions newSize);
    method public androidx.xr.scenecore.internal.Dimensions getNewSize();
    method public int getResizeState();
    property public androidx.xr.scenecore.internal.Dimensions newSize;
    property public int resizeState;
    field public static final androidx.xr.scenecore.internal.ResizeEvent.Companion Companion;
    field public static final int RESIZE_STATE_END = 3; // 0x3
    field public static final int RESIZE_STATE_ONGOING = 2; // 0x2
    field public static final int RESIZE_STATE_START = 1; // 0x1
    field public static final int RESIZE_STATE_UNKNOWN = 0; // 0x0
  }

  public static final class ResizeEvent.Companion {
    property public static int RESIZE_STATE_END;
    property public static int RESIZE_STATE_ONGOING;
    property public static int RESIZE_STATE_START;
    property public static int RESIZE_STATE_UNKNOWN;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public fun interface ResizeEventListener {
    method public void onResizeEvent(androidx.xr.scenecore.internal.ResizeEvent event);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Resource {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SceneRuntime extends androidx.xr.runtime.internal.JxrRuntime {
    method public void addPerceivedResolutionChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions> listener);
    method public void addSpatialCapabilitiesChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialCapabilities> listener);
    method public void clearSpatialVisibilityChangedListener();
    method public androidx.xr.scenecore.internal.ActivityPanelEntity createActivityPanelEntity(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.internal.PixelDimensions windowBoundsPx, String name, android.app.Activity hostActivity, androidx.xr.scenecore.internal.Entity parent);
    method public androidx.xr.scenecore.internal.AnchorEntity createAnchorEntity(androidx.xr.arcore.internal.Anchor anchor);
    method public androidx.xr.scenecore.internal.AnchorEntity createAnchorEntity(androidx.xr.scenecore.internal.Dimensions bounds, androidx.xr.scenecore.internal.PlaneType planeType, androidx.xr.scenecore.internal.PlaneSemantic planeSemantic, java.time.Duration searchTimeout);
    method public androidx.xr.scenecore.internal.AnchorPlacement createAnchorPlacementForPlanes(java.util.Set<androidx.xr.scenecore.internal.PlaneType> planeTypeFilter, java.util.Set<androidx.xr.scenecore.internal.PlaneSemantic> planeSemanticFilter);
    method public androidx.xr.scenecore.internal.Entity createGroupEntity(androidx.xr.runtime.math.Pose pose, String name, androidx.xr.scenecore.internal.Entity parent);
    method public androidx.xr.scenecore.internal.InteractableComponent createInteractableComponent(java.util.concurrent.Executor executor, androidx.xr.scenecore.internal.InputEventListener listener);
    method public androidx.xr.scenecore.internal.LoggingEntity createLoggingEntity(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.scenecore.internal.PanelEntity createPanelEntity(android.content.Context context, androidx.xr.runtime.math.Pose pose, android.view.View view, androidx.xr.scenecore.internal.Dimensions dimensions, String name, androidx.xr.scenecore.internal.Entity parent);
    method public androidx.xr.scenecore.internal.PanelEntity createPanelEntity(android.content.Context context, androidx.xr.runtime.math.Pose pose, android.view.View view, androidx.xr.scenecore.internal.PixelDimensions pixelDimensions, String name, androidx.xr.scenecore.internal.Entity parent);
    method public androidx.xr.scenecore.internal.AnchorEntity createPersistedAnchorEntity(java.util.UUID uuid, java.time.Duration searchTimeout);
    method public void dispose();
    method public void enablePanelDepthTest(boolean enabled);
    method public androidx.xr.scenecore.internal.ActivitySpace getActivitySpace();
    method public androidx.xr.scenecore.internal.AudioTrackExtensionsWrapper getAudioTrackExtensionsWrapper();
    method public androidx.xr.scenecore.internal.CameraViewActivityPose? getCameraViewActivityPose(@androidx.xr.scenecore.internal.CameraViewActivityPose.CameraType int cameraType);
    method public androidx.xr.scenecore.internal.HeadActivityPose? getHeadActivityPose();
    method public androidx.xr.scenecore.internal.PanelEntity getMainPanelEntity();
    method public androidx.xr.scenecore.internal.MediaPlayerExtensionsWrapper getMediaPlayerExtensionsWrapper();
    method public androidx.xr.scenecore.internal.PerceptionSpaceActivityPose getPerceptionSpaceActivityPose();
    method public androidx.xr.scenecore.internal.SoundPoolExtensionsWrapper getSoundPoolExtensionsWrapper();
    method public androidx.xr.scenecore.internal.SpatialCapabilities getSpatialCapabilities();
    method public androidx.xr.scenecore.internal.SpatialEnvironment getSpatialEnvironment();
    method public androidx.xr.scenecore.internal.SpatialModeChangeListener? getSpatialModeChangeListener();
    method public void removePerceivedResolutionChangedListener(java.util.function.Consumer<androidx.xr.scenecore.internal.PixelDimensions> listener);
    method public void removeSpatialCapabilitiesChangedListener(java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialCapabilities> listener);
    method public void requestFullSpaceMode();
    method public void requestHomeSpaceMode();
    method public android.os.Bundle setFullSpaceMode(android.os.Bundle bundle);
    method public android.os.Bundle setFullSpaceModeWithEnvironmentInherited(android.os.Bundle bundle);
    method public void setPreferredAspectRatio(android.app.Activity activity, float preferredRatio);
    method public void setSpatialModeChangeListener(androidx.xr.scenecore.internal.SpatialModeChangeListener?);
    method public void setSpatialVisibilityChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.internal.SpatialVisibility> listener);
    property public abstract androidx.xr.scenecore.internal.ActivitySpace activitySpace;
    property public abstract androidx.xr.scenecore.internal.AudioTrackExtensionsWrapper audioTrackExtensionsWrapper;
    property public abstract androidx.xr.scenecore.internal.HeadActivityPose? headActivityPose;
    property public abstract androidx.xr.scenecore.internal.PanelEntity mainPanelEntity;
    property public abstract androidx.xr.scenecore.internal.MediaPlayerExtensionsWrapper mediaPlayerExtensionsWrapper;
    property public abstract androidx.xr.scenecore.internal.PerceptionSpaceActivityPose perceptionSpaceActivityPose;
    property public abstract androidx.xr.scenecore.internal.SoundPoolExtensionsWrapper soundPoolExtensionsWrapper;
    property public abstract androidx.xr.scenecore.internal.SpatialCapabilities spatialCapabilities;
    property public abstract androidx.xr.scenecore.internal.SpatialEnvironment spatialEnvironment;
    property public abstract androidx.xr.scenecore.internal.SpatialModeChangeListener? spatialModeChangeListener;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SoundFieldAttributes {
    ctor public SoundFieldAttributes(@androidx.xr.scenecore.internal.SpatializerConstants.AmbisonicsOrder int ambisonicsOrder);
    method public int getAmbisonicsOrder();
    property public int ambisonicsOrder;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SoundPoolExtensionsWrapper {
    method @androidx.xr.scenecore.internal.SpatializerConstants.SourceType public int getSpatialSourceType(android.media.SoundPool soundPool, int streamId);
    method public int play(android.media.SoundPool soundPool, int soundId, androidx.xr.scenecore.internal.PointSourceParams params, float volume, int priority, int loop, float rate);
    method public int play(android.media.SoundPool soundPool, int soundId, androidx.xr.scenecore.internal.SoundFieldAttributes attributes, float volume, int priority, int loop, float rate);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class Space {
    property public static int ACTIVITY;
    property public static int PARENT;
    property public static int REAL_WORLD;
    field public static final int ACTIVITY = 1; // 0x1
    field public static final androidx.xr.scenecore.internal.Space INSTANCE;
    field public static final int PARENT = 0; // 0x0
    field public static final int REAL_WORLD = 2; // 0x2
  }

  @IntDef({androidx.xr.scenecore.internal.Space.PARENT, androidx.xr.scenecore.internal.Space.ACTIVITY, androidx.xr.scenecore.internal.Space.REAL_WORLD}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) public @interface SpaceValue {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatialCapabilities {
    ctor public SpatialCapabilities(int capabilities);
    method public int getCapabilities();
    method public boolean hasCapability(int capability);
    property public int capabilities;
    field public static final androidx.xr.scenecore.internal.SpatialCapabilities.Companion Companion;
    field public static final int SPATIAL_CAPABILITY_3D_CONTENT = 2; // 0x2
    field public static final int SPATIAL_CAPABILITY_APP_ENVIRONMENT = 8; // 0x8
    field public static final int SPATIAL_CAPABILITY_EMBED_ACTIVITY = 32; // 0x20
    field public static final int SPATIAL_CAPABILITY_PASSTHROUGH_CONTROL = 4; // 0x4
    field public static final int SPATIAL_CAPABILITY_SPATIAL_AUDIO = 16; // 0x10
    field public static final int SPATIAL_CAPABILITY_UI = 1; // 0x1
  }

  public static final class SpatialCapabilities.Companion {
    property public static int SPATIAL_CAPABILITY_3D_CONTENT;
    property public static int SPATIAL_CAPABILITY_APP_ENVIRONMENT;
    property public static int SPATIAL_CAPABILITY_EMBED_ACTIVITY;
    property public static int SPATIAL_CAPABILITY_PASSTHROUGH_CONTROL;
    property public static int SPATIAL_CAPABILITY_SPATIAL_AUDIO;
    property public static int SPATIAL_CAPABILITY_UI;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SpatialEnvironment {
    method public void addOnPassthroughOpacityChangedListener(java.util.concurrent.Executor executor, java.util.function.Consumer<java.lang.Float> listener);
    method public void addOnSpatialEnvironmentChangedListener(java.util.concurrent.Executor executor, java.util.function.Consumer<java.lang.Boolean> listener);
    method public float getCurrentPassthroughOpacity();
    method public float getPreferredPassthroughOpacity();
    method public androidx.xr.scenecore.internal.SpatialEnvironment.SpatialEnvironmentPreference? getPreferredSpatialEnvironment();
    method public boolean isPreferredSpatialEnvironmentActive();
    method public void removeOnPassthroughOpacityChangedListener(java.util.function.Consumer<java.lang.Float> listener);
    method public void removeOnSpatialEnvironmentChangedListener(java.util.function.Consumer<java.lang.Boolean> listener);
    method public void setPreferredPassthroughOpacity(float);
    method public void setPreferredSpatialEnvironment(androidx.xr.scenecore.internal.SpatialEnvironment.SpatialEnvironmentPreference?);
    property public abstract float currentPassthroughOpacity;
    property public abstract boolean isPreferredSpatialEnvironmentActive;
    property public abstract float preferredPassthroughOpacity;
    property public abstract androidx.xr.scenecore.internal.SpatialEnvironment.SpatialEnvironmentPreference? preferredSpatialEnvironment;
    field public static final androidx.xr.scenecore.internal.SpatialEnvironment.Companion Companion;
    field public static final float NO_PASSTHROUGH_OPACITY_PREFERENCE = (-1.0f/0.0f);
  }

  public static final class SpatialEnvironment.Companion {
    property public static float NO_PASSTHROUGH_OPACITY_PREFERENCE;
    field public static final float NO_PASSTHROUGH_OPACITY_PREFERENCE = (-1.0f/0.0f);
  }

  public static final class SpatialEnvironment.SpatialEnvironmentPreference {
    ctor public SpatialEnvironment.SpatialEnvironmentPreference(androidx.xr.scenecore.internal.ExrImageResource? skybox, androidx.xr.scenecore.internal.GltfModelResource? geometry);
    ctor public SpatialEnvironment.SpatialEnvironmentPreference(androidx.xr.scenecore.internal.ExrImageResource? skybox, androidx.xr.scenecore.internal.GltfModelResource? geometry, optional androidx.xr.scenecore.internal.MaterialResource? geometryMaterial);
    ctor public SpatialEnvironment.SpatialEnvironmentPreference(androidx.xr.scenecore.internal.ExrImageResource? skybox, androidx.xr.scenecore.internal.GltfModelResource? geometry, optional androidx.xr.scenecore.internal.MaterialResource? geometryMaterial, optional String? geometryMeshName);
    ctor public SpatialEnvironment.SpatialEnvironmentPreference(androidx.xr.scenecore.internal.ExrImageResource? skybox, androidx.xr.scenecore.internal.GltfModelResource? geometry, optional androidx.xr.scenecore.internal.MaterialResource? geometryMaterial, optional String? geometryMeshName, optional String? geometryAnimationName);
    method public androidx.xr.scenecore.internal.GltfModelResource? getGeometry();
    method public String? getGeometryAnimationName();
    method public androidx.xr.scenecore.internal.MaterialResource? getGeometryMaterial();
    method public String? getGeometryMeshName();
    method public androidx.xr.scenecore.internal.ExrImageResource? getSkybox();
    property public androidx.xr.scenecore.internal.GltfModelResource? geometry;
    property public String? geometryAnimationName;
    property public androidx.xr.scenecore.internal.MaterialResource? geometryMaterial;
    property public String? geometryMeshName;
    property public androidx.xr.scenecore.internal.ExrImageResource? skybox;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public fun interface SpatialModeChangeListener {
    method public void onSpatialModeChanged(androidx.xr.runtime.math.Pose recommendedPose, androidx.xr.runtime.math.Vector3 recommendedScale);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SpatialPointerComponent extends androidx.xr.scenecore.internal.Component {
    method @androidx.xr.scenecore.internal.SpatialPointerIconType public int getSpatialPointerIcon();
    method public void setSpatialPointerIcon(@androidx.xr.scenecore.internal.SpatialPointerIconType int iconType);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatialPointerIcon {
    property public static int TYPE_CIRCLE;
    property public static int TYPE_DEFAULT;
    property public static int TYPE_NONE;
    field public static final androidx.xr.scenecore.internal.SpatialPointerIcon INSTANCE;
    field public static final int TYPE_CIRCLE = 2; // 0x2
    field public static final int TYPE_DEFAULT = 1; // 0x1
    field public static final int TYPE_NONE = 0; // 0x0
  }

  @IntDef({androidx.xr.scenecore.internal.SpatialPointerIcon.TYPE_NONE, androidx.xr.scenecore.internal.SpatialPointerIcon.TYPE_DEFAULT, androidx.xr.scenecore.internal.SpatialPointerIcon.TYPE_CIRCLE}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) public @interface SpatialPointerIconType {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatialVisibility {
    ctor public SpatialVisibility(int visibility);
    method public int getVisibility();
    property public int visibility;
    field public static final androidx.xr.scenecore.internal.SpatialVisibility.Companion Companion;
    field public static final int OUTSIDE_FOV = 1; // 0x1
    field public static final int PARTIALLY_WITHIN_FOV = 2; // 0x2
    field public static final int UNKNOWN = 0; // 0x0
    field public static final int WITHIN_FOV = 3; // 0x3
  }

  public static final class SpatialVisibility.Companion {
    property public static int OUTSIDE_FOV;
    property public static int PARTIALLY_WITHIN_FOV;
    property public static int UNKNOWN;
    property public static int WITHIN_FOV;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatializerConstants {
    ctor public SpatializerConstants();
    field public static final int AMBISONICS_ORDER_FIRST_ORDER = 0; // 0x0
    field public static final int AMBISONICS_ORDER_SECOND_ORDER = 1; // 0x1
    field public static final int AMBISONICS_ORDER_THIRD_ORDER = 2; // 0x2
    field public static final androidx.xr.scenecore.internal.SpatializerConstants.Companion Companion;
    field public static final int SOURCE_TYPE_BYPASS = 0; // 0x0
    field public static final int SOURCE_TYPE_POINT_SOURCE = 1; // 0x1
    field public static final int SOURCE_TYPE_SOUND_FIELD = 2; // 0x2
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SpatializerConstants.AmbisonicsOrder {
    field public static final int AMBISONICS_ORDER_FIRST_ORDER = 0; // 0x0
    field public static final int AMBISONICS_ORDER_SECOND_ORDER = 1; // 0x1
    field public static final int AMBISONICS_ORDER_THIRD_ORDER = 2; // 0x2
    field public static final androidx.xr.scenecore.internal.SpatializerConstants.AmbisonicsOrder.Companion Companion;
  }

  public static final class SpatializerConstants.AmbisonicsOrder.Companion {
    property public static int AMBISONICS_ORDER_FIRST_ORDER;
    property public static int AMBISONICS_ORDER_SECOND_ORDER;
    property public static int AMBISONICS_ORDER_THIRD_ORDER;
    field public static final int AMBISONICS_ORDER_FIRST_ORDER = 0; // 0x0
    field public static final int AMBISONICS_ORDER_SECOND_ORDER = 1; // 0x1
    field public static final int AMBISONICS_ORDER_THIRD_ORDER = 2; // 0x2
  }

  public static final class SpatializerConstants.Companion {
    property public static int AMBISONICS_ORDER_FIRST_ORDER;
    property public static int AMBISONICS_ORDER_SECOND_ORDER;
    property public static int AMBISONICS_ORDER_THIRD_ORDER;
    property public static int SOURCE_TYPE_BYPASS;
    property public static int SOURCE_TYPE_POINT_SOURCE;
    property public static int SOURCE_TYPE_SOUND_FIELD;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SpatializerConstants.SourceType {
    field public static final androidx.xr.scenecore.internal.SpatializerConstants.SourceType.Companion Companion;
    field public static final int SOURCE_TYPE_BYPASS = 0; // 0x0
    field public static final int SOURCE_TYPE_POINT_SOURCE = 1; // 0x1
    field public static final int SOURCE_TYPE_SOUND_FIELD = 2; // 0x2
  }

  public static final class SpatializerConstants.SourceType.Companion {
    property public static int SOURCE_TYPE_BYPASS;
    property public static int SOURCE_TYPE_POINT_SOURCE;
    property public static int SOURCE_TYPE_SOUND_FIELD;
    field public static final int SOURCE_TYPE_BYPASS = 0; // 0x0
    field public static final int SOURCE_TYPE_POINT_SOURCE = 1; // 0x1
    field public static final int SOURCE_TYPE_SOUND_FIELD = 2; // 0x2
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SubspaceNodeEntity extends androidx.xr.scenecore.internal.Entity {
    method public androidx.xr.scenecore.internal.Dimensions getSize();
    method public void setSize(androidx.xr.scenecore.internal.Dimensions);
    property public abstract androidx.xr.scenecore.internal.Dimensions size;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SurfaceEntity extends androidx.xr.scenecore.internal.Entity {
    method public int getColorRange();
    method public int getColorSpace();
    method public int getColorTransfer();
    method public boolean getContentColorMetadataSet();
    method public androidx.xr.scenecore.internal.Dimensions getDimensions();
    method public androidx.xr.scenecore.internal.SurfaceEntity.EdgeFeather getEdgeFeather();
    method public int getMaxContentLightLevel();
    method public androidx.xr.scenecore.internal.PerceivedResolutionResult getPerceivedResolution();
    method public androidx.xr.scenecore.internal.SurfaceEntity.Shape getShape();
    method public int getStereoMode();
    method public android.view.Surface getSurface();
    method public void resetContentColorMetadata();
    method public void setAuxiliaryAlphaMaskTexture(androidx.xr.scenecore.internal.TextureResource? alphaMask);
    method public void setContentColorMetadata(int colorSpace, int colorTransfer, int colorRange, int maxContentLightLevel);
    method public void setEdgeFeather(androidx.xr.scenecore.internal.SurfaceEntity.EdgeFeather);
    method public void setPrimaryAlphaMaskTexture(androidx.xr.scenecore.internal.TextureResource? alphaMask);
    method public void setShape(androidx.xr.scenecore.internal.SurfaceEntity.Shape);
    method public void setStereoMode(int);
    property public abstract int colorRange;
    property public abstract int colorSpace;
    property public abstract int colorTransfer;
    property public abstract boolean contentColorMetadataSet;
    property public abstract androidx.xr.scenecore.internal.Dimensions dimensions;
    property public abstract androidx.xr.scenecore.internal.SurfaceEntity.EdgeFeather edgeFeather;
    property public abstract int maxContentLightLevel;
    property public abstract androidx.xr.scenecore.internal.SurfaceEntity.Shape shape;
    property public abstract int stereoMode;
    property public abstract android.view.Surface surface;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SurfaceEntity.ColorRange {
    field public static final androidx.xr.scenecore.internal.SurfaceEntity.ColorRange.Companion Companion;
    field public static final int FULL = 1; // 0x1
    field public static final int LIMITED = 2; // 0x2
  }

  public static final class SurfaceEntity.ColorRange.Companion {
    property public static int FULL;
    property public static int LIMITED;
    field public static final int FULL = 1; // 0x1
    field public static final int LIMITED = 2; // 0x2
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SurfaceEntity.ColorSpace {
    field public static final int ADOBE_RGB = 243; // 0xf3
    field public static final int BT2020 = 6; // 0x6
    field public static final int BT601_525 = 240; // 0xf0
    field public static final int BT601_PAL = 2; // 0x2
    field public static final int BT709 = 1; // 0x1
    field public static final androidx.xr.scenecore.internal.SurfaceEntity.ColorSpace.Companion Companion;
    field public static final int DCI_P3 = 242; // 0xf2
    field public static final int DISPLAY_P3 = 241; // 0xf1
  }

  public static final class SurfaceEntity.ColorSpace.Companion {
    property public static int ADOBE_RGB;
    property public static int BT2020;
    property public static int BT601_525;
    property public static int BT601_PAL;
    property public static int BT709;
    property public static int DCI_P3;
    property public static int DISPLAY_P3;
    field public static final int ADOBE_RGB = 243; // 0xf3
    field public static final int BT2020 = 6; // 0x6
    field public static final int BT601_525 = 240; // 0xf0
    field public static final int BT601_PAL = 2; // 0x2
    field public static final int BT709 = 1; // 0x1
    field public static final int DCI_P3 = 242; // 0xf2
    field public static final int DISPLAY_P3 = 241; // 0xf1
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SurfaceEntity.ColorTransfer {
    field public static final androidx.xr.scenecore.internal.SurfaceEntity.ColorTransfer.Companion Companion;
    field public static final int GAMMA_2_2 = 10; // 0xa
    field public static final int HLG = 7; // 0x7
    field public static final int LINEAR = 1; // 0x1
    field public static final int SDR = 3; // 0x3
    field public static final int SRGB = 2; // 0x2
    field public static final int ST2084 = 6; // 0x6
  }

  public static final class SurfaceEntity.ColorTransfer.Companion {
    property public static int GAMMA_2_2;
    property public static int HLG;
    property public static int LINEAR;
    property public static int SDR;
    property public static int SRGB;
    property public static int ST2084;
    field public static final int GAMMA_2_2 = 10; // 0xa
    field public static final int HLG = 7; // 0x7
    field public static final int LINEAR = 1; // 0x1
    field public static final int SDR = 3; // 0x3
    field public static final int SRGB = 2; // 0x2
    field public static final int ST2084 = 6; // 0x6
  }

  public static interface SurfaceEntity.EdgeFeather {
  }

  public static final class SurfaceEntity.EdgeFeather.NoFeathering implements androidx.xr.scenecore.internal.SurfaceEntity.EdgeFeather {
    ctor public SurfaceEntity.EdgeFeather.NoFeathering();
  }

  public static final class SurfaceEntity.EdgeFeather.RectangleFeather implements androidx.xr.scenecore.internal.SurfaceEntity.EdgeFeather {
    ctor public SurfaceEntity.EdgeFeather.RectangleFeather(float leftRight, float topBottom);
    method public float getLeftRight();
    method public float getTopBottom();
    property public float leftRight;
    property public float topBottom;
  }

  public static interface SurfaceEntity.Shape {
    method public androidx.xr.scenecore.internal.Dimensions getDimensions();
    property public abstract androidx.xr.scenecore.internal.Dimensions dimensions;
  }

  public static final class SurfaceEntity.Shape.Hemisphere implements androidx.xr.scenecore.internal.SurfaceEntity.Shape {
    ctor public SurfaceEntity.Shape.Hemisphere(float radius);
    method public androidx.xr.scenecore.internal.Dimensions getDimensions();
    method public float getRadius();
    property public androidx.xr.scenecore.internal.Dimensions dimensions;
    property public float radius;
  }

  public static final class SurfaceEntity.Shape.Quad implements androidx.xr.scenecore.internal.SurfaceEntity.Shape {
    ctor public SurfaceEntity.Shape.Quad(androidx.xr.runtime.math.FloatSize2d extents);
    method public androidx.xr.scenecore.internal.Dimensions getDimensions();
    method public androidx.xr.runtime.math.FloatSize2d getExtents();
    property public androidx.xr.scenecore.internal.Dimensions dimensions;
    property public androidx.xr.runtime.math.FloatSize2d extents;
  }

  public static final class SurfaceEntity.Shape.Sphere implements androidx.xr.scenecore.internal.SurfaceEntity.Shape {
    ctor public SurfaceEntity.Shape.Sphere(float radius);
    method public androidx.xr.scenecore.internal.Dimensions getDimensions();
    method public float getRadius();
    property public androidx.xr.scenecore.internal.Dimensions dimensions;
    property public float radius;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SurfaceEntity.StereoMode {
    field public static final androidx.xr.scenecore.internal.SurfaceEntity.StereoMode.Companion Companion;
    field public static final int MONO = 0; // 0x0
    field public static final int MULTIVIEW_LEFT_PRIMARY = 4; // 0x4
    field public static final int MULTIVIEW_RIGHT_PRIMARY = 5; // 0x5
    field public static final int SIDE_BY_SIDE = 2; // 0x2
    field public static final int TOP_BOTTOM = 1; // 0x1
  }

  public static final class SurfaceEntity.StereoMode.Companion {
    property public static int MONO;
    property public static int MULTIVIEW_LEFT_PRIMARY;
    property public static int MULTIVIEW_RIGHT_PRIMARY;
    property public static int SIDE_BY_SIDE;
    property public static int TOP_BOTTOM;
    field public static final int MONO = 0; // 0x0
    field public static final int MULTIVIEW_LEFT_PRIMARY = 4; // 0x4
    field public static final int MULTIVIEW_RIGHT_PRIMARY = 5; // 0x5
    field public static final int SIDE_BY_SIDE = 2; // 0x2
    field public static final int TOP_BOTTOM = 1; // 0x1
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SurfaceEntity.SuperSampling {
    field public static final androidx.xr.scenecore.internal.SurfaceEntity.SuperSampling.Companion Companion;
    field public static final int DEFAULT = 1; // 0x1
    field public static final int NONE = 0; // 0x0
  }

  public static final class SurfaceEntity.SuperSampling.Companion {
    property public static int DEFAULT;
    property public static int NONE;
    field public static final int DEFAULT = 1; // 0x1
    field public static final int NONE = 0; // 0x0
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SurfaceEntity.SurfaceProtection {
    field public static final androidx.xr.scenecore.internal.SurfaceEntity.SurfaceProtection.Companion Companion;
    field public static final int NONE = 0; // 0x0
    field public static final int PROTECTED = 1; // 0x1
  }

  public static final class SurfaceEntity.SurfaceProtection.Companion {
    property public static int NONE;
    property public static int PROTECTED;
    field public static final int NONE = 0; // 0x0
    field public static final int PROTECTED = 1; // 0x1
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SystemSpaceEntity extends androidx.xr.scenecore.internal.Entity {
    method public void setOnSpaceUpdatedListener(Runnable? listener, java.util.concurrent.Executor? executor);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface TextureResource extends androidx.xr.scenecore.internal.Resource {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class TextureSampler {
    ctor public TextureSampler(@androidx.xr.scenecore.internal.TextureSampler.WrapMode int wrapModeS, @androidx.xr.scenecore.internal.TextureSampler.WrapMode int wrapModeT, @androidx.xr.scenecore.internal.TextureSampler.WrapMode int wrapModeR, @androidx.xr.scenecore.internal.TextureSampler.WrapMode int minFilter, @androidx.xr.scenecore.internal.TextureSampler.WrapMode int magFilter, @androidx.xr.scenecore.internal.TextureSampler.WrapMode int compareMode, @androidx.xr.scenecore.internal.TextureSampler.WrapMode int compareFunc, @androidx.xr.scenecore.internal.TextureSampler.WrapMode int anisotropyLog2);
    method public int getAnisotropyLog2();
    method public int getCompareFunc();
    method public int getCompareMode();
    method public int getMagFilter();
    method public int getMinFilter();
    method public int getWrapModeR();
    method public int getWrapModeS();
    method public int getWrapModeT();
    property public int anisotropyLog2;
    property public int compareFunc;
    property public int compareMode;
    property public int magFilter;
    property public int minFilter;
    property public int wrapModeR;
    property public int wrapModeS;
    property public int wrapModeT;
    field public static final int A = 6; // 0x6
    field public static final int CLAMP_TO_EDGE = 0; // 0x0
    field public static final int COMPARE_TO_TEXTURE = 1; // 0x1
    field public static final androidx.xr.scenecore.internal.TextureSampler.Companion Companion;
    field public static final int E = 4; // 0x4
    field public static final int G = 3; // 0x3
    field public static final int GE = 1; // 0x1
    field public static final int L = 2; // 0x2
    field public static final int LE = 0; // 0x0
    field public static final int LINEAR = 1; // 0x1
    field public static final int LINEAR_MIPMAP_LINEAR = 5; // 0x5
    field public static final int LINEAR_MIPMAP_NEAREST = 3; // 0x3
    field public static final int MAG_LINEAR = 1; // 0x1
    field public static final int MAG_NEAREST = 0; // 0x0
    field public static final int MIRRORED_REPEAT = 2; // 0x2
    field public static final int N = 7; // 0x7
    field public static final int NE = 5; // 0x5
    field public static final int NEAREST = 0; // 0x0
    field public static final int NEAREST_MIPMAP_LINEAR = 4; // 0x4
    field public static final int NEAREST_MIPMAP_NEAREST = 2; // 0x2
    field public static final int NONE = 0; // 0x0
    field public static final int REPEAT = 1; // 0x1
  }

  public static final class TextureSampler.Companion {
    property public static int A;
    property public static int CLAMP_TO_EDGE;
    property public static int COMPARE_TO_TEXTURE;
    property public static int E;
    property public static int G;
    property public static int GE;
    property public static int L;
    property public static int LE;
    property public static int LINEAR;
    property public static int LINEAR_MIPMAP_LINEAR;
    property public static int LINEAR_MIPMAP_NEAREST;
    property public static int MAG_LINEAR;
    property public static int MAG_NEAREST;
    property public static int MIRRORED_REPEAT;
    property public static int N;
    property public static int NE;
    property public static int NEAREST;
    property public static int NEAREST_MIPMAP_LINEAR;
    property public static int NEAREST_MIPMAP_NEAREST;
    property public static int NONE;
    property public static int REPEAT;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface TextureSampler.CompareFunc {
    field public static final int A = 6; // 0x6
    field public static final androidx.xr.scenecore.internal.TextureSampler.CompareFunc.Companion Companion;
    field public static final int E = 4; // 0x4
    field public static final int G = 3; // 0x3
    field public static final int GE = 1; // 0x1
    field public static final int L = 2; // 0x2
    field public static final int LE = 0; // 0x0
    field public static final int N = 7; // 0x7
    field public static final int NE = 5; // 0x5
  }

  public static final class TextureSampler.CompareFunc.Companion {
    property public static int A;
    property public static int E;
    property public static int G;
    property public static int GE;
    property public static int L;
    property public static int LE;
    property public static int N;
    property public static int NE;
    field public static final int A = 6; // 0x6
    field public static final int E = 4; // 0x4
    field public static final int G = 3; // 0x3
    field public static final int GE = 1; // 0x1
    field public static final int L = 2; // 0x2
    field public static final int LE = 0; // 0x0
    field public static final int N = 7; // 0x7
    field public static final int NE = 5; // 0x5
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface TextureSampler.CompareMode {
    field public static final int COMPARE_TO_TEXTURE = 1; // 0x1
    field public static final androidx.xr.scenecore.internal.TextureSampler.CompareMode.Companion Companion;
    field public static final int NONE = 0; // 0x0
  }

  public static final class TextureSampler.CompareMode.Companion {
    property public static int COMPARE_TO_TEXTURE;
    property public static int NONE;
    field public static final int COMPARE_TO_TEXTURE = 1; // 0x1
    field public static final int NONE = 0; // 0x0
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface TextureSampler.MagFilter {
    field public static final androidx.xr.scenecore.internal.TextureSampler.MagFilter.Companion Companion;
    field public static final int LINEAR = 1; // 0x1
    field public static final int NEAREST = 0; // 0x0
  }

  public static final class TextureSampler.MagFilter.Companion {
    property public static int LINEAR;
    property public static int NEAREST;
    field public static final int LINEAR = 1; // 0x1
    field public static final int NEAREST = 0; // 0x0
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface TextureSampler.MinFilter {
    field public static final androidx.xr.scenecore.internal.TextureSampler.MinFilter.Companion Companion;
    field public static final int LINEAR = 1; // 0x1
    field public static final int LINEAR_MIPMAP_LINEAR = 5; // 0x5
    field public static final int LINEAR_MIPMAP_NEAREST = 3; // 0x3
    field public static final int NEAREST = 0; // 0x0
    field public static final int NEAREST_MIPMAP_LINEAR = 4; // 0x4
    field public static final int NEAREST_MIPMAP_NEAREST = 2; // 0x2
  }

  public static final class TextureSampler.MinFilter.Companion {
    property public static int LINEAR;
    property public static int LINEAR_MIPMAP_LINEAR;
    property public static int LINEAR_MIPMAP_NEAREST;
    property public static int NEAREST;
    property public static int NEAREST_MIPMAP_LINEAR;
    property public static int NEAREST_MIPMAP_NEAREST;
    field public static final int LINEAR = 1; // 0x1
    field public static final int LINEAR_MIPMAP_LINEAR = 5; // 0x5
    field public static final int LINEAR_MIPMAP_NEAREST = 3; // 0x3
    field public static final int NEAREST = 0; // 0x0
    field public static final int NEAREST_MIPMAP_LINEAR = 4; // 0x4
    field public static final int NEAREST_MIPMAP_NEAREST = 2; // 0x2
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface TextureSampler.WrapMode {
    field public static final int CLAMP_TO_EDGE = 0; // 0x0
    field public static final androidx.xr.scenecore.internal.TextureSampler.WrapMode.Companion Companion;
    field public static final int MIRRORED_REPEAT = 2; // 0x2
    field public static final int REPEAT = 1; // 0x1
  }

  public static final class TextureSampler.WrapMode.Companion {
    property public static int CLAMP_TO_EDGE;
    property public static int MIRRORED_REPEAT;
    property public static int REPEAT;
    field public static final int CLAMP_TO_EDGE = 0; // 0x0
    field public static final int MIRRORED_REPEAT = 2; // 0x2
    field public static final int REPEAT = 1; // 0x1
  }

}

