// Signature format: 4.0
package androidx.xr.scenecore {

  public final class CameraView implements androidx.xr.scenecore.ScenePose {
    method public androidx.xr.runtime.math.Pose getActivitySpacePose();
    method public androidx.xr.scenecore.CameraView.CameraType getCameraType();
    method public androidx.xr.runtime.FieldOfView getFov();
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int hitTestFilter, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.HitTestResult> hitTestAsync(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.HitTestResult> hitTestAsync(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int hitTestFilter);
    method public androidx.xr.runtime.math.Pose transformPoseTo(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.ScenePose destination);
    property public androidx.xr.scenecore.CameraView.CameraType cameraType;
    property public androidx.xr.runtime.FieldOfView fov;
  }

  public enum CameraView.CameraType {
    enum_constant public static final androidx.xr.scenecore.CameraView.CameraType LEFT_EYE;
    enum_constant public static final androidx.xr.scenecore.CameraView.CameraType RIGHT_EYE;
    enum_constant public static final androidx.xr.scenecore.CameraView.CameraType UNKNOWN;
  }

  public interface Component {
  }

  public interface Entity extends androidx.xr.scenecore.ScenePose {
    method public void addChild(androidx.xr.scenecore.Entity child);
    method public boolean addComponent(androidx.xr.scenecore.Component component);
    method public void dispose();
    method @FloatRange(from=0.0, to=1.0) public default float getAlpha();
    method @FloatRange(from=0.0, to=1.0) public float getAlpha(optional int relativeTo);
    method public java.util.List<androidx.xr.scenecore.Component> getComponents();
    method public <T extends androidx.xr.scenecore.Component> java.util.List<T> getComponentsOfType(Class<? extends T> type);
    method public String getContentDescription();
    method public androidx.xr.scenecore.Entity? getParent();
    method public default androidx.xr.runtime.math.Pose getPose();
    method public androidx.xr.runtime.math.Pose getPose(optional int relativeTo);
    method @FloatRange(from=0.0) public default float getScale();
    method @FloatRange(from=0.0) public float getScale(optional int relativeTo);
    method public default boolean isEnabled(optional boolean includeParents);
    method @Deprecated public boolean isHidden(optional boolean includeParents);
    method public void removeAllComponents();
    method public void removeComponent(androidx.xr.scenecore.Component component);
    method public default void setAlpha(@FloatRange(from=0.0, to=1.0) float alpha);
    method public void setAlpha(@FloatRange(from=0.0, to=1.0) float alpha, optional int relativeTo);
    method public void setContentDescription(String);
    method public default void setEnabled(boolean enabled);
    method @Deprecated public void setHidden(boolean hidden);
    method public void setParent(androidx.xr.scenecore.Entity?);
    method public default void setPose(androidx.xr.runtime.math.Pose pose);
    method public void setPose(androidx.xr.runtime.math.Pose pose, optional int relativeTo);
    method public default void setScale(@FloatRange(from=0.0) float scale);
    method public void setScale(@FloatRange(from=0.0) float scale, optional int relativeTo);
    property public abstract String contentDescription;
    property public abstract androidx.xr.scenecore.Entity? parent;
  }

  public final class ExrImage {
    method @MainThread public static suspend Object? createFromZip(androidx.xr.runtime.Session session, android.net.Uri uri, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.ExrImage>);
    method @MainThread public static suspend Object? createFromZip(androidx.xr.runtime.Session session, java.nio.file.Path path, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.ExrImage>);
    method @MainThread public static com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.ExrImage> createFromZipAsync(androidx.xr.runtime.Session session, android.net.Uri uri);
    method @MainThread public static com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.ExrImage> createFromZipAsync(androidx.xr.runtime.Session session, java.nio.file.Path path);
    field public static final androidx.xr.scenecore.ExrImage.Companion Companion;
  }

  public static final class ExrImage.Companion {
    method @MainThread public suspend Object? createFromZip(androidx.xr.runtime.Session session, android.net.Uri uri, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.ExrImage>);
    method @MainThread public suspend Object? createFromZip(androidx.xr.runtime.Session session, java.nio.file.Path path, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.ExrImage>);
    method @MainThread public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.ExrImage> createFromZipAsync(androidx.xr.runtime.Session session, android.net.Uri uri);
    method @MainThread public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.ExrImage> createFromZipAsync(androidx.xr.runtime.Session session, java.nio.file.Path path);
  }

  public final class GltfModel {
    method @MainThread public static com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.GltfModel> createAsync(androidx.xr.runtime.Session session, android.net.Uri uri);
    method @MainThread public static com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.GltfModel> createAsync(androidx.xr.runtime.Session session, java.nio.file.Path path);
    field public static final androidx.xr.scenecore.GltfModel.Companion Companion;
  }

  public static final class GltfModel.Companion {
    method @MainThread public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.GltfModel> createAsync(androidx.xr.runtime.Session session, android.net.Uri uri);
    method @MainThread public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.GltfModel> createAsync(androidx.xr.runtime.Session session, java.nio.file.Path path);
  }

  public final class Head implements androidx.xr.scenecore.ScenePose {
    method public androidx.xr.runtime.math.Pose getActivitySpacePose();
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int hitTestFilter, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.HitTestResult> hitTestAsync(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.HitTestResult> hitTestAsync(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int hitTestFilter);
    method public androidx.xr.runtime.math.Pose transformPoseTo(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.ScenePose destination);
  }

  public final class HitTestResult {
    ctor public HitTestResult(androidx.xr.runtime.math.Vector3? hitPosition, androidx.xr.runtime.math.Vector3? surfaceNormal, int surfaceType, float distance);
    method public float getDistance();
    method public androidx.xr.runtime.math.Vector3? getHitPosition();
    method public androidx.xr.runtime.math.Vector3? getSurfaceNormal();
    method public int getSurfaceType();
    property public float distance;
    property public androidx.xr.runtime.math.Vector3? hitPosition;
    property public androidx.xr.runtime.math.Vector3? surfaceNormal;
    property public int surfaceType;
  }

  public static final class HitTestResult.SurfaceType {
    property public static int OBJECT;
    property public static int PLANE;
    property public static int UNKNOWN;
    field public static final androidx.xr.scenecore.HitTestResult.SurfaceType INSTANCE;
    field public static final int OBJECT = 2; // 0x2
    field public static final int PLANE = 1; // 0x1
    field public static final int UNKNOWN = 0; // 0x0
  }

  public class PanelEntity implements androidx.xr.scenecore.Entity androidx.xr.scenecore.ScenePose {
    method public void addChild(androidx.xr.scenecore.Entity child);
    method public boolean addComponent(androidx.xr.scenecore.Component component);
    method public static final androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.FloatSize2d dimensions, String name);
    method public static final androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.FloatSize2d dimensions, String name, optional androidx.xr.runtime.math.Pose pose);
    method public static final androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.IntSize2d pixelDimensions, String name);
    method public static final androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.IntSize2d pixelDimensions, String name, optional androidx.xr.runtime.math.Pose pose);
    method public void dispose();
    method public androidx.xr.runtime.math.Pose getActivitySpacePose();
    method public float getAlpha(int relativeTo);
    method public java.util.List<androidx.xr.scenecore.Component> getComponents();
    method public <T extends androidx.xr.scenecore.Component> java.util.List<T> getComponentsOfType(Class<? extends T> type);
    method public String getContentDescription();
    method public final float getCornerRadius();
    method public androidx.xr.scenecore.Entity? getParent();
    method public final androidx.xr.scenecore.PerceivedResolutionResult getPerceivedResolution();
    method public androidx.xr.runtime.math.Pose getPose(int relativeTo);
    method public float getScale(int relativeTo);
    method public final androidx.xr.runtime.math.FloatSize2d getSize();
    method public final androidx.xr.runtime.math.IntSize2d getSizeInPixels();
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int hitTestFilter, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.HitTestResult> hitTestAsync(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.HitTestResult> hitTestAsync(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int hitTestFilter);
    method @Deprecated public boolean isHidden(boolean includeParents);
    method public final boolean isMainPanelEntity();
    method public void removeAllComponents();
    method public void removeComponent(androidx.xr.scenecore.Component component);
    method public void setAlpha(float alpha, int relativeTo);
    method public void setContentDescription(String);
    method public final void setCornerRadius(float);
    method @Deprecated public void setHidden(boolean hidden);
    method public void setParent(androidx.xr.scenecore.Entity?);
    method public void setPose(androidx.xr.runtime.math.Pose pose, int relativeTo);
    method public void setScale(float scale, int relativeTo);
    method public final void setSize(androidx.xr.runtime.math.FloatSize2d);
    method public final void setSizeInPixels(androidx.xr.runtime.math.IntSize2d);
    method public androidx.xr.runtime.math.Pose transformPoseTo(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.ScenePose destination);
    property public final float cornerRadius;
    property public final boolean isMainPanelEntity;
    property public final androidx.xr.runtime.math.FloatSize2d size;
    property public final androidx.xr.runtime.math.IntSize2d sizeInPixels;
    field public static final androidx.xr.scenecore.PanelEntity.Companion Companion;
  }

  public static final class PanelEntity.Companion {
    method public androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.FloatSize2d dimensions, String name);
    method public androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.FloatSize2d dimensions, String name, optional androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.IntSize2d pixelDimensions, String name);
    method public androidx.xr.scenecore.PanelEntity create(androidx.xr.runtime.Session session, android.view.View view, androidx.xr.runtime.math.IntSize2d pixelDimensions, String name, optional androidx.xr.runtime.math.Pose pose);
  }

  public abstract class PerceivedResolutionResult {
  }

  public static final class PerceivedResolutionResult.EntityTooClose extends androidx.xr.scenecore.PerceivedResolutionResult {
    ctor public PerceivedResolutionResult.EntityTooClose();
  }

  public static final class PerceivedResolutionResult.InvalidCameraView extends androidx.xr.scenecore.PerceivedResolutionResult {
    ctor public PerceivedResolutionResult.InvalidCameraView();
  }

  public static final class PerceivedResolutionResult.Success extends androidx.xr.scenecore.PerceivedResolutionResult {
    ctor public PerceivedResolutionResult.Success(androidx.xr.runtime.math.IntSize2d perceivedResolution);
    method public androidx.xr.runtime.math.IntSize2d getPerceivedResolution();
    property public androidx.xr.runtime.math.IntSize2d perceivedResolution;
  }

  public final class PerceptionSpace implements androidx.xr.scenecore.ScenePose {
    method public androidx.xr.runtime.math.Pose getActivitySpacePose();
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int hitTestFilter, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.HitTestResult> hitTestAsync(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.HitTestResult> hitTestAsync(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int hitTestFilter);
    method public androidx.xr.runtime.math.Pose transformPoseTo(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.ScenePose destination);
  }

  public final class PlaneOrientation {
    property public static int ANY;
    property public static int HORIZONTAL;
    property public static int VERTICAL;
    field public static final int ANY = 2; // 0x2
    field public static final int HORIZONTAL = 0; // 0x0
    field public static final androidx.xr.scenecore.PlaneOrientation INSTANCE;
    field public static final int VERTICAL = 1; // 0x1
  }

  public final class PlaneSemanticType {
    property public static int ANY;
    property public static int CEILING;
    property public static int FLOOR;
    property public static int TABLE;
    property public static int WALL;
    field public static final int ANY = 4; // 0x4
    field public static final int CEILING = 2; // 0x2
    field public static final int FLOOR = 1; // 0x1
    field public static final androidx.xr.scenecore.PlaneSemanticType INSTANCE;
    field public static final int TABLE = 3; // 0x3
    field public static final int WALL = 0; // 0x0
  }

  public interface ScenePose {
    method public androidx.xr.runtime.math.Pose getActivitySpacePose();
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int hitTestFilter, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public suspend Object? hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, kotlin.coroutines.Continuation<? super androidx.xr.scenecore.HitTestResult>);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.HitTestResult> hitTestAsync(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.HitTestResult> hitTestAsync(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int hitTestFilter);
    method public androidx.xr.runtime.math.Pose transformPoseTo(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.ScenePose destination);
    property public abstract androidx.xr.runtime.math.Pose activitySpacePose;
  }

  public static final class ScenePose.HitTestFilter {
    property public static int OTHER_SCENES;
    property public static int SELF_SCENE;
    field public static final androidx.xr.scenecore.ScenePose.HitTestFilter INSTANCE;
    field public static final int OTHER_SCENES = 2; // 0x2
    field public static final int SELF_SCENE = 1; // 0x1
  }

  public final class Space {
    property public static int ACTIVITY;
    property public static int PARENT;
    field public static final int ACTIVITY = 1; // 0x1
    field public static final androidx.xr.scenecore.Space INSTANCE;
    field public static final int PARENT = 0; // 0x0
  }

  public fun interface SpatialModeChangeListener {
    method public void onSpatialModeChanged(androidx.xr.runtime.math.Pose recommendedPose, float recommendedScale);
  }

  public final class SpatialUser {
    ctor public SpatialUser(androidx.xr.runtime.internal.LifecycleManager lifecycleManager, androidx.xr.runtime.internal.JxrPlatformAdapter runtime);
    method public java.util.Map<androidx.xr.scenecore.CameraView.CameraType,androidx.xr.scenecore.CameraView> getCameraViews();
    method public androidx.xr.scenecore.Head? getHead();
    property public java.util.Map<androidx.xr.scenecore.CameraView.CameraType,androidx.xr.scenecore.CameraView> cameraViews;
    property public androidx.xr.scenecore.Head? head;
  }

}

