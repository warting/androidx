// Signature format: 4.0
package androidx.xr.arcore.playservices {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ArCoreAnchor implements androidx.xr.runtime.internal.Anchor {
    method @SuppressCompatibility @androidx.xr.arcore.playservices.UnsupportedArCoreCompatApi public com.google.ar.core.Anchor arCoreAnchor();
    method public void detach();
    method public androidx.xr.runtime.internal.Anchor.PersistenceState getPersistenceState();
    method public androidx.xr.runtime.math.Pose getPose();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public java.util.UUID? getUuid();
    method public void persist();
    property public androidx.xr.runtime.internal.Anchor.PersistenceState persistenceState;
    property public androidx.xr.runtime.math.Pose pose;
    property public androidx.xr.runtime.TrackingState trackingState;
    property public java.util.UUID? uuid;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ArCoreDevice implements androidx.xr.runtime.internal.ArDevice {
    method public androidx.xr.runtime.math.Pose getDevicePose();
    method public void update(com.google.ar.core.Frame frame);
    property public androidx.xr.runtime.math.Pose devicePose;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ArCoreEarth implements androidx.xr.runtime.internal.Earth {
    method public androidx.xr.runtime.internal.Anchor createAnchor(double latitude, double longitude, double altitude, androidx.xr.runtime.math.Quaternion eastUpSouthQuaternion);
    method public suspend Object? createAnchorOnSurface(double latitude, double longitude, double altitudeAboveSurface, androidx.xr.runtime.math.Quaternion eastUpSouthQuaternion, androidx.xr.runtime.internal.Earth.Surface surface, kotlin.coroutines.Continuation<? super androidx.xr.runtime.internal.Anchor>);
    method public androidx.xr.runtime.internal.Earth.GeospatialPoseResult createGeospatialPoseFromDevicePose();
    method public androidx.xr.runtime.internal.Earth.GeospatialPoseResult createGeospatialPoseFromPose(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.runtime.math.Pose createPoseFromGeospatialPose(androidx.xr.runtime.math.GeospatialPose geospatialPose);
    method public com.google.ar.core.Earth? getArCoreEarth();
    method public androidx.xr.runtime.internal.Earth.State getState();
    method public void update(com.google.ar.core.Session session);
    property public com.google.ar.core.Earth? arCoreEarth;
    property public androidx.xr.runtime.internal.Earth.State state;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ArCoreManager implements androidx.xr.runtime.internal.LifecycleManager {
    method public void configure(androidx.xr.runtime.Config config);
    method public void create();
    method public androidx.xr.runtime.Config getConfig();
    method public void pause();
    method public void resume();
    method @SuppressCompatibility @androidx.xr.arcore.playservices.UnsupportedArCoreCompatApi public com.google.ar.core.Session session();
    method public void stop();
    method public suspend Object? update(kotlin.coroutines.Continuation<? super kotlin.time.ComparableTimeMark>);
    property public androidx.xr.runtime.Config config;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ArCorePerceptionManager implements androidx.xr.runtime.internal.PerceptionManager {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public suspend Object? checkVpsAvailability(double latitude, double longitude, kotlin.coroutines.Continuation<? super androidx.xr.runtime.VpsAvailabilityResult>);
    method public androidx.xr.runtime.internal.Anchor createAnchor(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.arcore.playservices.ArCoreDevice getArDevice();
    method public java.util.List<androidx.xr.runtime.internal.DepthMap> getDepthMaps();
    method public androidx.xr.arcore.playservices.ArCoreEarth getEarth();
    method public androidx.xr.runtime.internal.Hand? getLeftHand();
    method public java.util.List<java.util.UUID> getPersistedAnchorUuids();
    method public androidx.xr.runtime.internal.Hand? getRightHand();
    method public java.util.Collection<androidx.xr.runtime.internal.Trackable> getTrackables();
    method public androidx.xr.runtime.internal.Face? getUserFace();
    method public java.util.List<androidx.xr.runtime.internal.ViewCamera> getViewCameras();
    method public java.util.List<androidx.xr.runtime.internal.HitResult> hitTest(androidx.xr.runtime.math.Ray ray);
    method @SuppressCompatibility @androidx.xr.arcore.playservices.UnsupportedArCoreCompatApi public com.google.ar.core.Frame lastFrame();
    method public androidx.xr.runtime.internal.Anchor loadAnchor(java.util.UUID uuid);
    method public androidx.xr.runtime.internal.Anchor loadAnchorFromNativePointer(long nativePointer);
    method public void setDisplayRotation(int rotation, int width, int height);
    method public void unpersistAnchor(java.util.UUID uuid);
    property public androidx.xr.arcore.playservices.ArCoreDevice arDevice;
    property public java.util.List<androidx.xr.runtime.internal.DepthMap> depthMaps;
    property public androidx.xr.arcore.playservices.ArCoreEarth earth;
    property public androidx.xr.runtime.internal.Hand? leftHand;
    property public androidx.xr.runtime.internal.Hand? rightHand;
    property public java.util.Collection<androidx.xr.runtime.internal.Trackable> trackables;
    property public androidx.xr.runtime.internal.Face? userFace;
    property public java.util.List<androidx.xr.runtime.internal.ViewCamera> viewCameras;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ArCorePlane implements androidx.xr.runtime.internal.Plane androidx.xr.runtime.internal.Trackable {
    method @SuppressCompatibility @androidx.xr.arcore.playservices.UnsupportedArCoreCompatApi public com.google.ar.core.Plane arCorePlane();
    method public androidx.xr.runtime.internal.Anchor createAnchor(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.runtime.math.Pose getCenterPose();
    method public androidx.xr.runtime.math.FloatSize2d getExtents();
    method public androidx.xr.runtime.internal.Plane.Label getLabel();
    method public androidx.xr.runtime.internal.Plane? getSubsumedBy();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public androidx.xr.runtime.internal.Plane.Type getType();
    method public java.util.List<androidx.xr.runtime.math.Vector2> getVertices();
    property public androidx.xr.runtime.math.Pose centerPose;
    property public androidx.xr.runtime.math.FloatSize2d extents;
    property public androidx.xr.runtime.internal.Plane.Label label;
    property public androidx.xr.runtime.internal.Plane? subsumedBy;
    property public androidx.xr.runtime.TrackingState trackingState;
    property public androidx.xr.runtime.internal.Plane.Type type;
    property public java.util.List<androidx.xr.runtime.math.Vector2> vertices;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ArCoreRuntime implements androidx.xr.runtime.internal.Runtime {
    method public androidx.xr.arcore.playservices.ArCoreManager getLifecycleManager();
    method public androidx.xr.arcore.playservices.ArCorePerceptionManager getPerceptionManager();
    property public androidx.xr.arcore.playservices.ArCoreManager lifecycleManager;
    property public androidx.xr.arcore.playservices.ArCorePerceptionManager perceptionManager;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ArCoreRuntimeFactory implements androidx.xr.runtime.internal.RuntimeFactory {
    ctor public ArCoreRuntimeFactory();
    method public androidx.xr.runtime.internal.Runtime createRuntime(android.app.Activity activity, kotlin.coroutines.CoroutineContext coroutineContext);
    method public java.util.Set<androidx.xr.runtime.internal.Feature> getRequirements();
    property public java.util.Set<androidx.xr.runtime.internal.Feature> requirements;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class CameraState {
    method public androidx.xr.runtime.math.Pose? getCameraPose();
    method public androidx.xr.runtime.math.Pose? getDisplayOrientedPose();
    method public android.hardware.HardwareBuffer? getHardwareBuffer();
    method public androidx.xr.runtime.math.Matrix4? getProjectionMatrix();
    method public kotlin.time.ComparableTimeMark getTimeMark();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public kotlin.jvm.functions.Function1<java.nio.FloatBuffer,java.nio.FloatBuffer>? getTransformCoordinates2D();
    method public androidx.xr.runtime.math.Matrix4? getViewMatrix();
    property public androidx.xr.runtime.math.Pose? cameraPose;
    property public androidx.xr.runtime.math.Pose? displayOrientedPose;
    property public android.hardware.HardwareBuffer? hardwareBuffer;
    property public androidx.xr.runtime.math.Matrix4? projectionMatrix;
    property public kotlin.time.ComparableTimeMark timeMark;
    property public androidx.xr.runtime.TrackingState trackingState;
    property public kotlin.jvm.functions.Function1<java.nio.FloatBuffer,java.nio.FloatBuffer>? transformCoordinates2D;
    property public androidx.xr.runtime.math.Matrix4? viewMatrix;
  }

  public final class CameraStateExtenderKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.arcore.playservices.CameraState? getCameraState(androidx.xr.runtime.CoreState);
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.arcore.playservices.CameraState? androidx.xr.runtime.CoreState.cameraState;
  }

  @SuppressCompatibility @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @kotlin.RequiresOptIn(level=kotlin.RequiresOptIn.Level.ERROR, message="This property is exposed for compatibility with existing ARCore 1.x applications. Usage of this property is not offically supported, and will be removed in a future release.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets=kotlin.annotation.AnnotationTarget.FUNCTION) public @interface UnsupportedArCoreCompatApi {
  }

}

