// Signature format: 4.0
package androidx.xr.arcore {

  public final class Anchor {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public Anchor(androidx.xr.arcore.internal.Anchor runtimeAnchor);
    method public static androidx.xr.arcore.AnchorCreateResult create(androidx.xr.runtime.Session session, androidx.xr.runtime.math.Pose pose);
    method public void detach();
    method public static java.util.List<java.util.UUID> getPersistedAnchorUuids(androidx.xr.runtime.Session session);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.internal.Anchor getRuntimeAnchor();
    method public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.Anchor.State> getState();
    method public static androidx.xr.arcore.AnchorCreateResult load(androidx.xr.runtime.Session session, java.util.UUID uuid);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.arcore.Anchor loadFromNativePointer(androidx.xr.runtime.Session session, long nativePointer);
    method public suspend Object? persist(kotlin.coroutines.Continuation<? super java.util.UUID>);
    method public static void unpersist(androidx.xr.runtime.Session session, java.util.UUID uuid);
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.internal.Anchor runtimeAnchor;
    property public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.Anchor.State> state;
    field public static final androidx.xr.arcore.Anchor.Companion Companion;
  }

  public static final class Anchor.Companion {
    method public androidx.xr.arcore.AnchorCreateResult create(androidx.xr.runtime.Session session, androidx.xr.runtime.math.Pose pose);
    method public java.util.List<java.util.UUID> getPersistedAnchorUuids(androidx.xr.runtime.Session session);
    method public androidx.xr.arcore.AnchorCreateResult load(androidx.xr.runtime.Session session, java.util.UUID uuid);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.Anchor loadFromNativePointer(androidx.xr.runtime.Session session, long nativePointer);
    method public void unpersist(androidx.xr.runtime.Session session, java.util.UUID uuid);
  }

  public static final class Anchor.State {
    method public androidx.xr.runtime.math.Pose getPose();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    property public androidx.xr.runtime.math.Pose pose;
    property public androidx.xr.runtime.TrackingState trackingState;
  }

  public final class AnchorCreateIllegalState extends androidx.xr.arcore.AnchorCreateResult {
    ctor public AnchorCreateIllegalState();
  }

  public final class AnchorCreateNotAuthorized extends androidx.xr.arcore.AnchorCreateResult {
    ctor public AnchorCreateNotAuthorized();
  }

  public final class AnchorCreateResourcesExhausted extends androidx.xr.arcore.AnchorCreateResult {
    ctor public AnchorCreateResourcesExhausted();
  }

  public abstract sealed class AnchorCreateResult {
  }

  public final class AnchorCreateSuccess extends androidx.xr.arcore.AnchorCreateResult {
    ctor public AnchorCreateSuccess(androidx.xr.arcore.Anchor anchor);
    method public androidx.xr.arcore.Anchor getAnchor();
    property public androidx.xr.arcore.Anchor anchor;
  }

  public final class AnchorCreateTrackingUnavailable extends androidx.xr.arcore.AnchorCreateResult {
    ctor public AnchorCreateTrackingUnavailable();
  }

  public final class AnchorCreateUnsupportedLocation extends androidx.xr.arcore.AnchorCreateResult {
    ctor public AnchorCreateUnsupportedLocation();
  }

  public final class AnchorLoadInvalidUuid extends androidx.xr.arcore.AnchorCreateResult {
    ctor public AnchorLoadInvalidUuid();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ArDevice {
    method public static androidx.xr.arcore.ArDevice getInstance(androidx.xr.runtime.Session session);
    method public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.ArDevice.State> getState();
    method public suspend Object? update(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.ArDevice.State> state;
    field public static final androidx.xr.arcore.ArDevice.Companion Companion;
  }

  public static final class ArDevice.Companion {
    method public androidx.xr.arcore.ArDevice getInstance(androidx.xr.runtime.Session session);
  }

  public static final class ArDevice.State {
    ctor public ArDevice.State(androidx.xr.runtime.math.Pose devicePose);
    method public androidx.xr.runtime.math.Pose getDevicePose();
    property public androidx.xr.runtime.math.Pose devicePose;
  }

  public final class AugmentedObject implements androidx.xr.arcore.Trackable<androidx.xr.arcore.AugmentedObject.State> {
    method public androidx.xr.arcore.AnchorCreateResult createAnchor(androidx.xr.runtime.math.Pose pose);
    method public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.AugmentedObject.State> getState();
    method public static kotlinx.coroutines.flow.StateFlow<java.util.Collection<androidx.xr.arcore.AugmentedObject>> subscribe(androidx.xr.runtime.Session session);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public suspend Object? update(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.AugmentedObject.State> state;
    field public static final androidx.xr.arcore.AugmentedObject.Companion Companion;
  }

  public static final class AugmentedObject.Companion {
    method public kotlinx.coroutines.flow.StateFlow<java.util.Collection<androidx.xr.arcore.AugmentedObject>> subscribe(androidx.xr.runtime.Session session);
  }

  public static final class AugmentedObject.State implements androidx.xr.arcore.Trackable.State {
    ctor public AugmentedObject.State(androidx.xr.runtime.TrackingState trackingState, androidx.xr.runtime.AugmentedObjectCategory category, androidx.xr.runtime.math.Pose centerPose, androidx.xr.runtime.math.FloatSize3d extents);
    method public androidx.xr.runtime.AugmentedObjectCategory getCategory();
    method public androidx.xr.runtime.math.Pose getCenterPose();
    method public androidx.xr.runtime.math.FloatSize3d getExtents();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    property public androidx.xr.runtime.AugmentedObjectCategory category;
    property public androidx.xr.runtime.math.Pose centerPose;
    property public androidx.xr.runtime.math.FloatSize3d extents;
    property public androidx.xr.runtime.TrackingState trackingState;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class CreateGeospatialPoseFromPoseIllegalState extends androidx.xr.arcore.CreateGeospatialPoseFromPoseResult {
    ctor public CreateGeospatialPoseFromPoseIllegalState();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class CreateGeospatialPoseFromPoseNotTracking extends androidx.xr.arcore.CreateGeospatialPoseFromPoseResult {
    ctor public CreateGeospatialPoseFromPoseNotTracking();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract sealed class CreateGeospatialPoseFromPoseResult {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class CreateGeospatialPoseFromPoseSuccess extends androidx.xr.arcore.CreateGeospatialPoseFromPoseResult {
    ctor public CreateGeospatialPoseFromPoseSuccess(androidx.xr.runtime.math.GeospatialPose pose, double horizontalAccuracy, double verticalAccuracy, double orientationYawAccuracy);
    method public double getHorizontalAccuracy();
    method public double getOrientationYawAccuracy();
    method public androidx.xr.runtime.math.GeospatialPose getPose();
    method public double getVerticalAccuracy();
    property public double horizontalAccuracy;
    property public double orientationYawAccuracy;
    property public androidx.xr.runtime.math.GeospatialPose pose;
    property public double verticalAccuracy;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class CreatePoseFromGeospatialPoseIllegalState extends androidx.xr.arcore.CreatePoseFromGeospatialPoseResult {
    ctor public CreatePoseFromGeospatialPoseIllegalState();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class CreatePoseFromGeospatialPoseNotTracking extends androidx.xr.arcore.CreatePoseFromGeospatialPoseResult {
    ctor public CreatePoseFromGeospatialPoseNotTracking();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract sealed class CreatePoseFromGeospatialPoseResult {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class CreatePoseFromGeospatialPoseSuccess extends androidx.xr.arcore.CreatePoseFromGeospatialPoseResult {
    ctor public CreatePoseFromGeospatialPoseSuccess(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.runtime.math.Pose getPose();
    property public androidx.xr.runtime.math.Pose pose;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class DepthMap {
    method public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.DepthMap.State> getState();
    method public suspend Object? update(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.DepthMap.State> state;
  }

  public static final class DepthMap.State {
    ctor public DepthMap.State(int width, int height, java.nio.FloatBuffer? rawDepthMap, java.nio.ByteBuffer? rawConfidenceMap, java.nio.FloatBuffer? smoothDepthMap, java.nio.ByteBuffer? smoothConfidenceMap);
    method public int getHeight();
    method public java.nio.ByteBuffer? getRawConfidenceMap();
    method public java.nio.FloatBuffer? getRawDepthMap();
    method public java.nio.ByteBuffer? getSmoothConfidenceMap();
    method public java.nio.FloatBuffer? getSmoothDepthMap();
    method public int getWidth();
    property public int height;
    property public java.nio.ByteBuffer? rawConfidenceMap;
    property public java.nio.FloatBuffer? rawDepthMap;
    property public java.nio.ByteBuffer? smoothConfidenceMap;
    property public java.nio.FloatBuffer? smoothDepthMap;
    property public int width;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class Earth {
    method public static suspend Object? checkVpsAvailability(androidx.xr.runtime.Session session, double latitude, double longitude, kotlin.coroutines.Continuation<? super androidx.xr.runtime.VpsAvailabilityResult>);
    method public androidx.xr.arcore.AnchorCreateResult createAnchor(double latitude, double longitude, double altitude, androidx.xr.runtime.math.Quaternion eastUpSouthQuaternion);
    method public suspend Object? createAnchorOnSurface(double latitude, double longitude, double altitudeAboveSurface, androidx.xr.runtime.math.Quaternion eastUpSouthQuaternion, androidx.xr.arcore.Earth.Surface surface, kotlin.coroutines.Continuation<? super androidx.xr.arcore.AnchorCreateResult>);
    method public androidx.xr.arcore.CreateGeospatialPoseFromPoseResult createGeospatialPoseFromDevicePose();
    method public androidx.xr.arcore.CreateGeospatialPoseFromPoseResult createGeospatialPoseFromPose(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.arcore.CreatePoseFromGeospatialPoseResult createPoseFromGeospatialPose(androidx.xr.runtime.math.GeospatialPose geospatialPose);
    method public static androidx.xr.arcore.Earth getInstance(androidx.xr.runtime.Session session);
    method public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.Earth.State> getState();
    method public suspend Object? update(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.Earth.State> state;
    field public static final androidx.xr.arcore.Earth.Companion Companion;
  }

  public static final class Earth.Companion {
    method public suspend Object? checkVpsAvailability(androidx.xr.runtime.Session session, double latitude, double longitude, kotlin.coroutines.Continuation<? super androidx.xr.runtime.VpsAvailabilityResult>);
    method public androidx.xr.arcore.Earth getInstance(androidx.xr.runtime.Session session);
  }

  public static final class Earth.State {
    field public static final androidx.xr.arcore.Earth.State.Companion Companion;
    field public static final androidx.xr.arcore.Earth.State ERROR_APK_VERSION_TOO_OLD;
    field public static final androidx.xr.arcore.Earth.State ERROR_APP_PREEMPTED;
    field public static final androidx.xr.arcore.Earth.State ERROR_INTERNAL;
    field public static final androidx.xr.arcore.Earth.State ERROR_NOT_AUTHORIZED;
    field public static final androidx.xr.arcore.Earth.State ERROR_RESOURCES_EXHAUSTED;
    field public static final androidx.xr.arcore.Earth.State RUNNING;
    field public static final androidx.xr.arcore.Earth.State STOPPED;
  }

  public static final class Earth.State.Companion {
    property public androidx.xr.arcore.Earth.State ERROR_APK_VERSION_TOO_OLD;
    property public androidx.xr.arcore.Earth.State ERROR_APP_PREEMPTED;
    property public androidx.xr.arcore.Earth.State ERROR_INTERNAL;
    property public androidx.xr.arcore.Earth.State ERROR_NOT_AUTHORIZED;
    property public androidx.xr.arcore.Earth.State ERROR_RESOURCES_EXHAUSTED;
    property public androidx.xr.arcore.Earth.State RUNNING;
    property public androidx.xr.arcore.Earth.State STOPPED;
  }

  public static final class Earth.Surface {
    field public static final androidx.xr.arcore.Earth.Surface.Companion Companion;
    field public static final androidx.xr.arcore.Earth.Surface ROOFTOP;
    field public static final androidx.xr.arcore.Earth.Surface TERRAIN;
  }

  public static final class Earth.Surface.Companion {
    property public androidx.xr.arcore.Earth.Surface ROOFTOP;
    property public androidx.xr.arcore.Earth.Surface TERRAIN;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class Face {
    method public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.Face.State> getState();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.arcore.Face? getUserFace(androidx.xr.runtime.Session session);
    method public suspend Object? update(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.Face.State> state;
    field public static final androidx.xr.arcore.Face.Companion Companion;
  }

  public static final class Face.Companion {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.Face? getUserFace(androidx.xr.runtime.Session session);
  }

  public static final class Face.State {
    ctor public Face.State(androidx.xr.runtime.TrackingState trackingState, float[] blendShapeValues, float[] confidenceValues);
    method public java.util.Map<androidx.xr.arcore.FaceBlendShapeType,java.lang.Float> getBlendShapes();
    method public float getConfidence(androidx.xr.arcore.FaceConfidenceRegionType region);
    method public androidx.xr.runtime.TrackingState getTrackingState();
    property public java.util.Map<androidx.xr.arcore.FaceBlendShapeType,java.lang.Float> blendShapes;
    property public androidx.xr.runtime.TrackingState trackingState;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FaceBlendShapeType {
    field public static final androidx.xr.arcore.FaceBlendShapeType.Companion Companion;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_BROW_LOWERER_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_BROW_LOWERER_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHEEK_PUFF_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHEEK_PUFF_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHEEK_RAISER_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHEEK_RAISER_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHEEK_SUCK_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHEEK_SUCK_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHIN_RAISER_BOTTOM;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHIN_RAISER_TOP;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_DIMPLER_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_DIMPLER_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_CLOSED_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_CLOSED_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_DOWN_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_DOWN_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_LEFT_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_LEFT_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_RIGHT_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_RIGHT_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_UP_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_UP_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_INNER_BROW_RAISER_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_INNER_BROW_RAISER_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_JAW_DROP;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_JAW_SIDEWAYS_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_JAW_SIDEWAYS_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_JAW_THRUST;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LID_TIGHTENER_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LID_TIGHTENER_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIPS_TOWARD;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_CORNER_DEPRESSOR_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_CORNER_DEPRESSOR_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_CORNER_PULLER_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_CORNER_PULLER_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_FUNNELER_LEFT_BOTTOM;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_FUNNELER_LEFT_TOP;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_FUNNELER_RIGHT_BOTTOM;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_FUNNELER_RIGHT_TOP;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_PRESSOR_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_PRESSOR_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_PUCKER_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_PUCKER_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_STRETCHER_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_STRETCHER_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_SUCK_LEFT_BOTTOM;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_SUCK_LEFT_TOP;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_SUCK_RIGHT_BOTTOM;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_SUCK_RIGHT_TOP;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_TIGHTENER_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_TIGHTENER_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LOWER_LIP_DEPRESSOR_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LOWER_LIP_DEPRESSOR_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_MOUTH_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_MOUTH_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_NOSE_WRINKLER_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_NOSE_WRINKLER_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_OUTER_BROW_RAISER_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_OUTER_BROW_RAISER_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_TONGUE_DOWN;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_TONGUE_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_TONGUE_OUT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_TONGUE_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_TONGUE_UP;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_UPPER_LID_RAISER_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_UPPER_LID_RAISER_RIGHT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_UPPER_LIP_RAISER_LEFT;
    field public static final androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_UPPER_LIP_RAISER_RIGHT;
  }

  public static final class FaceBlendShapeType.Companion {
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_BROW_LOWERER_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_BROW_LOWERER_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHEEK_PUFF_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHEEK_PUFF_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHEEK_RAISER_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHEEK_RAISER_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHEEK_SUCK_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHEEK_SUCK_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHIN_RAISER_BOTTOM;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_CHIN_RAISER_TOP;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_DIMPLER_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_DIMPLER_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_CLOSED_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_CLOSED_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_DOWN_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_DOWN_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_LEFT_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_LEFT_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_RIGHT_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_RIGHT_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_UP_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_EYES_LOOK_UP_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_INNER_BROW_RAISER_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_INNER_BROW_RAISER_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_JAW_DROP;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_JAW_SIDEWAYS_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_JAW_SIDEWAYS_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_JAW_THRUST;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LID_TIGHTENER_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LID_TIGHTENER_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIPS_TOWARD;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_CORNER_DEPRESSOR_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_CORNER_DEPRESSOR_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_CORNER_PULLER_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_CORNER_PULLER_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_FUNNELER_LEFT_BOTTOM;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_FUNNELER_LEFT_TOP;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_FUNNELER_RIGHT_BOTTOM;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_FUNNELER_RIGHT_TOP;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_PRESSOR_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_PRESSOR_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_PUCKER_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_PUCKER_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_STRETCHER_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_STRETCHER_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_SUCK_LEFT_BOTTOM;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_SUCK_LEFT_TOP;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_SUCK_RIGHT_BOTTOM;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_SUCK_RIGHT_TOP;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_TIGHTENER_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LIP_TIGHTENER_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LOWER_LIP_DEPRESSOR_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_LOWER_LIP_DEPRESSOR_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_MOUTH_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_MOUTH_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_NOSE_WRINKLER_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_NOSE_WRINKLER_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_OUTER_BROW_RAISER_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_OUTER_BROW_RAISER_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_TONGUE_DOWN;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_TONGUE_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_TONGUE_OUT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_TONGUE_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_TONGUE_UP;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_UPPER_LID_RAISER_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_UPPER_LID_RAISER_RIGHT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_UPPER_LIP_RAISER_LEFT;
    property public androidx.xr.arcore.FaceBlendShapeType FACE_BLEND_SHAPE_TYPE_UPPER_LIP_RAISER_RIGHT;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FaceConfidenceRegionType {
    field public static final androidx.xr.arcore.FaceConfidenceRegionType.Companion Companion;
    field public static final androidx.xr.arcore.FaceConfidenceRegionType FACE_CONFIDENCE_REGION_TYPE_LEFT_UPPER;
    field public static final androidx.xr.arcore.FaceConfidenceRegionType FACE_CONFIDENCE_REGION_TYPE_LOWER;
    field public static final androidx.xr.arcore.FaceConfidenceRegionType FACE_CONFIDENCE_REGION_TYPE_RIGHT_UPPER;
  }

  public static final class FaceConfidenceRegionType.Companion {
    property public androidx.xr.arcore.FaceConfidenceRegionType FACE_CONFIDENCE_REGION_TYPE_LEFT_UPPER;
    property public androidx.xr.arcore.FaceConfidenceRegionType FACE_CONFIDENCE_REGION_TYPE_LOWER;
    property public androidx.xr.arcore.FaceConfidenceRegionType FACE_CONFIDENCE_REGION_TYPE_RIGHT_UPPER;
  }

  public final class Hand {
    method public static androidx.xr.arcore.Hand.HandSide getPrimaryHandSide(android.content.ContentResolver resolver);
    method public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.Hand.State> getState();
    method public static androidx.xr.arcore.Hand? left(androidx.xr.runtime.Session session);
    method public static androidx.xr.arcore.Hand? right(androidx.xr.runtime.Session session);
    property public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.Hand.State> state;
    field public static final androidx.xr.arcore.Hand.Companion Companion;
  }

  public static final class Hand.Companion {
    method public androidx.xr.arcore.Hand.HandSide getPrimaryHandSide(android.content.ContentResolver resolver);
    method public androidx.xr.arcore.Hand? left(androidx.xr.runtime.Session session);
    method public androidx.xr.arcore.Hand? right(androidx.xr.runtime.Session session);
  }

  public enum Hand.HandSide {
    enum_constant public static final androidx.xr.arcore.Hand.HandSide LEFT;
    enum_constant public static final androidx.xr.arcore.Hand.HandSide RIGHT;
    enum_constant public static final androidx.xr.arcore.Hand.HandSide UNKNOWN;
  }

  public static final class Hand.State {
    method public java.util.Map<androidx.xr.arcore.HandJointType,androidx.xr.runtime.math.Pose> getHandJoints();
    method public java.nio.FloatBuffer getHandJointsBuffer();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    property public java.util.Map<androidx.xr.arcore.HandJointType,androidx.xr.runtime.math.Pose> handJoints;
    property public java.nio.FloatBuffer handJointsBuffer;
    property public androidx.xr.runtime.TrackingState trackingState;
  }

  public enum HandJointType {
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_INDEX_DISTAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_INDEX_INTERMEDIATE;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_INDEX_METACARPAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_INDEX_PROXIMAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_INDEX_TIP;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_LITTLE_DISTAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_LITTLE_INTERMEDIATE;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_LITTLE_METACARPAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_LITTLE_PROXIMAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_LITTLE_TIP;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_MIDDLE_DISTAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_MIDDLE_INTERMEDIATE;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_MIDDLE_METACARPAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_MIDDLE_PROXIMAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_MIDDLE_TIP;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_PALM;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_RING_DISTAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_RING_INTERMEDIATE;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_RING_METACARPAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_RING_PROXIMAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_RING_TIP;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_THUMB_DISTAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_THUMB_METACARPAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_THUMB_PROXIMAL;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_THUMB_TIP;
    enum_constant public static final androidx.xr.arcore.HandJointType HAND_JOINT_TYPE_WRIST;
  }

  public final class HitResult {
    method public androidx.xr.arcore.AnchorCreateResult createAnchor();
    method public float getDistance();
    method public androidx.xr.runtime.math.Pose getHitPose();
    method public androidx.xr.arcore.Trackable<androidx.xr.arcore.Trackable.State> getTrackable();
    property public float distance;
    property public androidx.xr.runtime.math.Pose hitPose;
    property public androidx.xr.arcore.Trackable<androidx.xr.arcore.Trackable.State> trackable;
  }

  public final class Interaction {
    method public static java.util.List<androidx.xr.arcore.HitResult> hitTest(androidx.xr.runtime.Session session, androidx.xr.runtime.math.Ray ray);
  }

  public final class PerceptionState {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.ArDevice getArDevice();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public java.util.List<androidx.xr.arcore.DepthMap> getDepthMaps();
    method public androidx.xr.arcore.Hand? getLeftHand();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.RenderViewpoint? getLeftRenderViewpoint();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.RenderViewpoint? getMonoRenderViewpoint();
    method public androidx.xr.arcore.Hand? getRightHand();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.RenderViewpoint? getRightRenderViewpoint();
    method public kotlin.time.ComparableTimeMark getTimeMark();
    method public java.util.Collection<androidx.xr.arcore.Trackable<androidx.xr.arcore.Trackable.State>> getTrackables();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.Face? getUserFace();
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.ArDevice arDevice;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public java.util.List<androidx.xr.arcore.DepthMap> depthMaps;
    property public androidx.xr.arcore.Hand? leftHand;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.RenderViewpoint? leftRenderViewpoint;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.RenderViewpoint? monoRenderViewpoint;
    property public androidx.xr.arcore.Hand? rightHand;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.RenderViewpoint? rightRenderViewpoint;
    property public kotlin.time.ComparableTimeMark timeMark;
    property public java.util.Collection<androidx.xr.arcore.Trackable<androidx.xr.arcore.Trackable.State>> trackables;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.Face? userFace;
  }

  public final class PerceptionStateExtenderKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.arcore.PerceptionState? getPerceptionState(androidx.xr.runtime.CoreState);
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.arcore.PerceptionState? androidx.xr.runtime.CoreState.perceptionState;
  }

  public final class Plane implements androidx.xr.arcore.Trackable<androidx.xr.arcore.Plane.State> {
    method public androidx.xr.arcore.AnchorCreateResult createAnchor(androidx.xr.runtime.math.Pose pose);
    method public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.Plane.State> getState();
    method public androidx.xr.arcore.Plane.Type getType();
    method public static kotlinx.coroutines.flow.StateFlow<java.util.Collection<androidx.xr.arcore.Plane>> subscribe(androidx.xr.runtime.Session session);
    property public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.Plane.State> state;
    property public androidx.xr.arcore.Plane.Type type;
    field public static final androidx.xr.arcore.Plane.Companion Companion;
  }

  public static final class Plane.Companion {
    method public kotlinx.coroutines.flow.StateFlow<java.util.Collection<androidx.xr.arcore.Plane>> subscribe(androidx.xr.runtime.Session session);
  }

  public static final class Plane.Label {
    field public static final androidx.xr.arcore.Plane.Label CEILING;
    field public static final androidx.xr.arcore.Plane.Label.Companion Companion;
    field public static final androidx.xr.arcore.Plane.Label FLOOR;
    field public static final androidx.xr.arcore.Plane.Label TABLE;
    field public static final androidx.xr.arcore.Plane.Label UNKNOWN;
    field public static final androidx.xr.arcore.Plane.Label WALL;
  }

  public static final class Plane.Label.Companion {
    property public androidx.xr.arcore.Plane.Label CEILING;
    property public androidx.xr.arcore.Plane.Label FLOOR;
    property public androidx.xr.arcore.Plane.Label TABLE;
    property public androidx.xr.arcore.Plane.Label UNKNOWN;
    property public androidx.xr.arcore.Plane.Label WALL;
  }

  public static final class Plane.State implements androidx.xr.arcore.Trackable.State {
    method public androidx.xr.runtime.math.Pose getCenterPose();
    method public androidx.xr.runtime.math.FloatSize2d getExtents();
    method public androidx.xr.arcore.Plane.Label getLabel();
    method public androidx.xr.arcore.Plane? getSubsumedBy();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public java.util.List<androidx.xr.runtime.math.Vector2> getVertices();
    property public androidx.xr.runtime.math.Pose centerPose;
    property public androidx.xr.runtime.math.FloatSize2d extents;
    property public androidx.xr.arcore.Plane.Label label;
    property public androidx.xr.arcore.Plane? subsumedBy;
    property public androidx.xr.runtime.TrackingState trackingState;
    property public java.util.List<androidx.xr.runtime.math.Vector2> vertices;
  }

  public static final class Plane.Type {
    field public static final androidx.xr.arcore.Plane.Type.Companion Companion;
    field public static final androidx.xr.arcore.Plane.Type HORIZONTAL_DOWNWARD_FACING;
    field public static final androidx.xr.arcore.Plane.Type HORIZONTAL_UPWARD_FACING;
    field public static final androidx.xr.arcore.Plane.Type VERTICAL;
  }

  public static final class Plane.Type.Companion {
    property public androidx.xr.arcore.Plane.Type HORIZONTAL_DOWNWARD_FACING;
    property public androidx.xr.arcore.Plane.Type HORIZONTAL_UPWARD_FACING;
    property public androidx.xr.arcore.Plane.Type VERTICAL;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class RenderViewpoint {
    method public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.RenderViewpoint.State> getState();
    method public static androidx.xr.arcore.RenderViewpoint? left(androidx.xr.runtime.Session session);
    method public static androidx.xr.arcore.RenderViewpoint? mono(androidx.xr.runtime.Session session);
    method public static androidx.xr.arcore.RenderViewpoint? right(androidx.xr.runtime.Session session);
    method public suspend Object? update(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.RenderViewpoint.State> state;
    field public static final androidx.xr.arcore.RenderViewpoint.Companion Companion;
  }

  public static final class RenderViewpoint.Companion {
    method public androidx.xr.arcore.RenderViewpoint? left(androidx.xr.runtime.Session session);
    method public androidx.xr.arcore.RenderViewpoint? mono(androidx.xr.runtime.Session session);
    method public androidx.xr.arcore.RenderViewpoint? right(androidx.xr.runtime.Session session);
  }

  public static final class RenderViewpoint.State {
    ctor public RenderViewpoint.State(androidx.xr.runtime.math.Pose pose, androidx.xr.runtime.math.Pose localPose, androidx.xr.runtime.FieldOfView fieldOfView);
    method public androidx.xr.runtime.FieldOfView getFieldOfView();
    method public androidx.xr.runtime.math.Pose getLocalPose();
    method public androidx.xr.runtime.math.Pose getPose();
    property public androidx.xr.runtime.FieldOfView fieldOfView;
    property public androidx.xr.runtime.math.Pose localPose;
    property public androidx.xr.runtime.math.Pose pose;
  }

  public interface Trackable<State> {
    method public androidx.xr.arcore.AnchorCreateResult createAnchor(androidx.xr.runtime.math.Pose pose);
    method public kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.Trackable.State> getState();
    property public abstract kotlinx.coroutines.flow.StateFlow<androidx.xr.arcore.Trackable.State> state;
  }

  public static interface Trackable.State {
    method public androidx.xr.runtime.TrackingState getTrackingState();
    property public abstract androidx.xr.runtime.TrackingState trackingState;
  }

}

package androidx.xr.arcore.internal {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Anchor {
    method public void detach();
    method public androidx.xr.arcore.internal.Anchor.PersistenceState getPersistenceState();
    method public androidx.xr.runtime.math.Pose getPose();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public java.util.UUID? getUuid();
    method public void persist();
    property public abstract androidx.xr.arcore.internal.Anchor.PersistenceState persistenceState;
    property public abstract androidx.xr.runtime.math.Pose pose;
    property public abstract androidx.xr.runtime.TrackingState trackingState;
    property public abstract java.util.UUID? uuid;
  }

  public static final class Anchor.PersistenceState {
    field public static final androidx.xr.arcore.internal.Anchor.PersistenceState.Companion Companion;
    field public static final androidx.xr.arcore.internal.Anchor.PersistenceState NOT_PERSISTED;
    field public static final androidx.xr.arcore.internal.Anchor.PersistenceState PENDING;
    field public static final androidx.xr.arcore.internal.Anchor.PersistenceState PERSISTED;
  }

  public static final class Anchor.PersistenceState.Companion {
    property public androidx.xr.arcore.internal.Anchor.PersistenceState NOT_PERSISTED;
    property public androidx.xr.arcore.internal.Anchor.PersistenceState PENDING;
    property public androidx.xr.arcore.internal.Anchor.PersistenceState PERSISTED;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class AnchorException extends java.lang.Exception {
    ctor public AnchorException(String message, optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class AnchorInvalidUuidException extends androidx.xr.arcore.internal.AnchorException {
    ctor public AnchorInvalidUuidException();
    ctor public AnchorInvalidUuidException(optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class AnchorNotAuthorizedException extends androidx.xr.arcore.internal.AnchorException {
    ctor public AnchorNotAuthorizedException();
    ctor public AnchorNotAuthorizedException(optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class AnchorNotTrackingException extends androidx.xr.arcore.internal.AnchorException {
    ctor public AnchorNotTrackingException();
    ctor public AnchorNotTrackingException(optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class AnchorResourcesExhaustedException extends androidx.xr.arcore.internal.AnchorException {
    ctor public AnchorResourcesExhaustedException();
    ctor public AnchorResourcesExhaustedException(optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class AnchorUnsupportedLocationException extends androidx.xr.arcore.internal.AnchorException {
    ctor public AnchorUnsupportedLocationException();
    ctor public AnchorUnsupportedLocationException(optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ArDevice {
    method public androidx.xr.runtime.math.Pose getDevicePose();
    property public abstract androidx.xr.runtime.math.Pose devicePose;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface AugmentedObject extends androidx.xr.arcore.internal.Trackable {
    method public androidx.xr.runtime.AugmentedObjectCategory getCategory();
    method public androidx.xr.runtime.math.Pose getCenterPose();
    method public androidx.xr.runtime.math.FloatSize3d getExtents();
    property public abstract androidx.xr.runtime.AugmentedObjectCategory category;
    property public abstract androidx.xr.runtime.math.Pose centerPose;
    property public abstract androidx.xr.runtime.math.FloatSize3d extents;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface DepthMap {
    method public int getHeight();
    method public java.nio.ByteBuffer? getRawConfidenceMap();
    method public java.nio.FloatBuffer? getRawDepthMap();
    method public java.nio.ByteBuffer? getSmoothConfidenceMap();
    method public java.nio.FloatBuffer? getSmoothDepthMap();
    method public int getWidth();
    property public abstract int height;
    property public abstract java.nio.ByteBuffer? rawConfidenceMap;
    property public abstract java.nio.FloatBuffer? rawDepthMap;
    property public abstract java.nio.ByteBuffer? smoothConfidenceMap;
    property public abstract java.nio.FloatBuffer? smoothDepthMap;
    property public abstract int width;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Earth {
    method public androidx.xr.arcore.internal.Anchor createAnchor(double latitude, double longitude, double altitude, androidx.xr.runtime.math.Quaternion eastUpSouthQuaternion);
    method public suspend Object? createAnchorOnSurface(double latitude, double longitude, double altitudeAboveSurface, androidx.xr.runtime.math.Quaternion eastUpSouthQuaternion, androidx.xr.arcore.internal.Earth.Surface surface, kotlin.coroutines.Continuation<? super androidx.xr.arcore.internal.Anchor>);
    method public androidx.xr.arcore.internal.Earth.GeospatialPoseResult createGeospatialPoseFromDevicePose();
    method public androidx.xr.arcore.internal.Earth.GeospatialPoseResult createGeospatialPoseFromPose(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.runtime.math.Pose createPoseFromGeospatialPose(androidx.xr.runtime.math.GeospatialPose geospatialPose);
    method public androidx.xr.arcore.internal.Earth.State getState();
    property public abstract androidx.xr.arcore.internal.Earth.State state;
  }

  public static final class Earth.GeospatialPoseResult {
    ctor public Earth.GeospatialPoseResult(androidx.xr.runtime.math.GeospatialPose geospatialPose, double horizontalAccuracy, double verticalAccuracy, double orientationYawAccuracy);
    method public androidx.xr.runtime.math.GeospatialPose getGeospatialPose();
    method public double getHorizontalAccuracy();
    method public double getOrientationYawAccuracy();
    method public double getVerticalAccuracy();
    property public androidx.xr.runtime.math.GeospatialPose geospatialPose;
    property public double horizontalAccuracy;
    property public double orientationYawAccuracy;
    property public double verticalAccuracy;
  }

  public static final class Earth.State {
    field public static final androidx.xr.arcore.internal.Earth.State.Companion Companion;
    field public static final androidx.xr.arcore.internal.Earth.State ERROR_APK_VERSION_TOO_OLD;
    field public static final androidx.xr.arcore.internal.Earth.State ERROR_APP_PREEMPTED;
    field public static final androidx.xr.arcore.internal.Earth.State ERROR_INTERNAL;
    field public static final androidx.xr.arcore.internal.Earth.State ERROR_NOT_AUTHORIZED;
    field public static final androidx.xr.arcore.internal.Earth.State ERROR_RESOURCES_EXHAUSTED;
    field public static final androidx.xr.arcore.internal.Earth.State RUNNING;
    field public static final androidx.xr.arcore.internal.Earth.State STOPPED;
  }

  public static final class Earth.State.Companion {
    property public androidx.xr.arcore.internal.Earth.State ERROR_APK_VERSION_TOO_OLD;
    property public androidx.xr.arcore.internal.Earth.State ERROR_APP_PREEMPTED;
    property public androidx.xr.arcore.internal.Earth.State ERROR_INTERNAL;
    property public androidx.xr.arcore.internal.Earth.State ERROR_NOT_AUTHORIZED;
    property public androidx.xr.arcore.internal.Earth.State ERROR_RESOURCES_EXHAUSTED;
    property public androidx.xr.arcore.internal.Earth.State RUNNING;
    property public androidx.xr.arcore.internal.Earth.State STOPPED;
  }

  public static final class Earth.Surface {
    field public static final androidx.xr.arcore.internal.Earth.Surface.Companion Companion;
    field public static final androidx.xr.arcore.internal.Earth.Surface ROOFTOP;
    field public static final androidx.xr.arcore.internal.Earth.Surface TERRAIN;
  }

  public static final class Earth.Surface.Companion {
    property public androidx.xr.arcore.internal.Earth.Surface ROOFTOP;
    property public androidx.xr.arcore.internal.Earth.Surface TERRAIN;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ExportableAnchor extends androidx.xr.arcore.internal.Anchor {
    method public android.os.IBinder getAnchorToken();
    method public long getNativePointer();
    property public abstract android.os.IBinder anchorToken;
    property public abstract long nativePointer;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Face {
    method public float[] getBlendShapeValues();
    method public float[] getConfidenceValues();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public boolean isValid();
    property public abstract float[] blendShapeValues;
    property public abstract float[] confidenceValues;
    property public abstract boolean isValid;
    property public abstract androidx.xr.runtime.TrackingState trackingState;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class GeospatialPoseException extends java.lang.Exception {
    ctor public GeospatialPoseException(String message, optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class GeospatialPoseNotTrackingException extends androidx.xr.arcore.internal.GeospatialPoseException {
    ctor public GeospatialPoseNotTrackingException();
    ctor public GeospatialPoseNotTrackingException(optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Hand {
    method public default java.util.Map<androidx.xr.arcore.HandJointType,androidx.xr.runtime.math.Pose> getHandJoints();
    method public java.nio.FloatBuffer getHandJointsBuffer();
    method public androidx.xr.runtime.TrackingState getTrackingState();
    method public static java.util.Map<androidx.xr.arcore.HandJointType,androidx.xr.runtime.math.Pose> parseHandJoint(androidx.xr.runtime.TrackingState trackingState, java.nio.FloatBuffer handJointsBuffer);
    property public default java.util.Map<androidx.xr.arcore.HandJointType,androidx.xr.runtime.math.Pose> handJoints;
    property public abstract java.nio.FloatBuffer handJointsBuffer;
    property public abstract androidx.xr.runtime.TrackingState trackingState;
    field public static final androidx.xr.arcore.internal.Hand.Companion Companion;
  }

  public static final class Hand.Companion {
    method public java.util.Map<androidx.xr.arcore.HandJointType,androidx.xr.runtime.math.Pose> parseHandJoint(androidx.xr.runtime.TrackingState trackingState, java.nio.FloatBuffer handJointsBuffer);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class HitResult {
    ctor public HitResult(float distance, androidx.xr.runtime.math.Pose hitPose, androidx.xr.arcore.internal.Trackable trackable);
    method public float getDistance();
    method public androidx.xr.runtime.math.Pose getHitPose();
    method public androidx.xr.arcore.internal.Trackable getTrackable();
    property public float distance;
    property public androidx.xr.runtime.math.Pose hitPose;
    property public androidx.xr.arcore.internal.Trackable trackable;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface PerceptionManager {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public suspend Object? checkVpsAvailability(double latitude, double longitude, kotlin.coroutines.Continuation<? super androidx.xr.runtime.VpsAvailabilityResult>);
    method public androidx.xr.arcore.internal.Anchor createAnchor(androidx.xr.runtime.math.Pose pose);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.internal.ArDevice getArDevice();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public java.util.List<androidx.xr.arcore.internal.DepthMap> getDepthMaps();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.internal.Earth getEarth();
    method public androidx.xr.arcore.internal.Hand? getLeftHand();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.internal.RenderViewpoint? getLeftRenderViewpoint();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.internal.RenderViewpoint? getMonoRenderViewpoint();
    method public java.util.List<java.util.UUID> getPersistedAnchorUuids();
    method public androidx.xr.arcore.internal.Hand? getRightHand();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.internal.RenderViewpoint? getRightRenderViewpoint();
    method public java.util.Collection<androidx.xr.arcore.internal.Trackable> getTrackables();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.internal.Face? getUserFace();
    method public java.util.List<androidx.xr.arcore.internal.HitResult> hitTest(androidx.xr.runtime.math.Ray ray);
    method public androidx.xr.arcore.internal.Anchor loadAnchor(java.util.UUID uuid);
    method public androidx.xr.arcore.internal.Anchor loadAnchorFromNativePointer(long nativePointer);
    method public void unpersistAnchor(java.util.UUID uuid);
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.internal.ArDevice arDevice;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract java.util.List<androidx.xr.arcore.internal.DepthMap> depthMaps;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.internal.Earth earth;
    property public abstract androidx.xr.arcore.internal.Hand? leftHand;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.internal.RenderViewpoint? leftRenderViewpoint;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.internal.RenderViewpoint? monoRenderViewpoint;
    property public abstract androidx.xr.arcore.internal.Hand? rightHand;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.internal.RenderViewpoint? rightRenderViewpoint;
    property public abstract java.util.Collection<androidx.xr.arcore.internal.Trackable> trackables;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.internal.Face? userFace;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface PerceptionRuntime extends androidx.xr.runtime.internal.JxrRuntime {
    method public androidx.xr.runtime.internal.LifecycleManager getLifecycleManager();
    method public androidx.xr.arcore.internal.PerceptionManager getPerceptionManager();
    method public default suspend Object? update(kotlin.coroutines.Continuation<? super kotlin.time.ComparableTimeMark?>);
    property public abstract androidx.xr.runtime.internal.LifecycleManager lifecycleManager;
    property public abstract androidx.xr.arcore.internal.PerceptionManager perceptionManager;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Plane extends androidx.xr.arcore.internal.Trackable {
    method public androidx.xr.runtime.math.Pose getCenterPose();
    method public androidx.xr.runtime.math.FloatSize2d getExtents();
    method public androidx.xr.arcore.internal.Plane.Label getLabel();
    method public androidx.xr.arcore.internal.Plane? getSubsumedBy();
    method public androidx.xr.arcore.internal.Plane.Type getType();
    method public java.util.List<androidx.xr.runtime.math.Vector2> getVertices();
    property public abstract androidx.xr.runtime.math.Pose centerPose;
    property public abstract androidx.xr.runtime.math.FloatSize2d extents;
    property public abstract androidx.xr.arcore.internal.Plane.Label label;
    property public abstract androidx.xr.arcore.internal.Plane? subsumedBy;
    property public abstract androidx.xr.arcore.internal.Plane.Type type;
    property public abstract java.util.List<androidx.xr.runtime.math.Vector2> vertices;
  }

  public static final class Plane.Label {
    field public static final androidx.xr.arcore.internal.Plane.Label CEILING;
    field public static final androidx.xr.arcore.internal.Plane.Label.Companion Companion;
    field public static final androidx.xr.arcore.internal.Plane.Label FLOOR;
    field public static final androidx.xr.arcore.internal.Plane.Label TABLE;
    field public static final androidx.xr.arcore.internal.Plane.Label UNKNOWN;
    field public static final androidx.xr.arcore.internal.Plane.Label WALL;
  }

  public static final class Plane.Label.Companion {
    property public androidx.xr.arcore.internal.Plane.Label CEILING;
    property public androidx.xr.arcore.internal.Plane.Label FLOOR;
    property public androidx.xr.arcore.internal.Plane.Label TABLE;
    property public androidx.xr.arcore.internal.Plane.Label UNKNOWN;
    property public androidx.xr.arcore.internal.Plane.Label WALL;
  }

  public static final class Plane.Type {
    field public static final androidx.xr.arcore.internal.Plane.Type.Companion Companion;
    field public static final androidx.xr.arcore.internal.Plane.Type HORIZONTAL_DOWNWARD_FACING;
    field public static final androidx.xr.arcore.internal.Plane.Type HORIZONTAL_UPWARD_FACING;
    field public static final androidx.xr.arcore.internal.Plane.Type VERTICAL;
  }

  public static final class Plane.Type.Companion {
    property public androidx.xr.arcore.internal.Plane.Type HORIZONTAL_DOWNWARD_FACING;
    property public androidx.xr.arcore.internal.Plane.Type HORIZONTAL_UPWARD_FACING;
    property public androidx.xr.arcore.internal.Plane.Type VERTICAL;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface RenderViewpoint {
    method public androidx.xr.runtime.FieldOfView getFieldOfView();
    method public androidx.xr.runtime.math.Pose getPose();
    property public abstract androidx.xr.runtime.FieldOfView fieldOfView;
    property public abstract androidx.xr.runtime.math.Pose pose;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Trackable {
    method public androidx.xr.arcore.internal.Anchor createAnchor(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.runtime.TrackingState getTrackingState();
    property public abstract androidx.xr.runtime.TrackingState trackingState;
  }

}

