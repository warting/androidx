// Signature format: 4.0
package androidx.xr.projected {

  public final class ProjectedAudioConfig {
    method public int[] getChannelCounts();
    method public int[] getSampleRatesHz();
    method public int getSourceType();
    property public int[] channelCounts;
    property public int[] sampleRatesHz;
    property public int sourceType;
  }

  public final class ProjectedAudioManager {
    method public static suspend Object? create(android.content.Context context, androidx.lifecycle.LifecycleOwner lifecycleOwner, kotlin.coroutines.Continuation<? super androidx.xr.projected.ProjectedAudioManager>);
    method public java.util.List<androidx.xr.projected.ProjectedAudioConfig> getSupportedAudioCaptureConfigs();
    field public static final androidx.xr.projected.ProjectedAudioManager.Companion Companion;
  }

  public static final class ProjectedAudioManager.Companion {
    method public suspend Object? create(android.content.Context context, androidx.lifecycle.LifecycleOwner lifecycleOwner, kotlin.coroutines.Continuation<? super androidx.xr.projected.ProjectedAudioManager>);
  }

  public final class ProjectedContext {
    method public static android.content.Intent addProjectedFlags(android.content.Intent intent);
    method @RequiresApi(android.os.Build.VERSION_CODES.UPSIDE_DOWN_CAKE) public static android.content.Context createHostDeviceContext(android.content.Context context);
    method @RequiresApi(android.os.Build.VERSION_CODES.VANILLA_ICE_CREAM) public static android.app.ActivityOptions createProjectedActivityOptions(android.content.Context context);
    method @RequiresApi(android.os.Build.VERSION_CODES.UPSIDE_DOWN_CAKE) public static android.content.Context createProjectedDeviceContext(android.content.Context context);
    method @RequiresApi(android.os.Build.VERSION_CODES.UPSIDE_DOWN_CAKE) public static String? getProjectedDeviceName(android.content.Context context);
    method @RequiresApi(android.os.Build.VERSION_CODES.UPSIDE_DOWN_CAKE) public static boolean isProjectedDeviceContext(android.content.Context context);
    field public static final androidx.xr.projected.ProjectedContext INSTANCE;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ProjectedServiceBinding {
    method public static boolean bind(android.content.Context context, android.content.ServiceConnection serviceConnection);
    method public static boolean bindPerception(android.content.Context context, android.content.ServiceConnection serviceConnection);
    field public static final androidx.xr.projected.ProjectedServiceBinding INSTANCE;
  }

}

package androidx.xr.projected.permissions {

  public final class ProjectedPermissionsRequestParams {
    ctor public ProjectedPermissionsRequestParams(java.util.List<java.lang.String> permissions, String? rationale);
    method public java.util.List<java.lang.String> getPermissions();
    method public String? getRationale();
    property public java.util.List<java.lang.String> permissions;
    property public String? rationale;
  }

  public final class ProjectedPermissionsResultContract extends androidx.activity.result.contract.ActivityResultContract<java.util.List<? extends androidx.xr.projected.permissions.ProjectedPermissionsRequestParams>,java.util.Map<java.lang.String,? extends java.lang.Boolean>> {
    ctor public ProjectedPermissionsResultContract();
    method @RequiresApi(android.os.Build.VERSION_CODES.UPSIDE_DOWN_CAKE) public android.content.Intent createIntent(android.content.Context context, java.util.List<androidx.xr.projected.permissions.ProjectedPermissionsRequestParams> input);
    method public java.util.Map<java.lang.String,java.lang.Boolean> parseResult(int resultCode, android.content.Intent? intent);
  }

}

