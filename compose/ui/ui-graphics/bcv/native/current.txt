// Klib ABI Dump
// Targets: [linuxX64.linuxx64Stubs]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <androidx.compose.ui:ui-graphics>
open annotation class androidx.compose.ui.graphics.drawscope/DrawScopeMarker : kotlin/Annotation { // androidx.compose.ui.graphics.drawscope/DrawScopeMarker|null[0]
    constructor <init>() // androidx.compose.ui.graphics.drawscope/DrawScopeMarker.<init>|<init>(){}[0]
}

open annotation class androidx.compose.ui.graphics/ExperimentalGraphicsApi : kotlin/Annotation { // androidx.compose.ui.graphics/ExperimentalGraphicsApi|null[0]
    constructor <init>() // androidx.compose.ui.graphics/ExperimentalGraphicsApi.<init>|<init>(){}[0]
}

abstract fun interface androidx.compose.ui.graphics/ColorProducer { // androidx.compose.ui.graphics/ColorProducer|null[0]
    abstract fun invoke(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/ColorProducer.invoke|invoke(){}[0]
}

abstract interface androidx.compose.ui.graphics.drawscope/ContentDrawScope : androidx.compose.ui.graphics.drawscope/DrawScope { // androidx.compose.ui.graphics.drawscope/ContentDrawScope|null[0]
    abstract fun drawContent() // androidx.compose.ui.graphics.drawscope/ContentDrawScope.drawContent|drawContent(){}[0]
}

abstract interface androidx.compose.ui.graphics.drawscope/DrawContext { // androidx.compose.ui.graphics.drawscope/DrawContext|null[0]
    abstract val transform // androidx.compose.ui.graphics.drawscope/DrawContext.transform|{}transform[0]
        abstract fun <get-transform>(): androidx.compose.ui.graphics.drawscope/DrawTransform // androidx.compose.ui.graphics.drawscope/DrawContext.transform.<get-transform>|<get-transform>(){}[0]

    abstract var size // androidx.compose.ui.graphics.drawscope/DrawContext.size|{}size[0]
        abstract fun <get-size>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics.drawscope/DrawContext.size.<get-size>|<get-size>(){}[0]
        abstract fun <set-size>(androidx.compose.ui.geometry/Size) // androidx.compose.ui.graphics.drawscope/DrawContext.size.<set-size>|<set-size>(androidx.compose.ui.geometry.Size){}[0]
    open var canvas // androidx.compose.ui.graphics.drawscope/DrawContext.canvas|{}canvas[0]
        open fun <get-canvas>(): androidx.compose.ui.graphics/Canvas // androidx.compose.ui.graphics.drawscope/DrawContext.canvas.<get-canvas>|<get-canvas>(){}[0]
        open fun <set-canvas>(androidx.compose.ui.graphics/Canvas) // androidx.compose.ui.graphics.drawscope/DrawContext.canvas.<set-canvas>|<set-canvas>(androidx.compose.ui.graphics.Canvas){}[0]
    open var density // androidx.compose.ui.graphics.drawscope/DrawContext.density|{}density[0]
        open fun <get-density>(): androidx.compose.ui.unit/Density // androidx.compose.ui.graphics.drawscope/DrawContext.density.<get-density>|<get-density>(){}[0]
        open fun <set-density>(androidx.compose.ui.unit/Density) // androidx.compose.ui.graphics.drawscope/DrawContext.density.<set-density>|<set-density>(androidx.compose.ui.unit.Density){}[0]
    open var graphicsLayer // androidx.compose.ui.graphics.drawscope/DrawContext.graphicsLayer|{}graphicsLayer[0]
        open fun <get-graphicsLayer>(): androidx.compose.ui.graphics.layer/GraphicsLayer? // androidx.compose.ui.graphics.drawscope/DrawContext.graphicsLayer.<get-graphicsLayer>|<get-graphicsLayer>(){}[0]
        open fun <set-graphicsLayer>(androidx.compose.ui.graphics.layer/GraphicsLayer?) // androidx.compose.ui.graphics.drawscope/DrawContext.graphicsLayer.<set-graphicsLayer>|<set-graphicsLayer>(androidx.compose.ui.graphics.layer.GraphicsLayer?){}[0]
    open var layoutDirection // androidx.compose.ui.graphics.drawscope/DrawContext.layoutDirection|{}layoutDirection[0]
        open fun <get-layoutDirection>(): androidx.compose.ui.unit/LayoutDirection // androidx.compose.ui.graphics.drawscope/DrawContext.layoutDirection.<get-layoutDirection>|<get-layoutDirection>(){}[0]
        open fun <set-layoutDirection>(androidx.compose.ui.unit/LayoutDirection) // androidx.compose.ui.graphics.drawscope/DrawContext.layoutDirection.<set-layoutDirection>|<set-layoutDirection>(androidx.compose.ui.unit.LayoutDirection){}[0]
}

abstract interface androidx.compose.ui.graphics.drawscope/DrawScope : androidx.compose.ui.unit/Density { // androidx.compose.ui.graphics.drawscope/DrawScope|null[0]
    abstract val drawContext // androidx.compose.ui.graphics.drawscope/DrawScope.drawContext|{}drawContext[0]
        abstract fun <get-drawContext>(): androidx.compose.ui.graphics.drawscope/DrawContext // androidx.compose.ui.graphics.drawscope/DrawScope.drawContext.<get-drawContext>|<get-drawContext>(){}[0]
    abstract val layoutDirection // androidx.compose.ui.graphics.drawscope/DrawScope.layoutDirection|{}layoutDirection[0]
        abstract fun <get-layoutDirection>(): androidx.compose.ui.unit/LayoutDirection // androidx.compose.ui.graphics.drawscope/DrawScope.layoutDirection.<get-layoutDirection>|<get-layoutDirection>(){}[0]
    open val center // androidx.compose.ui.graphics.drawscope/DrawScope.center|{}center[0]
        open fun <get-center>(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.graphics.drawscope/DrawScope.center.<get-center>|<get-center>(){}[0]
    open val size // androidx.compose.ui.graphics.drawscope/DrawScope.size|{}size[0]
        open fun <get-size>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics.drawscope/DrawScope.size.<get-size>|<get-size>(){}[0]

    abstract fun drawArc(androidx.compose.ui.graphics/Brush, kotlin/Float, kotlin/Float, kotlin/Boolean, androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.geometry/Size = ..., kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawArc|drawArc(androidx.compose.ui.graphics.Brush;kotlin.Float;kotlin.Float;kotlin.Boolean;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawArc(androidx.compose.ui.graphics/Color, kotlin/Float, kotlin/Float, kotlin/Boolean, androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.geometry/Size = ..., kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawArc|drawArc(androidx.compose.ui.graphics.Color;kotlin.Float;kotlin.Float;kotlin.Boolean;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawCircle(androidx.compose.ui.graphics/Brush, kotlin/Float = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawCircle|drawCircle(androidx.compose.ui.graphics.Brush;kotlin.Float;androidx.compose.ui.geometry.Offset;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawCircle(androidx.compose.ui.graphics/Color, kotlin/Float = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawCircle|drawCircle(androidx.compose.ui.graphics.Color;kotlin.Float;androidx.compose.ui.geometry.Offset;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawImage(androidx.compose.ui.graphics/ImageBitmap, androidx.compose.ui.geometry/Offset = ..., kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawImage|drawImage(androidx.compose.ui.graphics.ImageBitmap;androidx.compose.ui.geometry.Offset;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawImage(androidx.compose.ui.graphics/ImageBitmap, androidx.compose.ui.unit/IntOffset = ..., androidx.compose.ui.unit/IntSize = ..., androidx.compose.ui.unit/IntOffset = ..., androidx.compose.ui.unit/IntSize = ..., kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawImage|drawImage(androidx.compose.ui.graphics.ImageBitmap;androidx.compose.ui.unit.IntOffset;androidx.compose.ui.unit.IntSize;androidx.compose.ui.unit.IntOffset;androidx.compose.ui.unit.IntSize;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawLine(androidx.compose.ui.graphics/Brush, androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Offset, kotlin/Float = ..., androidx.compose.ui.graphics/StrokeCap = ..., androidx.compose.ui.graphics/PathEffect? = ..., kotlin/Float = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawLine|drawLine(androidx.compose.ui.graphics.Brush;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Offset;kotlin.Float;androidx.compose.ui.graphics.StrokeCap;androidx.compose.ui.graphics.PathEffect?;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawLine(androidx.compose.ui.graphics/Color, androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Offset, kotlin/Float = ..., androidx.compose.ui.graphics/StrokeCap = ..., androidx.compose.ui.graphics/PathEffect? = ..., kotlin/Float = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawLine|drawLine(androidx.compose.ui.graphics.Color;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Offset;kotlin.Float;androidx.compose.ui.graphics.StrokeCap;androidx.compose.ui.graphics.PathEffect?;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawOval(androidx.compose.ui.graphics/Brush, androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.geometry/Size = ..., kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawOval|drawOval(androidx.compose.ui.graphics.Brush;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawOval(androidx.compose.ui.graphics/Color, androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.geometry/Size = ..., kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawOval|drawOval(androidx.compose.ui.graphics.Color;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawPath(androidx.compose.ui.graphics/Path, androidx.compose.ui.graphics/Brush, kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawPath|drawPath(androidx.compose.ui.graphics.Path;androidx.compose.ui.graphics.Brush;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawPath(androidx.compose.ui.graphics/Path, androidx.compose.ui.graphics/Color, kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawPath|drawPath(androidx.compose.ui.graphics.Path;androidx.compose.ui.graphics.Color;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawPoints(kotlin.collections/List<androidx.compose.ui.geometry/Offset>, androidx.compose.ui.graphics/PointMode, androidx.compose.ui.graphics/Brush, kotlin/Float = ..., androidx.compose.ui.graphics/StrokeCap = ..., androidx.compose.ui.graphics/PathEffect? = ..., kotlin/Float = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawPoints|drawPoints(kotlin.collections.List<androidx.compose.ui.geometry.Offset>;androidx.compose.ui.graphics.PointMode;androidx.compose.ui.graphics.Brush;kotlin.Float;androidx.compose.ui.graphics.StrokeCap;androidx.compose.ui.graphics.PathEffect?;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawPoints(kotlin.collections/List<androidx.compose.ui.geometry/Offset>, androidx.compose.ui.graphics/PointMode, androidx.compose.ui.graphics/Color, kotlin/Float = ..., androidx.compose.ui.graphics/StrokeCap = ..., androidx.compose.ui.graphics/PathEffect? = ..., kotlin/Float = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawPoints|drawPoints(kotlin.collections.List<androidx.compose.ui.geometry.Offset>;androidx.compose.ui.graphics.PointMode;androidx.compose.ui.graphics.Color;kotlin.Float;androidx.compose.ui.graphics.StrokeCap;androidx.compose.ui.graphics.PathEffect?;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawRect(androidx.compose.ui.graphics/Brush, androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.geometry/Size = ..., kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawRect|drawRect(androidx.compose.ui.graphics.Brush;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawRect(androidx.compose.ui.graphics/Color, androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.geometry/Size = ..., kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawRect|drawRect(androidx.compose.ui.graphics.Color;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawRoundRect(androidx.compose.ui.graphics/Brush, androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.geometry/Size = ..., androidx.compose.ui.geometry/CornerRadius = ..., kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawRoundRect|drawRoundRect(androidx.compose.ui.graphics.Brush;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;androidx.compose.ui.geometry.CornerRadius;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    abstract fun drawRoundRect(androidx.compose.ui.graphics/Color, androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.geometry/Size = ..., androidx.compose.ui.geometry/CornerRadius = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., kotlin/Float = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawRoundRect|drawRoundRect(androidx.compose.ui.graphics.Color;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;androidx.compose.ui.geometry.CornerRadius;androidx.compose.ui.graphics.drawscope.DrawStyle;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    open fun (androidx.compose.ui.graphics.layer/GraphicsLayer).record(androidx.compose.ui.unit/IntSize = ..., kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/DrawScope.record|record@androidx.compose.ui.graphics.layer.GraphicsLayer(androidx.compose.ui.unit.IntSize;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
    open fun drawImage(androidx.compose.ui.graphics/ImageBitmap, androidx.compose.ui.unit/IntOffset = ..., androidx.compose.ui.unit/IntSize = ..., androidx.compose.ui.unit/IntOffset = ..., androidx.compose.ui.unit/IntSize = ..., kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ..., androidx.compose.ui.graphics/FilterQuality = ...) // androidx.compose.ui.graphics.drawscope/DrawScope.drawImage|drawImage(androidx.compose.ui.graphics.ImageBitmap;androidx.compose.ui.unit.IntOffset;androidx.compose.ui.unit.IntSize;androidx.compose.ui.unit.IntOffset;androidx.compose.ui.unit.IntSize;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode;androidx.compose.ui.graphics.FilterQuality){}[0]

    final object Companion { // androidx.compose.ui.graphics.drawscope/DrawScope.Companion|null[0]
        final val DefaultBlendMode // androidx.compose.ui.graphics.drawscope/DrawScope.Companion.DefaultBlendMode|{}DefaultBlendMode[0]
            final fun <get-DefaultBlendMode>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics.drawscope/DrawScope.Companion.DefaultBlendMode.<get-DefaultBlendMode>|<get-DefaultBlendMode>(){}[0]
        final val DefaultFilterQuality // androidx.compose.ui.graphics.drawscope/DrawScope.Companion.DefaultFilterQuality|{}DefaultFilterQuality[0]
            final fun <get-DefaultFilterQuality>(): androidx.compose.ui.graphics/FilterQuality // androidx.compose.ui.graphics.drawscope/DrawScope.Companion.DefaultFilterQuality.<get-DefaultFilterQuality>|<get-DefaultFilterQuality>(){}[0]
    }
}

abstract interface androidx.compose.ui.graphics.drawscope/DrawTransform { // androidx.compose.ui.graphics.drawscope/DrawTransform|null[0]
    abstract val size // androidx.compose.ui.graphics.drawscope/DrawTransform.size|{}size[0]
        abstract fun <get-size>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics.drawscope/DrawTransform.size.<get-size>|<get-size>(){}[0]
    open val center // androidx.compose.ui.graphics.drawscope/DrawTransform.center|{}center[0]
        open fun <get-center>(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.graphics.drawscope/DrawTransform.center.<get-center>|<get-center>(){}[0]

    abstract fun clipPath(androidx.compose.ui.graphics/Path, androidx.compose.ui.graphics/ClipOp = ...) // androidx.compose.ui.graphics.drawscope/DrawTransform.clipPath|clipPath(androidx.compose.ui.graphics.Path;androidx.compose.ui.graphics.ClipOp){}[0]
    abstract fun clipRect(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/ClipOp = ...) // androidx.compose.ui.graphics.drawscope/DrawTransform.clipRect|clipRect(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.ClipOp){}[0]
    abstract fun inset(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.drawscope/DrawTransform.inset|inset(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    abstract fun rotate(kotlin/Float, androidx.compose.ui.geometry/Offset = ...) // androidx.compose.ui.graphics.drawscope/DrawTransform.rotate|rotate(kotlin.Float;androidx.compose.ui.geometry.Offset){}[0]
    abstract fun scale(kotlin/Float, kotlin/Float, androidx.compose.ui.geometry/Offset = ...) // androidx.compose.ui.graphics.drawscope/DrawTransform.scale|scale(kotlin.Float;kotlin.Float;androidx.compose.ui.geometry.Offset){}[0]
    abstract fun transform(androidx.compose.ui.graphics/Matrix) // androidx.compose.ui.graphics.drawscope/DrawTransform.transform|transform(androidx.compose.ui.graphics.Matrix){}[0]
    abstract fun translate(kotlin/Float = ..., kotlin/Float = ...) // androidx.compose.ui.graphics.drawscope/DrawTransform.translate|translate(kotlin.Float;kotlin.Float){}[0]
}

abstract interface androidx.compose.ui.graphics/Canvas { // androidx.compose.ui.graphics/Canvas|null[0]
    abstract fun clipPath(androidx.compose.ui.graphics/Path, androidx.compose.ui.graphics/ClipOp = ...) // androidx.compose.ui.graphics/Canvas.clipPath|clipPath(androidx.compose.ui.graphics.Path;androidx.compose.ui.graphics.ClipOp){}[0]
    abstract fun clipRect(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, androidx.compose.ui.graphics/ClipOp = ...) // androidx.compose.ui.graphics/Canvas.clipRect|clipRect(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.ClipOp){}[0]
    abstract fun concat(androidx.compose.ui.graphics/Matrix) // androidx.compose.ui.graphics/Canvas.concat|concat(androidx.compose.ui.graphics.Matrix){}[0]
    abstract fun disableZ() // androidx.compose.ui.graphics/Canvas.disableZ|disableZ(){}[0]
    abstract fun drawArc(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Boolean, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawArc|drawArc(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Boolean;androidx.compose.ui.graphics.Paint){}[0]
    abstract fun drawCircle(androidx.compose.ui.geometry/Offset, kotlin/Float, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawCircle|drawCircle(androidx.compose.ui.geometry.Offset;kotlin.Float;androidx.compose.ui.graphics.Paint){}[0]
    abstract fun drawImage(androidx.compose.ui.graphics/ImageBitmap, androidx.compose.ui.geometry/Offset, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawImage|drawImage(androidx.compose.ui.graphics.ImageBitmap;androidx.compose.ui.geometry.Offset;androidx.compose.ui.graphics.Paint){}[0]
    abstract fun drawImageRect(androidx.compose.ui.graphics/ImageBitmap, androidx.compose.ui.unit/IntOffset = ..., androidx.compose.ui.unit/IntSize = ..., androidx.compose.ui.unit/IntOffset = ..., androidx.compose.ui.unit/IntSize = ..., androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawImageRect|drawImageRect(androidx.compose.ui.graphics.ImageBitmap;androidx.compose.ui.unit.IntOffset;androidx.compose.ui.unit.IntSize;androidx.compose.ui.unit.IntOffset;androidx.compose.ui.unit.IntSize;androidx.compose.ui.graphics.Paint){}[0]
    abstract fun drawLine(androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Offset, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawLine|drawLine(androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Offset;androidx.compose.ui.graphics.Paint){}[0]
    abstract fun drawOval(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawOval|drawOval(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.Paint){}[0]
    abstract fun drawPath(androidx.compose.ui.graphics/Path, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawPath|drawPath(androidx.compose.ui.graphics.Path;androidx.compose.ui.graphics.Paint){}[0]
    abstract fun drawPoints(androidx.compose.ui.graphics/PointMode, kotlin.collections/List<androidx.compose.ui.geometry/Offset>, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawPoints|drawPoints(androidx.compose.ui.graphics.PointMode;kotlin.collections.List<androidx.compose.ui.geometry.Offset>;androidx.compose.ui.graphics.Paint){}[0]
    abstract fun drawRawPoints(androidx.compose.ui.graphics/PointMode, kotlin/FloatArray, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawRawPoints|drawRawPoints(androidx.compose.ui.graphics.PointMode;kotlin.FloatArray;androidx.compose.ui.graphics.Paint){}[0]
    abstract fun drawRect(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawRect|drawRect(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.Paint){}[0]
    abstract fun drawRoundRect(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawRoundRect|drawRoundRect(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.Paint){}[0]
    abstract fun drawVertices(androidx.compose.ui.graphics/Vertices, androidx.compose.ui.graphics/BlendMode, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawVertices|drawVertices(androidx.compose.ui.graphics.Vertices;androidx.compose.ui.graphics.BlendMode;androidx.compose.ui.graphics.Paint){}[0]
    abstract fun enableZ() // androidx.compose.ui.graphics/Canvas.enableZ|enableZ(){}[0]
    abstract fun restore() // androidx.compose.ui.graphics/Canvas.restore|restore(){}[0]
    abstract fun rotate(kotlin/Float) // androidx.compose.ui.graphics/Canvas.rotate|rotate(kotlin.Float){}[0]
    abstract fun save() // androidx.compose.ui.graphics/Canvas.save|save(){}[0]
    abstract fun saveLayer(androidx.compose.ui.geometry/Rect, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.saveLayer|saveLayer(androidx.compose.ui.geometry.Rect;androidx.compose.ui.graphics.Paint){}[0]
    abstract fun scale(kotlin/Float, kotlin/Float = ...) // androidx.compose.ui.graphics/Canvas.scale|scale(kotlin.Float;kotlin.Float){}[0]
    abstract fun skew(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Canvas.skew|skew(kotlin.Float;kotlin.Float){}[0]
    abstract fun translate(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Canvas.translate|translate(kotlin.Float;kotlin.Float){}[0]
    open fun clipRect(androidx.compose.ui.geometry/Rect, androidx.compose.ui.graphics/ClipOp = ...) // androidx.compose.ui.graphics/Canvas.clipRect|clipRect(androidx.compose.ui.geometry.Rect;androidx.compose.ui.graphics.ClipOp){}[0]
    open fun drawArc(androidx.compose.ui.geometry/Rect, kotlin/Float, kotlin/Float, kotlin/Boolean, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawArc|drawArc(androidx.compose.ui.geometry.Rect;kotlin.Float;kotlin.Float;kotlin.Boolean;androidx.compose.ui.graphics.Paint){}[0]
    open fun drawArcRad(androidx.compose.ui.geometry/Rect, kotlin/Float, kotlin/Float, kotlin/Boolean, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawArcRad|drawArcRad(androidx.compose.ui.geometry.Rect;kotlin.Float;kotlin.Float;kotlin.Boolean;androidx.compose.ui.graphics.Paint){}[0]
    open fun drawOval(androidx.compose.ui.geometry/Rect, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawOval|drawOval(androidx.compose.ui.geometry.Rect;androidx.compose.ui.graphics.Paint){}[0]
    open fun drawRect(androidx.compose.ui.geometry/Rect, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/Canvas.drawRect|drawRect(androidx.compose.ui.geometry.Rect;androidx.compose.ui.graphics.Paint){}[0]
    open fun skewRad(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Canvas.skewRad|skewRad(kotlin.Float;kotlin.Float){}[0]
}

abstract interface androidx.compose.ui.graphics/GraphicsContext { // androidx.compose.ui.graphics/GraphicsContext|null[0]
    abstract fun createGraphicsLayer(): androidx.compose.ui.graphics.layer/GraphicsLayer // androidx.compose.ui.graphics/GraphicsContext.createGraphicsLayer|createGraphicsLayer(){}[0]
    abstract fun releaseGraphicsLayer(androidx.compose.ui.graphics.layer/GraphicsLayer) // androidx.compose.ui.graphics/GraphicsContext.releaseGraphicsLayer|releaseGraphicsLayer(androidx.compose.ui.graphics.layer.GraphicsLayer){}[0]
}

abstract interface androidx.compose.ui.graphics/ImageBitmap { // androidx.compose.ui.graphics/ImageBitmap|null[0]
    abstract val colorSpace // androidx.compose.ui.graphics/ImageBitmap.colorSpace|{}colorSpace[0]
        abstract fun <get-colorSpace>(): androidx.compose.ui.graphics.colorspace/ColorSpace // androidx.compose.ui.graphics/ImageBitmap.colorSpace.<get-colorSpace>|<get-colorSpace>(){}[0]
    abstract val config // androidx.compose.ui.graphics/ImageBitmap.config|{}config[0]
        abstract fun <get-config>(): androidx.compose.ui.graphics/ImageBitmapConfig // androidx.compose.ui.graphics/ImageBitmap.config.<get-config>|<get-config>(){}[0]
    abstract val hasAlpha // androidx.compose.ui.graphics/ImageBitmap.hasAlpha|{}hasAlpha[0]
        abstract fun <get-hasAlpha>(): kotlin/Boolean // androidx.compose.ui.graphics/ImageBitmap.hasAlpha.<get-hasAlpha>|<get-hasAlpha>(){}[0]
    abstract val height // androidx.compose.ui.graphics/ImageBitmap.height|{}height[0]
        abstract fun <get-height>(): kotlin/Int // androidx.compose.ui.graphics/ImageBitmap.height.<get-height>|<get-height>(){}[0]
    abstract val width // androidx.compose.ui.graphics/ImageBitmap.width|{}width[0]
        abstract fun <get-width>(): kotlin/Int // androidx.compose.ui.graphics/ImageBitmap.width.<get-width>|<get-width>(){}[0]

    abstract fun prepareToDraw() // androidx.compose.ui.graphics/ImageBitmap.prepareToDraw|prepareToDraw(){}[0]
    abstract fun readPixels(kotlin/IntArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...) // androidx.compose.ui.graphics/ImageBitmap.readPixels|readPixels(kotlin.IntArray;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

    final object Companion // androidx.compose.ui.graphics/ImageBitmap.Companion|null[0]
}

abstract interface androidx.compose.ui.graphics/Paint { // androidx.compose.ui.graphics/Paint|null[0]
    abstract var alpha // androidx.compose.ui.graphics/Paint.alpha|{}alpha[0]
        abstract fun <get-alpha>(): kotlin/Float // androidx.compose.ui.graphics/Paint.alpha.<get-alpha>|<get-alpha>(){}[0]
        abstract fun <set-alpha>(kotlin/Float) // androidx.compose.ui.graphics/Paint.alpha.<set-alpha>|<set-alpha>(kotlin.Float){}[0]
    abstract var blendMode // androidx.compose.ui.graphics/Paint.blendMode|{}blendMode[0]
        abstract fun <get-blendMode>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/Paint.blendMode.<get-blendMode>|<get-blendMode>(){}[0]
        abstract fun <set-blendMode>(androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics/Paint.blendMode.<set-blendMode>|<set-blendMode>(androidx.compose.ui.graphics.BlendMode){}[0]
    abstract var color // androidx.compose.ui.graphics/Paint.color|{}color[0]
        abstract fun <get-color>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Paint.color.<get-color>|<get-color>(){}[0]
        abstract fun <set-color>(androidx.compose.ui.graphics/Color) // androidx.compose.ui.graphics/Paint.color.<set-color>|<set-color>(androidx.compose.ui.graphics.Color){}[0]
    abstract var colorFilter // androidx.compose.ui.graphics/Paint.colorFilter|{}colorFilter[0]
        abstract fun <get-colorFilter>(): androidx.compose.ui.graphics/ColorFilter? // androidx.compose.ui.graphics/Paint.colorFilter.<get-colorFilter>|<get-colorFilter>(){}[0]
        abstract fun <set-colorFilter>(androidx.compose.ui.graphics/ColorFilter?) // androidx.compose.ui.graphics/Paint.colorFilter.<set-colorFilter>|<set-colorFilter>(androidx.compose.ui.graphics.ColorFilter?){}[0]
    abstract var filterQuality // androidx.compose.ui.graphics/Paint.filterQuality|{}filterQuality[0]
        abstract fun <get-filterQuality>(): androidx.compose.ui.graphics/FilterQuality // androidx.compose.ui.graphics/Paint.filterQuality.<get-filterQuality>|<get-filterQuality>(){}[0]
        abstract fun <set-filterQuality>(androidx.compose.ui.graphics/FilterQuality) // androidx.compose.ui.graphics/Paint.filterQuality.<set-filterQuality>|<set-filterQuality>(androidx.compose.ui.graphics.FilterQuality){}[0]
    abstract var isAntiAlias // androidx.compose.ui.graphics/Paint.isAntiAlias|{}isAntiAlias[0]
        abstract fun <get-isAntiAlias>(): kotlin/Boolean // androidx.compose.ui.graphics/Paint.isAntiAlias.<get-isAntiAlias>|<get-isAntiAlias>(){}[0]
        abstract fun <set-isAntiAlias>(kotlin/Boolean) // androidx.compose.ui.graphics/Paint.isAntiAlias.<set-isAntiAlias>|<set-isAntiAlias>(kotlin.Boolean){}[0]
    abstract var pathEffect // androidx.compose.ui.graphics/Paint.pathEffect|{}pathEffect[0]
        abstract fun <get-pathEffect>(): androidx.compose.ui.graphics/PathEffect? // androidx.compose.ui.graphics/Paint.pathEffect.<get-pathEffect>|<get-pathEffect>(){}[0]
        abstract fun <set-pathEffect>(androidx.compose.ui.graphics/PathEffect?) // androidx.compose.ui.graphics/Paint.pathEffect.<set-pathEffect>|<set-pathEffect>(androidx.compose.ui.graphics.PathEffect?){}[0]
    abstract var shader // androidx.compose.ui.graphics/Paint.shader|{}shader[0]
        abstract fun <get-shader>(): androidx.compose.ui.graphics/Shader? // androidx.compose.ui.graphics/Paint.shader.<get-shader>|<get-shader>(){}[0]
        abstract fun <set-shader>(androidx.compose.ui.graphics/Shader?) // androidx.compose.ui.graphics/Paint.shader.<set-shader>|<set-shader>(androidx.compose.ui.graphics.Shader?){}[0]
    abstract var strokeCap // androidx.compose.ui.graphics/Paint.strokeCap|{}strokeCap[0]
        abstract fun <get-strokeCap>(): androidx.compose.ui.graphics/StrokeCap // androidx.compose.ui.graphics/Paint.strokeCap.<get-strokeCap>|<get-strokeCap>(){}[0]
        abstract fun <set-strokeCap>(androidx.compose.ui.graphics/StrokeCap) // androidx.compose.ui.graphics/Paint.strokeCap.<set-strokeCap>|<set-strokeCap>(androidx.compose.ui.graphics.StrokeCap){}[0]
    abstract var strokeJoin // androidx.compose.ui.graphics/Paint.strokeJoin|{}strokeJoin[0]
        abstract fun <get-strokeJoin>(): androidx.compose.ui.graphics/StrokeJoin // androidx.compose.ui.graphics/Paint.strokeJoin.<get-strokeJoin>|<get-strokeJoin>(){}[0]
        abstract fun <set-strokeJoin>(androidx.compose.ui.graphics/StrokeJoin) // androidx.compose.ui.graphics/Paint.strokeJoin.<set-strokeJoin>|<set-strokeJoin>(androidx.compose.ui.graphics.StrokeJoin){}[0]
    abstract var strokeMiterLimit // androidx.compose.ui.graphics/Paint.strokeMiterLimit|{}strokeMiterLimit[0]
        abstract fun <get-strokeMiterLimit>(): kotlin/Float // androidx.compose.ui.graphics/Paint.strokeMiterLimit.<get-strokeMiterLimit>|<get-strokeMiterLimit>(){}[0]
        abstract fun <set-strokeMiterLimit>(kotlin/Float) // androidx.compose.ui.graphics/Paint.strokeMiterLimit.<set-strokeMiterLimit>|<set-strokeMiterLimit>(kotlin.Float){}[0]
    abstract var strokeWidth // androidx.compose.ui.graphics/Paint.strokeWidth|{}strokeWidth[0]
        abstract fun <get-strokeWidth>(): kotlin/Float // androidx.compose.ui.graphics/Paint.strokeWidth.<get-strokeWidth>|<get-strokeWidth>(){}[0]
        abstract fun <set-strokeWidth>(kotlin/Float) // androidx.compose.ui.graphics/Paint.strokeWidth.<set-strokeWidth>|<set-strokeWidth>(kotlin.Float){}[0]
    abstract var style // androidx.compose.ui.graphics/Paint.style|{}style[0]
        abstract fun <get-style>(): androidx.compose.ui.graphics/PaintingStyle // androidx.compose.ui.graphics/Paint.style.<get-style>|<get-style>(){}[0]
        abstract fun <set-style>(androidx.compose.ui.graphics/PaintingStyle) // androidx.compose.ui.graphics/Paint.style.<set-style>|<set-style>(androidx.compose.ui.graphics.PaintingStyle){}[0]

    abstract fun asFrameworkPaint(): androidx.compose.ui.graphics/NativePaint // androidx.compose.ui.graphics/Paint.asFrameworkPaint|asFrameworkPaint(){}[0]
}

abstract interface androidx.compose.ui.graphics/Path { // androidx.compose.ui.graphics/Path|null[0]
    abstract val isConvex // androidx.compose.ui.graphics/Path.isConvex|{}isConvex[0]
        abstract fun <get-isConvex>(): kotlin/Boolean // androidx.compose.ui.graphics/Path.isConvex.<get-isConvex>|<get-isConvex>(){}[0]
    abstract val isEmpty // androidx.compose.ui.graphics/Path.isEmpty|{}isEmpty[0]
        abstract fun <get-isEmpty>(): kotlin/Boolean // androidx.compose.ui.graphics/Path.isEmpty.<get-isEmpty>|<get-isEmpty>(){}[0]

    abstract var fillType // androidx.compose.ui.graphics/Path.fillType|{}fillType[0]
        abstract fun <get-fillType>(): androidx.compose.ui.graphics/PathFillType // androidx.compose.ui.graphics/Path.fillType.<get-fillType>|<get-fillType>(){}[0]
        abstract fun <set-fillType>(androidx.compose.ui.graphics/PathFillType) // androidx.compose.ui.graphics/Path.fillType.<set-fillType>|<set-fillType>(androidx.compose.ui.graphics.PathFillType){}[0]

    abstract fun addArc(androidx.compose.ui.geometry/Rect, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Path.addArc|addArc(androidx.compose.ui.geometry.Rect;kotlin.Float;kotlin.Float){}[0]
    abstract fun addArcRad(androidx.compose.ui.geometry/Rect, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Path.addArcRad|addArcRad(androidx.compose.ui.geometry.Rect;kotlin.Float;kotlin.Float){}[0]
    abstract fun addOval(androidx.compose.ui.geometry/Rect) // androidx.compose.ui.graphics/Path.addOval|addOval(androidx.compose.ui.geometry.Rect){}[0]
    abstract fun addOval(androidx.compose.ui.geometry/Rect, androidx.compose.ui.graphics/Path.Direction = ...) // androidx.compose.ui.graphics/Path.addOval|addOval(androidx.compose.ui.geometry.Rect;androidx.compose.ui.graphics.Path.Direction){}[0]
    abstract fun addPath(androidx.compose.ui.graphics/Path, androidx.compose.ui.geometry/Offset = ...) // androidx.compose.ui.graphics/Path.addPath|addPath(androidx.compose.ui.graphics.Path;androidx.compose.ui.geometry.Offset){}[0]
    abstract fun addRect(androidx.compose.ui.geometry/Rect) // androidx.compose.ui.graphics/Path.addRect|addRect(androidx.compose.ui.geometry.Rect){}[0]
    abstract fun addRect(androidx.compose.ui.geometry/Rect, androidx.compose.ui.graphics/Path.Direction = ...) // androidx.compose.ui.graphics/Path.addRect|addRect(androidx.compose.ui.geometry.Rect;androidx.compose.ui.graphics.Path.Direction){}[0]
    abstract fun addRoundRect(androidx.compose.ui.geometry/RoundRect) // androidx.compose.ui.graphics/Path.addRoundRect|addRoundRect(androidx.compose.ui.geometry.RoundRect){}[0]
    abstract fun addRoundRect(androidx.compose.ui.geometry/RoundRect, androidx.compose.ui.graphics/Path.Direction = ...) // androidx.compose.ui.graphics/Path.addRoundRect|addRoundRect(androidx.compose.ui.geometry.RoundRect;androidx.compose.ui.graphics.Path.Direction){}[0]
    abstract fun arcTo(androidx.compose.ui.geometry/Rect, kotlin/Float, kotlin/Float, kotlin/Boolean) // androidx.compose.ui.graphics/Path.arcTo|arcTo(androidx.compose.ui.geometry.Rect;kotlin.Float;kotlin.Float;kotlin.Boolean){}[0]
    abstract fun close() // androidx.compose.ui.graphics/Path.close|close(){}[0]
    abstract fun cubicTo(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Path.cubicTo|cubicTo(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    abstract fun getBounds(): androidx.compose.ui.geometry/Rect // androidx.compose.ui.graphics/Path.getBounds|getBounds(){}[0]
    abstract fun lineTo(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Path.lineTo|lineTo(kotlin.Float;kotlin.Float){}[0]
    abstract fun moveTo(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Path.moveTo|moveTo(kotlin.Float;kotlin.Float){}[0]
    abstract fun op(androidx.compose.ui.graphics/Path, androidx.compose.ui.graphics/Path, androidx.compose.ui.graphics/PathOperation): kotlin/Boolean // androidx.compose.ui.graphics/Path.op|op(androidx.compose.ui.graphics.Path;androidx.compose.ui.graphics.Path;androidx.compose.ui.graphics.PathOperation){}[0]
    abstract fun quadraticBezierTo(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Path.quadraticBezierTo|quadraticBezierTo(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    abstract fun relativeCubicTo(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Path.relativeCubicTo|relativeCubicTo(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    abstract fun relativeLineTo(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Path.relativeLineTo|relativeLineTo(kotlin.Float;kotlin.Float){}[0]
    abstract fun relativeMoveTo(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Path.relativeMoveTo|relativeMoveTo(kotlin.Float;kotlin.Float){}[0]
    abstract fun relativeQuadraticBezierTo(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Path.relativeQuadraticBezierTo|relativeQuadraticBezierTo(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    abstract fun reset() // androidx.compose.ui.graphics/Path.reset|reset(){}[0]
    abstract fun translate(androidx.compose.ui.geometry/Offset) // androidx.compose.ui.graphics/Path.translate|translate(androidx.compose.ui.geometry.Offset){}[0]
    open fun and(androidx.compose.ui.graphics/Path): androidx.compose.ui.graphics/Path // androidx.compose.ui.graphics/Path.and|and(androidx.compose.ui.graphics.Path){}[0]
    open fun arcToRad(androidx.compose.ui.geometry/Rect, kotlin/Float, kotlin/Float, kotlin/Boolean) // androidx.compose.ui.graphics/Path.arcToRad|arcToRad(androidx.compose.ui.geometry.Rect;kotlin.Float;kotlin.Float;kotlin.Boolean){}[0]
    open fun iterator(): androidx.compose.ui.graphics/PathIterator // androidx.compose.ui.graphics/Path.iterator|iterator(){}[0]
    open fun iterator(androidx.compose.ui.graphics/PathIterator.ConicEvaluation, kotlin/Float = ...): androidx.compose.ui.graphics/PathIterator // androidx.compose.ui.graphics/Path.iterator|iterator(androidx.compose.ui.graphics.PathIterator.ConicEvaluation;kotlin.Float){}[0]
    open fun minus(androidx.compose.ui.graphics/Path): androidx.compose.ui.graphics/Path // androidx.compose.ui.graphics/Path.minus|minus(androidx.compose.ui.graphics.Path){}[0]
    open fun or(androidx.compose.ui.graphics/Path): androidx.compose.ui.graphics/Path // androidx.compose.ui.graphics/Path.or|or(androidx.compose.ui.graphics.Path){}[0]
    open fun plus(androidx.compose.ui.graphics/Path): androidx.compose.ui.graphics/Path // androidx.compose.ui.graphics/Path.plus|plus(androidx.compose.ui.graphics.Path){}[0]
    open fun quadraticTo(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Path.quadraticTo|quadraticTo(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    open fun relativeQuadraticTo(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/Path.relativeQuadraticTo|relativeQuadraticTo(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    open fun rewind() // androidx.compose.ui.graphics/Path.rewind|rewind(){}[0]
    open fun transform(androidx.compose.ui.graphics/Matrix) // androidx.compose.ui.graphics/Path.transform|transform(androidx.compose.ui.graphics.Matrix){}[0]
    open fun xor(androidx.compose.ui.graphics/Path): androidx.compose.ui.graphics/Path // androidx.compose.ui.graphics/Path.xor|xor(androidx.compose.ui.graphics.Path){}[0]

    final enum class Direction : kotlin/Enum<androidx.compose.ui.graphics/Path.Direction> { // androidx.compose.ui.graphics/Path.Direction|null[0]
        enum entry Clockwise // androidx.compose.ui.graphics/Path.Direction.Clockwise|null[0]
        enum entry CounterClockwise // androidx.compose.ui.graphics/Path.Direction.CounterClockwise|null[0]

        final val entries // androidx.compose.ui.graphics/Path.Direction.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<androidx.compose.ui.graphics/Path.Direction> // androidx.compose.ui.graphics/Path.Direction.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): androidx.compose.ui.graphics/Path.Direction // androidx.compose.ui.graphics/Path.Direction.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<androidx.compose.ui.graphics/Path.Direction> // androidx.compose.ui.graphics/Path.Direction.values|values#static(){}[0]
    }

    final object Companion { // androidx.compose.ui.graphics/Path.Companion|null[0]
        final fun combine(androidx.compose.ui.graphics/PathOperation, androidx.compose.ui.graphics/Path, androidx.compose.ui.graphics/Path): androidx.compose.ui.graphics/Path // androidx.compose.ui.graphics/Path.Companion.combine|combine(androidx.compose.ui.graphics.PathOperation;androidx.compose.ui.graphics.Path;androidx.compose.ui.graphics.Path){}[0]
    }
}

abstract interface androidx.compose.ui.graphics/PathEffect { // androidx.compose.ui.graphics/PathEffect|null[0]
    final object Companion { // androidx.compose.ui.graphics/PathEffect.Companion|null[0]
        final fun chainPathEffect(androidx.compose.ui.graphics/PathEffect, androidx.compose.ui.graphics/PathEffect): androidx.compose.ui.graphics/PathEffect // androidx.compose.ui.graphics/PathEffect.Companion.chainPathEffect|chainPathEffect(androidx.compose.ui.graphics.PathEffect;androidx.compose.ui.graphics.PathEffect){}[0]
        final fun cornerPathEffect(kotlin/Float): androidx.compose.ui.graphics/PathEffect // androidx.compose.ui.graphics/PathEffect.Companion.cornerPathEffect|cornerPathEffect(kotlin.Float){}[0]
        final fun dashPathEffect(kotlin/FloatArray, kotlin/Float = ...): androidx.compose.ui.graphics/PathEffect // androidx.compose.ui.graphics/PathEffect.Companion.dashPathEffect|dashPathEffect(kotlin.FloatArray;kotlin.Float){}[0]
        final fun stampedPathEffect(androidx.compose.ui.graphics/Path, kotlin/Float, kotlin/Float, androidx.compose.ui.graphics/StampedPathEffectStyle): androidx.compose.ui.graphics/PathEffect // androidx.compose.ui.graphics/PathEffect.Companion.stampedPathEffect|stampedPathEffect(androidx.compose.ui.graphics.Path;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.StampedPathEffectStyle){}[0]
    }
}

abstract interface androidx.compose.ui.graphics/PathIterator : kotlin.collections/Iterator<androidx.compose.ui.graphics/PathSegment> { // androidx.compose.ui.graphics/PathIterator|null[0]
    abstract val conicEvaluation // androidx.compose.ui.graphics/PathIterator.conicEvaluation|{}conicEvaluation[0]
        abstract fun <get-conicEvaluation>(): androidx.compose.ui.graphics/PathIterator.ConicEvaluation // androidx.compose.ui.graphics/PathIterator.conicEvaluation.<get-conicEvaluation>|<get-conicEvaluation>(){}[0]
    abstract val path // androidx.compose.ui.graphics/PathIterator.path|{}path[0]
        abstract fun <get-path>(): androidx.compose.ui.graphics/Path // androidx.compose.ui.graphics/PathIterator.path.<get-path>|<get-path>(){}[0]
    abstract val tolerance // androidx.compose.ui.graphics/PathIterator.tolerance|{}tolerance[0]
        abstract fun <get-tolerance>(): kotlin/Float // androidx.compose.ui.graphics/PathIterator.tolerance.<get-tolerance>|<get-tolerance>(){}[0]

    abstract fun calculateSize(kotlin/Boolean = ...): kotlin/Int // androidx.compose.ui.graphics/PathIterator.calculateSize|calculateSize(kotlin.Boolean){}[0]
    abstract fun hasNext(): kotlin/Boolean // androidx.compose.ui.graphics/PathIterator.hasNext|hasNext(){}[0]
    abstract fun next(): androidx.compose.ui.graphics/PathSegment // androidx.compose.ui.graphics/PathIterator.next|next(){}[0]
    abstract fun next(kotlin/FloatArray, kotlin/Int = ...): androidx.compose.ui.graphics/PathSegment.Type // androidx.compose.ui.graphics/PathIterator.next|next(kotlin.FloatArray;kotlin.Int){}[0]

    final enum class ConicEvaluation : kotlin/Enum<androidx.compose.ui.graphics/PathIterator.ConicEvaluation> { // androidx.compose.ui.graphics/PathIterator.ConicEvaluation|null[0]
        enum entry AsConic // androidx.compose.ui.graphics/PathIterator.ConicEvaluation.AsConic|null[0]
        enum entry AsQuadratics // androidx.compose.ui.graphics/PathIterator.ConicEvaluation.AsQuadratics|null[0]

        final val entries // androidx.compose.ui.graphics/PathIterator.ConicEvaluation.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<androidx.compose.ui.graphics/PathIterator.ConicEvaluation> // androidx.compose.ui.graphics/PathIterator.ConicEvaluation.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): androidx.compose.ui.graphics/PathIterator.ConicEvaluation // androidx.compose.ui.graphics/PathIterator.ConicEvaluation.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<androidx.compose.ui.graphics/PathIterator.ConicEvaluation> // androidx.compose.ui.graphics/PathIterator.ConicEvaluation.values|values#static(){}[0]
    }
}

abstract interface androidx.compose.ui.graphics/PathMeasure { // androidx.compose.ui.graphics/PathMeasure|null[0]
    abstract val length // androidx.compose.ui.graphics/PathMeasure.length|{}length[0]
        abstract fun <get-length>(): kotlin/Float // androidx.compose.ui.graphics/PathMeasure.length.<get-length>|<get-length>(){}[0]

    abstract fun getPosition(kotlin/Float): androidx.compose.ui.geometry/Offset // androidx.compose.ui.graphics/PathMeasure.getPosition|getPosition(kotlin.Float){}[0]
    abstract fun getSegment(kotlin/Float, kotlin/Float, androidx.compose.ui.graphics/Path, kotlin/Boolean = ...): kotlin/Boolean // androidx.compose.ui.graphics/PathMeasure.getSegment|getSegment(kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.Path;kotlin.Boolean){}[0]
    abstract fun getTangent(kotlin/Float): androidx.compose.ui.geometry/Offset // androidx.compose.ui.graphics/PathMeasure.getTangent|getTangent(kotlin.Float){}[0]
    abstract fun setPath(androidx.compose.ui.graphics/Path?, kotlin/Boolean) // androidx.compose.ui.graphics/PathMeasure.setPath|setPath(androidx.compose.ui.graphics.Path?;kotlin.Boolean){}[0]
}

abstract interface androidx.compose.ui.graphics/Shape { // androidx.compose.ui.graphics/Shape|null[0]
    abstract fun createOutline(androidx.compose.ui.geometry/Size, androidx.compose.ui.unit/LayoutDirection, androidx.compose.ui.unit/Density): androidx.compose.ui.graphics/Outline // androidx.compose.ui.graphics/Shape.createOutline|createOutline(androidx.compose.ui.geometry.Size;androidx.compose.ui.unit.LayoutDirection;androidx.compose.ui.unit.Density){}[0]
}

abstract class androidx.compose.ui.graphics.colorspace/Adaptation { // androidx.compose.ui.graphics.colorspace/Adaptation|null[0]
    final object Companion { // androidx.compose.ui.graphics.colorspace/Adaptation.Companion|null[0]
        final val Bradford // androidx.compose.ui.graphics.colorspace/Adaptation.Companion.Bradford|{}Bradford[0]
            final fun <get-Bradford>(): androidx.compose.ui.graphics.colorspace/Adaptation // androidx.compose.ui.graphics.colorspace/Adaptation.Companion.Bradford.<get-Bradford>|<get-Bradford>(){}[0]
        final val Ciecat02 // androidx.compose.ui.graphics.colorspace/Adaptation.Companion.Ciecat02|{}Ciecat02[0]
            final fun <get-Ciecat02>(): androidx.compose.ui.graphics.colorspace/Adaptation // androidx.compose.ui.graphics.colorspace/Adaptation.Companion.Ciecat02.<get-Ciecat02>|<get-Ciecat02>(){}[0]
        final val VonKries // androidx.compose.ui.graphics.colorspace/Adaptation.Companion.VonKries|{}VonKries[0]
            final fun <get-VonKries>(): androidx.compose.ui.graphics.colorspace/Adaptation // androidx.compose.ui.graphics.colorspace/Adaptation.Companion.VonKries.<get-VonKries>|<get-VonKries>(){}[0]
    }
}

abstract class androidx.compose.ui.graphics.colorspace/ColorSpace { // androidx.compose.ui.graphics.colorspace/ColorSpace|null[0]
    constructor <init>(kotlin/String, androidx.compose.ui.graphics.colorspace/ColorModel) // androidx.compose.ui.graphics.colorspace/ColorSpace.<init>|<init>(kotlin.String;androidx.compose.ui.graphics.colorspace.ColorModel){}[0]

    abstract val isWideGamut // androidx.compose.ui.graphics.colorspace/ColorSpace.isWideGamut|{}isWideGamut[0]
        abstract fun <get-isWideGamut>(): kotlin/Boolean // androidx.compose.ui.graphics.colorspace/ColorSpace.isWideGamut.<get-isWideGamut>|<get-isWideGamut>(){}[0]
    final val componentCount // androidx.compose.ui.graphics.colorspace/ColorSpace.componentCount|{}componentCount[0]
        final fun <get-componentCount>(): kotlin/Int // androidx.compose.ui.graphics.colorspace/ColorSpace.componentCount.<get-componentCount>|<get-componentCount>(){}[0]
    final val model // androidx.compose.ui.graphics.colorspace/ColorSpace.model|{}model[0]
        final fun <get-model>(): androidx.compose.ui.graphics.colorspace/ColorModel // androidx.compose.ui.graphics.colorspace/ColorSpace.model.<get-model>|<get-model>(){}[0]
    final val name // androidx.compose.ui.graphics.colorspace/ColorSpace.name|{}name[0]
        final fun <get-name>(): kotlin/String // androidx.compose.ui.graphics.colorspace/ColorSpace.name.<get-name>|<get-name>(){}[0]
    open val isSrgb // androidx.compose.ui.graphics.colorspace/ColorSpace.isSrgb|{}isSrgb[0]
        open fun <get-isSrgb>(): kotlin/Boolean // androidx.compose.ui.graphics.colorspace/ColorSpace.isSrgb.<get-isSrgb>|<get-isSrgb>(){}[0]

    abstract fun fromXyz(kotlin/FloatArray): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/ColorSpace.fromXyz|fromXyz(kotlin.FloatArray){}[0]
    abstract fun getMaxValue(kotlin/Int): kotlin/Float // androidx.compose.ui.graphics.colorspace/ColorSpace.getMaxValue|getMaxValue(kotlin.Int){}[0]
    abstract fun getMinValue(kotlin/Int): kotlin/Float // androidx.compose.ui.graphics.colorspace/ColorSpace.getMinValue|getMinValue(kotlin.Int){}[0]
    abstract fun toXyz(kotlin/FloatArray): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/ColorSpace.toXyz|toXyz(kotlin.FloatArray){}[0]
    final fun fromXyz(kotlin/Float, kotlin/Float, kotlin/Float): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/ColorSpace.fromXyz|fromXyz(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun toXyz(kotlin/Float, kotlin/Float, kotlin/Float): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/ColorSpace.toXyz|toXyz(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.colorspace/ColorSpace.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.colorspace/ColorSpace.hashCode|hashCode(){}[0]
    open fun toString(): kotlin/String // androidx.compose.ui.graphics.colorspace/ColorSpace.toString|toString(){}[0]
}

abstract class androidx.compose.ui.graphics.painter/Painter { // androidx.compose.ui.graphics.painter/Painter|null[0]
    constructor <init>() // androidx.compose.ui.graphics.painter/Painter.<init>|<init>(){}[0]

    abstract val intrinsicSize // androidx.compose.ui.graphics.painter/Painter.intrinsicSize|{}intrinsicSize[0]
        abstract fun <get-intrinsicSize>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics.painter/Painter.intrinsicSize.<get-intrinsicSize>|<get-intrinsicSize>(){}[0]

    abstract fun (androidx.compose.ui.graphics.drawscope/DrawScope).onDraw() // androidx.compose.ui.graphics.painter/Painter.onDraw|onDraw@androidx.compose.ui.graphics.drawscope.DrawScope(){}[0]
    final fun (androidx.compose.ui.graphics.drawscope/DrawScope).draw(androidx.compose.ui.geometry/Size, kotlin/Float = ..., androidx.compose.ui.graphics/ColorFilter? = ...) // androidx.compose.ui.graphics.painter/Painter.draw|draw@androidx.compose.ui.graphics.drawscope.DrawScope(androidx.compose.ui.geometry.Size;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?){}[0]
    open fun applyAlpha(kotlin/Float): kotlin/Boolean // androidx.compose.ui.graphics.painter/Painter.applyAlpha|applyAlpha(kotlin.Float){}[0]
    open fun applyColorFilter(androidx.compose.ui.graphics/ColorFilter?): kotlin/Boolean // androidx.compose.ui.graphics.painter/Painter.applyColorFilter|applyColorFilter(androidx.compose.ui.graphics.ColorFilter?){}[0]
    open fun applyLayoutDirection(androidx.compose.ui.unit/LayoutDirection): kotlin/Boolean // androidx.compose.ui.graphics.painter/Painter.applyLayoutDirection|applyLayoutDirection(androidx.compose.ui.unit.LayoutDirection){}[0]
}

abstract class androidx.compose.ui.graphics/ShaderBrush : androidx.compose.ui.graphics/Brush { // androidx.compose.ui.graphics/ShaderBrush|null[0]
    constructor <init>() // androidx.compose.ui.graphics/ShaderBrush.<init>|<init>(){}[0]

    abstract fun createShader(androidx.compose.ui.geometry/Size): androidx.compose.ui.graphics/Shader // androidx.compose.ui.graphics/ShaderBrush.createShader|createShader(androidx.compose.ui.geometry.Size){}[0]
    final fun applyTo(androidx.compose.ui.geometry/Size, androidx.compose.ui.graphics/Paint, kotlin/Float) // androidx.compose.ui.graphics/ShaderBrush.applyTo|applyTo(androidx.compose.ui.geometry.Size;androidx.compose.ui.graphics.Paint;kotlin.Float){}[0]
}

final class <#A: kotlin/Any?> androidx.compose.ui.graphics/IntervalTree { // androidx.compose.ui.graphics/IntervalTree|null[0]
    constructor <init>() // androidx.compose.ui.graphics/IntervalTree.<init>|<init>(){}[0]

    final fun addInterval(kotlin/Float, kotlin/Float, #A?) // androidx.compose.ui.graphics/IntervalTree.addInterval|addInterval(kotlin.Float;kotlin.Float;1:0?){}[0]
    final fun clear() // androidx.compose.ui.graphics/IntervalTree.clear|clear(){}[0]
    final fun contains(kotlin.ranges/ClosedFloatingPointRange<kotlin/Float>): kotlin/Boolean // androidx.compose.ui.graphics/IntervalTree.contains|contains(kotlin.ranges.ClosedFloatingPointRange<kotlin.Float>){}[0]
    final fun contains(kotlin/Float): kotlin/Boolean // androidx.compose.ui.graphics/IntervalTree.contains|contains(kotlin.Float){}[0]
    final fun findFirstOverlap(kotlin.ranges/ClosedFloatingPointRange<kotlin/Float>): androidx.compose.ui.graphics/Interval<#A> // androidx.compose.ui.graphics/IntervalTree.findFirstOverlap|findFirstOverlap(kotlin.ranges.ClosedFloatingPointRange<kotlin.Float>){}[0]
    final fun findFirstOverlap(kotlin/Float, kotlin/Float = ...): androidx.compose.ui.graphics/Interval<#A> // androidx.compose.ui.graphics/IntervalTree.findFirstOverlap|findFirstOverlap(kotlin.Float;kotlin.Float){}[0]
    final fun findOverlaps(kotlin.ranges/ClosedFloatingPointRange<kotlin/Float>, kotlin.collections/MutableList<androidx.compose.ui.graphics/Interval<#A>> = ...): kotlin.collections/MutableList<androidx.compose.ui.graphics/Interval<#A>> // androidx.compose.ui.graphics/IntervalTree.findOverlaps|findOverlaps(kotlin.ranges.ClosedFloatingPointRange<kotlin.Float>;kotlin.collections.MutableList<androidx.compose.ui.graphics.Interval<1:0>>){}[0]
    final fun findOverlaps(kotlin/Float, kotlin/Float = ..., kotlin.collections/MutableList<androidx.compose.ui.graphics/Interval<#A>> = ...): kotlin.collections/MutableList<androidx.compose.ui.graphics/Interval<#A>> // androidx.compose.ui.graphics/IntervalTree.findOverlaps|findOverlaps(kotlin.Float;kotlin.Float;kotlin.collections.MutableList<androidx.compose.ui.graphics.Interval<1:0>>){}[0]
    final fun iterator(): kotlin.collections/Iterator<androidx.compose.ui.graphics/Interval<#A>> // androidx.compose.ui.graphics/IntervalTree.iterator|iterator(){}[0]
    final fun plusAssign(androidx.compose.ui.graphics/Interval<#A>) // androidx.compose.ui.graphics/IntervalTree.plusAssign|plusAssign(androidx.compose.ui.graphics.Interval<1:0>){}[0]
}

final class androidx.compose.ui.graphics.colorspace/Rgb : androidx.compose.ui.graphics.colorspace/ColorSpace { // androidx.compose.ui.graphics.colorspace/Rgb|null[0]
    constructor <init>(kotlin/String, kotlin/FloatArray, androidx.compose.ui.graphics.colorspace/TransferParameters) // androidx.compose.ui.graphics.colorspace/Rgb.<init>|<init>(kotlin.String;kotlin.FloatArray;androidx.compose.ui.graphics.colorspace.TransferParameters){}[0]
    constructor <init>(kotlin/String, kotlin/FloatArray, androidx.compose.ui.graphics.colorspace/WhitePoint, androidx.compose.ui.graphics.colorspace/TransferParameters) // androidx.compose.ui.graphics.colorspace/Rgb.<init>|<init>(kotlin.String;kotlin.FloatArray;androidx.compose.ui.graphics.colorspace.WhitePoint;androidx.compose.ui.graphics.colorspace.TransferParameters){}[0]
    constructor <init>(kotlin/String, kotlin/FloatArray, androidx.compose.ui.graphics.colorspace/WhitePoint, kotlin/Double) // androidx.compose.ui.graphics.colorspace/Rgb.<init>|<init>(kotlin.String;kotlin.FloatArray;androidx.compose.ui.graphics.colorspace.WhitePoint;kotlin.Double){}[0]
    constructor <init>(kotlin/String, kotlin/FloatArray, androidx.compose.ui.graphics.colorspace/WhitePoint, kotlin/Function1<kotlin/Double, kotlin/Double>, kotlin/Function1<kotlin/Double, kotlin/Double>, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.colorspace/Rgb.<init>|<init>(kotlin.String;kotlin.FloatArray;androidx.compose.ui.graphics.colorspace.WhitePoint;kotlin.Function1<kotlin.Double,kotlin.Double>;kotlin.Function1<kotlin.Double,kotlin.Double>;kotlin.Float;kotlin.Float){}[0]
    constructor <init>(kotlin/String, kotlin/FloatArray, kotlin/Double) // androidx.compose.ui.graphics.colorspace/Rgb.<init>|<init>(kotlin.String;kotlin.FloatArray;kotlin.Double){}[0]
    constructor <init>(kotlin/String, kotlin/FloatArray, kotlin/Function1<kotlin/Double, kotlin/Double>, kotlin/Function1<kotlin/Double, kotlin/Double>) // androidx.compose.ui.graphics.colorspace/Rgb.<init>|<init>(kotlin.String;kotlin.FloatArray;kotlin.Function1<kotlin.Double,kotlin.Double>;kotlin.Function1<kotlin.Double,kotlin.Double>){}[0]

    final val eotf // androidx.compose.ui.graphics.colorspace/Rgb.eotf|{}eotf[0]
        final fun <get-eotf>(): kotlin/Function1<kotlin/Double, kotlin/Double> // androidx.compose.ui.graphics.colorspace/Rgb.eotf.<get-eotf>|<get-eotf>(){}[0]
    final val isSrgb // androidx.compose.ui.graphics.colorspace/Rgb.isSrgb|{}isSrgb[0]
        final fun <get-isSrgb>(): kotlin/Boolean // androidx.compose.ui.graphics.colorspace/Rgb.isSrgb.<get-isSrgb>|<get-isSrgb>(){}[0]
    final val isWideGamut // androidx.compose.ui.graphics.colorspace/Rgb.isWideGamut|{}isWideGamut[0]
        final fun <get-isWideGamut>(): kotlin/Boolean // androidx.compose.ui.graphics.colorspace/Rgb.isWideGamut.<get-isWideGamut>|<get-isWideGamut>(){}[0]
    final val oetf // androidx.compose.ui.graphics.colorspace/Rgb.oetf|{}oetf[0]
        final fun <get-oetf>(): kotlin/Function1<kotlin/Double, kotlin/Double> // androidx.compose.ui.graphics.colorspace/Rgb.oetf.<get-oetf>|<get-oetf>(){}[0]
    final val transferParameters // androidx.compose.ui.graphics.colorspace/Rgb.transferParameters|{}transferParameters[0]
        final fun <get-transferParameters>(): androidx.compose.ui.graphics.colorspace/TransferParameters? // androidx.compose.ui.graphics.colorspace/Rgb.transferParameters.<get-transferParameters>|<get-transferParameters>(){}[0]
    final val whitePoint // androidx.compose.ui.graphics.colorspace/Rgb.whitePoint|{}whitePoint[0]
        final fun <get-whitePoint>(): androidx.compose.ui.graphics.colorspace/WhitePoint // androidx.compose.ui.graphics.colorspace/Rgb.whitePoint.<get-whitePoint>|<get-whitePoint>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.colorspace/Rgb.equals|equals(kotlin.Any?){}[0]
    final fun fromLinear(kotlin/Float, kotlin/Float, kotlin/Float): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Rgb.fromLinear|fromLinear(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun fromLinear(kotlin/FloatArray): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Rgb.fromLinear|fromLinear(kotlin.FloatArray){}[0]
    final fun fromXyz(kotlin/FloatArray): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Rgb.fromXyz|fromXyz(kotlin.FloatArray){}[0]
    final fun getInverseTransform(): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Rgb.getInverseTransform|getInverseTransform(){}[0]
    final fun getInverseTransform(kotlin/FloatArray): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Rgb.getInverseTransform|getInverseTransform(kotlin.FloatArray){}[0]
    final fun getMaxValue(kotlin/Int): kotlin/Float // androidx.compose.ui.graphics.colorspace/Rgb.getMaxValue|getMaxValue(kotlin.Int){}[0]
    final fun getMinValue(kotlin/Int): kotlin/Float // androidx.compose.ui.graphics.colorspace/Rgb.getMinValue|getMinValue(kotlin.Int){}[0]
    final fun getPrimaries(): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Rgb.getPrimaries|getPrimaries(){}[0]
    final fun getPrimaries(kotlin/FloatArray): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Rgb.getPrimaries|getPrimaries(kotlin.FloatArray){}[0]
    final fun getTransform(): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Rgb.getTransform|getTransform(){}[0]
    final fun getTransform(kotlin/FloatArray): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Rgb.getTransform|getTransform(kotlin.FloatArray){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.colorspace/Rgb.hashCode|hashCode(){}[0]
    final fun toLinear(kotlin/Float, kotlin/Float, kotlin/Float): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Rgb.toLinear|toLinear(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun toLinear(kotlin/FloatArray): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Rgb.toLinear|toLinear(kotlin.FloatArray){}[0]
    final fun toXyz(kotlin/FloatArray): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Rgb.toXyz|toXyz(kotlin.FloatArray){}[0]
}

final class androidx.compose.ui.graphics.colorspace/TransferParameters { // androidx.compose.ui.graphics.colorspace/TransferParameters|null[0]
    constructor <init>(kotlin/Double, kotlin/Double, kotlin/Double, kotlin/Double, kotlin/Double, kotlin/Double = ..., kotlin/Double = ...) // androidx.compose.ui.graphics.colorspace/TransferParameters.<init>|<init>(kotlin.Double;kotlin.Double;kotlin.Double;kotlin.Double;kotlin.Double;kotlin.Double;kotlin.Double){}[0]

    final val a // androidx.compose.ui.graphics.colorspace/TransferParameters.a|{}a[0]
        final fun <get-a>(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.a.<get-a>|<get-a>(){}[0]
    final val b // androidx.compose.ui.graphics.colorspace/TransferParameters.b|{}b[0]
        final fun <get-b>(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.b.<get-b>|<get-b>(){}[0]
    final val c // androidx.compose.ui.graphics.colorspace/TransferParameters.c|{}c[0]
        final fun <get-c>(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.c.<get-c>|<get-c>(){}[0]
    final val d // androidx.compose.ui.graphics.colorspace/TransferParameters.d|{}d[0]
        final fun <get-d>(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.d.<get-d>|<get-d>(){}[0]
    final val e // androidx.compose.ui.graphics.colorspace/TransferParameters.e|{}e[0]
        final fun <get-e>(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.e.<get-e>|<get-e>(){}[0]
    final val f // androidx.compose.ui.graphics.colorspace/TransferParameters.f|{}f[0]
        final fun <get-f>(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.f.<get-f>|<get-f>(){}[0]
    final val gamma // androidx.compose.ui.graphics.colorspace/TransferParameters.gamma|{}gamma[0]
        final fun <get-gamma>(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.gamma.<get-gamma>|<get-gamma>(){}[0]

    final fun component1(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.component1|component1(){}[0]
    final fun component2(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.component2|component2(){}[0]
    final fun component3(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.component3|component3(){}[0]
    final fun component4(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.component4|component4(){}[0]
    final fun component5(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.component5|component5(){}[0]
    final fun component6(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.component6|component6(){}[0]
    final fun component7(): kotlin/Double // androidx.compose.ui.graphics.colorspace/TransferParameters.component7|component7(){}[0]
    final fun copy(kotlin/Double = ..., kotlin/Double = ..., kotlin/Double = ..., kotlin/Double = ..., kotlin/Double = ..., kotlin/Double = ..., kotlin/Double = ...): androidx.compose.ui.graphics.colorspace/TransferParameters // androidx.compose.ui.graphics.colorspace/TransferParameters.copy|copy(kotlin.Double;kotlin.Double;kotlin.Double;kotlin.Double;kotlin.Double;kotlin.Double;kotlin.Double){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.colorspace/TransferParameters.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.colorspace/TransferParameters.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics.colorspace/TransferParameters.toString|toString(){}[0]
}

final class androidx.compose.ui.graphics.colorspace/WhitePoint { // androidx.compose.ui.graphics.colorspace/WhitePoint|null[0]
    constructor <init>(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.colorspace/WhitePoint.<init>|<init>(kotlin.Float;kotlin.Float){}[0]
    constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.colorspace/WhitePoint.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float){}[0]

    final val x // androidx.compose.ui.graphics.colorspace/WhitePoint.x|{}x[0]
        final fun <get-x>(): kotlin/Float // androidx.compose.ui.graphics.colorspace/WhitePoint.x.<get-x>|<get-x>(){}[0]
    final val y // androidx.compose.ui.graphics.colorspace/WhitePoint.y|{}y[0]
        final fun <get-y>(): kotlin/Float // androidx.compose.ui.graphics.colorspace/WhitePoint.y.<get-y>|<get-y>(){}[0]

    final fun component1(): kotlin/Float // androidx.compose.ui.graphics.colorspace/WhitePoint.component1|component1(){}[0]
    final fun component2(): kotlin/Float // androidx.compose.ui.graphics.colorspace/WhitePoint.component2|component2(){}[0]
    final fun copy(kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.colorspace/WhitePoint // androidx.compose.ui.graphics.colorspace/WhitePoint.copy|copy(kotlin.Float;kotlin.Float){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.colorspace/WhitePoint.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.colorspace/WhitePoint.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics.colorspace/WhitePoint.toString|toString(){}[0]
}

final class androidx.compose.ui.graphics.drawscope/CanvasDrawScope : androidx.compose.ui.graphics.drawscope/DrawScope { // androidx.compose.ui.graphics.drawscope/CanvasDrawScope|null[0]
    constructor <init>() // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.<init>|<init>(){}[0]

    final val density // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.density|{}density[0]
        final fun <get-density>(): kotlin/Float // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.density.<get-density>|<get-density>(){}[0]
    final val drawContext // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawContext|{}drawContext[0]
        final fun <get-drawContext>(): androidx.compose.ui.graphics.drawscope/DrawContext // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawContext.<get-drawContext>|<get-drawContext>(){}[0]
    final val drawParams // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawParams|{}drawParams[0]
        final fun <get-drawParams>(): androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawParams.<get-drawParams>|<get-drawParams>(){}[0]
    final val fontScale // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.fontScale|{}fontScale[0]
        final fun <get-fontScale>(): kotlin/Float // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.fontScale.<get-fontScale>|<get-fontScale>(){}[0]
    final val layoutDirection // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.layoutDirection|{}layoutDirection[0]
        final fun <get-layoutDirection>(): androidx.compose.ui.unit/LayoutDirection // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.layoutDirection.<get-layoutDirection>|<get-layoutDirection>(){}[0]

    final fun drawArc(androidx.compose.ui.graphics/Brush, kotlin/Float, kotlin/Float, kotlin/Boolean, androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Size, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawArc|drawArc(androidx.compose.ui.graphics.Brush;kotlin.Float;kotlin.Float;kotlin.Boolean;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawArc(androidx.compose.ui.graphics/Color, kotlin/Float, kotlin/Float, kotlin/Boolean, androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Size, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawArc|drawArc(androidx.compose.ui.graphics.Color;kotlin.Float;kotlin.Float;kotlin.Boolean;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawCircle(androidx.compose.ui.graphics/Brush, kotlin/Float, androidx.compose.ui.geometry/Offset, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawCircle|drawCircle(androidx.compose.ui.graphics.Brush;kotlin.Float;androidx.compose.ui.geometry.Offset;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawCircle(androidx.compose.ui.graphics/Color, kotlin/Float, androidx.compose.ui.geometry/Offset, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawCircle|drawCircle(androidx.compose.ui.graphics.Color;kotlin.Float;androidx.compose.ui.geometry.Offset;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawImage(androidx.compose.ui.graphics/ImageBitmap, androidx.compose.ui.geometry/Offset, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawImage|drawImage(androidx.compose.ui.graphics.ImageBitmap;androidx.compose.ui.geometry.Offset;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawImage(androidx.compose.ui.graphics/ImageBitmap, androidx.compose.ui.unit/IntOffset, androidx.compose.ui.unit/IntSize, androidx.compose.ui.unit/IntOffset, androidx.compose.ui.unit/IntSize, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawImage|drawImage(androidx.compose.ui.graphics.ImageBitmap;androidx.compose.ui.unit.IntOffset;androidx.compose.ui.unit.IntSize;androidx.compose.ui.unit.IntOffset;androidx.compose.ui.unit.IntSize;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawImage(androidx.compose.ui.graphics/ImageBitmap, androidx.compose.ui.unit/IntOffset, androidx.compose.ui.unit/IntSize, androidx.compose.ui.unit/IntOffset, androidx.compose.ui.unit/IntSize, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode, androidx.compose.ui.graphics/FilterQuality) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawImage|drawImage(androidx.compose.ui.graphics.ImageBitmap;androidx.compose.ui.unit.IntOffset;androidx.compose.ui.unit.IntSize;androidx.compose.ui.unit.IntOffset;androidx.compose.ui.unit.IntSize;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode;androidx.compose.ui.graphics.FilterQuality){}[0]
    final fun drawLine(androidx.compose.ui.graphics/Brush, androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Offset, kotlin/Float, androidx.compose.ui.graphics/StrokeCap, androidx.compose.ui.graphics/PathEffect?, kotlin/Float, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawLine|drawLine(androidx.compose.ui.graphics.Brush;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Offset;kotlin.Float;androidx.compose.ui.graphics.StrokeCap;androidx.compose.ui.graphics.PathEffect?;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawLine(androidx.compose.ui.graphics/Color, androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Offset, kotlin/Float, androidx.compose.ui.graphics/StrokeCap, androidx.compose.ui.graphics/PathEffect?, kotlin/Float, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawLine|drawLine(androidx.compose.ui.graphics.Color;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Offset;kotlin.Float;androidx.compose.ui.graphics.StrokeCap;androidx.compose.ui.graphics.PathEffect?;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawOval(androidx.compose.ui.graphics/Brush, androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Size, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawOval|drawOval(androidx.compose.ui.graphics.Brush;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawOval(androidx.compose.ui.graphics/Color, androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Size, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawOval|drawOval(androidx.compose.ui.graphics.Color;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawPath(androidx.compose.ui.graphics/Path, androidx.compose.ui.graphics/Brush, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawPath|drawPath(androidx.compose.ui.graphics.Path;androidx.compose.ui.graphics.Brush;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawPath(androidx.compose.ui.graphics/Path, androidx.compose.ui.graphics/Color, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawPath|drawPath(androidx.compose.ui.graphics.Path;androidx.compose.ui.graphics.Color;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawPoints(kotlin.collections/List<androidx.compose.ui.geometry/Offset>, androidx.compose.ui.graphics/PointMode, androidx.compose.ui.graphics/Brush, kotlin/Float, androidx.compose.ui.graphics/StrokeCap, androidx.compose.ui.graphics/PathEffect?, kotlin/Float, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawPoints|drawPoints(kotlin.collections.List<androidx.compose.ui.geometry.Offset>;androidx.compose.ui.graphics.PointMode;androidx.compose.ui.graphics.Brush;kotlin.Float;androidx.compose.ui.graphics.StrokeCap;androidx.compose.ui.graphics.PathEffect?;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawPoints(kotlin.collections/List<androidx.compose.ui.geometry/Offset>, androidx.compose.ui.graphics/PointMode, androidx.compose.ui.graphics/Color, kotlin/Float, androidx.compose.ui.graphics/StrokeCap, androidx.compose.ui.graphics/PathEffect?, kotlin/Float, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawPoints|drawPoints(kotlin.collections.List<androidx.compose.ui.geometry.Offset>;androidx.compose.ui.graphics.PointMode;androidx.compose.ui.graphics.Color;kotlin.Float;androidx.compose.ui.graphics.StrokeCap;androidx.compose.ui.graphics.PathEffect?;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawRect(androidx.compose.ui.graphics/Brush, androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Size, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawRect|drawRect(androidx.compose.ui.graphics.Brush;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawRect(androidx.compose.ui.graphics/Color, androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Size, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawRect|drawRect(androidx.compose.ui.graphics.Color;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawRoundRect(androidx.compose.ui.graphics/Brush, androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Size, androidx.compose.ui.geometry/CornerRadius, kotlin/Float, androidx.compose.ui.graphics.drawscope/DrawStyle, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawRoundRect|drawRoundRect(androidx.compose.ui.graphics.Brush;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;androidx.compose.ui.geometry.CornerRadius;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final fun drawRoundRect(androidx.compose.ui.graphics/Color, androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Size, androidx.compose.ui.geometry/CornerRadius, androidx.compose.ui.graphics.drawscope/DrawStyle, kotlin/Float, androidx.compose.ui.graphics/ColorFilter?, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.drawRoundRect|drawRoundRect(androidx.compose.ui.graphics.Color;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;androidx.compose.ui.geometry.CornerRadius;androidx.compose.ui.graphics.drawscope.DrawStyle;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
    final inline fun draw(androidx.compose.ui.unit/Density, androidx.compose.ui.unit/LayoutDirection, androidx.compose.ui.graphics/Canvas, androidx.compose.ui.geometry/Size, kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.draw|draw(androidx.compose.ui.unit.Density;androidx.compose.ui.unit.LayoutDirection;androidx.compose.ui.graphics.Canvas;androidx.compose.ui.geometry.Size;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]

    final class DrawParams { // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams|null[0]
        constructor <init>(androidx.compose.ui.unit/Density = ..., androidx.compose.ui.unit/LayoutDirection = ..., androidx.compose.ui.graphics/Canvas = ..., androidx.compose.ui.geometry/Size = ...) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.<init>|<init>(androidx.compose.ui.unit.Density;androidx.compose.ui.unit.LayoutDirection;androidx.compose.ui.graphics.Canvas;androidx.compose.ui.geometry.Size){}[0]

        final var canvas // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.canvas|{}canvas[0]
            final fun <get-canvas>(): androidx.compose.ui.graphics/Canvas // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.canvas.<get-canvas>|<get-canvas>(){}[0]
            final fun <set-canvas>(androidx.compose.ui.graphics/Canvas) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.canvas.<set-canvas>|<set-canvas>(androidx.compose.ui.graphics.Canvas){}[0]
        final var density // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.density|{}density[0]
            final fun <get-density>(): androidx.compose.ui.unit/Density // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.density.<get-density>|<get-density>(){}[0]
            final fun <set-density>(androidx.compose.ui.unit/Density) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.density.<set-density>|<set-density>(androidx.compose.ui.unit.Density){}[0]
        final var layoutDirection // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.layoutDirection|{}layoutDirection[0]
            final fun <get-layoutDirection>(): androidx.compose.ui.unit/LayoutDirection // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.layoutDirection.<get-layoutDirection>|<get-layoutDirection>(){}[0]
            final fun <set-layoutDirection>(androidx.compose.ui.unit/LayoutDirection) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.layoutDirection.<set-layoutDirection>|<set-layoutDirection>(androidx.compose.ui.unit.LayoutDirection){}[0]
        final var size // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.size|{}size[0]
            final fun <get-size>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.size.<get-size>|<get-size>(){}[0]
            final fun <set-size>(androidx.compose.ui.geometry/Size) // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.size.<set-size>|<set-size>(androidx.compose.ui.geometry.Size){}[0]

        final fun component1(): androidx.compose.ui.unit/Density // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.component1|component1(){}[0]
        final fun component2(): androidx.compose.ui.unit/LayoutDirection // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.component2|component2(){}[0]
        final fun component3(): androidx.compose.ui.graphics/Canvas // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.component3|component3(){}[0]
        final fun component4(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.component4|component4(){}[0]
        final fun copy(androidx.compose.ui.unit/Density = ..., androidx.compose.ui.unit/LayoutDirection = ..., androidx.compose.ui.graphics/Canvas = ..., androidx.compose.ui.geometry/Size = ...): androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.copy|copy(androidx.compose.ui.unit.Density;androidx.compose.ui.unit.LayoutDirection;androidx.compose.ui.graphics.Canvas;androidx.compose.ui.geometry.Size){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.drawscope/CanvasDrawScope.DrawParams.toString|toString(){}[0]
    }
}

final class androidx.compose.ui.graphics.drawscope/Stroke : androidx.compose.ui.graphics.drawscope/DrawStyle { // androidx.compose.ui.graphics.drawscope/Stroke|null[0]
    constructor <init>(kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/StrokeCap = ..., androidx.compose.ui.graphics/StrokeJoin = ..., androidx.compose.ui.graphics/PathEffect? = ...) // androidx.compose.ui.graphics.drawscope/Stroke.<init>|<init>(kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.StrokeCap;androidx.compose.ui.graphics.StrokeJoin;androidx.compose.ui.graphics.PathEffect?){}[0]

    final val cap // androidx.compose.ui.graphics.drawscope/Stroke.cap|{}cap[0]
        final fun <get-cap>(): androidx.compose.ui.graphics/StrokeCap // androidx.compose.ui.graphics.drawscope/Stroke.cap.<get-cap>|<get-cap>(){}[0]
    final val join // androidx.compose.ui.graphics.drawscope/Stroke.join|{}join[0]
        final fun <get-join>(): androidx.compose.ui.graphics/StrokeJoin // androidx.compose.ui.graphics.drawscope/Stroke.join.<get-join>|<get-join>(){}[0]
    final val miter // androidx.compose.ui.graphics.drawscope/Stroke.miter|{}miter[0]
        final fun <get-miter>(): kotlin/Float // androidx.compose.ui.graphics.drawscope/Stroke.miter.<get-miter>|<get-miter>(){}[0]
    final val pathEffect // androidx.compose.ui.graphics.drawscope/Stroke.pathEffect|{}pathEffect[0]
        final fun <get-pathEffect>(): androidx.compose.ui.graphics/PathEffect? // androidx.compose.ui.graphics.drawscope/Stroke.pathEffect.<get-pathEffect>|<get-pathEffect>(){}[0]
    final val width // androidx.compose.ui.graphics.drawscope/Stroke.width|{}width[0]
        final fun <get-width>(): kotlin/Float // androidx.compose.ui.graphics.drawscope/Stroke.width.<get-width>|<get-width>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.drawscope/Stroke.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.drawscope/Stroke.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics.drawscope/Stroke.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics.drawscope/Stroke.Companion|null[0]
        final const val DefaultMiter // androidx.compose.ui.graphics.drawscope/Stroke.Companion.DefaultMiter|{}DefaultMiter[0]
            final fun <get-DefaultMiter>(): kotlin/Float // androidx.compose.ui.graphics.drawscope/Stroke.Companion.DefaultMiter.<get-DefaultMiter>|<get-DefaultMiter>(){}[0]
        final const val HairlineWidth // androidx.compose.ui.graphics.drawscope/Stroke.Companion.HairlineWidth|{}HairlineWidth[0]
            final fun <get-HairlineWidth>(): kotlin/Float // androidx.compose.ui.graphics.drawscope/Stroke.Companion.HairlineWidth.<get-HairlineWidth>|<get-HairlineWidth>(){}[0]

        final val DefaultCap // androidx.compose.ui.graphics.drawscope/Stroke.Companion.DefaultCap|{}DefaultCap[0]
            final fun <get-DefaultCap>(): androidx.compose.ui.graphics/StrokeCap // androidx.compose.ui.graphics.drawscope/Stroke.Companion.DefaultCap.<get-DefaultCap>|<get-DefaultCap>(){}[0]
        final val DefaultJoin // androidx.compose.ui.graphics.drawscope/Stroke.Companion.DefaultJoin|{}DefaultJoin[0]
            final fun <get-DefaultJoin>(): androidx.compose.ui.graphics/StrokeJoin // androidx.compose.ui.graphics.drawscope/Stroke.Companion.DefaultJoin.<get-DefaultJoin>|<get-DefaultJoin>(){}[0]
    }
}

final class androidx.compose.ui.graphics.layer/GraphicsLayer { // androidx.compose.ui.graphics.layer/GraphicsLayer|null[0]
    constructor <init>() // androidx.compose.ui.graphics.layer/GraphicsLayer.<init>|<init>(){}[0]

    final val outline // androidx.compose.ui.graphics.layer/GraphicsLayer.outline|{}outline[0]
        final fun <get-outline>(): androidx.compose.ui.graphics/Outline // androidx.compose.ui.graphics.layer/GraphicsLayer.outline.<get-outline>|<get-outline>(){}[0]

    final var alpha // androidx.compose.ui.graphics.layer/GraphicsLayer.alpha|{}alpha[0]
        final fun <get-alpha>(): kotlin/Float // androidx.compose.ui.graphics.layer/GraphicsLayer.alpha.<get-alpha>|<get-alpha>(){}[0]
        final fun <set-alpha>(kotlin/Float) // androidx.compose.ui.graphics.layer/GraphicsLayer.alpha.<set-alpha>|<set-alpha>(kotlin.Float){}[0]
    final var ambientShadowColor // androidx.compose.ui.graphics.layer/GraphicsLayer.ambientShadowColor|{}ambientShadowColor[0]
        final fun <get-ambientShadowColor>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics.layer/GraphicsLayer.ambientShadowColor.<get-ambientShadowColor>|<get-ambientShadowColor>(){}[0]
        final fun <set-ambientShadowColor>(androidx.compose.ui.graphics/Color) // androidx.compose.ui.graphics.layer/GraphicsLayer.ambientShadowColor.<set-ambientShadowColor>|<set-ambientShadowColor>(androidx.compose.ui.graphics.Color){}[0]
    final var blendMode // androidx.compose.ui.graphics.layer/GraphicsLayer.blendMode|{}blendMode[0]
        final fun <get-blendMode>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics.layer/GraphicsLayer.blendMode.<get-blendMode>|<get-blendMode>(){}[0]
        final fun <set-blendMode>(androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics.layer/GraphicsLayer.blendMode.<set-blendMode>|<set-blendMode>(androidx.compose.ui.graphics.BlendMode){}[0]
    final var cameraDistance // androidx.compose.ui.graphics.layer/GraphicsLayer.cameraDistance|{}cameraDistance[0]
        final fun <get-cameraDistance>(): kotlin/Float // androidx.compose.ui.graphics.layer/GraphicsLayer.cameraDistance.<get-cameraDistance>|<get-cameraDistance>(){}[0]
        final fun <set-cameraDistance>(kotlin/Float) // androidx.compose.ui.graphics.layer/GraphicsLayer.cameraDistance.<set-cameraDistance>|<set-cameraDistance>(kotlin.Float){}[0]
    final var clip // androidx.compose.ui.graphics.layer/GraphicsLayer.clip|{}clip[0]
        final fun <get-clip>(): kotlin/Boolean // androidx.compose.ui.graphics.layer/GraphicsLayer.clip.<get-clip>|<get-clip>(){}[0]
        final fun <set-clip>(kotlin/Boolean) // androidx.compose.ui.graphics.layer/GraphicsLayer.clip.<set-clip>|<set-clip>(kotlin.Boolean){}[0]
    final var colorFilter // androidx.compose.ui.graphics.layer/GraphicsLayer.colorFilter|{}colorFilter[0]
        final fun <get-colorFilter>(): androidx.compose.ui.graphics/ColorFilter? // androidx.compose.ui.graphics.layer/GraphicsLayer.colorFilter.<get-colorFilter>|<get-colorFilter>(){}[0]
        final fun <set-colorFilter>(androidx.compose.ui.graphics/ColorFilter?) // androidx.compose.ui.graphics.layer/GraphicsLayer.colorFilter.<set-colorFilter>|<set-colorFilter>(androidx.compose.ui.graphics.ColorFilter?){}[0]
    final var compositingStrategy // androidx.compose.ui.graphics.layer/GraphicsLayer.compositingStrategy|{}compositingStrategy[0]
        final fun <get-compositingStrategy>(): androidx.compose.ui.graphics.layer/CompositingStrategy // androidx.compose.ui.graphics.layer/GraphicsLayer.compositingStrategy.<get-compositingStrategy>|<get-compositingStrategy>(){}[0]
        final fun <set-compositingStrategy>(androidx.compose.ui.graphics.layer/CompositingStrategy) // androidx.compose.ui.graphics.layer/GraphicsLayer.compositingStrategy.<set-compositingStrategy>|<set-compositingStrategy>(androidx.compose.ui.graphics.layer.CompositingStrategy){}[0]
    final var isReleased // androidx.compose.ui.graphics.layer/GraphicsLayer.isReleased|{}isReleased[0]
        final fun <get-isReleased>(): kotlin/Boolean // androidx.compose.ui.graphics.layer/GraphicsLayer.isReleased.<get-isReleased>|<get-isReleased>(){}[0]
        final fun <set-isReleased>(kotlin/Boolean) // androidx.compose.ui.graphics.layer/GraphicsLayer.isReleased.<set-isReleased>|<set-isReleased>(kotlin.Boolean){}[0]
    final var pivotOffset // androidx.compose.ui.graphics.layer/GraphicsLayer.pivotOffset|{}pivotOffset[0]
        final fun <get-pivotOffset>(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.graphics.layer/GraphicsLayer.pivotOffset.<get-pivotOffset>|<get-pivotOffset>(){}[0]
        final fun <set-pivotOffset>(androidx.compose.ui.geometry/Offset) // androidx.compose.ui.graphics.layer/GraphicsLayer.pivotOffset.<set-pivotOffset>|<set-pivotOffset>(androidx.compose.ui.geometry.Offset){}[0]
    final var renderEffect // androidx.compose.ui.graphics.layer/GraphicsLayer.renderEffect|{}renderEffect[0]
        final fun <get-renderEffect>(): androidx.compose.ui.graphics/RenderEffect? // androidx.compose.ui.graphics.layer/GraphicsLayer.renderEffect.<get-renderEffect>|<get-renderEffect>(){}[0]
        final fun <set-renderEffect>(androidx.compose.ui.graphics/RenderEffect?) // androidx.compose.ui.graphics.layer/GraphicsLayer.renderEffect.<set-renderEffect>|<set-renderEffect>(androidx.compose.ui.graphics.RenderEffect?){}[0]
    final var rotationX // androidx.compose.ui.graphics.layer/GraphicsLayer.rotationX|{}rotationX[0]
        final fun <get-rotationX>(): kotlin/Float // androidx.compose.ui.graphics.layer/GraphicsLayer.rotationX.<get-rotationX>|<get-rotationX>(){}[0]
        final fun <set-rotationX>(kotlin/Float) // androidx.compose.ui.graphics.layer/GraphicsLayer.rotationX.<set-rotationX>|<set-rotationX>(kotlin.Float){}[0]
    final var rotationY // androidx.compose.ui.graphics.layer/GraphicsLayer.rotationY|{}rotationY[0]
        final fun <get-rotationY>(): kotlin/Float // androidx.compose.ui.graphics.layer/GraphicsLayer.rotationY.<get-rotationY>|<get-rotationY>(){}[0]
        final fun <set-rotationY>(kotlin/Float) // androidx.compose.ui.graphics.layer/GraphicsLayer.rotationY.<set-rotationY>|<set-rotationY>(kotlin.Float){}[0]
    final var rotationZ // androidx.compose.ui.graphics.layer/GraphicsLayer.rotationZ|{}rotationZ[0]
        final fun <get-rotationZ>(): kotlin/Float // androidx.compose.ui.graphics.layer/GraphicsLayer.rotationZ.<get-rotationZ>|<get-rotationZ>(){}[0]
        final fun <set-rotationZ>(kotlin/Float) // androidx.compose.ui.graphics.layer/GraphicsLayer.rotationZ.<set-rotationZ>|<set-rotationZ>(kotlin.Float){}[0]
    final var scaleX // androidx.compose.ui.graphics.layer/GraphicsLayer.scaleX|{}scaleX[0]
        final fun <get-scaleX>(): kotlin/Float // androidx.compose.ui.graphics.layer/GraphicsLayer.scaleX.<get-scaleX>|<get-scaleX>(){}[0]
        final fun <set-scaleX>(kotlin/Float) // androidx.compose.ui.graphics.layer/GraphicsLayer.scaleX.<set-scaleX>|<set-scaleX>(kotlin.Float){}[0]
    final var scaleY // androidx.compose.ui.graphics.layer/GraphicsLayer.scaleY|{}scaleY[0]
        final fun <get-scaleY>(): kotlin/Float // androidx.compose.ui.graphics.layer/GraphicsLayer.scaleY.<get-scaleY>|<get-scaleY>(){}[0]
        final fun <set-scaleY>(kotlin/Float) // androidx.compose.ui.graphics.layer/GraphicsLayer.scaleY.<set-scaleY>|<set-scaleY>(kotlin.Float){}[0]
    final var shadowElevation // androidx.compose.ui.graphics.layer/GraphicsLayer.shadowElevation|{}shadowElevation[0]
        final fun <get-shadowElevation>(): kotlin/Float // androidx.compose.ui.graphics.layer/GraphicsLayer.shadowElevation.<get-shadowElevation>|<get-shadowElevation>(){}[0]
        final fun <set-shadowElevation>(kotlin/Float) // androidx.compose.ui.graphics.layer/GraphicsLayer.shadowElevation.<set-shadowElevation>|<set-shadowElevation>(kotlin.Float){}[0]
    final var size // androidx.compose.ui.graphics.layer/GraphicsLayer.size|{}size[0]
        final fun <get-size>(): androidx.compose.ui.unit/IntSize // androidx.compose.ui.graphics.layer/GraphicsLayer.size.<get-size>|<get-size>(){}[0]
        final fun <set-size>(androidx.compose.ui.unit/IntSize) // androidx.compose.ui.graphics.layer/GraphicsLayer.size.<set-size>|<set-size>(androidx.compose.ui.unit.IntSize){}[0]
    final var spotShadowColor // androidx.compose.ui.graphics.layer/GraphicsLayer.spotShadowColor|{}spotShadowColor[0]
        final fun <get-spotShadowColor>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics.layer/GraphicsLayer.spotShadowColor.<get-spotShadowColor>|<get-spotShadowColor>(){}[0]
        final fun <set-spotShadowColor>(androidx.compose.ui.graphics/Color) // androidx.compose.ui.graphics.layer/GraphicsLayer.spotShadowColor.<set-spotShadowColor>|<set-spotShadowColor>(androidx.compose.ui.graphics.Color){}[0]
    final var topLeft // androidx.compose.ui.graphics.layer/GraphicsLayer.topLeft|{}topLeft[0]
        final fun <get-topLeft>(): androidx.compose.ui.unit/IntOffset // androidx.compose.ui.graphics.layer/GraphicsLayer.topLeft.<get-topLeft>|<get-topLeft>(){}[0]
        final fun <set-topLeft>(androidx.compose.ui.unit/IntOffset) // androidx.compose.ui.graphics.layer/GraphicsLayer.topLeft.<set-topLeft>|<set-topLeft>(androidx.compose.ui.unit.IntOffset){}[0]
    final var translationX // androidx.compose.ui.graphics.layer/GraphicsLayer.translationX|{}translationX[0]
        final fun <get-translationX>(): kotlin/Float // androidx.compose.ui.graphics.layer/GraphicsLayer.translationX.<get-translationX>|<get-translationX>(){}[0]
        final fun <set-translationX>(kotlin/Float) // androidx.compose.ui.graphics.layer/GraphicsLayer.translationX.<set-translationX>|<set-translationX>(kotlin.Float){}[0]
    final var translationY // androidx.compose.ui.graphics.layer/GraphicsLayer.translationY|{}translationY[0]
        final fun <get-translationY>(): kotlin/Float // androidx.compose.ui.graphics.layer/GraphicsLayer.translationY.<get-translationY>|<get-translationY>(){}[0]
        final fun <set-translationY>(kotlin/Float) // androidx.compose.ui.graphics.layer/GraphicsLayer.translationY.<set-translationY>|<set-translationY>(kotlin.Float){}[0]

    final fun record(androidx.compose.ui.unit/Density, androidx.compose.ui.unit/LayoutDirection, androidx.compose.ui.unit/IntSize, kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.layer/GraphicsLayer.record|record(androidx.compose.ui.unit.Density;androidx.compose.ui.unit.LayoutDirection;androidx.compose.ui.unit.IntSize;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
    final fun setPathOutline(androidx.compose.ui.graphics/Path) // androidx.compose.ui.graphics.layer/GraphicsLayer.setPathOutline|setPathOutline(androidx.compose.ui.graphics.Path){}[0]
    final fun setRectOutline(androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.geometry/Size = ...) // androidx.compose.ui.graphics.layer/GraphicsLayer.setRectOutline|setRectOutline(androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size){}[0]
    final fun setRoundRectOutline(androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.geometry/Size = ..., kotlin/Float = ...) // androidx.compose.ui.graphics.layer/GraphicsLayer.setRoundRectOutline|setRoundRectOutline(androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Size;kotlin.Float){}[0]
    final suspend fun toImageBitmap(): androidx.compose.ui.graphics/ImageBitmap // androidx.compose.ui.graphics.layer/GraphicsLayer.toImageBitmap|toImageBitmap(){}[0]
}

final class androidx.compose.ui.graphics.painter/BitmapPainter : androidx.compose.ui.graphics.painter/Painter { // androidx.compose.ui.graphics.painter/BitmapPainter|null[0]
    constructor <init>(androidx.compose.ui.graphics/ImageBitmap, androidx.compose.ui.unit/IntOffset = ..., androidx.compose.ui.unit/IntSize = ...) // androidx.compose.ui.graphics.painter/BitmapPainter.<init>|<init>(androidx.compose.ui.graphics.ImageBitmap;androidx.compose.ui.unit.IntOffset;androidx.compose.ui.unit.IntSize){}[0]

    final val intrinsicSize // androidx.compose.ui.graphics.painter/BitmapPainter.intrinsicSize|{}intrinsicSize[0]
        final fun <get-intrinsicSize>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics.painter/BitmapPainter.intrinsicSize.<get-intrinsicSize>|<get-intrinsicSize>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.painter/BitmapPainter.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.painter/BitmapPainter.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics.painter/BitmapPainter.toString|toString(){}[0]
}

final class androidx.compose.ui.graphics.painter/BrushPainter : androidx.compose.ui.graphics.painter/Painter { // androidx.compose.ui.graphics.painter/BrushPainter|null[0]
    constructor <init>(androidx.compose.ui.graphics/Brush) // androidx.compose.ui.graphics.painter/BrushPainter.<init>|<init>(androidx.compose.ui.graphics.Brush){}[0]

    final val brush // androidx.compose.ui.graphics.painter/BrushPainter.brush|{}brush[0]
        final fun <get-brush>(): androidx.compose.ui.graphics/Brush // androidx.compose.ui.graphics.painter/BrushPainter.brush.<get-brush>|<get-brush>(){}[0]
    final val intrinsicSize // androidx.compose.ui.graphics.painter/BrushPainter.intrinsicSize|{}intrinsicSize[0]
        final fun <get-intrinsicSize>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics.painter/BrushPainter.intrinsicSize.<get-intrinsicSize>|<get-intrinsicSize>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.painter/BrushPainter.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.painter/BrushPainter.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics.painter/BrushPainter.toString|toString(){}[0]
}

final class androidx.compose.ui.graphics.painter/ColorPainter : androidx.compose.ui.graphics.painter/Painter { // androidx.compose.ui.graphics.painter/ColorPainter|null[0]
    constructor <init>(androidx.compose.ui.graphics/Color) // androidx.compose.ui.graphics.painter/ColorPainter.<init>|<init>(androidx.compose.ui.graphics.Color){}[0]

    final val color // androidx.compose.ui.graphics.painter/ColorPainter.color|{}color[0]
        final fun <get-color>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics.painter/ColorPainter.color.<get-color>|<get-color>(){}[0]
    final val intrinsicSize // androidx.compose.ui.graphics.painter/ColorPainter.intrinsicSize|{}intrinsicSize[0]
        final fun <get-intrinsicSize>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics.painter/ColorPainter.intrinsicSize.<get-intrinsicSize>|<get-intrinsicSize>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.painter/ColorPainter.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.painter/ColorPainter.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics.painter/ColorPainter.toString|toString(){}[0]
}

final class androidx.compose.ui.graphics.vector/PathBuilder { // androidx.compose.ui.graphics.vector/PathBuilder|null[0]
    constructor <init>() // androidx.compose.ui.graphics.vector/PathBuilder.<init>|<init>(){}[0]

    final val nodes // androidx.compose.ui.graphics.vector/PathBuilder.nodes|{}nodes[0]
        final fun <get-nodes>(): kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode> // androidx.compose.ui.graphics.vector/PathBuilder.nodes.<get-nodes>|<get-nodes>(){}[0]

    final fun arcTo(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Boolean, kotlin/Boolean, kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.arcTo|arcTo(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Boolean;kotlin.Boolean;kotlin.Float;kotlin.Float){}[0]
    final fun arcToRelative(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Boolean, kotlin/Boolean, kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.arcToRelative|arcToRelative(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Boolean;kotlin.Boolean;kotlin.Float;kotlin.Float){}[0]
    final fun close(): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.close|close(){}[0]
    final fun curveTo(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.curveTo|curveTo(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun curveToRelative(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.curveToRelative|curveToRelative(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun horizontalLineTo(kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.horizontalLineTo|horizontalLineTo(kotlin.Float){}[0]
    final fun horizontalLineToRelative(kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.horizontalLineToRelative|horizontalLineToRelative(kotlin.Float){}[0]
    final fun lineTo(kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.lineTo|lineTo(kotlin.Float;kotlin.Float){}[0]
    final fun lineToRelative(kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.lineToRelative|lineToRelative(kotlin.Float;kotlin.Float){}[0]
    final fun moveTo(kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.moveTo|moveTo(kotlin.Float;kotlin.Float){}[0]
    final fun moveToRelative(kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.moveToRelative|moveToRelative(kotlin.Float;kotlin.Float){}[0]
    final fun quadTo(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.quadTo|quadTo(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun quadToRelative(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.quadToRelative|quadToRelative(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun reflectiveCurveTo(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.reflectiveCurveTo|reflectiveCurveTo(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun reflectiveCurveToRelative(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.reflectiveCurveToRelative|reflectiveCurveToRelative(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun reflectiveQuadTo(kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.reflectiveQuadTo|reflectiveQuadTo(kotlin.Float;kotlin.Float){}[0]
    final fun reflectiveQuadToRelative(kotlin/Float, kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.reflectiveQuadToRelative|reflectiveQuadToRelative(kotlin.Float;kotlin.Float){}[0]
    final fun verticalLineTo(kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.verticalLineTo|verticalLineTo(kotlin.Float){}[0]
    final fun verticalLineToRelative(kotlin/Float): androidx.compose.ui.graphics.vector/PathBuilder // androidx.compose.ui.graphics.vector/PathBuilder.verticalLineToRelative|verticalLineToRelative(kotlin.Float){}[0]
}

final class androidx.compose.ui.graphics.vector/PathParser { // androidx.compose.ui.graphics.vector/PathParser|null[0]
    constructor <init>() // androidx.compose.ui.graphics.vector/PathParser.<init>|<init>(){}[0]

    final fun addPathNodes(kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode>): androidx.compose.ui.graphics.vector/PathParser // androidx.compose.ui.graphics.vector/PathParser.addPathNodes|addPathNodes(kotlin.collections.List<androidx.compose.ui.graphics.vector.PathNode>){}[0]
    final fun clear() // androidx.compose.ui.graphics.vector/PathParser.clear|clear(){}[0]
    final fun parsePathString(kotlin/String): androidx.compose.ui.graphics.vector/PathParser // androidx.compose.ui.graphics.vector/PathParser.parsePathString|parsePathString(kotlin.String){}[0]
    final fun pathStringToNodes(kotlin/String, kotlin.collections/ArrayList<androidx.compose.ui.graphics.vector/PathNode> = ...): kotlin.collections/ArrayList<androidx.compose.ui.graphics.vector/PathNode> // androidx.compose.ui.graphics.vector/PathParser.pathStringToNodes|pathStringToNodes(kotlin.String;kotlin.collections.ArrayList<androidx.compose.ui.graphics.vector.PathNode>){}[0]
    final fun toNodes(): kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode> // androidx.compose.ui.graphics.vector/PathParser.toNodes|toNodes(){}[0]
    final fun toPath(androidx.compose.ui.graphics/Path = ...): androidx.compose.ui.graphics/Path // androidx.compose.ui.graphics.vector/PathParser.toPath|toPath(androidx.compose.ui.graphics.Path){}[0]
}

final class androidx.compose.ui.graphics/BlendModeColorFilter : androidx.compose.ui.graphics/ColorFilter { // androidx.compose.ui.graphics/BlendModeColorFilter|null[0]
    constructor <init>(androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics/BlendModeColorFilter.<init>|<init>(androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.BlendMode){}[0]

    final val blendMode // androidx.compose.ui.graphics/BlendModeColorFilter.blendMode|{}blendMode[0]
        final fun <get-blendMode>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendModeColorFilter.blendMode.<get-blendMode>|<get-blendMode>(){}[0]
    final val color // androidx.compose.ui.graphics/BlendModeColorFilter.color|{}color[0]
        final fun <get-color>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/BlendModeColorFilter.color.<get-color>|<get-color>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/BlendModeColorFilter.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/BlendModeColorFilter.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/BlendModeColorFilter.toString|toString(){}[0]
}

final class androidx.compose.ui.graphics/BlurEffect : androidx.compose.ui.graphics/RenderEffect { // androidx.compose.ui.graphics/BlurEffect|null[0]
    constructor <init>(androidx.compose.ui.graphics/RenderEffect?, kotlin/Float, kotlin/Float = ..., androidx.compose.ui.graphics/TileMode = ...) // androidx.compose.ui.graphics/BlurEffect.<init>|<init>(androidx.compose.ui.graphics.RenderEffect?;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.TileMode){}[0]
}

final class androidx.compose.ui.graphics/ColorMatrixColorFilter : androidx.compose.ui.graphics/ColorFilter { // androidx.compose.ui.graphics/ColorMatrixColorFilter|null[0]
    constructor <init>(androidx.compose.ui.graphics/ColorMatrix) // androidx.compose.ui.graphics/ColorMatrixColorFilter.<init>|<init>(androidx.compose.ui.graphics.ColorMatrix){}[0]

    final fun copyColorMatrix(androidx.compose.ui.graphics/ColorMatrix = ...): androidx.compose.ui.graphics/ColorMatrix // androidx.compose.ui.graphics/ColorMatrixColorFilter.copyColorMatrix|copyColorMatrix(androidx.compose.ui.graphics.ColorMatrix){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/ColorMatrixColorFilter.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/ColorMatrixColorFilter.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/ColorMatrixColorFilter.toString|toString(){}[0]
}

final class androidx.compose.ui.graphics/LightingColorFilter : androidx.compose.ui.graphics/ColorFilter { // androidx.compose.ui.graphics/LightingColorFilter|null[0]
    constructor <init>(androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color) // androidx.compose.ui.graphics/LightingColorFilter.<init>|<init>(androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color){}[0]

    final val add // androidx.compose.ui.graphics/LightingColorFilter.add|{}add[0]
        final fun <get-add>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/LightingColorFilter.add.<get-add>|<get-add>(){}[0]
    final val multiply // androidx.compose.ui.graphics/LightingColorFilter.multiply|{}multiply[0]
        final fun <get-multiply>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/LightingColorFilter.multiply.<get-multiply>|<get-multiply>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/LightingColorFilter.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/LightingColorFilter.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/LightingColorFilter.toString|toString(){}[0]
}

final class androidx.compose.ui.graphics/LinearGradient : androidx.compose.ui.graphics/ShaderBrush { // androidx.compose.ui.graphics/LinearGradient|null[0]
    final val intrinsicSize // androidx.compose.ui.graphics/LinearGradient.intrinsicSize|{}intrinsicSize[0]
        final fun <get-intrinsicSize>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics/LinearGradient.intrinsicSize.<get-intrinsicSize>|<get-intrinsicSize>(){}[0]

    final fun createShader(androidx.compose.ui.geometry/Size): androidx.compose.ui.graphics/Shader // androidx.compose.ui.graphics/LinearGradient.createShader|createShader(androidx.compose.ui.geometry.Size){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/LinearGradient.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/LinearGradient.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/LinearGradient.toString|toString(){}[0]
}

final class androidx.compose.ui.graphics/NativeCanvas { // androidx.compose.ui.graphics/NativeCanvas|null[0]
    constructor <init>() // androidx.compose.ui.graphics/NativeCanvas.<init>|<init>(){}[0]
}

final class androidx.compose.ui.graphics/NativeColorFilter { // androidx.compose.ui.graphics/NativeColorFilter|null[0]
    constructor <init>() // androidx.compose.ui.graphics/NativeColorFilter.<init>|<init>(){}[0]
}

final class androidx.compose.ui.graphics/NativePaint { // androidx.compose.ui.graphics/NativePaint|null[0]
    constructor <init>() // androidx.compose.ui.graphics/NativePaint.<init>|<init>(){}[0]
}

final class androidx.compose.ui.graphics/OffsetEffect : androidx.compose.ui.graphics/RenderEffect { // androidx.compose.ui.graphics/OffsetEffect|null[0]
    constructor <init>(androidx.compose.ui.graphics/RenderEffect?, androidx.compose.ui.geometry/Offset) // androidx.compose.ui.graphics/OffsetEffect.<init>|<init>(androidx.compose.ui.graphics.RenderEffect?;androidx.compose.ui.geometry.Offset){}[0]
}

final class androidx.compose.ui.graphics/PathHitTester { // androidx.compose.ui.graphics/PathHitTester|null[0]
    constructor <init>() // androidx.compose.ui.graphics/PathHitTester.<init>|<init>(){}[0]

    final fun contains(androidx.compose.ui.geometry/Offset): kotlin/Boolean // androidx.compose.ui.graphics/PathHitTester.contains|contains(androidx.compose.ui.geometry.Offset){}[0]
    final fun updatePath(androidx.compose.ui.graphics/Path, kotlin/Float = ...) // androidx.compose.ui.graphics/PathHitTester.updatePath|updatePath(androidx.compose.ui.graphics.Path;kotlin.Float){}[0]
}

final class androidx.compose.ui.graphics/PathSegment { // androidx.compose.ui.graphics/PathSegment|null[0]
    final val points // androidx.compose.ui.graphics/PathSegment.points|{}points[0]
        final fun <get-points>(): kotlin/FloatArray // androidx.compose.ui.graphics/PathSegment.points.<get-points>|<get-points>(){}[0]
    final val type // androidx.compose.ui.graphics/PathSegment.type|{}type[0]
        final fun <get-type>(): androidx.compose.ui.graphics/PathSegment.Type // androidx.compose.ui.graphics/PathSegment.type.<get-type>|<get-type>(){}[0]
    final val weight // androidx.compose.ui.graphics/PathSegment.weight|{}weight[0]
        final fun <get-weight>(): kotlin/Float // androidx.compose.ui.graphics/PathSegment.weight.<get-weight>|<get-weight>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/PathSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/PathSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/PathSegment.toString|toString(){}[0]

    final enum class Type : kotlin/Enum<androidx.compose.ui.graphics/PathSegment.Type> { // androidx.compose.ui.graphics/PathSegment.Type|null[0]
        enum entry Close // androidx.compose.ui.graphics/PathSegment.Type.Close|null[0]
        enum entry Conic // androidx.compose.ui.graphics/PathSegment.Type.Conic|null[0]
        enum entry Cubic // androidx.compose.ui.graphics/PathSegment.Type.Cubic|null[0]
        enum entry Done // androidx.compose.ui.graphics/PathSegment.Type.Done|null[0]
        enum entry Line // androidx.compose.ui.graphics/PathSegment.Type.Line|null[0]
        enum entry Move // androidx.compose.ui.graphics/PathSegment.Type.Move|null[0]
        enum entry Quadratic // androidx.compose.ui.graphics/PathSegment.Type.Quadratic|null[0]

        final val entries // androidx.compose.ui.graphics/PathSegment.Type.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<androidx.compose.ui.graphics/PathSegment.Type> // androidx.compose.ui.graphics/PathSegment.Type.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): androidx.compose.ui.graphics/PathSegment.Type // androidx.compose.ui.graphics/PathSegment.Type.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<androidx.compose.ui.graphics/PathSegment.Type> // androidx.compose.ui.graphics/PathSegment.Type.values|values#static(){}[0]
    }
}

final class androidx.compose.ui.graphics/PixelMap { // androidx.compose.ui.graphics/PixelMap|null[0]
    constructor <init>(kotlin/IntArray, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int) // androidx.compose.ui.graphics/PixelMap.<init>|<init>(kotlin.IntArray;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

    final val buffer // androidx.compose.ui.graphics/PixelMap.buffer|{}buffer[0]
        final fun <get-buffer>(): kotlin/IntArray // androidx.compose.ui.graphics/PixelMap.buffer.<get-buffer>|<get-buffer>(){}[0]
    final val bufferOffset // androidx.compose.ui.graphics/PixelMap.bufferOffset|{}bufferOffset[0]
        final fun <get-bufferOffset>(): kotlin/Int // androidx.compose.ui.graphics/PixelMap.bufferOffset.<get-bufferOffset>|<get-bufferOffset>(){}[0]
    final val height // androidx.compose.ui.graphics/PixelMap.height|{}height[0]
        final fun <get-height>(): kotlin/Int // androidx.compose.ui.graphics/PixelMap.height.<get-height>|<get-height>(){}[0]
    final val stride // androidx.compose.ui.graphics/PixelMap.stride|{}stride[0]
        final fun <get-stride>(): kotlin/Int // androidx.compose.ui.graphics/PixelMap.stride.<get-stride>|<get-stride>(){}[0]
    final val width // androidx.compose.ui.graphics/PixelMap.width|{}width[0]
        final fun <get-width>(): kotlin/Int // androidx.compose.ui.graphics/PixelMap.width.<get-width>|<get-width>(){}[0]

    final fun get(kotlin/Int, kotlin/Int): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/PixelMap.get|get(kotlin.Int;kotlin.Int){}[0]
}

final class androidx.compose.ui.graphics/RadialGradient : androidx.compose.ui.graphics/ShaderBrush { // androidx.compose.ui.graphics/RadialGradient|null[0]
    final val intrinsicSize // androidx.compose.ui.graphics/RadialGradient.intrinsicSize|{}intrinsicSize[0]
        final fun <get-intrinsicSize>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics/RadialGradient.intrinsicSize.<get-intrinsicSize>|<get-intrinsicSize>(){}[0]

    final fun createShader(androidx.compose.ui.geometry/Size): androidx.compose.ui.graphics/Shader // androidx.compose.ui.graphics/RadialGradient.createShader|createShader(androidx.compose.ui.geometry.Size){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/RadialGradient.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/RadialGradient.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/RadialGradient.toString|toString(){}[0]
}

final class androidx.compose.ui.graphics/Shader { // androidx.compose.ui.graphics/Shader|null[0]
    constructor <init>() // androidx.compose.ui.graphics/Shader.<init>|<init>(){}[0]
}

final class androidx.compose.ui.graphics/Shadow { // androidx.compose.ui.graphics/Shadow|null[0]
    constructor <init>(androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Float = ...) // androidx.compose.ui.graphics/Shadow.<init>|<init>(androidx.compose.ui.graphics.Color;androidx.compose.ui.geometry.Offset;kotlin.Float){}[0]

    final val blurRadius // androidx.compose.ui.graphics/Shadow.blurRadius|{}blurRadius[0]
        final fun <get-blurRadius>(): kotlin/Float // androidx.compose.ui.graphics/Shadow.blurRadius.<get-blurRadius>|<get-blurRadius>(){}[0]
    final val color // androidx.compose.ui.graphics/Shadow.color|{}color[0]
        final fun <get-color>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Shadow.color.<get-color>|<get-color>(){}[0]
    final val offset // androidx.compose.ui.graphics/Shadow.offset|{}offset[0]
        final fun <get-offset>(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.graphics/Shadow.offset.<get-offset>|<get-offset>(){}[0]

    final fun copy(androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Float = ...): androidx.compose.ui.graphics/Shadow // androidx.compose.ui.graphics/Shadow.copy|copy(androidx.compose.ui.graphics.Color;androidx.compose.ui.geometry.Offset;kotlin.Float){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/Shadow.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/Shadow.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/Shadow.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/Shadow.Companion|null[0]
        final val None // androidx.compose.ui.graphics/Shadow.Companion.None|{}None[0]
            final fun <get-None>(): androidx.compose.ui.graphics/Shadow // androidx.compose.ui.graphics/Shadow.Companion.None.<get-None>|<get-None>(){}[0]
    }
}

final class androidx.compose.ui.graphics/SolidColor : androidx.compose.ui.graphics/Brush { // androidx.compose.ui.graphics/SolidColor|null[0]
    constructor <init>(androidx.compose.ui.graphics/Color) // androidx.compose.ui.graphics/SolidColor.<init>|<init>(androidx.compose.ui.graphics.Color){}[0]

    final val value // androidx.compose.ui.graphics/SolidColor.value|{}value[0]
        final fun <get-value>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/SolidColor.value.<get-value>|<get-value>(){}[0]

    final fun applyTo(androidx.compose.ui.geometry/Size, androidx.compose.ui.graphics/Paint, kotlin/Float) // androidx.compose.ui.graphics/SolidColor.applyTo|applyTo(androidx.compose.ui.geometry.Size;androidx.compose.ui.graphics.Paint;kotlin.Float){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/SolidColor.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/SolidColor.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/SolidColor.toString|toString(){}[0]
}

final class androidx.compose.ui.graphics/SweepGradient : androidx.compose.ui.graphics/ShaderBrush { // androidx.compose.ui.graphics/SweepGradient|null[0]
    final fun createShader(androidx.compose.ui.geometry/Size): androidx.compose.ui.graphics/Shader // androidx.compose.ui.graphics/SweepGradient.createShader|createShader(androidx.compose.ui.geometry.Size){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/SweepGradient.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/SweepGradient.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/SweepGradient.toString|toString(){}[0]
}

final class androidx.compose.ui.graphics/Vertices { // androidx.compose.ui.graphics/Vertices|null[0]
    constructor <init>(androidx.compose.ui.graphics/VertexMode, kotlin.collections/List<androidx.compose.ui.geometry/Offset>, kotlin.collections/List<androidx.compose.ui.geometry/Offset>, kotlin.collections/List<androidx.compose.ui.graphics/Color>, kotlin.collections/List<kotlin/Int>) // androidx.compose.ui.graphics/Vertices.<init>|<init>(androidx.compose.ui.graphics.VertexMode;kotlin.collections.List<androidx.compose.ui.geometry.Offset>;kotlin.collections.List<androidx.compose.ui.geometry.Offset>;kotlin.collections.List<androidx.compose.ui.graphics.Color>;kotlin.collections.List<kotlin.Int>){}[0]

    final val colors // androidx.compose.ui.graphics/Vertices.colors|{}colors[0]
        final fun <get-colors>(): kotlin/IntArray // androidx.compose.ui.graphics/Vertices.colors.<get-colors>|<get-colors>(){}[0]
    final val indices // androidx.compose.ui.graphics/Vertices.indices|{}indices[0]
        final fun <get-indices>(): kotlin/ShortArray // androidx.compose.ui.graphics/Vertices.indices.<get-indices>|<get-indices>(){}[0]
    final val positions // androidx.compose.ui.graphics/Vertices.positions|{}positions[0]
        final fun <get-positions>(): kotlin/FloatArray // androidx.compose.ui.graphics/Vertices.positions.<get-positions>|<get-positions>(){}[0]
    final val textureCoordinates // androidx.compose.ui.graphics/Vertices.textureCoordinates|{}textureCoordinates[0]
        final fun <get-textureCoordinates>(): kotlin/FloatArray // androidx.compose.ui.graphics/Vertices.textureCoordinates.<get-textureCoordinates>|<get-textureCoordinates>(){}[0]
    final val vertexMode // androidx.compose.ui.graphics/Vertices.vertexMode|{}vertexMode[0]
        final fun <get-vertexMode>(): androidx.compose.ui.graphics/VertexMode // androidx.compose.ui.graphics/Vertices.vertexMode.<get-vertexMode>|<get-vertexMode>(){}[0]
}

final value class androidx.compose.ui.graphics.colorspace/ColorModel { // androidx.compose.ui.graphics.colorspace/ColorModel|null[0]
    final val componentCount // androidx.compose.ui.graphics.colorspace/ColorModel.componentCount|{}componentCount[0]
        final fun <get-componentCount>(): kotlin/Int // androidx.compose.ui.graphics.colorspace/ColorModel.componentCount.<get-componentCount>|<get-componentCount>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.colorspace/ColorModel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.colorspace/ColorModel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics.colorspace/ColorModel.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics.colorspace/ColorModel.Companion|null[0]
        final val Cmyk // androidx.compose.ui.graphics.colorspace/ColorModel.Companion.Cmyk|{}Cmyk[0]
            final fun <get-Cmyk>(): androidx.compose.ui.graphics.colorspace/ColorModel // androidx.compose.ui.graphics.colorspace/ColorModel.Companion.Cmyk.<get-Cmyk>|<get-Cmyk>(){}[0]
        final val Lab // androidx.compose.ui.graphics.colorspace/ColorModel.Companion.Lab|{}Lab[0]
            final fun <get-Lab>(): androidx.compose.ui.graphics.colorspace/ColorModel // androidx.compose.ui.graphics.colorspace/ColorModel.Companion.Lab.<get-Lab>|<get-Lab>(){}[0]
        final val Rgb // androidx.compose.ui.graphics.colorspace/ColorModel.Companion.Rgb|{}Rgb[0]
            final fun <get-Rgb>(): androidx.compose.ui.graphics.colorspace/ColorModel // androidx.compose.ui.graphics.colorspace/ColorModel.Companion.Rgb.<get-Rgb>|<get-Rgb>(){}[0]
        final val Xyz // androidx.compose.ui.graphics.colorspace/ColorModel.Companion.Xyz|{}Xyz[0]
            final fun <get-Xyz>(): androidx.compose.ui.graphics.colorspace/ColorModel // androidx.compose.ui.graphics.colorspace/ColorModel.Companion.Xyz.<get-Xyz>|<get-Xyz>(){}[0]
    }
}

final value class androidx.compose.ui.graphics.colorspace/RenderIntent { // androidx.compose.ui.graphics.colorspace/RenderIntent|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.colorspace/RenderIntent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.colorspace/RenderIntent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics.colorspace/RenderIntent.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics.colorspace/RenderIntent.Companion|null[0]
        final val Absolute // androidx.compose.ui.graphics.colorspace/RenderIntent.Companion.Absolute|{}Absolute[0]
            final fun <get-Absolute>(): androidx.compose.ui.graphics.colorspace/RenderIntent // androidx.compose.ui.graphics.colorspace/RenderIntent.Companion.Absolute.<get-Absolute>|<get-Absolute>(){}[0]
        final val Perceptual // androidx.compose.ui.graphics.colorspace/RenderIntent.Companion.Perceptual|{}Perceptual[0]
            final fun <get-Perceptual>(): androidx.compose.ui.graphics.colorspace/RenderIntent // androidx.compose.ui.graphics.colorspace/RenderIntent.Companion.Perceptual.<get-Perceptual>|<get-Perceptual>(){}[0]
        final val Relative // androidx.compose.ui.graphics.colorspace/RenderIntent.Companion.Relative|{}Relative[0]
            final fun <get-Relative>(): androidx.compose.ui.graphics.colorspace/RenderIntent // androidx.compose.ui.graphics.colorspace/RenderIntent.Companion.Relative.<get-Relative>|<get-Relative>(){}[0]
        final val Saturation // androidx.compose.ui.graphics.colorspace/RenderIntent.Companion.Saturation|{}Saturation[0]
            final fun <get-Saturation>(): androidx.compose.ui.graphics.colorspace/RenderIntent // androidx.compose.ui.graphics.colorspace/RenderIntent.Companion.Saturation.<get-Saturation>|<get-Saturation>(){}[0]
    }
}

final value class androidx.compose.ui.graphics.layer/CompositingStrategy { // androidx.compose.ui.graphics.layer/CompositingStrategy|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.layer/CompositingStrategy.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.layer/CompositingStrategy.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics.layer/CompositingStrategy.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics.layer/CompositingStrategy.Companion|null[0]
        final val Auto // androidx.compose.ui.graphics.layer/CompositingStrategy.Companion.Auto|{}Auto[0]
            final fun <get-Auto>(): androidx.compose.ui.graphics.layer/CompositingStrategy // androidx.compose.ui.graphics.layer/CompositingStrategy.Companion.Auto.<get-Auto>|<get-Auto>(){}[0]
        final val ModulateAlpha // androidx.compose.ui.graphics.layer/CompositingStrategy.Companion.ModulateAlpha|{}ModulateAlpha[0]
            final fun <get-ModulateAlpha>(): androidx.compose.ui.graphics.layer/CompositingStrategy // androidx.compose.ui.graphics.layer/CompositingStrategy.Companion.ModulateAlpha.<get-ModulateAlpha>|<get-ModulateAlpha>(){}[0]
        final val Offscreen // androidx.compose.ui.graphics.layer/CompositingStrategy.Companion.Offscreen|{}Offscreen[0]
            final fun <get-Offscreen>(): androidx.compose.ui.graphics.layer/CompositingStrategy // androidx.compose.ui.graphics.layer/CompositingStrategy.Companion.Offscreen.<get-Offscreen>|<get-Offscreen>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/BlendMode { // androidx.compose.ui.graphics/BlendMode|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/BlendMode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/BlendMode.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/BlendMode.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/BlendMode.Companion|null[0]
        final val Clear // androidx.compose.ui.graphics/BlendMode.Companion.Clear|{}Clear[0]
            final fun <get-Clear>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Clear.<get-Clear>|<get-Clear>(){}[0]
        final val Color // androidx.compose.ui.graphics/BlendMode.Companion.Color|{}Color[0]
            final fun <get-Color>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Color.<get-Color>|<get-Color>(){}[0]
        final val ColorBurn // androidx.compose.ui.graphics/BlendMode.Companion.ColorBurn|{}ColorBurn[0]
            final fun <get-ColorBurn>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.ColorBurn.<get-ColorBurn>|<get-ColorBurn>(){}[0]
        final val ColorDodge // androidx.compose.ui.graphics/BlendMode.Companion.ColorDodge|{}ColorDodge[0]
            final fun <get-ColorDodge>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.ColorDodge.<get-ColorDodge>|<get-ColorDodge>(){}[0]
        final val Darken // androidx.compose.ui.graphics/BlendMode.Companion.Darken|{}Darken[0]
            final fun <get-Darken>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Darken.<get-Darken>|<get-Darken>(){}[0]
        final val Difference // androidx.compose.ui.graphics/BlendMode.Companion.Difference|{}Difference[0]
            final fun <get-Difference>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Difference.<get-Difference>|<get-Difference>(){}[0]
        final val Dst // androidx.compose.ui.graphics/BlendMode.Companion.Dst|{}Dst[0]
            final fun <get-Dst>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Dst.<get-Dst>|<get-Dst>(){}[0]
        final val DstAtop // androidx.compose.ui.graphics/BlendMode.Companion.DstAtop|{}DstAtop[0]
            final fun <get-DstAtop>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.DstAtop.<get-DstAtop>|<get-DstAtop>(){}[0]
        final val DstIn // androidx.compose.ui.graphics/BlendMode.Companion.DstIn|{}DstIn[0]
            final fun <get-DstIn>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.DstIn.<get-DstIn>|<get-DstIn>(){}[0]
        final val DstOut // androidx.compose.ui.graphics/BlendMode.Companion.DstOut|{}DstOut[0]
            final fun <get-DstOut>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.DstOut.<get-DstOut>|<get-DstOut>(){}[0]
        final val DstOver // androidx.compose.ui.graphics/BlendMode.Companion.DstOver|{}DstOver[0]
            final fun <get-DstOver>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.DstOver.<get-DstOver>|<get-DstOver>(){}[0]
        final val Exclusion // androidx.compose.ui.graphics/BlendMode.Companion.Exclusion|{}Exclusion[0]
            final fun <get-Exclusion>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Exclusion.<get-Exclusion>|<get-Exclusion>(){}[0]
        final val Hardlight // androidx.compose.ui.graphics/BlendMode.Companion.Hardlight|{}Hardlight[0]
            final fun <get-Hardlight>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Hardlight.<get-Hardlight>|<get-Hardlight>(){}[0]
        final val Hue // androidx.compose.ui.graphics/BlendMode.Companion.Hue|{}Hue[0]
            final fun <get-Hue>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Hue.<get-Hue>|<get-Hue>(){}[0]
        final val Lighten // androidx.compose.ui.graphics/BlendMode.Companion.Lighten|{}Lighten[0]
            final fun <get-Lighten>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Lighten.<get-Lighten>|<get-Lighten>(){}[0]
        final val Luminosity // androidx.compose.ui.graphics/BlendMode.Companion.Luminosity|{}Luminosity[0]
            final fun <get-Luminosity>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Luminosity.<get-Luminosity>|<get-Luminosity>(){}[0]
        final val Modulate // androidx.compose.ui.graphics/BlendMode.Companion.Modulate|{}Modulate[0]
            final fun <get-Modulate>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Modulate.<get-Modulate>|<get-Modulate>(){}[0]
        final val Multiply // androidx.compose.ui.graphics/BlendMode.Companion.Multiply|{}Multiply[0]
            final fun <get-Multiply>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Multiply.<get-Multiply>|<get-Multiply>(){}[0]
        final val Overlay // androidx.compose.ui.graphics/BlendMode.Companion.Overlay|{}Overlay[0]
            final fun <get-Overlay>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Overlay.<get-Overlay>|<get-Overlay>(){}[0]
        final val Plus // androidx.compose.ui.graphics/BlendMode.Companion.Plus|{}Plus[0]
            final fun <get-Plus>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Plus.<get-Plus>|<get-Plus>(){}[0]
        final val Saturation // androidx.compose.ui.graphics/BlendMode.Companion.Saturation|{}Saturation[0]
            final fun <get-Saturation>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Saturation.<get-Saturation>|<get-Saturation>(){}[0]
        final val Screen // androidx.compose.ui.graphics/BlendMode.Companion.Screen|{}Screen[0]
            final fun <get-Screen>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Screen.<get-Screen>|<get-Screen>(){}[0]
        final val Softlight // androidx.compose.ui.graphics/BlendMode.Companion.Softlight|{}Softlight[0]
            final fun <get-Softlight>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Softlight.<get-Softlight>|<get-Softlight>(){}[0]
        final val Src // androidx.compose.ui.graphics/BlendMode.Companion.Src|{}Src[0]
            final fun <get-Src>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Src.<get-Src>|<get-Src>(){}[0]
        final val SrcAtop // androidx.compose.ui.graphics/BlendMode.Companion.SrcAtop|{}SrcAtop[0]
            final fun <get-SrcAtop>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.SrcAtop.<get-SrcAtop>|<get-SrcAtop>(){}[0]
        final val SrcIn // androidx.compose.ui.graphics/BlendMode.Companion.SrcIn|{}SrcIn[0]
            final fun <get-SrcIn>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.SrcIn.<get-SrcIn>|<get-SrcIn>(){}[0]
        final val SrcOut // androidx.compose.ui.graphics/BlendMode.Companion.SrcOut|{}SrcOut[0]
            final fun <get-SrcOut>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.SrcOut.<get-SrcOut>|<get-SrcOut>(){}[0]
        final val SrcOver // androidx.compose.ui.graphics/BlendMode.Companion.SrcOver|{}SrcOver[0]
            final fun <get-SrcOver>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.SrcOver.<get-SrcOver>|<get-SrcOver>(){}[0]
        final val Xor // androidx.compose.ui.graphics/BlendMode.Companion.Xor|{}Xor[0]
            final fun <get-Xor>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/BlendMode.Companion.Xor.<get-Xor>|<get-Xor>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/ClipOp { // androidx.compose.ui.graphics/ClipOp|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/ClipOp.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/ClipOp.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/ClipOp.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/ClipOp.Companion|null[0]
        final val Difference // androidx.compose.ui.graphics/ClipOp.Companion.Difference|{}Difference[0]
            final fun <get-Difference>(): androidx.compose.ui.graphics/ClipOp // androidx.compose.ui.graphics/ClipOp.Companion.Difference.<get-Difference>|<get-Difference>(){}[0]
        final val Intersect // androidx.compose.ui.graphics/ClipOp.Companion.Intersect|{}Intersect[0]
            final fun <get-Intersect>(): androidx.compose.ui.graphics/ClipOp // androidx.compose.ui.graphics/ClipOp.Companion.Intersect.<get-Intersect>|<get-Intersect>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/Color { // androidx.compose.ui.graphics/Color|null[0]
    constructor <init>(kotlin/ULong) // androidx.compose.ui.graphics/Color.<init>|<init>(kotlin.ULong){}[0]

    final val alpha // androidx.compose.ui.graphics/Color.alpha|{}alpha[0]
        final fun <get-alpha>(): kotlin/Float // androidx.compose.ui.graphics/Color.alpha.<get-alpha>|<get-alpha>(){}[0]
    final val blue // androidx.compose.ui.graphics/Color.blue|{}blue[0]
        final fun <get-blue>(): kotlin/Float // androidx.compose.ui.graphics/Color.blue.<get-blue>|<get-blue>(){}[0]
    final val colorSpace // androidx.compose.ui.graphics/Color.colorSpace|{}colorSpace[0]
        final fun <get-colorSpace>(): androidx.compose.ui.graphics.colorspace/ColorSpace // androidx.compose.ui.graphics/Color.colorSpace.<get-colorSpace>|<get-colorSpace>(){}[0]
    final val green // androidx.compose.ui.graphics/Color.green|{}green[0]
        final fun <get-green>(): kotlin/Float // androidx.compose.ui.graphics/Color.green.<get-green>|<get-green>(){}[0]
    final val red // androidx.compose.ui.graphics/Color.red|{}red[0]
        final fun <get-red>(): kotlin/Float // androidx.compose.ui.graphics/Color.red.<get-red>|<get-red>(){}[0]
    final val value // androidx.compose.ui.graphics/Color.value|{}value[0]
        final fun <get-value>(): kotlin/ULong // androidx.compose.ui.graphics/Color.value.<get-value>|<get-value>(){}[0]

    final fun convert(androidx.compose.ui.graphics.colorspace/ColorSpace): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.convert|convert(androidx.compose.ui.graphics.colorspace.ColorSpace){}[0]
    final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/Color.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/Color.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/Color.toString|toString(){}[0]
    final inline fun component1(): kotlin/Float // androidx.compose.ui.graphics/Color.component1|component1(){}[0]
    final inline fun component2(): kotlin/Float // androidx.compose.ui.graphics/Color.component2|component2(){}[0]
    final inline fun component3(): kotlin/Float // androidx.compose.ui.graphics/Color.component3|component3(){}[0]
    final inline fun component4(): kotlin/Float // androidx.compose.ui.graphics/Color.component4|component4(){}[0]
    final inline fun component5(): androidx.compose.ui.graphics.colorspace/ColorSpace // androidx.compose.ui.graphics/Color.component5|component5(){}[0]

    final object Companion { // androidx.compose.ui.graphics/Color.Companion|null[0]
        final val Black // androidx.compose.ui.graphics/Color.Companion.Black|{}Black[0]
            final fun <get-Black>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.Black.<get-Black>|<get-Black>(){}[0]
        final val Blue // androidx.compose.ui.graphics/Color.Companion.Blue|{}Blue[0]
            final fun <get-Blue>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.Blue.<get-Blue>|<get-Blue>(){}[0]
        final val Cyan // androidx.compose.ui.graphics/Color.Companion.Cyan|{}Cyan[0]
            final fun <get-Cyan>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.Cyan.<get-Cyan>|<get-Cyan>(){}[0]
        final val DarkGray // androidx.compose.ui.graphics/Color.Companion.DarkGray|{}DarkGray[0]
            final fun <get-DarkGray>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.DarkGray.<get-DarkGray>|<get-DarkGray>(){}[0]
        final val Gray // androidx.compose.ui.graphics/Color.Companion.Gray|{}Gray[0]
            final fun <get-Gray>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.Gray.<get-Gray>|<get-Gray>(){}[0]
        final val Green // androidx.compose.ui.graphics/Color.Companion.Green|{}Green[0]
            final fun <get-Green>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.Green.<get-Green>|<get-Green>(){}[0]
        final val LightGray // androidx.compose.ui.graphics/Color.Companion.LightGray|{}LightGray[0]
            final fun <get-LightGray>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.LightGray.<get-LightGray>|<get-LightGray>(){}[0]
        final val Magenta // androidx.compose.ui.graphics/Color.Companion.Magenta|{}Magenta[0]
            final fun <get-Magenta>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.Magenta.<get-Magenta>|<get-Magenta>(){}[0]
        final val Red // androidx.compose.ui.graphics/Color.Companion.Red|{}Red[0]
            final fun <get-Red>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.Red.<get-Red>|<get-Red>(){}[0]
        final val Transparent // androidx.compose.ui.graphics/Color.Companion.Transparent|{}Transparent[0]
            final fun <get-Transparent>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.Transparent.<get-Transparent>|<get-Transparent>(){}[0]
        final val Unspecified // androidx.compose.ui.graphics/Color.Companion.Unspecified|{}Unspecified[0]
            final fun <get-Unspecified>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.Unspecified.<get-Unspecified>|<get-Unspecified>(){}[0]
        final val White // androidx.compose.ui.graphics/Color.Companion.White|{}White[0]
            final fun <get-White>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.White.<get-White>|<get-White>(){}[0]
        final val Yellow // androidx.compose.ui.graphics/Color.Companion.Yellow|{}Yellow[0]
            final fun <get-Yellow>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.Yellow.<get-Yellow>|<get-Yellow>(){}[0]

        final fun hsl(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float = ..., androidx.compose.ui.graphics.colorspace/Rgb = ...): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.hsl|hsl(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.colorspace.Rgb){}[0]
        final fun hsv(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float = ..., androidx.compose.ui.graphics.colorspace/Rgb = ...): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color.Companion.hsv|hsv(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.colorspace.Rgb){}[0]
    }
}

final value class androidx.compose.ui.graphics/ColorMatrix { // androidx.compose.ui.graphics/ColorMatrix|null[0]
    constructor <init>(kotlin/FloatArray = ...) // androidx.compose.ui.graphics/ColorMatrix.<init>|<init>(kotlin.FloatArray){}[0]

    final val values // androidx.compose.ui.graphics/ColorMatrix.values|{}values[0]
        final fun <get-values>(): kotlin/FloatArray // androidx.compose.ui.graphics/ColorMatrix.values.<get-values>|<get-values>(){}[0]

    final fun convertRgbToYuv() // androidx.compose.ui.graphics/ColorMatrix.convertRgbToYuv|convertRgbToYuv(){}[0]
    final fun convertYuvToRgb() // androidx.compose.ui.graphics/ColorMatrix.convertYuvToRgb|convertYuvToRgb(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/ColorMatrix.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/ColorMatrix.hashCode|hashCode(){}[0]
    final fun set(androidx.compose.ui.graphics/ColorMatrix) // androidx.compose.ui.graphics/ColorMatrix.set|set(androidx.compose.ui.graphics.ColorMatrix){}[0]
    final fun setToRotateBlue(kotlin/Float) // androidx.compose.ui.graphics/ColorMatrix.setToRotateBlue|setToRotateBlue(kotlin.Float){}[0]
    final fun setToRotateGreen(kotlin/Float) // androidx.compose.ui.graphics/ColorMatrix.setToRotateGreen|setToRotateGreen(kotlin.Float){}[0]
    final fun setToRotateRed(kotlin/Float) // androidx.compose.ui.graphics/ColorMatrix.setToRotateRed|setToRotateRed(kotlin.Float){}[0]
    final fun setToSaturation(kotlin/Float) // androidx.compose.ui.graphics/ColorMatrix.setToSaturation|setToSaturation(kotlin.Float){}[0]
    final fun setToScale(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/ColorMatrix.setToScale|setToScale(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun timesAssign(androidx.compose.ui.graphics/ColorMatrix) // androidx.compose.ui.graphics/ColorMatrix.timesAssign|timesAssign(androidx.compose.ui.graphics.ColorMatrix){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/ColorMatrix.toString|toString(){}[0]
    final inline fun get(kotlin/Int, kotlin/Int): kotlin/Float // androidx.compose.ui.graphics/ColorMatrix.get|get(kotlin.Int;kotlin.Int){}[0]
    final inline fun reset() // androidx.compose.ui.graphics/ColorMatrix.reset|reset(){}[0]
    final inline fun set(kotlin/Int, kotlin/Int, kotlin/Float) // androidx.compose.ui.graphics/ColorMatrix.set|set(kotlin.Int;kotlin.Int;kotlin.Float){}[0]
}

final value class androidx.compose.ui.graphics/FilterQuality { // androidx.compose.ui.graphics/FilterQuality|null[0]
    final val value // androidx.compose.ui.graphics/FilterQuality.value|{}value[0]
        final fun <get-value>(): kotlin/Int // androidx.compose.ui.graphics/FilterQuality.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/FilterQuality.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/FilterQuality.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/FilterQuality.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/FilterQuality.Companion|null[0]
        final val High // androidx.compose.ui.graphics/FilterQuality.Companion.High|{}High[0]
            final fun <get-High>(): androidx.compose.ui.graphics/FilterQuality // androidx.compose.ui.graphics/FilterQuality.Companion.High.<get-High>|<get-High>(){}[0]
        final val Low // androidx.compose.ui.graphics/FilterQuality.Companion.Low|{}Low[0]
            final fun <get-Low>(): androidx.compose.ui.graphics/FilterQuality // androidx.compose.ui.graphics/FilterQuality.Companion.Low.<get-Low>|<get-Low>(){}[0]
        final val Medium // androidx.compose.ui.graphics/FilterQuality.Companion.Medium|{}Medium[0]
            final fun <get-Medium>(): androidx.compose.ui.graphics/FilterQuality // androidx.compose.ui.graphics/FilterQuality.Companion.Medium.<get-Medium>|<get-Medium>(){}[0]
        final val None // androidx.compose.ui.graphics/FilterQuality.Companion.None|{}None[0]
            final fun <get-None>(): androidx.compose.ui.graphics/FilterQuality // androidx.compose.ui.graphics/FilterQuality.Companion.None.<get-None>|<get-None>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/ImageBitmapConfig { // androidx.compose.ui.graphics/ImageBitmapConfig|null[0]
    final val value // androidx.compose.ui.graphics/ImageBitmapConfig.value|{}value[0]
        final fun <get-value>(): kotlin/Int // androidx.compose.ui.graphics/ImageBitmapConfig.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/ImageBitmapConfig.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/ImageBitmapConfig.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/ImageBitmapConfig.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/ImageBitmapConfig.Companion|null[0]
        final val Alpha8 // androidx.compose.ui.graphics/ImageBitmapConfig.Companion.Alpha8|{}Alpha8[0]
            final fun <get-Alpha8>(): androidx.compose.ui.graphics/ImageBitmapConfig // androidx.compose.ui.graphics/ImageBitmapConfig.Companion.Alpha8.<get-Alpha8>|<get-Alpha8>(){}[0]
        final val Argb8888 // androidx.compose.ui.graphics/ImageBitmapConfig.Companion.Argb8888|{}Argb8888[0]
            final fun <get-Argb8888>(): androidx.compose.ui.graphics/ImageBitmapConfig // androidx.compose.ui.graphics/ImageBitmapConfig.Companion.Argb8888.<get-Argb8888>|<get-Argb8888>(){}[0]
        final val F16 // androidx.compose.ui.graphics/ImageBitmapConfig.Companion.F16|{}F16[0]
            final fun <get-F16>(): androidx.compose.ui.graphics/ImageBitmapConfig // androidx.compose.ui.graphics/ImageBitmapConfig.Companion.F16.<get-F16>|<get-F16>(){}[0]
        final val Gpu // androidx.compose.ui.graphics/ImageBitmapConfig.Companion.Gpu|{}Gpu[0]
            final fun <get-Gpu>(): androidx.compose.ui.graphics/ImageBitmapConfig // androidx.compose.ui.graphics/ImageBitmapConfig.Companion.Gpu.<get-Gpu>|<get-Gpu>(){}[0]
        final val Rgb565 // androidx.compose.ui.graphics/ImageBitmapConfig.Companion.Rgb565|{}Rgb565[0]
            final fun <get-Rgb565>(): androidx.compose.ui.graphics/ImageBitmapConfig // androidx.compose.ui.graphics/ImageBitmapConfig.Companion.Rgb565.<get-Rgb565>|<get-Rgb565>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/Matrix { // androidx.compose.ui.graphics/Matrix|null[0]
    constructor <init>(kotlin/FloatArray = ...) // androidx.compose.ui.graphics/Matrix.<init>|<init>(kotlin.FloatArray){}[0]

    final val values // androidx.compose.ui.graphics/Matrix.values|{}values[0]
        final fun <get-values>(): kotlin/FloatArray // androidx.compose.ui.graphics/Matrix.values.<get-values>|<get-values>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/Matrix.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/Matrix.hashCode|hashCode(){}[0]
    final fun invert() // androidx.compose.ui.graphics/Matrix.invert|invert(){}[0]
    final fun map(androidx.compose.ui.geometry/MutableRect) // androidx.compose.ui.graphics/Matrix.map|map(androidx.compose.ui.geometry.MutableRect){}[0]
    final fun map(androidx.compose.ui.geometry/Offset): androidx.compose.ui.geometry/Offset // androidx.compose.ui.graphics/Matrix.map|map(androidx.compose.ui.geometry.Offset){}[0]
    final fun map(androidx.compose.ui.geometry/Rect): androidx.compose.ui.geometry/Rect // androidx.compose.ui.graphics/Matrix.map|map(androidx.compose.ui.geometry.Rect){}[0]
    final fun reset() // androidx.compose.ui.graphics/Matrix.reset|reset(){}[0]
    final fun resetToPivotedTransform(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...) // androidx.compose.ui.graphics/Matrix.resetToPivotedTransform|resetToPivotedTransform(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun rotateX(kotlin/Float) // androidx.compose.ui.graphics/Matrix.rotateX|rotateX(kotlin.Float){}[0]
    final fun rotateY(kotlin/Float) // androidx.compose.ui.graphics/Matrix.rotateY|rotateY(kotlin.Float){}[0]
    final fun rotateZ(kotlin/Float) // androidx.compose.ui.graphics/Matrix.rotateZ|rotateZ(kotlin.Float){}[0]
    final fun scale(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...) // androidx.compose.ui.graphics/Matrix.scale|scale(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun setFrom(androidx.compose.ui.graphics/Matrix) // androidx.compose.ui.graphics/Matrix.setFrom|setFrom(androidx.compose.ui.graphics.Matrix){}[0]
    final fun timesAssign(androidx.compose.ui.graphics/Matrix) // androidx.compose.ui.graphics/Matrix.timesAssign|timesAssign(androidx.compose.ui.graphics.Matrix){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/Matrix.toString|toString(){}[0]
    final fun translate(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...) // androidx.compose.ui.graphics/Matrix.translate|translate(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final inline fun get(kotlin/Int, kotlin/Int): kotlin/Float // androidx.compose.ui.graphics/Matrix.get|get(kotlin.Int;kotlin.Int){}[0]
    final inline fun set(kotlin/Int, kotlin/Int, kotlin/Float) // androidx.compose.ui.graphics/Matrix.set|set(kotlin.Int;kotlin.Int;kotlin.Float){}[0]

    final object Companion { // androidx.compose.ui.graphics/Matrix.Companion|null[0]
        final const val Perspective0 // androidx.compose.ui.graphics/Matrix.Companion.Perspective0|{}Perspective0[0]
            final fun <get-Perspective0>(): kotlin/Int // androidx.compose.ui.graphics/Matrix.Companion.Perspective0.<get-Perspective0>|<get-Perspective0>(){}[0]
        final const val Perspective1 // androidx.compose.ui.graphics/Matrix.Companion.Perspective1|{}Perspective1[0]
            final fun <get-Perspective1>(): kotlin/Int // androidx.compose.ui.graphics/Matrix.Companion.Perspective1.<get-Perspective1>|<get-Perspective1>(){}[0]
        final const val Perspective2 // androidx.compose.ui.graphics/Matrix.Companion.Perspective2|{}Perspective2[0]
            final fun <get-Perspective2>(): kotlin/Int // androidx.compose.ui.graphics/Matrix.Companion.Perspective2.<get-Perspective2>|<get-Perspective2>(){}[0]
        final const val ScaleX // androidx.compose.ui.graphics/Matrix.Companion.ScaleX|{}ScaleX[0]
            final fun <get-ScaleX>(): kotlin/Int // androidx.compose.ui.graphics/Matrix.Companion.ScaleX.<get-ScaleX>|<get-ScaleX>(){}[0]
        final const val ScaleY // androidx.compose.ui.graphics/Matrix.Companion.ScaleY|{}ScaleY[0]
            final fun <get-ScaleY>(): kotlin/Int // androidx.compose.ui.graphics/Matrix.Companion.ScaleY.<get-ScaleY>|<get-ScaleY>(){}[0]
        final const val ScaleZ // androidx.compose.ui.graphics/Matrix.Companion.ScaleZ|{}ScaleZ[0]
            final fun <get-ScaleZ>(): kotlin/Int // androidx.compose.ui.graphics/Matrix.Companion.ScaleZ.<get-ScaleZ>|<get-ScaleZ>(){}[0]
        final const val SkewX // androidx.compose.ui.graphics/Matrix.Companion.SkewX|{}SkewX[0]
            final fun <get-SkewX>(): kotlin/Int // androidx.compose.ui.graphics/Matrix.Companion.SkewX.<get-SkewX>|<get-SkewX>(){}[0]
        final const val SkewY // androidx.compose.ui.graphics/Matrix.Companion.SkewY|{}SkewY[0]
            final fun <get-SkewY>(): kotlin/Int // androidx.compose.ui.graphics/Matrix.Companion.SkewY.<get-SkewY>|<get-SkewY>(){}[0]
        final const val TranslateX // androidx.compose.ui.graphics/Matrix.Companion.TranslateX|{}TranslateX[0]
            final fun <get-TranslateX>(): kotlin/Int // androidx.compose.ui.graphics/Matrix.Companion.TranslateX.<get-TranslateX>|<get-TranslateX>(){}[0]
        final const val TranslateY // androidx.compose.ui.graphics/Matrix.Companion.TranslateY|{}TranslateY[0]
            final fun <get-TranslateY>(): kotlin/Int // androidx.compose.ui.graphics/Matrix.Companion.TranslateY.<get-TranslateY>|<get-TranslateY>(){}[0]
        final const val TranslateZ // androidx.compose.ui.graphics/Matrix.Companion.TranslateZ|{}TranslateZ[0]
            final fun <get-TranslateZ>(): kotlin/Int // androidx.compose.ui.graphics/Matrix.Companion.TranslateZ.<get-TranslateZ>|<get-TranslateZ>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/PaintingStyle { // androidx.compose.ui.graphics/PaintingStyle|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/PaintingStyle.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/PaintingStyle.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/PaintingStyle.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/PaintingStyle.Companion|null[0]
        final val Fill // androidx.compose.ui.graphics/PaintingStyle.Companion.Fill|{}Fill[0]
            final fun <get-Fill>(): androidx.compose.ui.graphics/PaintingStyle // androidx.compose.ui.graphics/PaintingStyle.Companion.Fill.<get-Fill>|<get-Fill>(){}[0]
        final val Stroke // androidx.compose.ui.graphics/PaintingStyle.Companion.Stroke|{}Stroke[0]
            final fun <get-Stroke>(): androidx.compose.ui.graphics/PaintingStyle // androidx.compose.ui.graphics/PaintingStyle.Companion.Stroke.<get-Stroke>|<get-Stroke>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/PathFillType { // androidx.compose.ui.graphics/PathFillType|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/PathFillType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/PathFillType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/PathFillType.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/PathFillType.Companion|null[0]
        final val EvenOdd // androidx.compose.ui.graphics/PathFillType.Companion.EvenOdd|{}EvenOdd[0]
            final fun <get-EvenOdd>(): androidx.compose.ui.graphics/PathFillType // androidx.compose.ui.graphics/PathFillType.Companion.EvenOdd.<get-EvenOdd>|<get-EvenOdd>(){}[0]
        final val NonZero // androidx.compose.ui.graphics/PathFillType.Companion.NonZero|{}NonZero[0]
            final fun <get-NonZero>(): androidx.compose.ui.graphics/PathFillType // androidx.compose.ui.graphics/PathFillType.Companion.NonZero.<get-NonZero>|<get-NonZero>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/PathOperation { // androidx.compose.ui.graphics/PathOperation|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/PathOperation.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/PathOperation.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/PathOperation.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/PathOperation.Companion|null[0]
        final val Difference // androidx.compose.ui.graphics/PathOperation.Companion.Difference|{}Difference[0]
            final fun <get-Difference>(): androidx.compose.ui.graphics/PathOperation // androidx.compose.ui.graphics/PathOperation.Companion.Difference.<get-Difference>|<get-Difference>(){}[0]
        final val Intersect // androidx.compose.ui.graphics/PathOperation.Companion.Intersect|{}Intersect[0]
            final fun <get-Intersect>(): androidx.compose.ui.graphics/PathOperation // androidx.compose.ui.graphics/PathOperation.Companion.Intersect.<get-Intersect>|<get-Intersect>(){}[0]
        final val ReverseDifference // androidx.compose.ui.graphics/PathOperation.Companion.ReverseDifference|{}ReverseDifference[0]
            final fun <get-ReverseDifference>(): androidx.compose.ui.graphics/PathOperation // androidx.compose.ui.graphics/PathOperation.Companion.ReverseDifference.<get-ReverseDifference>|<get-ReverseDifference>(){}[0]
        final val Union // androidx.compose.ui.graphics/PathOperation.Companion.Union|{}Union[0]
            final fun <get-Union>(): androidx.compose.ui.graphics/PathOperation // androidx.compose.ui.graphics/PathOperation.Companion.Union.<get-Union>|<get-Union>(){}[0]
        final val Xor // androidx.compose.ui.graphics/PathOperation.Companion.Xor|{}Xor[0]
            final fun <get-Xor>(): androidx.compose.ui.graphics/PathOperation // androidx.compose.ui.graphics/PathOperation.Companion.Xor.<get-Xor>|<get-Xor>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/PointMode { // androidx.compose.ui.graphics/PointMode|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/PointMode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/PointMode.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/PointMode.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/PointMode.Companion|null[0]
        final val Lines // androidx.compose.ui.graphics/PointMode.Companion.Lines|{}Lines[0]
            final fun <get-Lines>(): androidx.compose.ui.graphics/PointMode // androidx.compose.ui.graphics/PointMode.Companion.Lines.<get-Lines>|<get-Lines>(){}[0]
        final val Points // androidx.compose.ui.graphics/PointMode.Companion.Points|{}Points[0]
            final fun <get-Points>(): androidx.compose.ui.graphics/PointMode // androidx.compose.ui.graphics/PointMode.Companion.Points.<get-Points>|<get-Points>(){}[0]
        final val Polygon // androidx.compose.ui.graphics/PointMode.Companion.Polygon|{}Polygon[0]
            final fun <get-Polygon>(): androidx.compose.ui.graphics/PointMode // androidx.compose.ui.graphics/PointMode.Companion.Polygon.<get-Polygon>|<get-Polygon>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/StampedPathEffectStyle { // androidx.compose.ui.graphics/StampedPathEffectStyle|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/StampedPathEffectStyle.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/StampedPathEffectStyle.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/StampedPathEffectStyle.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/StampedPathEffectStyle.Companion|null[0]
        final val Morph // androidx.compose.ui.graphics/StampedPathEffectStyle.Companion.Morph|{}Morph[0]
            final fun <get-Morph>(): androidx.compose.ui.graphics/StampedPathEffectStyle // androidx.compose.ui.graphics/StampedPathEffectStyle.Companion.Morph.<get-Morph>|<get-Morph>(){}[0]
        final val Rotate // androidx.compose.ui.graphics/StampedPathEffectStyle.Companion.Rotate|{}Rotate[0]
            final fun <get-Rotate>(): androidx.compose.ui.graphics/StampedPathEffectStyle // androidx.compose.ui.graphics/StampedPathEffectStyle.Companion.Rotate.<get-Rotate>|<get-Rotate>(){}[0]
        final val Translate // androidx.compose.ui.graphics/StampedPathEffectStyle.Companion.Translate|{}Translate[0]
            final fun <get-Translate>(): androidx.compose.ui.graphics/StampedPathEffectStyle // androidx.compose.ui.graphics/StampedPathEffectStyle.Companion.Translate.<get-Translate>|<get-Translate>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/StrokeCap { // androidx.compose.ui.graphics/StrokeCap|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/StrokeCap.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/StrokeCap.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/StrokeCap.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/StrokeCap.Companion|null[0]
        final val Butt // androidx.compose.ui.graphics/StrokeCap.Companion.Butt|{}Butt[0]
            final fun <get-Butt>(): androidx.compose.ui.graphics/StrokeCap // androidx.compose.ui.graphics/StrokeCap.Companion.Butt.<get-Butt>|<get-Butt>(){}[0]
        final val Round // androidx.compose.ui.graphics/StrokeCap.Companion.Round|{}Round[0]
            final fun <get-Round>(): androidx.compose.ui.graphics/StrokeCap // androidx.compose.ui.graphics/StrokeCap.Companion.Round.<get-Round>|<get-Round>(){}[0]
        final val Square // androidx.compose.ui.graphics/StrokeCap.Companion.Square|{}Square[0]
            final fun <get-Square>(): androidx.compose.ui.graphics/StrokeCap // androidx.compose.ui.graphics/StrokeCap.Companion.Square.<get-Square>|<get-Square>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/StrokeJoin { // androidx.compose.ui.graphics/StrokeJoin|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/StrokeJoin.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/StrokeJoin.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/StrokeJoin.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/StrokeJoin.Companion|null[0]
        final val Bevel // androidx.compose.ui.graphics/StrokeJoin.Companion.Bevel|{}Bevel[0]
            final fun <get-Bevel>(): androidx.compose.ui.graphics/StrokeJoin // androidx.compose.ui.graphics/StrokeJoin.Companion.Bevel.<get-Bevel>|<get-Bevel>(){}[0]
        final val Miter // androidx.compose.ui.graphics/StrokeJoin.Companion.Miter|{}Miter[0]
            final fun <get-Miter>(): androidx.compose.ui.graphics/StrokeJoin // androidx.compose.ui.graphics/StrokeJoin.Companion.Miter.<get-Miter>|<get-Miter>(){}[0]
        final val Round // androidx.compose.ui.graphics/StrokeJoin.Companion.Round|{}Round[0]
            final fun <get-Round>(): androidx.compose.ui.graphics/StrokeJoin // androidx.compose.ui.graphics/StrokeJoin.Companion.Round.<get-Round>|<get-Round>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/TileMode { // androidx.compose.ui.graphics/TileMode|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/TileMode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/TileMode.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/TileMode.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/TileMode.Companion|null[0]
        final val Clamp // androidx.compose.ui.graphics/TileMode.Companion.Clamp|{}Clamp[0]
            final fun <get-Clamp>(): androidx.compose.ui.graphics/TileMode // androidx.compose.ui.graphics/TileMode.Companion.Clamp.<get-Clamp>|<get-Clamp>(){}[0]
        final val Decal // androidx.compose.ui.graphics/TileMode.Companion.Decal|{}Decal[0]
            final fun <get-Decal>(): androidx.compose.ui.graphics/TileMode // androidx.compose.ui.graphics/TileMode.Companion.Decal.<get-Decal>|<get-Decal>(){}[0]
        final val Mirror // androidx.compose.ui.graphics/TileMode.Companion.Mirror|{}Mirror[0]
            final fun <get-Mirror>(): androidx.compose.ui.graphics/TileMode // androidx.compose.ui.graphics/TileMode.Companion.Mirror.<get-Mirror>|<get-Mirror>(){}[0]
        final val Repeated // androidx.compose.ui.graphics/TileMode.Companion.Repeated|{}Repeated[0]
            final fun <get-Repeated>(): androidx.compose.ui.graphics/TileMode // androidx.compose.ui.graphics/TileMode.Companion.Repeated.<get-Repeated>|<get-Repeated>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/VertexMode { // androidx.compose.ui.graphics/VertexMode|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/VertexMode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/VertexMode.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/VertexMode.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/VertexMode.Companion|null[0]
        final val TriangleFan // androidx.compose.ui.graphics/VertexMode.Companion.TriangleFan|{}TriangleFan[0]
            final fun <get-TriangleFan>(): androidx.compose.ui.graphics/VertexMode // androidx.compose.ui.graphics/VertexMode.Companion.TriangleFan.<get-TriangleFan>|<get-TriangleFan>(){}[0]
        final val TriangleStrip // androidx.compose.ui.graphics/VertexMode.Companion.TriangleStrip|{}TriangleStrip[0]
            final fun <get-TriangleStrip>(): androidx.compose.ui.graphics/VertexMode // androidx.compose.ui.graphics/VertexMode.Companion.TriangleStrip.<get-TriangleStrip>|<get-TriangleStrip>(){}[0]
        final val Triangles // androidx.compose.ui.graphics/VertexMode.Companion.Triangles|{}Triangles[0]
            final fun <get-Triangles>(): androidx.compose.ui.graphics/VertexMode // androidx.compose.ui.graphics/VertexMode.Companion.Triangles.<get-Triangles>|<get-Triangles>(){}[0]
    }
}

open class <#A: kotlin/Any?> androidx.compose.ui.graphics/Interval { // androidx.compose.ui.graphics/Interval|null[0]
    constructor <init>(kotlin/Float, kotlin/Float, #A? = ...) // androidx.compose.ui.graphics/Interval.<init>|<init>(kotlin.Float;kotlin.Float;1:0?){}[0]

    final val data // androidx.compose.ui.graphics/Interval.data|{}data[0]
        final fun <get-data>(): #A? // androidx.compose.ui.graphics/Interval.data.<get-data>|<get-data>(){}[0]
    final val end // androidx.compose.ui.graphics/Interval.end|{}end[0]
        final fun <get-end>(): kotlin/Float // androidx.compose.ui.graphics/Interval.end.<get-end>|<get-end>(){}[0]
    final val start // androidx.compose.ui.graphics/Interval.start|{}start[0]
        final fun <get-start>(): kotlin/Float // androidx.compose.ui.graphics/Interval.start.<get-start>|<get-start>(){}[0]

    final fun contains(kotlin/Float): kotlin/Boolean // androidx.compose.ui.graphics/Interval.contains|contains(kotlin.Float){}[0]
    final fun overlaps(androidx.compose.ui.graphics/Interval<#A>): kotlin/Boolean // androidx.compose.ui.graphics/Interval.overlaps|overlaps(androidx.compose.ui.graphics.Interval<1:0>){}[0]
    final fun overlaps(kotlin/Float, kotlin/Float): kotlin/Boolean // androidx.compose.ui.graphics/Interval.overlaps|overlaps(kotlin.Float;kotlin.Float){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/Interval.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/Interval.hashCode|hashCode(){}[0]
    open fun toString(): kotlin/String // androidx.compose.ui.graphics/Interval.toString|toString(){}[0]
}

open class androidx.compose.ui.graphics.colorspace/Connector { // androidx.compose.ui.graphics.colorspace/Connector|null[0]
    final val destination // androidx.compose.ui.graphics.colorspace/Connector.destination|{}destination[0]
        final fun <get-destination>(): androidx.compose.ui.graphics.colorspace/ColorSpace // androidx.compose.ui.graphics.colorspace/Connector.destination.<get-destination>|<get-destination>(){}[0]
    final val renderIntent // androidx.compose.ui.graphics.colorspace/Connector.renderIntent|{}renderIntent[0]
        final fun <get-renderIntent>(): androidx.compose.ui.graphics.colorspace/RenderIntent // androidx.compose.ui.graphics.colorspace/Connector.renderIntent.<get-renderIntent>|<get-renderIntent>(){}[0]
    final val source // androidx.compose.ui.graphics.colorspace/Connector.source|{}source[0]
        final fun <get-source>(): androidx.compose.ui.graphics.colorspace/ColorSpace // androidx.compose.ui.graphics.colorspace/Connector.source.<get-source>|<get-source>(){}[0]

    final fun transform(kotlin/Float, kotlin/Float, kotlin/Float): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Connector.transform|transform(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    open fun transform(kotlin/FloatArray): kotlin/FloatArray // androidx.compose.ui.graphics.colorspace/Connector.transform|transform(kotlin.FloatArray){}[0]
}

open class androidx.compose.ui.graphics/ColorFilter { // androidx.compose.ui.graphics/ColorFilter|null[0]
    final object Companion { // androidx.compose.ui.graphics/ColorFilter.Companion|null[0]
        final fun colorMatrix(androidx.compose.ui.graphics/ColorMatrix): androidx.compose.ui.graphics/ColorFilter // androidx.compose.ui.graphics/ColorFilter.Companion.colorMatrix|colorMatrix(androidx.compose.ui.graphics.ColorMatrix){}[0]
        final fun lighting(androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color): androidx.compose.ui.graphics/ColorFilter // androidx.compose.ui.graphics/ColorFilter.Companion.lighting|lighting(androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color){}[0]
        final fun tint(androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/BlendMode = ...): androidx.compose.ui.graphics/ColorFilter // androidx.compose.ui.graphics/ColorFilter.Companion.tint|tint(androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.BlendMode){}[0]
    }
}

sealed class androidx.compose.ui.graphics.drawscope/DrawStyle // androidx.compose.ui.graphics.drawscope/DrawStyle|null[0]

sealed class androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode|null[0]
    final val isCurve // androidx.compose.ui.graphics.vector/PathNode.isCurve|{}isCurve[0]
        final fun <get-isCurve>(): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.isCurve.<get-isCurve>|<get-isCurve>(){}[0]
    final val isQuad // androidx.compose.ui.graphics.vector/PathNode.isQuad|{}isQuad[0]
        final fun <get-isQuad>(): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.isQuad.<get-isQuad>|<get-isQuad>(){}[0]

    final class ArcTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.ArcTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Boolean, kotlin/Boolean, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.ArcTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Boolean;kotlin.Boolean;kotlin.Float;kotlin.Float){}[0]

        final val arcStartX // androidx.compose.ui.graphics.vector/PathNode.ArcTo.arcStartX|{}arcStartX[0]
            final fun <get-arcStartX>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ArcTo.arcStartX.<get-arcStartX>|<get-arcStartX>(){}[0]
        final val arcStartY // androidx.compose.ui.graphics.vector/PathNode.ArcTo.arcStartY|{}arcStartY[0]
            final fun <get-arcStartY>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ArcTo.arcStartY.<get-arcStartY>|<get-arcStartY>(){}[0]
        final val horizontalEllipseRadius // androidx.compose.ui.graphics.vector/PathNode.ArcTo.horizontalEllipseRadius|{}horizontalEllipseRadius[0]
            final fun <get-horizontalEllipseRadius>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ArcTo.horizontalEllipseRadius.<get-horizontalEllipseRadius>|<get-horizontalEllipseRadius>(){}[0]
        final val isMoreThanHalf // androidx.compose.ui.graphics.vector/PathNode.ArcTo.isMoreThanHalf|{}isMoreThanHalf[0]
            final fun <get-isMoreThanHalf>(): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.ArcTo.isMoreThanHalf.<get-isMoreThanHalf>|<get-isMoreThanHalf>(){}[0]
        final val isPositiveArc // androidx.compose.ui.graphics.vector/PathNode.ArcTo.isPositiveArc|{}isPositiveArc[0]
            final fun <get-isPositiveArc>(): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.ArcTo.isPositiveArc.<get-isPositiveArc>|<get-isPositiveArc>(){}[0]
        final val theta // androidx.compose.ui.graphics.vector/PathNode.ArcTo.theta|{}theta[0]
            final fun <get-theta>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ArcTo.theta.<get-theta>|<get-theta>(){}[0]
        final val verticalEllipseRadius // androidx.compose.ui.graphics.vector/PathNode.ArcTo.verticalEllipseRadius|{}verticalEllipseRadius[0]
            final fun <get-verticalEllipseRadius>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ArcTo.verticalEllipseRadius.<get-verticalEllipseRadius>|<get-verticalEllipseRadius>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ArcTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ArcTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ArcTo.component3|component3(){}[0]
        final fun component4(): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.ArcTo.component4|component4(){}[0]
        final fun component5(): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.ArcTo.component5|component5(){}[0]
        final fun component6(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ArcTo.component6|component6(){}[0]
        final fun component7(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ArcTo.component7|component7(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.ArcTo // androidx.compose.ui.graphics.vector/PathNode.ArcTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Boolean;kotlin.Boolean;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.ArcTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.ArcTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.ArcTo.toString|toString(){}[0]
    }

    final class CurveTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.CurveTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.CurveTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

        final val x1 // androidx.compose.ui.graphics.vector/PathNode.CurveTo.x1|{}x1[0]
            final fun <get-x1>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.CurveTo.x1.<get-x1>|<get-x1>(){}[0]
        final val x2 // androidx.compose.ui.graphics.vector/PathNode.CurveTo.x2|{}x2[0]
            final fun <get-x2>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.CurveTo.x2.<get-x2>|<get-x2>(){}[0]
        final val x3 // androidx.compose.ui.graphics.vector/PathNode.CurveTo.x3|{}x3[0]
            final fun <get-x3>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.CurveTo.x3.<get-x3>|<get-x3>(){}[0]
        final val y1 // androidx.compose.ui.graphics.vector/PathNode.CurveTo.y1|{}y1[0]
            final fun <get-y1>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.CurveTo.y1.<get-y1>|<get-y1>(){}[0]
        final val y2 // androidx.compose.ui.graphics.vector/PathNode.CurveTo.y2|{}y2[0]
            final fun <get-y2>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.CurveTo.y2.<get-y2>|<get-y2>(){}[0]
        final val y3 // androidx.compose.ui.graphics.vector/PathNode.CurveTo.y3|{}y3[0]
            final fun <get-y3>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.CurveTo.y3.<get-y3>|<get-y3>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.CurveTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.CurveTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.CurveTo.component3|component3(){}[0]
        final fun component4(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.CurveTo.component4|component4(){}[0]
        final fun component5(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.CurveTo.component5|component5(){}[0]
        final fun component6(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.CurveTo.component6|component6(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.CurveTo // androidx.compose.ui.graphics.vector/PathNode.CurveTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.CurveTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.CurveTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.CurveTo.toString|toString(){}[0]
    }

    final class HorizontalTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.HorizontalTo|null[0]
        constructor <init>(kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.HorizontalTo.<init>|<init>(kotlin.Float){}[0]

        final val x // androidx.compose.ui.graphics.vector/PathNode.HorizontalTo.x|{}x[0]
            final fun <get-x>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.HorizontalTo.x.<get-x>|<get-x>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.HorizontalTo.component1|component1(){}[0]
        final fun copy(kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.HorizontalTo // androidx.compose.ui.graphics.vector/PathNode.HorizontalTo.copy|copy(kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.HorizontalTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.HorizontalTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.HorizontalTo.toString|toString(){}[0]
    }

    final class LineTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.LineTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.LineTo.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

        final val x // androidx.compose.ui.graphics.vector/PathNode.LineTo.x|{}x[0]
            final fun <get-x>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.LineTo.x.<get-x>|<get-x>(){}[0]
        final val y // androidx.compose.ui.graphics.vector/PathNode.LineTo.y|{}y[0]
            final fun <get-y>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.LineTo.y.<get-y>|<get-y>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.LineTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.LineTo.component2|component2(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.LineTo // androidx.compose.ui.graphics.vector/PathNode.LineTo.copy|copy(kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.LineTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.LineTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.LineTo.toString|toString(){}[0]
    }

    final class MoveTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.MoveTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.MoveTo.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

        final val x // androidx.compose.ui.graphics.vector/PathNode.MoveTo.x|{}x[0]
            final fun <get-x>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.MoveTo.x.<get-x>|<get-x>(){}[0]
        final val y // androidx.compose.ui.graphics.vector/PathNode.MoveTo.y|{}y[0]
            final fun <get-y>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.MoveTo.y.<get-y>|<get-y>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.MoveTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.MoveTo.component2|component2(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.MoveTo // androidx.compose.ui.graphics.vector/PathNode.MoveTo.copy|copy(kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.MoveTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.MoveTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.MoveTo.toString|toString(){}[0]
    }

    final class QuadTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.QuadTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.QuadTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

        final val x1 // androidx.compose.ui.graphics.vector/PathNode.QuadTo.x1|{}x1[0]
            final fun <get-x1>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.QuadTo.x1.<get-x1>|<get-x1>(){}[0]
        final val x2 // androidx.compose.ui.graphics.vector/PathNode.QuadTo.x2|{}x2[0]
            final fun <get-x2>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.QuadTo.x2.<get-x2>|<get-x2>(){}[0]
        final val y1 // androidx.compose.ui.graphics.vector/PathNode.QuadTo.y1|{}y1[0]
            final fun <get-y1>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.QuadTo.y1.<get-y1>|<get-y1>(){}[0]
        final val y2 // androidx.compose.ui.graphics.vector/PathNode.QuadTo.y2|{}y2[0]
            final fun <get-y2>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.QuadTo.y2.<get-y2>|<get-y2>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.QuadTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.QuadTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.QuadTo.component3|component3(){}[0]
        final fun component4(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.QuadTo.component4|component4(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.QuadTo // androidx.compose.ui.graphics.vector/PathNode.QuadTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.QuadTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.QuadTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.QuadTo.toString|toString(){}[0]
    }

    final class ReflectiveCurveTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

        final val x1 // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.x1|{}x1[0]
            final fun <get-x1>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.x1.<get-x1>|<get-x1>(){}[0]
        final val x2 // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.x2|{}x2[0]
            final fun <get-x2>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.x2.<get-x2>|<get-x2>(){}[0]
        final val y1 // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.y1|{}y1[0]
            final fun <get-y1>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.y1.<get-y1>|<get-y1>(){}[0]
        final val y2 // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.y2|{}y2[0]
            final fun <get-y2>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.y2.<get-y2>|<get-y2>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.component3|component3(){}[0]
        final fun component4(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.component4|component4(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.ReflectiveCurveTo.toString|toString(){}[0]
    }

    final class ReflectiveQuadTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.ReflectiveQuadTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.ReflectiveQuadTo.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

        final val x // androidx.compose.ui.graphics.vector/PathNode.ReflectiveQuadTo.x|{}x[0]
            final fun <get-x>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ReflectiveQuadTo.x.<get-x>|<get-x>(){}[0]
        final val y // androidx.compose.ui.graphics.vector/PathNode.ReflectiveQuadTo.y|{}y[0]
            final fun <get-y>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ReflectiveQuadTo.y.<get-y>|<get-y>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ReflectiveQuadTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.ReflectiveQuadTo.component2|component2(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.ReflectiveQuadTo // androidx.compose.ui.graphics.vector/PathNode.ReflectiveQuadTo.copy|copy(kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.ReflectiveQuadTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.ReflectiveQuadTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.ReflectiveQuadTo.toString|toString(){}[0]
    }

    final class RelativeArcTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Boolean, kotlin/Boolean, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Boolean;kotlin.Boolean;kotlin.Float;kotlin.Float){}[0]

        final val arcStartDx // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.arcStartDx|{}arcStartDx[0]
            final fun <get-arcStartDx>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.arcStartDx.<get-arcStartDx>|<get-arcStartDx>(){}[0]
        final val arcStartDy // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.arcStartDy|{}arcStartDy[0]
            final fun <get-arcStartDy>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.arcStartDy.<get-arcStartDy>|<get-arcStartDy>(){}[0]
        final val horizontalEllipseRadius // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.horizontalEllipseRadius|{}horizontalEllipseRadius[0]
            final fun <get-horizontalEllipseRadius>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.horizontalEllipseRadius.<get-horizontalEllipseRadius>|<get-horizontalEllipseRadius>(){}[0]
        final val isMoreThanHalf // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.isMoreThanHalf|{}isMoreThanHalf[0]
            final fun <get-isMoreThanHalf>(): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.isMoreThanHalf.<get-isMoreThanHalf>|<get-isMoreThanHalf>(){}[0]
        final val isPositiveArc // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.isPositiveArc|{}isPositiveArc[0]
            final fun <get-isPositiveArc>(): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.isPositiveArc.<get-isPositiveArc>|<get-isPositiveArc>(){}[0]
        final val theta // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.theta|{}theta[0]
            final fun <get-theta>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.theta.<get-theta>|<get-theta>(){}[0]
        final val verticalEllipseRadius // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.verticalEllipseRadius|{}verticalEllipseRadius[0]
            final fun <get-verticalEllipseRadius>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.verticalEllipseRadius.<get-verticalEllipseRadius>|<get-verticalEllipseRadius>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.component3|component3(){}[0]
        final fun component4(): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.component4|component4(){}[0]
        final fun component5(): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.component5|component5(){}[0]
        final fun component6(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.component6|component6(){}[0]
        final fun component7(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.component7|component7(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Boolean;kotlin.Boolean;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.RelativeArcTo.toString|toString(){}[0]
    }

    final class RelativeCurveTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

        final val dx1 // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.dx1|{}dx1[0]
            final fun <get-dx1>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.dx1.<get-dx1>|<get-dx1>(){}[0]
        final val dx2 // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.dx2|{}dx2[0]
            final fun <get-dx2>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.dx2.<get-dx2>|<get-dx2>(){}[0]
        final val dx3 // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.dx3|{}dx3[0]
            final fun <get-dx3>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.dx3.<get-dx3>|<get-dx3>(){}[0]
        final val dy1 // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.dy1|{}dy1[0]
            final fun <get-dy1>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.dy1.<get-dy1>|<get-dy1>(){}[0]
        final val dy2 // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.dy2|{}dy2[0]
            final fun <get-dy2>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.dy2.<get-dy2>|<get-dy2>(){}[0]
        final val dy3 // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.dy3|{}dy3[0]
            final fun <get-dy3>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.dy3.<get-dy3>|<get-dy3>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.component3|component3(){}[0]
        final fun component4(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.component4|component4(){}[0]
        final fun component5(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.component5|component5(){}[0]
        final fun component6(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.component6|component6(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.RelativeCurveTo.toString|toString(){}[0]
    }

    final class RelativeHorizontalTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.RelativeHorizontalTo|null[0]
        constructor <init>(kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.RelativeHorizontalTo.<init>|<init>(kotlin.Float){}[0]

        final val dx // androidx.compose.ui.graphics.vector/PathNode.RelativeHorizontalTo.dx|{}dx[0]
            final fun <get-dx>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeHorizontalTo.dx.<get-dx>|<get-dx>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeHorizontalTo.component1|component1(){}[0]
        final fun copy(kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.RelativeHorizontalTo // androidx.compose.ui.graphics.vector/PathNode.RelativeHorizontalTo.copy|copy(kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.RelativeHorizontalTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.RelativeHorizontalTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.RelativeHorizontalTo.toString|toString(){}[0]
    }

    final class RelativeLineTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.RelativeLineTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.RelativeLineTo.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

        final val dx // androidx.compose.ui.graphics.vector/PathNode.RelativeLineTo.dx|{}dx[0]
            final fun <get-dx>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeLineTo.dx.<get-dx>|<get-dx>(){}[0]
        final val dy // androidx.compose.ui.graphics.vector/PathNode.RelativeLineTo.dy|{}dy[0]
            final fun <get-dy>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeLineTo.dy.<get-dy>|<get-dy>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeLineTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeLineTo.component2|component2(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.RelativeLineTo // androidx.compose.ui.graphics.vector/PathNode.RelativeLineTo.copy|copy(kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.RelativeLineTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.RelativeLineTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.RelativeLineTo.toString|toString(){}[0]
    }

    final class RelativeMoveTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.RelativeMoveTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.RelativeMoveTo.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

        final val dx // androidx.compose.ui.graphics.vector/PathNode.RelativeMoveTo.dx|{}dx[0]
            final fun <get-dx>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeMoveTo.dx.<get-dx>|<get-dx>(){}[0]
        final val dy // androidx.compose.ui.graphics.vector/PathNode.RelativeMoveTo.dy|{}dy[0]
            final fun <get-dy>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeMoveTo.dy.<get-dy>|<get-dy>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeMoveTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeMoveTo.component2|component2(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.RelativeMoveTo // androidx.compose.ui.graphics.vector/PathNode.RelativeMoveTo.copy|copy(kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.RelativeMoveTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.RelativeMoveTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.RelativeMoveTo.toString|toString(){}[0]
    }

    final class RelativeQuadTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

        final val dx1 // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.dx1|{}dx1[0]
            final fun <get-dx1>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.dx1.<get-dx1>|<get-dx1>(){}[0]
        final val dx2 // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.dx2|{}dx2[0]
            final fun <get-dx2>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.dx2.<get-dx2>|<get-dx2>(){}[0]
        final val dy1 // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.dy1|{}dy1[0]
            final fun <get-dy1>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.dy1.<get-dy1>|<get-dy1>(){}[0]
        final val dy2 // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.dy2|{}dy2[0]
            final fun <get-dy2>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.dy2.<get-dy2>|<get-dy2>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.component3|component3(){}[0]
        final fun component4(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.component4|component4(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.RelativeQuadTo.toString|toString(){}[0]
    }

    final class RelativeReflectiveCurveTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

        final val dx1 // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.dx1|{}dx1[0]
            final fun <get-dx1>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.dx1.<get-dx1>|<get-dx1>(){}[0]
        final val dx2 // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.dx2|{}dx2[0]
            final fun <get-dx2>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.dx2.<get-dx2>|<get-dx2>(){}[0]
        final val dy1 // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.dy1|{}dy1[0]
            final fun <get-dy1>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.dy1.<get-dy1>|<get-dy1>(){}[0]
        final val dy2 // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.dy2|{}dy2[0]
            final fun <get-dy2>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.dy2.<get-dy2>|<get-dy2>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.component3|component3(){}[0]
        final fun component4(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.component4|component4(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveCurveTo.toString|toString(){}[0]
    }

    final class RelativeReflectiveQuadTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveQuadTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveQuadTo.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

        final val dx // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveQuadTo.dx|{}dx[0]
            final fun <get-dx>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveQuadTo.dx.<get-dx>|<get-dx>(){}[0]
        final val dy // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveQuadTo.dy|{}dy[0]
            final fun <get-dy>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveQuadTo.dy.<get-dy>|<get-dy>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveQuadTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveQuadTo.component2|component2(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveQuadTo // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveQuadTo.copy|copy(kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveQuadTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveQuadTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.RelativeReflectiveQuadTo.toString|toString(){}[0]
    }

    final class RelativeVerticalTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.RelativeVerticalTo|null[0]
        constructor <init>(kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.RelativeVerticalTo.<init>|<init>(kotlin.Float){}[0]

        final val dy // androidx.compose.ui.graphics.vector/PathNode.RelativeVerticalTo.dy|{}dy[0]
            final fun <get-dy>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeVerticalTo.dy.<get-dy>|<get-dy>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.RelativeVerticalTo.component1|component1(){}[0]
        final fun copy(kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.RelativeVerticalTo // androidx.compose.ui.graphics.vector/PathNode.RelativeVerticalTo.copy|copy(kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.RelativeVerticalTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.RelativeVerticalTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.RelativeVerticalTo.toString|toString(){}[0]
    }

    final class VerticalTo : androidx.compose.ui.graphics.vector/PathNode { // androidx.compose.ui.graphics.vector/PathNode.VerticalTo|null[0]
        constructor <init>(kotlin/Float) // androidx.compose.ui.graphics.vector/PathNode.VerticalTo.<init>|<init>(kotlin.Float){}[0]

        final val y // androidx.compose.ui.graphics.vector/PathNode.VerticalTo.y|{}y[0]
            final fun <get-y>(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.VerticalTo.y.<get-y>|<get-y>(){}[0]

        final fun component1(): kotlin/Float // androidx.compose.ui.graphics.vector/PathNode.VerticalTo.component1|component1(){}[0]
        final fun copy(kotlin/Float = ...): androidx.compose.ui.graphics.vector/PathNode.VerticalTo // androidx.compose.ui.graphics.vector/PathNode.VerticalTo.copy|copy(kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/PathNode.VerticalTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/PathNode.VerticalTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.graphics.vector/PathNode.VerticalTo.toString|toString(){}[0]
    }

    final object Close : androidx.compose.ui.graphics.vector/PathNode // androidx.compose.ui.graphics.vector/PathNode.Close|null[0]
}

sealed class androidx.compose.ui.graphics/Brush { // androidx.compose.ui.graphics/Brush|null[0]
    open val intrinsicSize // androidx.compose.ui.graphics/Brush.intrinsicSize|{}intrinsicSize[0]
        open fun <get-intrinsicSize>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics/Brush.intrinsicSize.<get-intrinsicSize>|<get-intrinsicSize>(){}[0]

    abstract fun applyTo(androidx.compose.ui.geometry/Size, androidx.compose.ui.graphics/Paint, kotlin/Float) // androidx.compose.ui.graphics/Brush.applyTo|applyTo(androidx.compose.ui.geometry.Size;androidx.compose.ui.graphics.Paint;kotlin.Float){}[0]

    final object Companion { // androidx.compose.ui.graphics/Brush.Companion|null[0]
        final fun horizontalGradient(kotlin.collections/List<androidx.compose.ui.graphics/Color>, kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/TileMode = ...): androidx.compose.ui.graphics/Brush // androidx.compose.ui.graphics/Brush.Companion.horizontalGradient|horizontalGradient(kotlin.collections.List<androidx.compose.ui.graphics.Color>;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.TileMode){}[0]
        final fun horizontalGradient(kotlin/Array<out kotlin/Pair<kotlin/Float, androidx.compose.ui.graphics/Color>>..., kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/TileMode = ...): androidx.compose.ui.graphics/Brush // androidx.compose.ui.graphics/Brush.Companion.horizontalGradient|horizontalGradient(kotlin.Array<out|kotlin.Pair<kotlin.Float,androidx.compose.ui.graphics.Color>>...;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.TileMode){}[0]
        final fun linearGradient(kotlin.collections/List<androidx.compose.ui.graphics/Color>, androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.graphics/TileMode = ...): androidx.compose.ui.graphics/Brush // androidx.compose.ui.graphics/Brush.Companion.linearGradient|linearGradient(kotlin.collections.List<androidx.compose.ui.graphics.Color>;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Offset;androidx.compose.ui.graphics.TileMode){}[0]
        final fun linearGradient(kotlin/Array<out kotlin/Pair<kotlin/Float, androidx.compose.ui.graphics/Color>>..., androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.geometry/Offset = ..., androidx.compose.ui.graphics/TileMode = ...): androidx.compose.ui.graphics/Brush // androidx.compose.ui.graphics/Brush.Companion.linearGradient|linearGradient(kotlin.Array<out|kotlin.Pair<kotlin.Float,androidx.compose.ui.graphics.Color>>...;androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Offset;androidx.compose.ui.graphics.TileMode){}[0]
        final fun radialGradient(kotlin.collections/List<androidx.compose.ui.graphics/Color>, androidx.compose.ui.geometry/Offset = ..., kotlin/Float = ..., androidx.compose.ui.graphics/TileMode = ...): androidx.compose.ui.graphics/Brush // androidx.compose.ui.graphics/Brush.Companion.radialGradient|radialGradient(kotlin.collections.List<androidx.compose.ui.graphics.Color>;androidx.compose.ui.geometry.Offset;kotlin.Float;androidx.compose.ui.graphics.TileMode){}[0]
        final fun radialGradient(kotlin/Array<out kotlin/Pair<kotlin/Float, androidx.compose.ui.graphics/Color>>..., androidx.compose.ui.geometry/Offset = ..., kotlin/Float = ..., androidx.compose.ui.graphics/TileMode = ...): androidx.compose.ui.graphics/Brush // androidx.compose.ui.graphics/Brush.Companion.radialGradient|radialGradient(kotlin.Array<out|kotlin.Pair<kotlin.Float,androidx.compose.ui.graphics.Color>>...;androidx.compose.ui.geometry.Offset;kotlin.Float;androidx.compose.ui.graphics.TileMode){}[0]
        final fun sweepGradient(kotlin.collections/List<androidx.compose.ui.graphics/Color>, androidx.compose.ui.geometry/Offset = ...): androidx.compose.ui.graphics/Brush // androidx.compose.ui.graphics/Brush.Companion.sweepGradient|sweepGradient(kotlin.collections.List<androidx.compose.ui.graphics.Color>;androidx.compose.ui.geometry.Offset){}[0]
        final fun sweepGradient(kotlin/Array<out kotlin/Pair<kotlin/Float, androidx.compose.ui.graphics/Color>>..., androidx.compose.ui.geometry/Offset = ...): androidx.compose.ui.graphics/Brush // androidx.compose.ui.graphics/Brush.Companion.sweepGradient|sweepGradient(kotlin.Array<out|kotlin.Pair<kotlin.Float,androidx.compose.ui.graphics.Color>>...;androidx.compose.ui.geometry.Offset){}[0]
        final fun verticalGradient(kotlin.collections/List<androidx.compose.ui.graphics/Color>, kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/TileMode = ...): androidx.compose.ui.graphics/Brush // androidx.compose.ui.graphics/Brush.Companion.verticalGradient|verticalGradient(kotlin.collections.List<androidx.compose.ui.graphics.Color>;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.TileMode){}[0]
        final fun verticalGradient(kotlin/Array<out kotlin/Pair<kotlin/Float, androidx.compose.ui.graphics/Color>>..., kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/TileMode = ...): androidx.compose.ui.graphics/Brush // androidx.compose.ui.graphics/Brush.Companion.verticalGradient|verticalGradient(kotlin.Array<out|kotlin.Pair<kotlin.Float,androidx.compose.ui.graphics.Color>>...;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.TileMode){}[0]
    }
}

sealed class androidx.compose.ui.graphics/Outline { // androidx.compose.ui.graphics/Outline|null[0]
    abstract val bounds // androidx.compose.ui.graphics/Outline.bounds|{}bounds[0]
        abstract fun <get-bounds>(): androidx.compose.ui.geometry/Rect // androidx.compose.ui.graphics/Outline.bounds.<get-bounds>|<get-bounds>(){}[0]

    final class Generic : androidx.compose.ui.graphics/Outline { // androidx.compose.ui.graphics/Outline.Generic|null[0]
        constructor <init>(androidx.compose.ui.graphics/Path) // androidx.compose.ui.graphics/Outline.Generic.<init>|<init>(androidx.compose.ui.graphics.Path){}[0]

        final val bounds // androidx.compose.ui.graphics/Outline.Generic.bounds|{}bounds[0]
            final fun <get-bounds>(): androidx.compose.ui.geometry/Rect // androidx.compose.ui.graphics/Outline.Generic.bounds.<get-bounds>|<get-bounds>(){}[0]
        final val path // androidx.compose.ui.graphics/Outline.Generic.path|{}path[0]
            final fun <get-path>(): androidx.compose.ui.graphics/Path // androidx.compose.ui.graphics/Outline.Generic.path.<get-path>|<get-path>(){}[0]
    }

    final class Rectangle : androidx.compose.ui.graphics/Outline { // androidx.compose.ui.graphics/Outline.Rectangle|null[0]
        constructor <init>(androidx.compose.ui.geometry/Rect) // androidx.compose.ui.graphics/Outline.Rectangle.<init>|<init>(androidx.compose.ui.geometry.Rect){}[0]

        final val bounds // androidx.compose.ui.graphics/Outline.Rectangle.bounds|{}bounds[0]
            final fun <get-bounds>(): androidx.compose.ui.geometry/Rect // androidx.compose.ui.graphics/Outline.Rectangle.bounds.<get-bounds>|<get-bounds>(){}[0]
        final val rect // androidx.compose.ui.graphics/Outline.Rectangle.rect|{}rect[0]
            final fun <get-rect>(): androidx.compose.ui.geometry/Rect // androidx.compose.ui.graphics/Outline.Rectangle.rect.<get-rect>|<get-rect>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/Outline.Rectangle.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/Outline.Rectangle.hashCode|hashCode(){}[0]
    }

    final class Rounded : androidx.compose.ui.graphics/Outline { // androidx.compose.ui.graphics/Outline.Rounded|null[0]
        constructor <init>(androidx.compose.ui.geometry/RoundRect) // androidx.compose.ui.graphics/Outline.Rounded.<init>|<init>(androidx.compose.ui.geometry.RoundRect){}[0]

        final val bounds // androidx.compose.ui.graphics/Outline.Rounded.bounds|{}bounds[0]
            final fun <get-bounds>(): androidx.compose.ui.geometry/Rect // androidx.compose.ui.graphics/Outline.Rounded.bounds.<get-bounds>|<get-bounds>(){}[0]
        final val roundRect // androidx.compose.ui.graphics/Outline.Rounded.roundRect|{}roundRect[0]
            final fun <get-roundRect>(): androidx.compose.ui.geometry/RoundRect // androidx.compose.ui.graphics/Outline.Rounded.roundRect.<get-roundRect>|<get-roundRect>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/Outline.Rounded.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/Outline.Rounded.hashCode|hashCode(){}[0]
    }
}

sealed class androidx.compose.ui.graphics/RenderEffect { // androidx.compose.ui.graphics/RenderEffect|null[0]
    open fun isSupported(): kotlin/Boolean // androidx.compose.ui.graphics/RenderEffect.isSupported|isSupported(){}[0]
}

final object androidx.compose.ui.graphics.colorspace/ColorSpaces { // androidx.compose.ui.graphics.colorspace/ColorSpaces|null[0]
    final val Aces // androidx.compose.ui.graphics.colorspace/ColorSpaces.Aces|{}Aces[0]
        final fun <get-Aces>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.Aces.<get-Aces>|<get-Aces>(){}[0]
    final val Acescg // androidx.compose.ui.graphics.colorspace/ColorSpaces.Acescg|{}Acescg[0]
        final fun <get-Acescg>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.Acescg.<get-Acescg>|<get-Acescg>(){}[0]
    final val AdobeRgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.AdobeRgb|{}AdobeRgb[0]
        final fun <get-AdobeRgb>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.AdobeRgb.<get-AdobeRgb>|<get-AdobeRgb>(){}[0]
    final val Bt2020 // androidx.compose.ui.graphics.colorspace/ColorSpaces.Bt2020|{}Bt2020[0]
        final fun <get-Bt2020>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.Bt2020.<get-Bt2020>|<get-Bt2020>(){}[0]
    final val Bt2020Hlg // androidx.compose.ui.graphics.colorspace/ColorSpaces.Bt2020Hlg|{}Bt2020Hlg[0]
        final fun <get-Bt2020Hlg>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.Bt2020Hlg.<get-Bt2020Hlg>|<get-Bt2020Hlg>(){}[0]
    final val Bt2020Pq // androidx.compose.ui.graphics.colorspace/ColorSpaces.Bt2020Pq|{}Bt2020Pq[0]
        final fun <get-Bt2020Pq>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.Bt2020Pq.<get-Bt2020Pq>|<get-Bt2020Pq>(){}[0]
    final val Bt709 // androidx.compose.ui.graphics.colorspace/ColorSpaces.Bt709|{}Bt709[0]
        final fun <get-Bt709>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.Bt709.<get-Bt709>|<get-Bt709>(){}[0]
    final val CieLab // androidx.compose.ui.graphics.colorspace/ColorSpaces.CieLab|{}CieLab[0]
        final fun <get-CieLab>(): androidx.compose.ui.graphics.colorspace/ColorSpace // androidx.compose.ui.graphics.colorspace/ColorSpaces.CieLab.<get-CieLab>|<get-CieLab>(){}[0]
    final val CieXyz // androidx.compose.ui.graphics.colorspace/ColorSpaces.CieXyz|{}CieXyz[0]
        final fun <get-CieXyz>(): androidx.compose.ui.graphics.colorspace/ColorSpace // androidx.compose.ui.graphics.colorspace/ColorSpaces.CieXyz.<get-CieXyz>|<get-CieXyz>(){}[0]
    final val DciP3 // androidx.compose.ui.graphics.colorspace/ColorSpaces.DciP3|{}DciP3[0]
        final fun <get-DciP3>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.DciP3.<get-DciP3>|<get-DciP3>(){}[0]
    final val DisplayP3 // androidx.compose.ui.graphics.colorspace/ColorSpaces.DisplayP3|{}DisplayP3[0]
        final fun <get-DisplayP3>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.DisplayP3.<get-DisplayP3>|<get-DisplayP3>(){}[0]
    final val ExtendedSrgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.ExtendedSrgb|{}ExtendedSrgb[0]
        final fun <get-ExtendedSrgb>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.ExtendedSrgb.<get-ExtendedSrgb>|<get-ExtendedSrgb>(){}[0]
    final val LinearExtendedSrgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.LinearExtendedSrgb|{}LinearExtendedSrgb[0]
        final fun <get-LinearExtendedSrgb>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.LinearExtendedSrgb.<get-LinearExtendedSrgb>|<get-LinearExtendedSrgb>(){}[0]
    final val LinearSrgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.LinearSrgb|{}LinearSrgb[0]
        final fun <get-LinearSrgb>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.LinearSrgb.<get-LinearSrgb>|<get-LinearSrgb>(){}[0]
    final val Ntsc1953 // androidx.compose.ui.graphics.colorspace/ColorSpaces.Ntsc1953|{}Ntsc1953[0]
        final fun <get-Ntsc1953>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.Ntsc1953.<get-Ntsc1953>|<get-Ntsc1953>(){}[0]
    final val Oklab // androidx.compose.ui.graphics.colorspace/ColorSpaces.Oklab|{}Oklab[0]
        final fun <get-Oklab>(): androidx.compose.ui.graphics.colorspace/ColorSpace // androidx.compose.ui.graphics.colorspace/ColorSpaces.Oklab.<get-Oklab>|<get-Oklab>(){}[0]
    final val ProPhotoRgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.ProPhotoRgb|{}ProPhotoRgb[0]
        final fun <get-ProPhotoRgb>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.ProPhotoRgb.<get-ProPhotoRgb>|<get-ProPhotoRgb>(){}[0]
    final val SmpteC // androidx.compose.ui.graphics.colorspace/ColorSpaces.SmpteC|{}SmpteC[0]
        final fun <get-SmpteC>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.SmpteC.<get-SmpteC>|<get-SmpteC>(){}[0]
    final val Srgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.Srgb|{}Srgb[0]
        final fun <get-Srgb>(): androidx.compose.ui.graphics.colorspace/Rgb // androidx.compose.ui.graphics.colorspace/ColorSpaces.Srgb.<get-Srgb>|<get-Srgb>(){}[0]

    final fun match(kotlin/FloatArray, androidx.compose.ui.graphics.colorspace/TransferParameters): androidx.compose.ui.graphics.colorspace/ColorSpace? // androidx.compose.ui.graphics.colorspace/ColorSpaces.match|match(kotlin.FloatArray;androidx.compose.ui.graphics.colorspace.TransferParameters){}[0]
}

final object androidx.compose.ui.graphics.colorspace/Illuminant { // androidx.compose.ui.graphics.colorspace/Illuminant|null[0]
    final val A // androidx.compose.ui.graphics.colorspace/Illuminant.A|{}A[0]
        final fun <get-A>(): androidx.compose.ui.graphics.colorspace/WhitePoint // androidx.compose.ui.graphics.colorspace/Illuminant.A.<get-A>|<get-A>(){}[0]
    final val B // androidx.compose.ui.graphics.colorspace/Illuminant.B|{}B[0]
        final fun <get-B>(): androidx.compose.ui.graphics.colorspace/WhitePoint // androidx.compose.ui.graphics.colorspace/Illuminant.B.<get-B>|<get-B>(){}[0]
    final val C // androidx.compose.ui.graphics.colorspace/Illuminant.C|{}C[0]
        final fun <get-C>(): androidx.compose.ui.graphics.colorspace/WhitePoint // androidx.compose.ui.graphics.colorspace/Illuminant.C.<get-C>|<get-C>(){}[0]
    final val D50 // androidx.compose.ui.graphics.colorspace/Illuminant.D50|{}D50[0]
        final fun <get-D50>(): androidx.compose.ui.graphics.colorspace/WhitePoint // androidx.compose.ui.graphics.colorspace/Illuminant.D50.<get-D50>|<get-D50>(){}[0]
    final val D55 // androidx.compose.ui.graphics.colorspace/Illuminant.D55|{}D55[0]
        final fun <get-D55>(): androidx.compose.ui.graphics.colorspace/WhitePoint // androidx.compose.ui.graphics.colorspace/Illuminant.D55.<get-D55>|<get-D55>(){}[0]
    final val D60 // androidx.compose.ui.graphics.colorspace/Illuminant.D60|{}D60[0]
        final fun <get-D60>(): androidx.compose.ui.graphics.colorspace/WhitePoint // androidx.compose.ui.graphics.colorspace/Illuminant.D60.<get-D60>|<get-D60>(){}[0]
    final val D65 // androidx.compose.ui.graphics.colorspace/Illuminant.D65|{}D65[0]
        final fun <get-D65>(): androidx.compose.ui.graphics.colorspace/WhitePoint // androidx.compose.ui.graphics.colorspace/Illuminant.D65.<get-D65>|<get-D65>(){}[0]
    final val D75 // androidx.compose.ui.graphics.colorspace/Illuminant.D75|{}D75[0]
        final fun <get-D75>(): androidx.compose.ui.graphics.colorspace/WhitePoint // androidx.compose.ui.graphics.colorspace/Illuminant.D75.<get-D75>|<get-D75>(){}[0]
    final val E // androidx.compose.ui.graphics.colorspace/Illuminant.E|{}E[0]
        final fun <get-E>(): androidx.compose.ui.graphics.colorspace/WhitePoint // androidx.compose.ui.graphics.colorspace/Illuminant.E.<get-E>|<get-E>(){}[0]
}

final object androidx.compose.ui.graphics.drawscope/Fill : androidx.compose.ui.graphics.drawscope/DrawStyle // androidx.compose.ui.graphics.drawscope/Fill|null[0]

final const val androidx.compose.ui.graphics.layer/DefaultCameraDistance // androidx.compose.ui.graphics.layer/DefaultCameraDistance|{}DefaultCameraDistance[0]
    final fun <get-DefaultCameraDistance>(): kotlin/Float // androidx.compose.ui.graphics.layer/DefaultCameraDistance.<get-DefaultCameraDistance>|<get-DefaultCameraDistance>(){}[0]
final const val androidx.compose.ui.graphics/DefaultAlpha // androidx.compose.ui.graphics/DefaultAlpha|{}DefaultAlpha[0]
    final fun <get-DefaultAlpha>(): kotlin/Float // androidx.compose.ui.graphics/DefaultAlpha.<get-DefaultAlpha>|<get-DefaultAlpha>(){}[0]
final const val androidx.compose.ui.graphics/UnspecifiedColor // androidx.compose.ui.graphics/UnspecifiedColor|{}UnspecifiedColor[0]
    final fun <get-UnspecifiedColor>(): kotlin/ULong // androidx.compose.ui.graphics/UnspecifiedColor.<get-UnspecifiedColor>|<get-UnspecifiedColor>(){}[0]

final val androidx.compose.ui.graphics/CloseSegment // androidx.compose.ui.graphics/CloseSegment|{}CloseSegment[0]
    final fun <get-CloseSegment>(): androidx.compose.ui.graphics/PathSegment // androidx.compose.ui.graphics/CloseSegment.<get-CloseSegment>|<get-CloseSegment>(){}[0]
final val androidx.compose.ui.graphics/DoneSegment // androidx.compose.ui.graphics/DoneSegment|{}DoneSegment[0]
    final fun <get-DoneSegment>(): androidx.compose.ui.graphics/PathSegment // androidx.compose.ui.graphics/DoneSegment.<get-DoneSegment>|<get-DoneSegment>(){}[0]
final val androidx.compose.ui.graphics/RectangleShape // androidx.compose.ui.graphics/RectangleShape|{}RectangleShape[0]
    final fun <get-RectangleShape>(): androidx.compose.ui.graphics/Shape // androidx.compose.ui.graphics/RectangleShape.<get-RectangleShape>|<get-RectangleShape>(){}[0]
final val androidx.compose.ui.graphics/difference // androidx.compose.ui.graphics/difference|@androidx.compose.ui.graphics.PathOperation.Companion{}difference[0]
    final fun (androidx.compose.ui.graphics/PathOperation.Companion).<get-difference>(): androidx.compose.ui.graphics/PathOperation // androidx.compose.ui.graphics/difference.<get-difference>|<get-difference>@androidx.compose.ui.graphics.PathOperation.Companion(){}[0]
final val androidx.compose.ui.graphics/intersect // androidx.compose.ui.graphics/intersect|@androidx.compose.ui.graphics.PathOperation.Companion{}intersect[0]
    final fun (androidx.compose.ui.graphics/PathOperation.Companion).<get-intersect>(): androidx.compose.ui.graphics/PathOperation // androidx.compose.ui.graphics/intersect.<get-intersect>|<get-intersect>@androidx.compose.ui.graphics.PathOperation.Companion(){}[0]
final val androidx.compose.ui.graphics/isSpecified // androidx.compose.ui.graphics/isSpecified|@androidx.compose.ui.graphics.Color{}isSpecified[0]
    final inline fun (androidx.compose.ui.graphics/Color).<get-isSpecified>(): kotlin/Boolean // androidx.compose.ui.graphics/isSpecified.<get-isSpecified>|<get-isSpecified>@androidx.compose.ui.graphics.Color(){}[0]
final val androidx.compose.ui.graphics/isUnspecified // androidx.compose.ui.graphics/isUnspecified|@androidx.compose.ui.graphics.Color{}isUnspecified[0]
    final inline fun (androidx.compose.ui.graphics/Color).<get-isUnspecified>(): kotlin/Boolean // androidx.compose.ui.graphics/isUnspecified.<get-isUnspecified>|<get-isUnspecified>@androidx.compose.ui.graphics.Color(){}[0]
final val androidx.compose.ui.graphics/nativeCanvas // androidx.compose.ui.graphics/nativeCanvas|@androidx.compose.ui.graphics.Canvas{}nativeCanvas[0]
    final fun (androidx.compose.ui.graphics/Canvas).<get-nativeCanvas>(): androidx.compose.ui.graphics/NativeCanvas // androidx.compose.ui.graphics/nativeCanvas.<get-nativeCanvas>|<get-nativeCanvas>@androidx.compose.ui.graphics.Canvas(){}[0]
final val androidx.compose.ui.graphics/reverseDifference // androidx.compose.ui.graphics/reverseDifference|@androidx.compose.ui.graphics.PathOperation.Companion{}reverseDifference[0]
    final fun (androidx.compose.ui.graphics/PathOperation.Companion).<get-reverseDifference>(): androidx.compose.ui.graphics/PathOperation // androidx.compose.ui.graphics/reverseDifference.<get-reverseDifference>|<get-reverseDifference>@androidx.compose.ui.graphics.PathOperation.Companion(){}[0]
final val androidx.compose.ui.graphics/union // androidx.compose.ui.graphics/union|@androidx.compose.ui.graphics.PathOperation.Companion{}union[0]
    final fun (androidx.compose.ui.graphics/PathOperation.Companion).<get-union>(): androidx.compose.ui.graphics/PathOperation // androidx.compose.ui.graphics/union.<get-union>|<get-union>@androidx.compose.ui.graphics.PathOperation.Companion(){}[0]
final val androidx.compose.ui.graphics/xor // androidx.compose.ui.graphics/xor|@androidx.compose.ui.graphics.PathOperation.Companion{}xor[0]
    final fun (androidx.compose.ui.graphics/PathOperation.Companion).<get-xor>(): androidx.compose.ui.graphics/PathOperation // androidx.compose.ui.graphics/xor.<get-xor>|<get-xor>@androidx.compose.ui.graphics.PathOperation.Companion(){}[0]

final fun (androidx.compose.ui.graphics.colorspace/ColorSpace).androidx.compose.ui.graphics.colorspace/adapt(androidx.compose.ui.graphics.colorspace/WhitePoint, androidx.compose.ui.graphics.colorspace/Adaptation = ...): androidx.compose.ui.graphics.colorspace/ColorSpace // androidx.compose.ui.graphics.colorspace/adapt|adapt@androidx.compose.ui.graphics.colorspace.ColorSpace(androidx.compose.ui.graphics.colorspace.WhitePoint;androidx.compose.ui.graphics.colorspace.Adaptation){}[0]
final fun (androidx.compose.ui.graphics.colorspace/ColorSpace).androidx.compose.ui.graphics.colorspace/connect(androidx.compose.ui.graphics.colorspace/ColorSpace = ..., androidx.compose.ui.graphics.colorspace/RenderIntent = ...): androidx.compose.ui.graphics.colorspace/Connector // androidx.compose.ui.graphics.colorspace/connect|connect@androidx.compose.ui.graphics.colorspace.ColorSpace(androidx.compose.ui.graphics.colorspace.ColorSpace;androidx.compose.ui.graphics.colorspace.RenderIntent){}[0]
final fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.layer/drawLayer(androidx.compose.ui.graphics.layer/GraphicsLayer) // androidx.compose.ui.graphics.layer/drawLayer|drawLayer@androidx.compose.ui.graphics.drawscope.DrawScope(androidx.compose.ui.graphics.layer.GraphicsLayer){}[0]
final fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics/drawOutline(androidx.compose.ui.graphics/Outline, androidx.compose.ui.graphics/Brush, kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics/drawOutline|drawOutline@androidx.compose.ui.graphics.drawscope.DrawScope(androidx.compose.ui.graphics.Outline;androidx.compose.ui.graphics.Brush;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
final fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics/drawOutline(androidx.compose.ui.graphics/Outline, androidx.compose.ui.graphics/Color, kotlin/Float = ..., androidx.compose.ui.graphics.drawscope/DrawStyle = ..., androidx.compose.ui.graphics/ColorFilter? = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics/drawOutline|drawOutline@androidx.compose.ui.graphics.drawscope.DrawScope(androidx.compose.ui.graphics.Outline;androidx.compose.ui.graphics.Color;kotlin.Float;androidx.compose.ui.graphics.drawscope.DrawStyle;androidx.compose.ui.graphics.ColorFilter?;androidx.compose.ui.graphics.BlendMode){}[0]
final fun (androidx.compose.ui.graphics.layer/GraphicsLayer).androidx.compose.ui.graphics.layer/setOutline(androidx.compose.ui.graphics/Outline) // androidx.compose.ui.graphics.layer/setOutline|setOutline@androidx.compose.ui.graphics.layer.GraphicsLayer(androidx.compose.ui.graphics.Outline){}[0]
final fun (androidx.compose.ui.graphics/BlendMode).androidx.compose.ui.graphics/isSupported(): kotlin/Boolean // androidx.compose.ui.graphics/isSupported|isSupported@androidx.compose.ui.graphics.BlendMode(){}[0]
final fun (androidx.compose.ui.graphics/Canvas).androidx.compose.ui.graphics/drawOutline(androidx.compose.ui.graphics/Outline, androidx.compose.ui.graphics/Paint) // androidx.compose.ui.graphics/drawOutline|drawOutline@androidx.compose.ui.graphics.Canvas(androidx.compose.ui.graphics.Outline;androidx.compose.ui.graphics.Paint){}[0]
final fun (androidx.compose.ui.graphics/Canvas).androidx.compose.ui.graphics/rotate(kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/rotate|rotate@androidx.compose.ui.graphics.Canvas(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
final fun (androidx.compose.ui.graphics/Canvas).androidx.compose.ui.graphics/rotateRad(kotlin/Float, kotlin/Float = ..., kotlin/Float = ...) // androidx.compose.ui.graphics/rotateRad|rotateRad@androidx.compose.ui.graphics.Canvas(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
final fun (androidx.compose.ui.graphics/Canvas).androidx.compose.ui.graphics/scale(kotlin/Float, kotlin/Float = ..., kotlin/Float, kotlin/Float) // androidx.compose.ui.graphics/scale|scale@androidx.compose.ui.graphics.Canvas(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
final fun (androidx.compose.ui.graphics/Color).androidx.compose.ui.graphics/compositeOver(androidx.compose.ui.graphics/Color): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/compositeOver|compositeOver@androidx.compose.ui.graphics.Color(androidx.compose.ui.graphics.Color){}[0]
final fun (androidx.compose.ui.graphics/Color).androidx.compose.ui.graphics/luminance(): kotlin/Float // androidx.compose.ui.graphics/luminance|luminance@androidx.compose.ui.graphics.Color(){}[0]
final fun (androidx.compose.ui.graphics/Color).androidx.compose.ui.graphics/toArgb(): kotlin/Int // androidx.compose.ui.graphics/toArgb|toArgb@androidx.compose.ui.graphics.Color(){}[0]
final fun (androidx.compose.ui.graphics/ImageBitmap).androidx.compose.ui.graphics/toPixelMap(kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/IntArray = ..., kotlin/Int = ..., kotlin/Int = ...): androidx.compose.ui.graphics/PixelMap // androidx.compose.ui.graphics/toPixelMap|toPixelMap@androidx.compose.ui.graphics.ImageBitmap(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.IntArray;kotlin.Int;kotlin.Int){}[0]
final fun (androidx.compose.ui.graphics/Matrix).androidx.compose.ui.graphics/isIdentity(): kotlin/Boolean // androidx.compose.ui.graphics/isIdentity|isIdentity@androidx.compose.ui.graphics.Matrix(){}[0]
final fun (androidx.compose.ui.graphics/Path).androidx.compose.ui.graphics/addOutline(androidx.compose.ui.graphics/Outline) // androidx.compose.ui.graphics/addOutline|addOutline@androidx.compose.ui.graphics.Path(androidx.compose.ui.graphics.Outline){}[0]
final fun (androidx.compose.ui.graphics/Path).androidx.compose.ui.graphics/addSvg(kotlin/String) // androidx.compose.ui.graphics/addSvg|addSvg@androidx.compose.ui.graphics.Path(kotlin.String){}[0]
final fun (androidx.compose.ui.graphics/Path).androidx.compose.ui.graphics/computeDirection(): androidx.compose.ui.graphics/Path.Direction // androidx.compose.ui.graphics/computeDirection|computeDirection@androidx.compose.ui.graphics.Path(){}[0]
final fun (androidx.compose.ui.graphics/Path).androidx.compose.ui.graphics/copy(): androidx.compose.ui.graphics/Path // androidx.compose.ui.graphics/copy|copy@androidx.compose.ui.graphics.Path(){}[0]
final fun (androidx.compose.ui.graphics/Path).androidx.compose.ui.graphics/divide(kotlin.collections/MutableList<androidx.compose.ui.graphics/Path> = ...): kotlin.collections/MutableList<androidx.compose.ui.graphics/Path> // androidx.compose.ui.graphics/divide|divide@androidx.compose.ui.graphics.Path(kotlin.collections.MutableList<androidx.compose.ui.graphics.Path>){}[0]
final fun (androidx.compose.ui.graphics/Path).androidx.compose.ui.graphics/reverse(androidx.compose.ui.graphics/Path = ...): androidx.compose.ui.graphics/Path // androidx.compose.ui.graphics/reverse|reverse@androidx.compose.ui.graphics.Path(androidx.compose.ui.graphics.Path){}[0]
final fun (androidx.compose.ui.graphics/Path).androidx.compose.ui.graphics/toSvg(kotlin/Boolean = ...): kotlin/String // androidx.compose.ui.graphics/toSvg|toSvg@androidx.compose.ui.graphics.Path(kotlin.Boolean){}[0]
final fun (androidx.compose.ui.graphics/TileMode).androidx.compose.ui.graphics/isSupported(): kotlin/Boolean // androidx.compose.ui.graphics/isSupported|isSupported@androidx.compose.ui.graphics.TileMode(){}[0]
final fun (kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode>).androidx.compose.ui.graphics.vector/toPath(androidx.compose.ui.graphics/Path = ...): androidx.compose.ui.graphics/Path // androidx.compose.ui.graphics.vector/toPath|toPath@kotlin.collections.List<androidx.compose.ui.graphics.vector.PathNode>(androidx.compose.ui.graphics.Path){}[0]
final fun (kotlin/ByteArray).androidx.compose.ui.graphics/decodeToImageBitmap(): androidx.compose.ui.graphics/ImageBitmap // androidx.compose.ui.graphics/decodeToImageBitmap|decodeToImageBitmap@kotlin.ByteArray(){}[0]
final fun androidx.compose.ui.graphics.painter/BitmapPainter(androidx.compose.ui.graphics/ImageBitmap, androidx.compose.ui.unit/IntOffset = ..., androidx.compose.ui.unit/IntSize = ..., androidx.compose.ui.graphics/FilterQuality = ...): androidx.compose.ui.graphics.painter/BitmapPainter // androidx.compose.ui.graphics.painter/BitmapPainter|BitmapPainter(androidx.compose.ui.graphics.ImageBitmap;androidx.compose.ui.unit.IntOffset;androidx.compose.ui.unit.IntSize;androidx.compose.ui.graphics.FilterQuality){}[0]
final fun androidx.compose.ui.graphics/BlurEffect(kotlin/Float, kotlin/Float, androidx.compose.ui.graphics/TileMode = ...): androidx.compose.ui.graphics/BlurEffect // androidx.compose.ui.graphics/BlurEffect|BlurEffect(kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.TileMode){}[0]
final fun androidx.compose.ui.graphics/Canvas(androidx.compose.ui.graphics/ImageBitmap): androidx.compose.ui.graphics/Canvas // androidx.compose.ui.graphics/Canvas|Canvas(androidx.compose.ui.graphics.ImageBitmap){}[0]
final fun androidx.compose.ui.graphics/Color(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float = ..., androidx.compose.ui.graphics.colorspace/ColorSpace = ...): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color|Color(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.colorspace.ColorSpace){}[0]
final fun androidx.compose.ui.graphics/Color(kotlin/Int): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color|Color(kotlin.Int){}[0]
final fun androidx.compose.ui.graphics/Color(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int = ...): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color|Color(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.ui.graphics/Color(kotlin/Long): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/Color|Color(kotlin.Long){}[0]
final fun androidx.compose.ui.graphics/ImageBitmap(kotlin/Int, kotlin/Int, androidx.compose.ui.graphics/ImageBitmapConfig = ..., kotlin/Boolean = ..., androidx.compose.ui.graphics.colorspace/ColorSpace = ...): androidx.compose.ui.graphics/ImageBitmap // androidx.compose.ui.graphics/ImageBitmap|ImageBitmap(kotlin.Int;kotlin.Int;androidx.compose.ui.graphics.ImageBitmapConfig;kotlin.Boolean;androidx.compose.ui.graphics.colorspace.ColorSpace){}[0]
final fun androidx.compose.ui.graphics/ImageShader(androidx.compose.ui.graphics/ImageBitmap, androidx.compose.ui.graphics/TileMode = ..., androidx.compose.ui.graphics/TileMode = ...): androidx.compose.ui.graphics/Shader // androidx.compose.ui.graphics/ImageShader|ImageShader(androidx.compose.ui.graphics.ImageBitmap;androidx.compose.ui.graphics.TileMode;androidx.compose.ui.graphics.TileMode){}[0]
final fun androidx.compose.ui.graphics/LinearGradientShader(androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Offset, kotlin.collections/List<androidx.compose.ui.graphics/Color>, kotlin.collections/List<kotlin/Float>? = ..., androidx.compose.ui.graphics/TileMode = ...): androidx.compose.ui.graphics/Shader // androidx.compose.ui.graphics/LinearGradientShader|LinearGradientShader(androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Offset;kotlin.collections.List<androidx.compose.ui.graphics.Color>;kotlin.collections.List<kotlin.Float>?;androidx.compose.ui.graphics.TileMode){}[0]
final fun androidx.compose.ui.graphics/OffsetEffect(kotlin/Float, kotlin/Float): androidx.compose.ui.graphics/OffsetEffect // androidx.compose.ui.graphics/OffsetEffect|OffsetEffect(kotlin.Float;kotlin.Float){}[0]
final fun androidx.compose.ui.graphics/Paint(): androidx.compose.ui.graphics/Paint // androidx.compose.ui.graphics/Paint|Paint(){}[0]
final fun androidx.compose.ui.graphics/Path(): androidx.compose.ui.graphics/Path // androidx.compose.ui.graphics/Path|Path(){}[0]
final fun androidx.compose.ui.graphics/PathHitTester(androidx.compose.ui.graphics/Path, kotlin/Float = ...): androidx.compose.ui.graphics/PathHitTester // androidx.compose.ui.graphics/PathHitTester|PathHitTester(androidx.compose.ui.graphics.Path;kotlin.Float){}[0]
final fun androidx.compose.ui.graphics/PathIterator(androidx.compose.ui.graphics/Path, androidx.compose.ui.graphics/PathIterator.ConicEvaluation = ..., kotlin/Float = ...): androidx.compose.ui.graphics/PathIterator // androidx.compose.ui.graphics/PathIterator|PathIterator(androidx.compose.ui.graphics.Path;androidx.compose.ui.graphics.PathIterator.ConicEvaluation;kotlin.Float){}[0]
final fun androidx.compose.ui.graphics/PathMeasure(): androidx.compose.ui.graphics/PathMeasure // androidx.compose.ui.graphics/PathMeasure|PathMeasure(){}[0]
final fun androidx.compose.ui.graphics/RadialGradientShader(androidx.compose.ui.geometry/Offset, kotlin/Float, kotlin.collections/List<androidx.compose.ui.graphics/Color>, kotlin.collections/List<kotlin/Float>? = ..., androidx.compose.ui.graphics/TileMode = ...): androidx.compose.ui.graphics/Shader // androidx.compose.ui.graphics/RadialGradientShader|RadialGradientShader(androidx.compose.ui.geometry.Offset;kotlin.Float;kotlin.collections.List<androidx.compose.ui.graphics.Color>;kotlin.collections.List<kotlin.Float>?;androidx.compose.ui.graphics.TileMode){}[0]
final fun androidx.compose.ui.graphics/ShaderBrush(androidx.compose.ui.graphics/Shader): androidx.compose.ui.graphics/ShaderBrush // androidx.compose.ui.graphics/ShaderBrush|ShaderBrush(androidx.compose.ui.graphics.Shader){}[0]
final fun androidx.compose.ui.graphics/SweepGradientShader(androidx.compose.ui.geometry/Offset, kotlin.collections/List<androidx.compose.ui.graphics/Color>, kotlin.collections/List<kotlin/Float>? = ...): androidx.compose.ui.graphics/Shader // androidx.compose.ui.graphics/SweepGradientShader|SweepGradientShader(androidx.compose.ui.geometry.Offset;kotlin.collections.List<androidx.compose.ui.graphics.Color>;kotlin.collections.List<kotlin.Float>?){}[0]
final fun androidx.compose.ui.graphics/computeCubicVerticalBounds(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/FloatArray, kotlin/Int = ...): androidx.collection/FloatFloatPair // androidx.compose.ui.graphics/computeCubicVerticalBounds|computeCubicVerticalBounds(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.FloatArray;kotlin.Int){}[0]
final fun androidx.compose.ui.graphics/computeHorizontalBounds(androidx.compose.ui.graphics/PathSegment, kotlin/FloatArray, kotlin/Int = ...): androidx.collection/FloatFloatPair // androidx.compose.ui.graphics/computeHorizontalBounds|computeHorizontalBounds(androidx.compose.ui.graphics.PathSegment;kotlin.FloatArray;kotlin.Int){}[0]
final fun androidx.compose.ui.graphics/degrees(kotlin/Float): kotlin/Float // androidx.compose.ui.graphics/degrees|degrees(kotlin.Float){}[0]
final fun androidx.compose.ui.graphics/evaluateCubic(kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.ui.graphics/evaluateCubic|evaluateCubic(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
final fun androidx.compose.ui.graphics/evaluateY(androidx.compose.ui.graphics/PathSegment, kotlin/Float): kotlin/Float // androidx.compose.ui.graphics/evaluateY|evaluateY(androidx.compose.ui.graphics.PathSegment;kotlin.Float){}[0]
final fun androidx.compose.ui.graphics/findFirstCubicRoot(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.ui.graphics/findFirstCubicRoot|findFirstCubicRoot(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
final fun androidx.compose.ui.graphics/findFirstRoot(androidx.compose.ui.graphics/PathSegment, kotlin/Float): kotlin/Float // androidx.compose.ui.graphics/findFirstRoot|findFirstRoot(androidx.compose.ui.graphics.PathSegment;kotlin.Float){}[0]
final fun androidx.compose.ui.graphics/lerp(androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color, kotlin/Float): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/lerp|lerp(androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color;kotlin.Float){}[0]
final fun androidx.compose.ui.graphics/lerp(androidx.compose.ui.graphics/Shadow, androidx.compose.ui.graphics/Shadow, kotlin/Float): androidx.compose.ui.graphics/Shadow // androidx.compose.ui.graphics/lerp|lerp(androidx.compose.ui.graphics.Shadow;androidx.compose.ui.graphics.Shadow;kotlin.Float){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/clipPath(androidx.compose.ui.graphics/Path, androidx.compose.ui.graphics/ClipOp = ..., kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/clipPath|clipPath@androidx.compose.ui.graphics.drawscope.DrawScope(androidx.compose.ui.graphics.Path;androidx.compose.ui.graphics.ClipOp;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/clipRect(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/ClipOp = ..., kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/clipRect|clipRect@androidx.compose.ui.graphics.drawscope.DrawScope(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.ClipOp;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/draw(androidx.compose.ui.unit/Density, androidx.compose.ui.unit/LayoutDirection, androidx.compose.ui.graphics/Canvas, androidx.compose.ui.geometry/Size, androidx.compose.ui.graphics.layer/GraphicsLayer? = ..., kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/draw|draw@androidx.compose.ui.graphics.drawscope.DrawScope(androidx.compose.ui.unit.Density;androidx.compose.ui.unit.LayoutDirection;androidx.compose.ui.graphics.Canvas;androidx.compose.ui.geometry.Size;androidx.compose.ui.graphics.layer.GraphicsLayer?;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/draw(androidx.compose.ui.unit/Density, androidx.compose.ui.unit/LayoutDirection, androidx.compose.ui.graphics/Canvas, androidx.compose.ui.geometry/Size, kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/draw|draw@androidx.compose.ui.graphics.drawscope.DrawScope(androidx.compose.ui.unit.Density;androidx.compose.ui.unit.LayoutDirection;androidx.compose.ui.graphics.Canvas;androidx.compose.ui.geometry.Size;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/drawIntoCanvas(kotlin/Function1<androidx.compose.ui.graphics/Canvas, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/drawIntoCanvas|drawIntoCanvas@androidx.compose.ui.graphics.drawscope.DrawScope(kotlin.Function1<androidx.compose.ui.graphics.Canvas,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/inset(kotlin/Float = ..., kotlin/Float = ..., kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/inset|inset@androidx.compose.ui.graphics.drawscope.DrawScope(kotlin.Float;kotlin.Float;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/inset(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/inset|inset@androidx.compose.ui.graphics.drawscope.DrawScope(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/inset(kotlin/Float, kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/inset|inset@androidx.compose.ui.graphics.drawscope.DrawScope(kotlin.Float;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/rotate(kotlin/Float, androidx.compose.ui.geometry/Offset = ..., kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/rotate|rotate@androidx.compose.ui.graphics.drawscope.DrawScope(kotlin.Float;androidx.compose.ui.geometry.Offset;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/rotateRad(kotlin/Float, androidx.compose.ui.geometry/Offset = ..., kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/rotateRad|rotateRad@androidx.compose.ui.graphics.drawscope.DrawScope(kotlin.Float;androidx.compose.ui.geometry.Offset;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/scale(kotlin/Float, androidx.compose.ui.geometry/Offset = ..., kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/scale|scale@androidx.compose.ui.graphics.drawscope.DrawScope(kotlin.Float;androidx.compose.ui.geometry.Offset;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/scale(kotlin/Float, kotlin/Float, androidx.compose.ui.geometry/Offset = ..., kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/scale|scale@androidx.compose.ui.graphics.drawscope.DrawScope(kotlin.Float;kotlin.Float;androidx.compose.ui.geometry.Offset;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/translate(kotlin/Float = ..., kotlin/Float = ..., kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/translate|translate@androidx.compose.ui.graphics.drawscope.DrawScope(kotlin.Float;kotlin.Float;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawScope).androidx.compose.ui.graphics.drawscope/withTransform(kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawTransform, kotlin/Unit>, kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.graphics.drawscope/withTransform|withTransform@androidx.compose.ui.graphics.drawscope.DrawScope(kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawTransform,kotlin.Unit>;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawTransform).androidx.compose.ui.graphics.drawscope/inset(kotlin/Float = ..., kotlin/Float = ...) // androidx.compose.ui.graphics.drawscope/inset|inset@androidx.compose.ui.graphics.drawscope.DrawTransform(kotlin.Float;kotlin.Float){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawTransform).androidx.compose.ui.graphics.drawscope/inset(kotlin/Float) // androidx.compose.ui.graphics.drawscope/inset|inset@androidx.compose.ui.graphics.drawscope.DrawTransform(kotlin.Float){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawTransform).androidx.compose.ui.graphics.drawscope/rotateRad(kotlin/Float, androidx.compose.ui.geometry/Offset = ...) // androidx.compose.ui.graphics.drawscope/rotateRad|rotateRad@androidx.compose.ui.graphics.drawscope.DrawTransform(kotlin.Float;androidx.compose.ui.geometry.Offset){}[0]
final inline fun (androidx.compose.ui.graphics.drawscope/DrawTransform).androidx.compose.ui.graphics.drawscope/scale(kotlin/Float, androidx.compose.ui.geometry/Offset = ...) // androidx.compose.ui.graphics.drawscope/scale|scale@androidx.compose.ui.graphics.drawscope.DrawTransform(kotlin.Float;androidx.compose.ui.geometry.Offset){}[0]
final inline fun (androidx.compose.ui.graphics/Canvas).androidx.compose.ui.graphics/withSave(kotlin/Function0<kotlin/Unit>) // androidx.compose.ui.graphics/withSave|withSave@androidx.compose.ui.graphics.Canvas(kotlin.Function0<kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics/Canvas).androidx.compose.ui.graphics/withSaveLayer(androidx.compose.ui.geometry/Rect, androidx.compose.ui.graphics/Paint, kotlin/Function0<kotlin/Unit>) // androidx.compose.ui.graphics/withSaveLayer|withSaveLayer@androidx.compose.ui.graphics.Canvas(androidx.compose.ui.geometry.Rect;androidx.compose.ui.graphics.Paint;kotlin.Function0<kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics/Color).androidx.compose.ui.graphics/takeOrElse(kotlin/Function0<androidx.compose.ui.graphics/Color>): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/takeOrElse|takeOrElse@androidx.compose.ui.graphics.Color(kotlin.Function0<androidx.compose.ui.graphics.Color>){}[0]
