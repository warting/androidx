// Klib ABI Dump
// Targets: [linuxX64.linuxx64Stubs]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <androidx.compose.ui:ui>
open annotation class androidx.compose.ui.graphics.vector/VectorComposable : kotlin/Annotation { // androidx.compose.ui.graphics.vector/VectorComposable|null[0]
    constructor <init>() // androidx.compose.ui.graphics.vector/VectorComposable.<init>|<init>(){}[0]
}

open annotation class androidx.compose.ui.input.pointer.util/ExperimentalVelocityTrackerApi : kotlin/Annotation { // androidx.compose.ui.input.pointer.util/ExperimentalVelocityTrackerApi|null[0]
    constructor <init>() // androidx.compose.ui.input.pointer.util/ExperimentalVelocityTrackerApi.<init>|<init>(){}[0]
}

open annotation class androidx.compose.ui.layout/MeasureScopeMarker : kotlin/Annotation { // androidx.compose.ui.layout/MeasureScopeMarker|null[0]
    constructor <init>() // androidx.compose.ui.layout/MeasureScopeMarker.<init>|<init>(){}[0]
}

open annotation class androidx.compose.ui.layout/PlacementScopeMarker : kotlin/Annotation { // androidx.compose.ui.layout/PlacementScopeMarker|null[0]
    constructor <init>() // androidx.compose.ui.layout/PlacementScopeMarker.<init>|<init>(){}[0]
}

open annotation class androidx.compose.ui.node/InternalCoreApi : kotlin/Annotation { // androidx.compose.ui.node/InternalCoreApi|null[0]
    constructor <init>() // androidx.compose.ui.node/InternalCoreApi.<init>|<init>(){}[0]
}

open annotation class androidx.compose.ui/UiComposable : kotlin/Annotation { // androidx.compose.ui/UiComposable|null[0]
    constructor <init>() // androidx.compose.ui/UiComposable.<init>|<init>(){}[0]
}

final enum class androidx.compose.ui.autofill/AutofillType : kotlin/Enum<androidx.compose.ui.autofill/AutofillType> { // androidx.compose.ui.autofill/AutofillType|null[0]
    enum entry AddressAuxiliaryDetails // androidx.compose.ui.autofill/AutofillType.AddressAuxiliaryDetails|null[0]
    enum entry AddressCountry // androidx.compose.ui.autofill/AutofillType.AddressCountry|null[0]
    enum entry AddressLocality // androidx.compose.ui.autofill/AutofillType.AddressLocality|null[0]
    enum entry AddressRegion // androidx.compose.ui.autofill/AutofillType.AddressRegion|null[0]
    enum entry AddressStreet // androidx.compose.ui.autofill/AutofillType.AddressStreet|null[0]
    enum entry BirthDateDay // androidx.compose.ui.autofill/AutofillType.BirthDateDay|null[0]
    enum entry BirthDateFull // androidx.compose.ui.autofill/AutofillType.BirthDateFull|null[0]
    enum entry BirthDateMonth // androidx.compose.ui.autofill/AutofillType.BirthDateMonth|null[0]
    enum entry BirthDateYear // androidx.compose.ui.autofill/AutofillType.BirthDateYear|null[0]
    enum entry CreditCardExpirationDate // androidx.compose.ui.autofill/AutofillType.CreditCardExpirationDate|null[0]
    enum entry CreditCardExpirationDay // androidx.compose.ui.autofill/AutofillType.CreditCardExpirationDay|null[0]
    enum entry CreditCardExpirationMonth // androidx.compose.ui.autofill/AutofillType.CreditCardExpirationMonth|null[0]
    enum entry CreditCardExpirationYear // androidx.compose.ui.autofill/AutofillType.CreditCardExpirationYear|null[0]
    enum entry CreditCardNumber // androidx.compose.ui.autofill/AutofillType.CreditCardNumber|null[0]
    enum entry CreditCardSecurityCode // androidx.compose.ui.autofill/AutofillType.CreditCardSecurityCode|null[0]
    enum entry EmailAddress // androidx.compose.ui.autofill/AutofillType.EmailAddress|null[0]
    enum entry Gender // androidx.compose.ui.autofill/AutofillType.Gender|null[0]
    enum entry NewPassword // androidx.compose.ui.autofill/AutofillType.NewPassword|null[0]
    enum entry NewUsername // androidx.compose.ui.autofill/AutofillType.NewUsername|null[0]
    enum entry Password // androidx.compose.ui.autofill/AutofillType.Password|null[0]
    enum entry PersonFirstName // androidx.compose.ui.autofill/AutofillType.PersonFirstName|null[0]
    enum entry PersonFullName // androidx.compose.ui.autofill/AutofillType.PersonFullName|null[0]
    enum entry PersonLastName // androidx.compose.ui.autofill/AutofillType.PersonLastName|null[0]
    enum entry PersonMiddleInitial // androidx.compose.ui.autofill/AutofillType.PersonMiddleInitial|null[0]
    enum entry PersonMiddleName // androidx.compose.ui.autofill/AutofillType.PersonMiddleName|null[0]
    enum entry PersonNamePrefix // androidx.compose.ui.autofill/AutofillType.PersonNamePrefix|null[0]
    enum entry PersonNameSuffix // androidx.compose.ui.autofill/AutofillType.PersonNameSuffix|null[0]
    enum entry PhoneCountryCode // androidx.compose.ui.autofill/AutofillType.PhoneCountryCode|null[0]
    enum entry PhoneNumber // androidx.compose.ui.autofill/AutofillType.PhoneNumber|null[0]
    enum entry PhoneNumberDevice // androidx.compose.ui.autofill/AutofillType.PhoneNumberDevice|null[0]
    enum entry PhoneNumberNational // androidx.compose.ui.autofill/AutofillType.PhoneNumberNational|null[0]
    enum entry PostalAddress // androidx.compose.ui.autofill/AutofillType.PostalAddress|null[0]
    enum entry PostalCode // androidx.compose.ui.autofill/AutofillType.PostalCode|null[0]
    enum entry PostalCodeExtended // androidx.compose.ui.autofill/AutofillType.PostalCodeExtended|null[0]
    enum entry SmsOtpCode // androidx.compose.ui.autofill/AutofillType.SmsOtpCode|null[0]
    enum entry Username // androidx.compose.ui.autofill/AutofillType.Username|null[0]

    final val entries // androidx.compose.ui.autofill/AutofillType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<androidx.compose.ui.autofill/AutofillType> // androidx.compose.ui.autofill/AutofillType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): androidx.compose.ui.autofill/AutofillType // androidx.compose.ui.autofill/AutofillType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<androidx.compose.ui.autofill/AutofillType> // androidx.compose.ui.autofill/AutofillType.values|values#static(){}[0]
}

final enum class androidx.compose.ui.input.pointer/PointerEventPass : kotlin/Enum<androidx.compose.ui.input.pointer/PointerEventPass> { // androidx.compose.ui.input.pointer/PointerEventPass|null[0]
    enum entry Final // androidx.compose.ui.input.pointer/PointerEventPass.Final|null[0]
    enum entry Initial // androidx.compose.ui.input.pointer/PointerEventPass.Initial|null[0]
    enum entry Main // androidx.compose.ui.input.pointer/PointerEventPass.Main|null[0]

    final val entries // androidx.compose.ui.input.pointer/PointerEventPass.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<androidx.compose.ui.input.pointer/PointerEventPass> // androidx.compose.ui.input.pointer/PointerEventPass.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): androidx.compose.ui.input.pointer/PointerEventPass // androidx.compose.ui.input.pointer/PointerEventPass.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<androidx.compose.ui.input.pointer/PointerEventPass> // androidx.compose.ui.input.pointer/PointerEventPass.values|values#static(){}[0]
}

final enum class androidx.compose.ui.platform/TextToolbarStatus : kotlin/Enum<androidx.compose.ui.platform/TextToolbarStatus> { // androidx.compose.ui.platform/TextToolbarStatus|null[0]
    enum entry Hidden // androidx.compose.ui.platform/TextToolbarStatus.Hidden|null[0]
    enum entry Shown // androidx.compose.ui.platform/TextToolbarStatus.Shown|null[0]

    final val entries // androidx.compose.ui.platform/TextToolbarStatus.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<androidx.compose.ui.platform/TextToolbarStatus> // androidx.compose.ui.platform/TextToolbarStatus.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): androidx.compose.ui.platform/TextToolbarStatus // androidx.compose.ui.platform/TextToolbarStatus.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<androidx.compose.ui.platform/TextToolbarStatus> // androidx.compose.ui.platform/TextToolbarStatus.values|values#static(){}[0]
}

final enum class androidx.compose.ui.state/ToggleableState : kotlin/Enum<androidx.compose.ui.state/ToggleableState> { // androidx.compose.ui.state/ToggleableState|null[0]
    enum entry Indeterminate // androidx.compose.ui.state/ToggleableState.Indeterminate|null[0]
    enum entry Off // androidx.compose.ui.state/ToggleableState.Off|null[0]
    enum entry On // androidx.compose.ui.state/ToggleableState.On|null[0]

    final val entries // androidx.compose.ui.state/ToggleableState.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<androidx.compose.ui.state/ToggleableState> // androidx.compose.ui.state/ToggleableState.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): androidx.compose.ui.state/ToggleableState // androidx.compose.ui.state/ToggleableState.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<androidx.compose.ui.state/ToggleableState> // androidx.compose.ui.state/ToggleableState.values|values#static(){}[0]
}

abstract fun interface androidx.compose.ui.input.pointer/PointerInputEventHandler { // androidx.compose.ui.input.pointer/PointerInputEventHandler|null[0]
    abstract suspend fun (androidx.compose.ui.input.pointer/PointerInputScope).invoke() // androidx.compose.ui.input.pointer/PointerInputEventHandler.invoke|invoke@androidx.compose.ui.input.pointer.PointerInputScope(){}[0]
}

abstract fun interface androidx.compose.ui.layout/MeasurePolicy { // androidx.compose.ui.layout/MeasurePolicy|null[0]
    abstract fun (androidx.compose.ui.layout/MeasureScope).measure(kotlin.collections/List<androidx.compose.ui.layout/Measurable>, androidx.compose.ui.unit/Constraints): androidx.compose.ui.layout/MeasureResult // androidx.compose.ui.layout/MeasurePolicy.measure|measure@androidx.compose.ui.layout.MeasureScope(kotlin.collections.List<androidx.compose.ui.layout.Measurable>;androidx.compose.ui.unit.Constraints){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).maxIntrinsicHeight(kotlin.collections/List<androidx.compose.ui.layout/IntrinsicMeasurable>, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/MeasurePolicy.maxIntrinsicHeight|maxIntrinsicHeight@androidx.compose.ui.layout.IntrinsicMeasureScope(kotlin.collections.List<androidx.compose.ui.layout.IntrinsicMeasurable>;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).maxIntrinsicWidth(kotlin.collections/List<androidx.compose.ui.layout/IntrinsicMeasurable>, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/MeasurePolicy.maxIntrinsicWidth|maxIntrinsicWidth@androidx.compose.ui.layout.IntrinsicMeasureScope(kotlin.collections.List<androidx.compose.ui.layout.IntrinsicMeasurable>;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).minIntrinsicHeight(kotlin.collections/List<androidx.compose.ui.layout/IntrinsicMeasurable>, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/MeasurePolicy.minIntrinsicHeight|minIntrinsicHeight@androidx.compose.ui.layout.IntrinsicMeasureScope(kotlin.collections.List<androidx.compose.ui.layout.IntrinsicMeasurable>;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).minIntrinsicWidth(kotlin.collections/List<androidx.compose.ui.layout/IntrinsicMeasurable>, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/MeasurePolicy.minIntrinsicWidth|minIntrinsicWidth@androidx.compose.ui.layout.IntrinsicMeasureScope(kotlin.collections.List<androidx.compose.ui.layout.IntrinsicMeasurable>;kotlin.Int){}[0]
}

abstract fun interface androidx.compose.ui.layout/MultiContentMeasurePolicy { // androidx.compose.ui.layout/MultiContentMeasurePolicy|null[0]
    abstract fun (androidx.compose.ui.layout/MeasureScope).measure(kotlin.collections/List<kotlin.collections/List<androidx.compose.ui.layout/Measurable>>, androidx.compose.ui.unit/Constraints): androidx.compose.ui.layout/MeasureResult // androidx.compose.ui.layout/MultiContentMeasurePolicy.measure|measure@androidx.compose.ui.layout.MeasureScope(kotlin.collections.List<kotlin.collections.List<androidx.compose.ui.layout.Measurable>>;androidx.compose.ui.unit.Constraints){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).maxIntrinsicHeight(kotlin.collections/List<kotlin.collections/List<androidx.compose.ui.layout/IntrinsicMeasurable>>, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/MultiContentMeasurePolicy.maxIntrinsicHeight|maxIntrinsicHeight@androidx.compose.ui.layout.IntrinsicMeasureScope(kotlin.collections.List<kotlin.collections.List<androidx.compose.ui.layout.IntrinsicMeasurable>>;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).maxIntrinsicWidth(kotlin.collections/List<kotlin.collections/List<androidx.compose.ui.layout/IntrinsicMeasurable>>, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/MultiContentMeasurePolicy.maxIntrinsicWidth|maxIntrinsicWidth@androidx.compose.ui.layout.IntrinsicMeasureScope(kotlin.collections.List<kotlin.collections.List<androidx.compose.ui.layout.IntrinsicMeasurable>>;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).minIntrinsicHeight(kotlin.collections/List<kotlin.collections/List<androidx.compose.ui.layout/IntrinsicMeasurable>>, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/MultiContentMeasurePolicy.minIntrinsicHeight|minIntrinsicHeight@androidx.compose.ui.layout.IntrinsicMeasureScope(kotlin.collections.List<kotlin.collections.List<androidx.compose.ui.layout.IntrinsicMeasurable>>;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).minIntrinsicWidth(kotlin.collections/List<kotlin.collections/List<androidx.compose.ui.layout/IntrinsicMeasurable>>, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/MultiContentMeasurePolicy.minIntrinsicWidth|minIntrinsicWidth@androidx.compose.ui.layout.IntrinsicMeasureScope(kotlin.collections.List<kotlin.collections.List<androidx.compose.ui.layout.IntrinsicMeasurable>>;kotlin.Int){}[0]
}

abstract fun interface androidx.compose.ui/Alignment { // androidx.compose.ui/Alignment|null[0]
    abstract fun align(androidx.compose.ui.unit/IntSize, androidx.compose.ui.unit/IntSize, androidx.compose.ui.unit/LayoutDirection): androidx.compose.ui.unit/IntOffset // androidx.compose.ui/Alignment.align|align(androidx.compose.ui.unit.IntSize;androidx.compose.ui.unit.IntSize;androidx.compose.ui.unit.LayoutDirection){}[0]

    abstract fun interface Horizontal { // androidx.compose.ui/Alignment.Horizontal|null[0]
        abstract fun align(kotlin/Int, kotlin/Int, androidx.compose.ui.unit/LayoutDirection): kotlin/Int // androidx.compose.ui/Alignment.Horizontal.align|align(kotlin.Int;kotlin.Int;androidx.compose.ui.unit.LayoutDirection){}[0]
        open fun plus(androidx.compose.ui/Alignment.Vertical): androidx.compose.ui/Alignment // androidx.compose.ui/Alignment.Horizontal.plus|plus(androidx.compose.ui.Alignment.Vertical){}[0]
    }

    abstract fun interface Vertical { // androidx.compose.ui/Alignment.Vertical|null[0]
        abstract fun align(kotlin/Int, kotlin/Int): kotlin/Int // androidx.compose.ui/Alignment.Vertical.align|align(kotlin.Int;kotlin.Int){}[0]
        open fun plus(androidx.compose.ui/Alignment.Horizontal): androidx.compose.ui/Alignment // androidx.compose.ui/Alignment.Vertical.plus|plus(androidx.compose.ui.Alignment.Horizontal){}[0]
    }

    final object Companion { // androidx.compose.ui/Alignment.Companion|null[0]
        final val Bottom // androidx.compose.ui/Alignment.Companion.Bottom|{}Bottom[0]
            final fun <get-Bottom>(): androidx.compose.ui/Alignment.Vertical // androidx.compose.ui/Alignment.Companion.Bottom.<get-Bottom>|<get-Bottom>(){}[0]
        final val BottomCenter // androidx.compose.ui/Alignment.Companion.BottomCenter|{}BottomCenter[0]
            final fun <get-BottomCenter>(): androidx.compose.ui/Alignment // androidx.compose.ui/Alignment.Companion.BottomCenter.<get-BottomCenter>|<get-BottomCenter>(){}[0]
        final val BottomEnd // androidx.compose.ui/Alignment.Companion.BottomEnd|{}BottomEnd[0]
            final fun <get-BottomEnd>(): androidx.compose.ui/Alignment // androidx.compose.ui/Alignment.Companion.BottomEnd.<get-BottomEnd>|<get-BottomEnd>(){}[0]
        final val BottomStart // androidx.compose.ui/Alignment.Companion.BottomStart|{}BottomStart[0]
            final fun <get-BottomStart>(): androidx.compose.ui/Alignment // androidx.compose.ui/Alignment.Companion.BottomStart.<get-BottomStart>|<get-BottomStart>(){}[0]
        final val Center // androidx.compose.ui/Alignment.Companion.Center|{}Center[0]
            final fun <get-Center>(): androidx.compose.ui/Alignment // androidx.compose.ui/Alignment.Companion.Center.<get-Center>|<get-Center>(){}[0]
        final val CenterEnd // androidx.compose.ui/Alignment.Companion.CenterEnd|{}CenterEnd[0]
            final fun <get-CenterEnd>(): androidx.compose.ui/Alignment // androidx.compose.ui/Alignment.Companion.CenterEnd.<get-CenterEnd>|<get-CenterEnd>(){}[0]
        final val CenterHorizontally // androidx.compose.ui/Alignment.Companion.CenterHorizontally|{}CenterHorizontally[0]
            final fun <get-CenterHorizontally>(): androidx.compose.ui/Alignment.Horizontal // androidx.compose.ui/Alignment.Companion.CenterHorizontally.<get-CenterHorizontally>|<get-CenterHorizontally>(){}[0]
        final val CenterStart // androidx.compose.ui/Alignment.Companion.CenterStart|{}CenterStart[0]
            final fun <get-CenterStart>(): androidx.compose.ui/Alignment // androidx.compose.ui/Alignment.Companion.CenterStart.<get-CenterStart>|<get-CenterStart>(){}[0]
        final val CenterVertically // androidx.compose.ui/Alignment.Companion.CenterVertically|{}CenterVertically[0]
            final fun <get-CenterVertically>(): androidx.compose.ui/Alignment.Vertical // androidx.compose.ui/Alignment.Companion.CenterVertically.<get-CenterVertically>|<get-CenterVertically>(){}[0]
        final val End // androidx.compose.ui/Alignment.Companion.End|{}End[0]
            final fun <get-End>(): androidx.compose.ui/Alignment.Horizontal // androidx.compose.ui/Alignment.Companion.End.<get-End>|<get-End>(){}[0]
        final val Start // androidx.compose.ui/Alignment.Companion.Start|{}Start[0]
            final fun <get-Start>(): androidx.compose.ui/Alignment.Horizontal // androidx.compose.ui/Alignment.Companion.Start.<get-Start>|<get-Start>(){}[0]
        final val Top // androidx.compose.ui/Alignment.Companion.Top|{}Top[0]
            final fun <get-Top>(): androidx.compose.ui/Alignment.Vertical // androidx.compose.ui/Alignment.Companion.Top.<get-Top>|<get-Top>(){}[0]
        final val TopCenter // androidx.compose.ui/Alignment.Companion.TopCenter|{}TopCenter[0]
            final fun <get-TopCenter>(): androidx.compose.ui/Alignment // androidx.compose.ui/Alignment.Companion.TopCenter.<get-TopCenter>|<get-TopCenter>(){}[0]
        final val TopEnd // androidx.compose.ui/Alignment.Companion.TopEnd|{}TopEnd[0]
            final fun <get-TopEnd>(): androidx.compose.ui/Alignment // androidx.compose.ui/Alignment.Companion.TopEnd.<get-TopEnd>|<get-TopEnd>(){}[0]
        final val TopStart // androidx.compose.ui/Alignment.Companion.TopStart|{}TopStart[0]
            final fun <get-TopStart>(): androidx.compose.ui/Alignment // androidx.compose.ui/Alignment.Companion.TopStart.<get-TopStart>|<get-TopStart>(){}[0]
    }
}

abstract interface <#A: kotlin/Any?> androidx.compose.ui.modifier/ModifierLocalProvider : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.modifier/ModifierLocalProvider|null[0]
    abstract val key // androidx.compose.ui.modifier/ModifierLocalProvider.key|{}key[0]
        abstract fun <get-key>(): androidx.compose.ui.modifier/ProvidableModifierLocal<#A> // androidx.compose.ui.modifier/ModifierLocalProvider.key.<get-key>|<get-key>(){}[0]
    abstract val value // androidx.compose.ui.modifier/ModifierLocalProvider.value|{}value[0]
        abstract fun <get-value>(): #A // androidx.compose.ui.modifier/ModifierLocalProvider.value.<get-value>|<get-value>(){}[0]
}

abstract interface androidx.compose.ui.autofill/Autofill { // androidx.compose.ui.autofill/Autofill|null[0]
    abstract fun cancelAutofillForNode(androidx.compose.ui.autofill/AutofillNode) // androidx.compose.ui.autofill/Autofill.cancelAutofillForNode|cancelAutofillForNode(androidx.compose.ui.autofill.AutofillNode){}[0]
    abstract fun requestAutofillForNode(androidx.compose.ui.autofill/AutofillNode) // androidx.compose.ui.autofill/Autofill.requestAutofillForNode|requestAutofillForNode(androidx.compose.ui.autofill.AutofillNode){}[0]
}

abstract interface androidx.compose.ui.draganddrop/DragAndDropModifierNode : androidx.compose.ui.draganddrop/DragAndDropTarget, androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.draganddrop/DragAndDropModifierNode|null[0]
    abstract fun acceptDragAndDropTransfer(androidx.compose.ui.draganddrop/DragAndDropEvent): kotlin/Boolean // androidx.compose.ui.draganddrop/DragAndDropModifierNode.acceptDragAndDropTransfer|acceptDragAndDropTransfer(androidx.compose.ui.draganddrop.DragAndDropEvent){}[0]
    abstract fun drag(androidx.compose.ui.draganddrop/DragAndDropTransferData, androidx.compose.ui.geometry/Size, kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>) // androidx.compose.ui.draganddrop/DragAndDropModifierNode.drag|drag(androidx.compose.ui.draganddrop.DragAndDropTransferData;androidx.compose.ui.geometry.Size;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
}

abstract interface androidx.compose.ui.draganddrop/DragAndDropStartTransferScope { // androidx.compose.ui.draganddrop/DragAndDropStartTransferScope|null[0]
    abstract fun startDragAndDropTransfer(androidx.compose.ui.draganddrop/DragAndDropTransferData, androidx.compose.ui.geometry/Size, kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>): kotlin/Boolean // androidx.compose.ui.draganddrop/DragAndDropStartTransferScope.startDragAndDropTransfer|startDragAndDropTransfer(androidx.compose.ui.draganddrop.DragAndDropTransferData;androidx.compose.ui.geometry.Size;kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
}

abstract interface androidx.compose.ui.draganddrop/DragAndDropTarget { // androidx.compose.ui.draganddrop/DragAndDropTarget|null[0]
    abstract fun onDrop(androidx.compose.ui.draganddrop/DragAndDropEvent): kotlin/Boolean // androidx.compose.ui.draganddrop/DragAndDropTarget.onDrop|onDrop(androidx.compose.ui.draganddrop.DragAndDropEvent){}[0]
    open fun onChanged(androidx.compose.ui.draganddrop/DragAndDropEvent) // androidx.compose.ui.draganddrop/DragAndDropTarget.onChanged|onChanged(androidx.compose.ui.draganddrop.DragAndDropEvent){}[0]
    open fun onEnded(androidx.compose.ui.draganddrop/DragAndDropEvent) // androidx.compose.ui.draganddrop/DragAndDropTarget.onEnded|onEnded(androidx.compose.ui.draganddrop.DragAndDropEvent){}[0]
    open fun onEntered(androidx.compose.ui.draganddrop/DragAndDropEvent) // androidx.compose.ui.draganddrop/DragAndDropTarget.onEntered|onEntered(androidx.compose.ui.draganddrop.DragAndDropEvent){}[0]
    open fun onExited(androidx.compose.ui.draganddrop/DragAndDropEvent) // androidx.compose.ui.draganddrop/DragAndDropTarget.onExited|onExited(androidx.compose.ui.draganddrop.DragAndDropEvent){}[0]
    open fun onMoved(androidx.compose.ui.draganddrop/DragAndDropEvent) // androidx.compose.ui.draganddrop/DragAndDropTarget.onMoved|onMoved(androidx.compose.ui.draganddrop.DragAndDropEvent){}[0]
    open fun onStarted(androidx.compose.ui.draganddrop/DragAndDropEvent) // androidx.compose.ui.draganddrop/DragAndDropTarget.onStarted|onStarted(androidx.compose.ui.draganddrop.DragAndDropEvent){}[0]
}

abstract interface androidx.compose.ui.draw/BuildDrawCacheParams { // androidx.compose.ui.draw/BuildDrawCacheParams|null[0]
    abstract val density // androidx.compose.ui.draw/BuildDrawCacheParams.density|{}density[0]
        abstract fun <get-density>(): androidx.compose.ui.unit/Density // androidx.compose.ui.draw/BuildDrawCacheParams.density.<get-density>|<get-density>(){}[0]
    abstract val layoutDirection // androidx.compose.ui.draw/BuildDrawCacheParams.layoutDirection|{}layoutDirection[0]
        abstract fun <get-layoutDirection>(): androidx.compose.ui.unit/LayoutDirection // androidx.compose.ui.draw/BuildDrawCacheParams.layoutDirection.<get-layoutDirection>|<get-layoutDirection>(){}[0]
    abstract val size // androidx.compose.ui.draw/BuildDrawCacheParams.size|{}size[0]
        abstract fun <get-size>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.draw/BuildDrawCacheParams.size.<get-size>|<get-size>(){}[0]
}

abstract interface androidx.compose.ui.draw/DrawCacheModifier : androidx.compose.ui.draw/DrawModifier { // androidx.compose.ui.draw/DrawCacheModifier|null[0]
    abstract fun onBuildCache(androidx.compose.ui.draw/BuildDrawCacheParams) // androidx.compose.ui.draw/DrawCacheModifier.onBuildCache|onBuildCache(androidx.compose.ui.draw.BuildDrawCacheParams){}[0]
}

abstract interface androidx.compose.ui.draw/DrawModifier : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.draw/DrawModifier|null[0]
    abstract fun (androidx.compose.ui.graphics.drawscope/ContentDrawScope).draw() // androidx.compose.ui.draw/DrawModifier.draw|draw@androidx.compose.ui.graphics.drawscope.ContentDrawScope(){}[0]
}

abstract interface androidx.compose.ui.focus/FocusEventModifier : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.focus/FocusEventModifier|null[0]
    abstract fun onFocusEvent(androidx.compose.ui.focus/FocusState) // androidx.compose.ui.focus/FocusEventModifier.onFocusEvent|onFocusEvent(androidx.compose.ui.focus.FocusState){}[0]
}

abstract interface androidx.compose.ui.focus/FocusEventModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.focus/FocusEventModifierNode|null[0]
    abstract fun onFocusEvent(androidx.compose.ui.focus/FocusState) // androidx.compose.ui.focus/FocusEventModifierNode.onFocusEvent|onFocusEvent(androidx.compose.ui.focus.FocusState){}[0]
}

abstract interface androidx.compose.ui.focus/FocusManager { // androidx.compose.ui.focus/FocusManager|null[0]
    abstract fun clearFocus(kotlin/Boolean = ...) // androidx.compose.ui.focus/FocusManager.clearFocus|clearFocus(kotlin.Boolean){}[0]
    abstract fun moveFocus(androidx.compose.ui.focus/FocusDirection): kotlin/Boolean // androidx.compose.ui.focus/FocusManager.moveFocus|moveFocus(androidx.compose.ui.focus.FocusDirection){}[0]
}

abstract interface androidx.compose.ui.focus/FocusOrderModifier : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.focus/FocusOrderModifier|null[0]
    abstract fun populateFocusOrder(androidx.compose.ui.focus/FocusOrder) // androidx.compose.ui.focus/FocusOrderModifier.populateFocusOrder|populateFocusOrder(androidx.compose.ui.focus.FocusOrder){}[0]
}

abstract interface androidx.compose.ui.focus/FocusProperties { // androidx.compose.ui.focus/FocusProperties|null[0]
    abstract var canFocus // androidx.compose.ui.focus/FocusProperties.canFocus|{}canFocus[0]
        abstract fun <get-canFocus>(): kotlin/Boolean // androidx.compose.ui.focus/FocusProperties.canFocus.<get-canFocus>|<get-canFocus>(){}[0]
        abstract fun <set-canFocus>(kotlin/Boolean) // androidx.compose.ui.focus/FocusProperties.canFocus.<set-canFocus>|<set-canFocus>(kotlin.Boolean){}[0]
    open var down // androidx.compose.ui.focus/FocusProperties.down|{}down[0]
        open fun <get-down>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusProperties.down.<get-down>|<get-down>(){}[0]
        open fun <set-down>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusProperties.down.<set-down>|<set-down>(androidx.compose.ui.focus.FocusRequester){}[0]
    open var end // androidx.compose.ui.focus/FocusProperties.end|{}end[0]
        open fun <get-end>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusProperties.end.<get-end>|<get-end>(){}[0]
        open fun <set-end>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusProperties.end.<set-end>|<set-end>(androidx.compose.ui.focus.FocusRequester){}[0]
    open var left // androidx.compose.ui.focus/FocusProperties.left|{}left[0]
        open fun <get-left>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusProperties.left.<get-left>|<get-left>(){}[0]
        open fun <set-left>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusProperties.left.<set-left>|<set-left>(androidx.compose.ui.focus.FocusRequester){}[0]
    open var next // androidx.compose.ui.focus/FocusProperties.next|{}next[0]
        open fun <get-next>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusProperties.next.<get-next>|<get-next>(){}[0]
        open fun <set-next>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusProperties.next.<set-next>|<set-next>(androidx.compose.ui.focus.FocusRequester){}[0]
    open var onEnter // androidx.compose.ui.focus/FocusProperties.onEnter|{}onEnter[0]
        open fun <get-onEnter>(): kotlin/Function1<androidx.compose.ui.focus/FocusEnterExitScope, kotlin/Unit> // androidx.compose.ui.focus/FocusProperties.onEnter.<get-onEnter>|<get-onEnter>(){}[0]
        open fun <set-onEnter>(kotlin/Function1<androidx.compose.ui.focus/FocusEnterExitScope, kotlin/Unit>) // androidx.compose.ui.focus/FocusProperties.onEnter.<set-onEnter>|<set-onEnter>(kotlin.Function1<androidx.compose.ui.focus.FocusEnterExitScope,kotlin.Unit>){}[0]
    open var onExit // androidx.compose.ui.focus/FocusProperties.onExit|{}onExit[0]
        open fun <get-onExit>(): kotlin/Function1<androidx.compose.ui.focus/FocusEnterExitScope, kotlin/Unit> // androidx.compose.ui.focus/FocusProperties.onExit.<get-onExit>|<get-onExit>(){}[0]
        open fun <set-onExit>(kotlin/Function1<androidx.compose.ui.focus/FocusEnterExitScope, kotlin/Unit>) // androidx.compose.ui.focus/FocusProperties.onExit.<set-onExit>|<set-onExit>(kotlin.Function1<androidx.compose.ui.focus.FocusEnterExitScope,kotlin.Unit>){}[0]
    open var previous // androidx.compose.ui.focus/FocusProperties.previous|{}previous[0]
        open fun <get-previous>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusProperties.previous.<get-previous>|<get-previous>(){}[0]
        open fun <set-previous>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusProperties.previous.<set-previous>|<set-previous>(androidx.compose.ui.focus.FocusRequester){}[0]
    open var right // androidx.compose.ui.focus/FocusProperties.right|{}right[0]
        open fun <get-right>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusProperties.right.<get-right>|<get-right>(){}[0]
        open fun <set-right>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusProperties.right.<set-right>|<set-right>(androidx.compose.ui.focus.FocusRequester){}[0]
    open var start // androidx.compose.ui.focus/FocusProperties.start|{}start[0]
        open fun <get-start>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusProperties.start.<get-start>|<get-start>(){}[0]
        open fun <set-start>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusProperties.start.<set-start>|<set-start>(androidx.compose.ui.focus.FocusRequester){}[0]
    open var up // androidx.compose.ui.focus/FocusProperties.up|{}up[0]
        open fun <get-up>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusProperties.up.<get-up>|<get-up>(){}[0]
        open fun <set-up>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusProperties.up.<set-up>|<set-up>(androidx.compose.ui.focus.FocusRequester){}[0]
}

abstract interface androidx.compose.ui.focus/FocusPropertiesModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.focus/FocusPropertiesModifierNode|null[0]
    abstract fun applyFocusProperties(androidx.compose.ui.focus/FocusProperties) // androidx.compose.ui.focus/FocusPropertiesModifierNode.applyFocusProperties|applyFocusProperties(androidx.compose.ui.focus.FocusProperties){}[0]
}

abstract interface androidx.compose.ui.focus/FocusRequesterModifier : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.focus/FocusRequesterModifier|null[0]
    abstract val focusRequester // androidx.compose.ui.focus/FocusRequesterModifier.focusRequester|{}focusRequester[0]
        abstract fun <get-focusRequester>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequesterModifier.focusRequester.<get-focusRequester>|<get-focusRequester>(){}[0]
}

abstract interface androidx.compose.ui.focus/FocusRequesterModifierNode : androidx.compose.ui.node/DelegatableNode // androidx.compose.ui.focus/FocusRequesterModifierNode|null[0]

abstract interface androidx.compose.ui.focus/FocusState { // androidx.compose.ui.focus/FocusState|null[0]
    abstract val hasFocus // androidx.compose.ui.focus/FocusState.hasFocus|{}hasFocus[0]
        abstract fun <get-hasFocus>(): kotlin/Boolean // androidx.compose.ui.focus/FocusState.hasFocus.<get-hasFocus>|<get-hasFocus>(){}[0]
    abstract val isCaptured // androidx.compose.ui.focus/FocusState.isCaptured|{}isCaptured[0]
        abstract fun <get-isCaptured>(): kotlin/Boolean // androidx.compose.ui.focus/FocusState.isCaptured.<get-isCaptured>|<get-isCaptured>(){}[0]
    abstract val isFocused // androidx.compose.ui.focus/FocusState.isFocused|{}isFocused[0]
        abstract fun <get-isFocused>(): kotlin/Boolean // androidx.compose.ui.focus/FocusState.isFocused.<get-isFocused>|<get-isFocused>(){}[0]
}

abstract interface androidx.compose.ui.graphics.vector/VectorConfig { // androidx.compose.ui.graphics.vector/VectorConfig|null[0]
    open fun <#A1: kotlin/Any?> getOrDefault(androidx.compose.ui.graphics.vector/VectorProperty<#A1>, #A1): #A1 // androidx.compose.ui.graphics.vector/VectorConfig.getOrDefault|getOrDefault(androidx.compose.ui.graphics.vector.VectorProperty<0:0>;0:0){0§<kotlin.Any?>}[0]
}

abstract interface androidx.compose.ui.graphics/GraphicsLayerScope : androidx.compose.ui.unit/Density { // androidx.compose.ui.graphics/GraphicsLayerScope|null[0]
    open val size // androidx.compose.ui.graphics/GraphicsLayerScope.size|{}size[0]
        open fun <get-size>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics/GraphicsLayerScope.size.<get-size>|<get-size>(){}[0]

    abstract var alpha // androidx.compose.ui.graphics/GraphicsLayerScope.alpha|{}alpha[0]
        abstract fun <get-alpha>(): kotlin/Float // androidx.compose.ui.graphics/GraphicsLayerScope.alpha.<get-alpha>|<get-alpha>(){}[0]
        abstract fun <set-alpha>(kotlin/Float) // androidx.compose.ui.graphics/GraphicsLayerScope.alpha.<set-alpha>|<set-alpha>(kotlin.Float){}[0]
    abstract var cameraDistance // androidx.compose.ui.graphics/GraphicsLayerScope.cameraDistance|{}cameraDistance[0]
        abstract fun <get-cameraDistance>(): kotlin/Float // androidx.compose.ui.graphics/GraphicsLayerScope.cameraDistance.<get-cameraDistance>|<get-cameraDistance>(){}[0]
        abstract fun <set-cameraDistance>(kotlin/Float) // androidx.compose.ui.graphics/GraphicsLayerScope.cameraDistance.<set-cameraDistance>|<set-cameraDistance>(kotlin.Float){}[0]
    abstract var clip // androidx.compose.ui.graphics/GraphicsLayerScope.clip|{}clip[0]
        abstract fun <get-clip>(): kotlin/Boolean // androidx.compose.ui.graphics/GraphicsLayerScope.clip.<get-clip>|<get-clip>(){}[0]
        abstract fun <set-clip>(kotlin/Boolean) // androidx.compose.ui.graphics/GraphicsLayerScope.clip.<set-clip>|<set-clip>(kotlin.Boolean){}[0]
    abstract var rotationX // androidx.compose.ui.graphics/GraphicsLayerScope.rotationX|{}rotationX[0]
        abstract fun <get-rotationX>(): kotlin/Float // androidx.compose.ui.graphics/GraphicsLayerScope.rotationX.<get-rotationX>|<get-rotationX>(){}[0]
        abstract fun <set-rotationX>(kotlin/Float) // androidx.compose.ui.graphics/GraphicsLayerScope.rotationX.<set-rotationX>|<set-rotationX>(kotlin.Float){}[0]
    abstract var rotationY // androidx.compose.ui.graphics/GraphicsLayerScope.rotationY|{}rotationY[0]
        abstract fun <get-rotationY>(): kotlin/Float // androidx.compose.ui.graphics/GraphicsLayerScope.rotationY.<get-rotationY>|<get-rotationY>(){}[0]
        abstract fun <set-rotationY>(kotlin/Float) // androidx.compose.ui.graphics/GraphicsLayerScope.rotationY.<set-rotationY>|<set-rotationY>(kotlin.Float){}[0]
    abstract var rotationZ // androidx.compose.ui.graphics/GraphicsLayerScope.rotationZ|{}rotationZ[0]
        abstract fun <get-rotationZ>(): kotlin/Float // androidx.compose.ui.graphics/GraphicsLayerScope.rotationZ.<get-rotationZ>|<get-rotationZ>(){}[0]
        abstract fun <set-rotationZ>(kotlin/Float) // androidx.compose.ui.graphics/GraphicsLayerScope.rotationZ.<set-rotationZ>|<set-rotationZ>(kotlin.Float){}[0]
    abstract var scaleX // androidx.compose.ui.graphics/GraphicsLayerScope.scaleX|{}scaleX[0]
        abstract fun <get-scaleX>(): kotlin/Float // androidx.compose.ui.graphics/GraphicsLayerScope.scaleX.<get-scaleX>|<get-scaleX>(){}[0]
        abstract fun <set-scaleX>(kotlin/Float) // androidx.compose.ui.graphics/GraphicsLayerScope.scaleX.<set-scaleX>|<set-scaleX>(kotlin.Float){}[0]
    abstract var scaleY // androidx.compose.ui.graphics/GraphicsLayerScope.scaleY|{}scaleY[0]
        abstract fun <get-scaleY>(): kotlin/Float // androidx.compose.ui.graphics/GraphicsLayerScope.scaleY.<get-scaleY>|<get-scaleY>(){}[0]
        abstract fun <set-scaleY>(kotlin/Float) // androidx.compose.ui.graphics/GraphicsLayerScope.scaleY.<set-scaleY>|<set-scaleY>(kotlin.Float){}[0]
    abstract var shadowElevation // androidx.compose.ui.graphics/GraphicsLayerScope.shadowElevation|{}shadowElevation[0]
        abstract fun <get-shadowElevation>(): kotlin/Float // androidx.compose.ui.graphics/GraphicsLayerScope.shadowElevation.<get-shadowElevation>|<get-shadowElevation>(){}[0]
        abstract fun <set-shadowElevation>(kotlin/Float) // androidx.compose.ui.graphics/GraphicsLayerScope.shadowElevation.<set-shadowElevation>|<set-shadowElevation>(kotlin.Float){}[0]
    abstract var shape // androidx.compose.ui.graphics/GraphicsLayerScope.shape|{}shape[0]
        abstract fun <get-shape>(): androidx.compose.ui.graphics/Shape // androidx.compose.ui.graphics/GraphicsLayerScope.shape.<get-shape>|<get-shape>(){}[0]
        abstract fun <set-shape>(androidx.compose.ui.graphics/Shape) // androidx.compose.ui.graphics/GraphicsLayerScope.shape.<set-shape>|<set-shape>(androidx.compose.ui.graphics.Shape){}[0]
    abstract var transformOrigin // androidx.compose.ui.graphics/GraphicsLayerScope.transformOrigin|{}transformOrigin[0]
        abstract fun <get-transformOrigin>(): androidx.compose.ui.graphics/TransformOrigin // androidx.compose.ui.graphics/GraphicsLayerScope.transformOrigin.<get-transformOrigin>|<get-transformOrigin>(){}[0]
        abstract fun <set-transformOrigin>(androidx.compose.ui.graphics/TransformOrigin) // androidx.compose.ui.graphics/GraphicsLayerScope.transformOrigin.<set-transformOrigin>|<set-transformOrigin>(androidx.compose.ui.graphics.TransformOrigin){}[0]
    abstract var translationX // androidx.compose.ui.graphics/GraphicsLayerScope.translationX|{}translationX[0]
        abstract fun <get-translationX>(): kotlin/Float // androidx.compose.ui.graphics/GraphicsLayerScope.translationX.<get-translationX>|<get-translationX>(){}[0]
        abstract fun <set-translationX>(kotlin/Float) // androidx.compose.ui.graphics/GraphicsLayerScope.translationX.<set-translationX>|<set-translationX>(kotlin.Float){}[0]
    abstract var translationY // androidx.compose.ui.graphics/GraphicsLayerScope.translationY|{}translationY[0]
        abstract fun <get-translationY>(): kotlin/Float // androidx.compose.ui.graphics/GraphicsLayerScope.translationY.<get-translationY>|<get-translationY>(){}[0]
        abstract fun <set-translationY>(kotlin/Float) // androidx.compose.ui.graphics/GraphicsLayerScope.translationY.<set-translationY>|<set-translationY>(kotlin.Float){}[0]
    open var ambientShadowColor // androidx.compose.ui.graphics/GraphicsLayerScope.ambientShadowColor|{}ambientShadowColor[0]
        open fun <get-ambientShadowColor>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/GraphicsLayerScope.ambientShadowColor.<get-ambientShadowColor>|<get-ambientShadowColor>(){}[0]
        open fun <set-ambientShadowColor>(androidx.compose.ui.graphics/Color) // androidx.compose.ui.graphics/GraphicsLayerScope.ambientShadowColor.<set-ambientShadowColor>|<set-ambientShadowColor>(androidx.compose.ui.graphics.Color){}[0]
    open var blendMode // androidx.compose.ui.graphics/GraphicsLayerScope.blendMode|{}blendMode[0]
        open fun <get-blendMode>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics/GraphicsLayerScope.blendMode.<get-blendMode>|<get-blendMode>(){}[0]
        open fun <set-blendMode>(androidx.compose.ui.graphics/BlendMode) // androidx.compose.ui.graphics/GraphicsLayerScope.blendMode.<set-blendMode>|<set-blendMode>(androidx.compose.ui.graphics.BlendMode){}[0]
    open var colorFilter // androidx.compose.ui.graphics/GraphicsLayerScope.colorFilter|{}colorFilter[0]
        open fun <get-colorFilter>(): androidx.compose.ui.graphics/ColorFilter? // androidx.compose.ui.graphics/GraphicsLayerScope.colorFilter.<get-colorFilter>|<get-colorFilter>(){}[0]
        open fun <set-colorFilter>(androidx.compose.ui.graphics/ColorFilter?) // androidx.compose.ui.graphics/GraphicsLayerScope.colorFilter.<set-colorFilter>|<set-colorFilter>(androidx.compose.ui.graphics.ColorFilter?){}[0]
    open var compositingStrategy // androidx.compose.ui.graphics/GraphicsLayerScope.compositingStrategy|{}compositingStrategy[0]
        open fun <get-compositingStrategy>(): androidx.compose.ui.graphics/CompositingStrategy // androidx.compose.ui.graphics/GraphicsLayerScope.compositingStrategy.<get-compositingStrategy>|<get-compositingStrategy>(){}[0]
        open fun <set-compositingStrategy>(androidx.compose.ui.graphics/CompositingStrategy) // androidx.compose.ui.graphics/GraphicsLayerScope.compositingStrategy.<set-compositingStrategy>|<set-compositingStrategy>(androidx.compose.ui.graphics.CompositingStrategy){}[0]
    open var renderEffect // androidx.compose.ui.graphics/GraphicsLayerScope.renderEffect|{}renderEffect[0]
        open fun <get-renderEffect>(): androidx.compose.ui.graphics/RenderEffect? // androidx.compose.ui.graphics/GraphicsLayerScope.renderEffect.<get-renderEffect>|<get-renderEffect>(){}[0]
        open fun <set-renderEffect>(androidx.compose.ui.graphics/RenderEffect?) // androidx.compose.ui.graphics/GraphicsLayerScope.renderEffect.<set-renderEffect>|<set-renderEffect>(androidx.compose.ui.graphics.RenderEffect?){}[0]
    open var spotShadowColor // androidx.compose.ui.graphics/GraphicsLayerScope.spotShadowColor|{}spotShadowColor[0]
        open fun <get-spotShadowColor>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/GraphicsLayerScope.spotShadowColor.<get-spotShadowColor>|<get-spotShadowColor>(){}[0]
        open fun <set-spotShadowColor>(androidx.compose.ui.graphics/Color) // androidx.compose.ui.graphics/GraphicsLayerScope.spotShadowColor.<set-spotShadowColor>|<set-spotShadowColor>(androidx.compose.ui.graphics.Color){}[0]
}

abstract interface androidx.compose.ui.hapticfeedback/HapticFeedback { // androidx.compose.ui.hapticfeedback/HapticFeedback|null[0]
    abstract fun performHapticFeedback(androidx.compose.ui.hapticfeedback/HapticFeedbackType) // androidx.compose.ui.hapticfeedback/HapticFeedback.performHapticFeedback|performHapticFeedback(androidx.compose.ui.hapticfeedback.HapticFeedbackType){}[0]
}

abstract interface androidx.compose.ui.input.key/KeyInputModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.input.key/KeyInputModifierNode|null[0]
    abstract fun onKeyEvent(androidx.compose.ui.input.key/KeyEvent): kotlin/Boolean // androidx.compose.ui.input.key/KeyInputModifierNode.onKeyEvent|onKeyEvent(androidx.compose.ui.input.key.KeyEvent){}[0]
    abstract fun onPreKeyEvent(androidx.compose.ui.input.key/KeyEvent): kotlin/Boolean // androidx.compose.ui.input.key/KeyInputModifierNode.onPreKeyEvent|onPreKeyEvent(androidx.compose.ui.input.key.KeyEvent){}[0]
}

abstract interface androidx.compose.ui.input.key/SoftKeyboardInterceptionModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.input.key/SoftKeyboardInterceptionModifierNode|null[0]
    abstract fun onInterceptKeyBeforeSoftKeyboard(androidx.compose.ui.input.key/KeyEvent): kotlin/Boolean // androidx.compose.ui.input.key/SoftKeyboardInterceptionModifierNode.onInterceptKeyBeforeSoftKeyboard|onInterceptKeyBeforeSoftKeyboard(androidx.compose.ui.input.key.KeyEvent){}[0]
    abstract fun onPreInterceptKeyBeforeSoftKeyboard(androidx.compose.ui.input.key/KeyEvent): kotlin/Boolean // androidx.compose.ui.input.key/SoftKeyboardInterceptionModifierNode.onPreInterceptKeyBeforeSoftKeyboard|onPreInterceptKeyBeforeSoftKeyboard(androidx.compose.ui.input.key.KeyEvent){}[0]
}

abstract interface androidx.compose.ui.input.nestedscroll/NestedScrollConnection { // androidx.compose.ui.input.nestedscroll/NestedScrollConnection|null[0]
    open fun onPostScroll(androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Offset, androidx.compose.ui.input.nestedscroll/NestedScrollSource): androidx.compose.ui.geometry/Offset // androidx.compose.ui.input.nestedscroll/NestedScrollConnection.onPostScroll|onPostScroll(androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Offset;androidx.compose.ui.input.nestedscroll.NestedScrollSource){}[0]
    open fun onPreScroll(androidx.compose.ui.geometry/Offset, androidx.compose.ui.input.nestedscroll/NestedScrollSource): androidx.compose.ui.geometry/Offset // androidx.compose.ui.input.nestedscroll/NestedScrollConnection.onPreScroll|onPreScroll(androidx.compose.ui.geometry.Offset;androidx.compose.ui.input.nestedscroll.NestedScrollSource){}[0]
    open suspend fun onPostFling(androidx.compose.ui.unit/Velocity, androidx.compose.ui.unit/Velocity): androidx.compose.ui.unit/Velocity // androidx.compose.ui.input.nestedscroll/NestedScrollConnection.onPostFling|onPostFling(androidx.compose.ui.unit.Velocity;androidx.compose.ui.unit.Velocity){}[0]
    open suspend fun onPreFling(androidx.compose.ui.unit/Velocity): androidx.compose.ui.unit/Velocity // androidx.compose.ui.input.nestedscroll/NestedScrollConnection.onPreFling|onPreFling(androidx.compose.ui.unit.Velocity){}[0]
}

abstract interface androidx.compose.ui.input.pointer/AwaitPointerEventScope : androidx.compose.ui.unit/Density { // androidx.compose.ui.input.pointer/AwaitPointerEventScope|null[0]
    abstract val currentEvent // androidx.compose.ui.input.pointer/AwaitPointerEventScope.currentEvent|{}currentEvent[0]
        abstract fun <get-currentEvent>(): androidx.compose.ui.input.pointer/PointerEvent // androidx.compose.ui.input.pointer/AwaitPointerEventScope.currentEvent.<get-currentEvent>|<get-currentEvent>(){}[0]
    abstract val size // androidx.compose.ui.input.pointer/AwaitPointerEventScope.size|{}size[0]
        abstract fun <get-size>(): androidx.compose.ui.unit/IntSize // androidx.compose.ui.input.pointer/AwaitPointerEventScope.size.<get-size>|<get-size>(){}[0]
    abstract val viewConfiguration // androidx.compose.ui.input.pointer/AwaitPointerEventScope.viewConfiguration|{}viewConfiguration[0]
        abstract fun <get-viewConfiguration>(): androidx.compose.ui.platform/ViewConfiguration // androidx.compose.ui.input.pointer/AwaitPointerEventScope.viewConfiguration.<get-viewConfiguration>|<get-viewConfiguration>(){}[0]
    open val extendedTouchPadding // androidx.compose.ui.input.pointer/AwaitPointerEventScope.extendedTouchPadding|{}extendedTouchPadding[0]
        open fun <get-extendedTouchPadding>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.input.pointer/AwaitPointerEventScope.extendedTouchPadding.<get-extendedTouchPadding>|<get-extendedTouchPadding>(){}[0]

    abstract suspend fun awaitPointerEvent(androidx.compose.ui.input.pointer/PointerEventPass = ...): androidx.compose.ui.input.pointer/PointerEvent // androidx.compose.ui.input.pointer/AwaitPointerEventScope.awaitPointerEvent|awaitPointerEvent(androidx.compose.ui.input.pointer.PointerEventPass){}[0]
    open suspend fun <#A1: kotlin/Any?> withTimeout(kotlin/Long, kotlin.coroutines/SuspendFunction1<androidx.compose.ui.input.pointer/AwaitPointerEventScope, #A1>): #A1 // androidx.compose.ui.input.pointer/AwaitPointerEventScope.withTimeout|withTimeout(kotlin.Long;kotlin.coroutines.SuspendFunction1<androidx.compose.ui.input.pointer.AwaitPointerEventScope,0:0>){0§<kotlin.Any?>}[0]
    open suspend fun <#A1: kotlin/Any?> withTimeoutOrNull(kotlin/Long, kotlin.coroutines/SuspendFunction1<androidx.compose.ui.input.pointer/AwaitPointerEventScope, #A1>): #A1? // androidx.compose.ui.input.pointer/AwaitPointerEventScope.withTimeoutOrNull|withTimeoutOrNull(kotlin.Long;kotlin.coroutines.SuspendFunction1<androidx.compose.ui.input.pointer.AwaitPointerEventScope,0:0>){0§<kotlin.Any?>}[0]
}

abstract interface androidx.compose.ui.input.pointer/PointerIcon { // androidx.compose.ui.input.pointer/PointerIcon|null[0]
    final object Companion { // androidx.compose.ui.input.pointer/PointerIcon.Companion|null[0]
        final val Crosshair // androidx.compose.ui.input.pointer/PointerIcon.Companion.Crosshair|{}Crosshair[0]
            final fun <get-Crosshair>(): androidx.compose.ui.input.pointer/PointerIcon // androidx.compose.ui.input.pointer/PointerIcon.Companion.Crosshair.<get-Crosshair>|<get-Crosshair>(){}[0]
        final val Default // androidx.compose.ui.input.pointer/PointerIcon.Companion.Default|{}Default[0]
            final fun <get-Default>(): androidx.compose.ui.input.pointer/PointerIcon // androidx.compose.ui.input.pointer/PointerIcon.Companion.Default.<get-Default>|<get-Default>(){}[0]
        final val Hand // androidx.compose.ui.input.pointer/PointerIcon.Companion.Hand|{}Hand[0]
            final fun <get-Hand>(): androidx.compose.ui.input.pointer/PointerIcon // androidx.compose.ui.input.pointer/PointerIcon.Companion.Hand.<get-Hand>|<get-Hand>(){}[0]
        final val Text // androidx.compose.ui.input.pointer/PointerIcon.Companion.Text|{}Text[0]
            final fun <get-Text>(): androidx.compose.ui.input.pointer/PointerIcon // androidx.compose.ui.input.pointer/PointerIcon.Companion.Text.<get-Text>|<get-Text>(){}[0]
    }
}

abstract interface androidx.compose.ui.input.pointer/PointerInputModifier : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.input.pointer/PointerInputModifier|null[0]
    abstract val pointerInputFilter // androidx.compose.ui.input.pointer/PointerInputModifier.pointerInputFilter|{}pointerInputFilter[0]
        abstract fun <get-pointerInputFilter>(): androidx.compose.ui.input.pointer/PointerInputFilter // androidx.compose.ui.input.pointer/PointerInputModifier.pointerInputFilter.<get-pointerInputFilter>|<get-pointerInputFilter>(){}[0]
}

abstract interface androidx.compose.ui.input.pointer/PointerInputScope : androidx.compose.ui.unit/Density { // androidx.compose.ui.input.pointer/PointerInputScope|null[0]
    abstract val size // androidx.compose.ui.input.pointer/PointerInputScope.size|{}size[0]
        abstract fun <get-size>(): androidx.compose.ui.unit/IntSize // androidx.compose.ui.input.pointer/PointerInputScope.size.<get-size>|<get-size>(){}[0]
    abstract val viewConfiguration // androidx.compose.ui.input.pointer/PointerInputScope.viewConfiguration|{}viewConfiguration[0]
        abstract fun <get-viewConfiguration>(): androidx.compose.ui.platform/ViewConfiguration // androidx.compose.ui.input.pointer/PointerInputScope.viewConfiguration.<get-viewConfiguration>|<get-viewConfiguration>(){}[0]
    open val extendedTouchPadding // androidx.compose.ui.input.pointer/PointerInputScope.extendedTouchPadding|{}extendedTouchPadding[0]
        open fun <get-extendedTouchPadding>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.input.pointer/PointerInputScope.extendedTouchPadding.<get-extendedTouchPadding>|<get-extendedTouchPadding>(){}[0]

    open var interceptOutOfBoundsChildEvents // androidx.compose.ui.input.pointer/PointerInputScope.interceptOutOfBoundsChildEvents|{}interceptOutOfBoundsChildEvents[0]
        open fun <get-interceptOutOfBoundsChildEvents>(): kotlin/Boolean // androidx.compose.ui.input.pointer/PointerInputScope.interceptOutOfBoundsChildEvents.<get-interceptOutOfBoundsChildEvents>|<get-interceptOutOfBoundsChildEvents>(){}[0]
        open fun <set-interceptOutOfBoundsChildEvents>(kotlin/Boolean) // androidx.compose.ui.input.pointer/PointerInputScope.interceptOutOfBoundsChildEvents.<set-interceptOutOfBoundsChildEvents>|<set-interceptOutOfBoundsChildEvents>(kotlin.Boolean){}[0]

    abstract suspend fun <#A1: kotlin/Any?> awaitPointerEventScope(kotlin.coroutines/SuspendFunction1<androidx.compose.ui.input.pointer/AwaitPointerEventScope, #A1>): #A1 // androidx.compose.ui.input.pointer/PointerInputScope.awaitPointerEventScope|awaitPointerEventScope(kotlin.coroutines.SuspendFunction1<androidx.compose.ui.input.pointer.AwaitPointerEventScope,0:0>){0§<kotlin.Any?>}[0]
}

abstract interface androidx.compose.ui.input.rotary/RotaryInputModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.input.rotary/RotaryInputModifierNode|null[0]
    abstract fun onPreRotaryScrollEvent(androidx.compose.ui.input.rotary/RotaryScrollEvent): kotlin/Boolean // androidx.compose.ui.input.rotary/RotaryInputModifierNode.onPreRotaryScrollEvent|onPreRotaryScrollEvent(androidx.compose.ui.input.rotary.RotaryScrollEvent){}[0]
    abstract fun onRotaryScrollEvent(androidx.compose.ui.input.rotary/RotaryScrollEvent): kotlin/Boolean // androidx.compose.ui.input.rotary/RotaryInputModifierNode.onRotaryScrollEvent|onRotaryScrollEvent(androidx.compose.ui.input.rotary.RotaryScrollEvent){}[0]
}

abstract interface androidx.compose.ui.input/InputModeManager { // androidx.compose.ui.input/InputModeManager|null[0]
    abstract val inputMode // androidx.compose.ui.input/InputModeManager.inputMode|{}inputMode[0]
        abstract fun <get-inputMode>(): androidx.compose.ui.input/InputMode // androidx.compose.ui.input/InputModeManager.inputMode.<get-inputMode>|<get-inputMode>(){}[0]

    abstract fun requestInputMode(androidx.compose.ui.input/InputMode): kotlin/Boolean // androidx.compose.ui.input/InputModeManager.requestInputMode|requestInputMode(androidx.compose.ui.input.InputMode){}[0]
}

abstract interface androidx.compose.ui.layout/ApproachLayoutModifierNode : androidx.compose.ui.node/LayoutModifierNode { // androidx.compose.ui.layout/ApproachLayoutModifierNode|null[0]
    abstract fun (androidx.compose.ui.layout/ApproachMeasureScope).approachMeasure(androidx.compose.ui.layout/Measurable, androidx.compose.ui.unit/Constraints): androidx.compose.ui.layout/MeasureResult // androidx.compose.ui.layout/ApproachLayoutModifierNode.approachMeasure|approachMeasure@androidx.compose.ui.layout.ApproachMeasureScope(androidx.compose.ui.layout.Measurable;androidx.compose.ui.unit.Constraints){}[0]
    abstract fun isMeasurementApproachInProgress(androidx.compose.ui.unit/IntSize): kotlin/Boolean // androidx.compose.ui.layout/ApproachLayoutModifierNode.isMeasurementApproachInProgress|isMeasurementApproachInProgress(androidx.compose.ui.unit.IntSize){}[0]
    open fun (androidx.compose.ui.layout/ApproachIntrinsicMeasureScope).maxApproachIntrinsicHeight(androidx.compose.ui.layout/IntrinsicMeasurable, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/ApproachLayoutModifierNode.maxApproachIntrinsicHeight|maxApproachIntrinsicHeight@androidx.compose.ui.layout.ApproachIntrinsicMeasureScope(androidx.compose.ui.layout.IntrinsicMeasurable;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/ApproachIntrinsicMeasureScope).maxApproachIntrinsicWidth(androidx.compose.ui.layout/IntrinsicMeasurable, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/ApproachLayoutModifierNode.maxApproachIntrinsicWidth|maxApproachIntrinsicWidth@androidx.compose.ui.layout.ApproachIntrinsicMeasureScope(androidx.compose.ui.layout.IntrinsicMeasurable;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/ApproachIntrinsicMeasureScope).minApproachIntrinsicHeight(androidx.compose.ui.layout/IntrinsicMeasurable, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/ApproachLayoutModifierNode.minApproachIntrinsicHeight|minApproachIntrinsicHeight@androidx.compose.ui.layout.ApproachIntrinsicMeasureScope(androidx.compose.ui.layout.IntrinsicMeasurable;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/ApproachIntrinsicMeasureScope).minApproachIntrinsicWidth(androidx.compose.ui.layout/IntrinsicMeasurable, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/ApproachLayoutModifierNode.minApproachIntrinsicWidth|minApproachIntrinsicWidth@androidx.compose.ui.layout.ApproachIntrinsicMeasureScope(androidx.compose.ui.layout.IntrinsicMeasurable;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/MeasureScope).measure(androidx.compose.ui.layout/Measurable, androidx.compose.ui.unit/Constraints): androidx.compose.ui.layout/MeasureResult // androidx.compose.ui.layout/ApproachLayoutModifierNode.measure|measure@androidx.compose.ui.layout.MeasureScope(androidx.compose.ui.layout.Measurable;androidx.compose.ui.unit.Constraints){}[0]
    open fun (androidx.compose.ui.layout/Placeable.PlacementScope).isPlacementApproachInProgress(androidx.compose.ui.layout/LayoutCoordinates): kotlin/Boolean // androidx.compose.ui.layout/ApproachLayoutModifierNode.isPlacementApproachInProgress|isPlacementApproachInProgress@androidx.compose.ui.layout.Placeable.PlacementScope(androidx.compose.ui.layout.LayoutCoordinates){}[0]
}

abstract interface androidx.compose.ui.layout/BeyondBoundsLayout { // androidx.compose.ui.layout/BeyondBoundsLayout|null[0]
    abstract fun <#A1: kotlin/Any?> layout(androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection, kotlin/Function1<androidx.compose.ui.layout/BeyondBoundsLayout.BeyondBoundsScope, #A1?>): #A1? // androidx.compose.ui.layout/BeyondBoundsLayout.layout|layout(androidx.compose.ui.layout.BeyondBoundsLayout.LayoutDirection;kotlin.Function1<androidx.compose.ui.layout.BeyondBoundsLayout.BeyondBoundsScope,0:0?>){0§<kotlin.Any?>}[0]

    abstract interface BeyondBoundsScope { // androidx.compose.ui.layout/BeyondBoundsLayout.BeyondBoundsScope|null[0]
        abstract val hasMoreContent // androidx.compose.ui.layout/BeyondBoundsLayout.BeyondBoundsScope.hasMoreContent|{}hasMoreContent[0]
            abstract fun <get-hasMoreContent>(): kotlin/Boolean // androidx.compose.ui.layout/BeyondBoundsLayout.BeyondBoundsScope.hasMoreContent.<get-hasMoreContent>|<get-hasMoreContent>(){}[0]
    }

    final value class LayoutDirection { // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.toString|toString(){}[0]

        final object Companion { // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.Companion|null[0]
            final val Above // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.Companion.Above|{}Above[0]
                final fun <get-Above>(): androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.Companion.Above.<get-Above>|<get-Above>(){}[0]
            final val After // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.Companion.After|{}After[0]
                final fun <get-After>(): androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.Companion.After.<get-After>|<get-After>(){}[0]
            final val Before // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.Companion.Before|{}Before[0]
                final fun <get-Before>(): androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.Companion.Before.<get-Before>|<get-Before>(){}[0]
            final val Below // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.Companion.Below|{}Below[0]
                final fun <get-Below>(): androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.Companion.Below.<get-Below>|<get-Below>(){}[0]
            final val Left // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.Companion.Left|{}Left[0]
                final fun <get-Left>(): androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.Companion.Left.<get-Left>|<get-Left>(){}[0]
            final val Right // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.Companion.Right|{}Right[0]
                final fun <get-Right>(): androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection // androidx.compose.ui.layout/BeyondBoundsLayout.LayoutDirection.Companion.Right.<get-Right>|<get-Right>(){}[0]
        }
    }
}

abstract interface androidx.compose.ui.layout/ContentScale { // androidx.compose.ui.layout/ContentScale|null[0]
    abstract fun computeScaleFactor(androidx.compose.ui.geometry/Size, androidx.compose.ui.geometry/Size): androidx.compose.ui.layout/ScaleFactor // androidx.compose.ui.layout/ContentScale.computeScaleFactor|computeScaleFactor(androidx.compose.ui.geometry.Size;androidx.compose.ui.geometry.Size){}[0]

    final object Companion { // androidx.compose.ui.layout/ContentScale.Companion|null[0]
        final val Crop // androidx.compose.ui.layout/ContentScale.Companion.Crop|{}Crop[0]
            final fun <get-Crop>(): androidx.compose.ui.layout/ContentScale // androidx.compose.ui.layout/ContentScale.Companion.Crop.<get-Crop>|<get-Crop>(){}[0]
        final val FillBounds // androidx.compose.ui.layout/ContentScale.Companion.FillBounds|{}FillBounds[0]
            final fun <get-FillBounds>(): androidx.compose.ui.layout/ContentScale // androidx.compose.ui.layout/ContentScale.Companion.FillBounds.<get-FillBounds>|<get-FillBounds>(){}[0]
        final val FillHeight // androidx.compose.ui.layout/ContentScale.Companion.FillHeight|{}FillHeight[0]
            final fun <get-FillHeight>(): androidx.compose.ui.layout/ContentScale // androidx.compose.ui.layout/ContentScale.Companion.FillHeight.<get-FillHeight>|<get-FillHeight>(){}[0]
        final val FillWidth // androidx.compose.ui.layout/ContentScale.Companion.FillWidth|{}FillWidth[0]
            final fun <get-FillWidth>(): androidx.compose.ui.layout/ContentScale // androidx.compose.ui.layout/ContentScale.Companion.FillWidth.<get-FillWidth>|<get-FillWidth>(){}[0]
        final val Fit // androidx.compose.ui.layout/ContentScale.Companion.Fit|{}Fit[0]
            final fun <get-Fit>(): androidx.compose.ui.layout/ContentScale // androidx.compose.ui.layout/ContentScale.Companion.Fit.<get-Fit>|<get-Fit>(){}[0]
        final val Inside // androidx.compose.ui.layout/ContentScale.Companion.Inside|{}Inside[0]
            final fun <get-Inside>(): androidx.compose.ui.layout/ContentScale // androidx.compose.ui.layout/ContentScale.Companion.Inside.<get-Inside>|<get-Inside>(){}[0]
        final val None // androidx.compose.ui.layout/ContentScale.Companion.None|{}None[0]
            final fun <get-None>(): androidx.compose.ui.layout/FixedScale // androidx.compose.ui.layout/ContentScale.Companion.None.<get-None>|<get-None>(){}[0]
    }
}

abstract interface androidx.compose.ui.layout/IntrinsicMeasurable { // androidx.compose.ui.layout/IntrinsicMeasurable|null[0]
    abstract val parentData // androidx.compose.ui.layout/IntrinsicMeasurable.parentData|{}parentData[0]
        abstract fun <get-parentData>(): kotlin/Any? // androidx.compose.ui.layout/IntrinsicMeasurable.parentData.<get-parentData>|<get-parentData>(){}[0]

    abstract fun maxIntrinsicHeight(kotlin/Int): kotlin/Int // androidx.compose.ui.layout/IntrinsicMeasurable.maxIntrinsicHeight|maxIntrinsicHeight(kotlin.Int){}[0]
    abstract fun maxIntrinsicWidth(kotlin/Int): kotlin/Int // androidx.compose.ui.layout/IntrinsicMeasurable.maxIntrinsicWidth|maxIntrinsicWidth(kotlin.Int){}[0]
    abstract fun minIntrinsicHeight(kotlin/Int): kotlin/Int // androidx.compose.ui.layout/IntrinsicMeasurable.minIntrinsicHeight|minIntrinsicHeight(kotlin.Int){}[0]
    abstract fun minIntrinsicWidth(kotlin/Int): kotlin/Int // androidx.compose.ui.layout/IntrinsicMeasurable.minIntrinsicWidth|minIntrinsicWidth(kotlin.Int){}[0]
}

abstract interface androidx.compose.ui.layout/IntrinsicMeasureScope : androidx.compose.ui.unit/Density { // androidx.compose.ui.layout/IntrinsicMeasureScope|null[0]
    abstract val layoutDirection // androidx.compose.ui.layout/IntrinsicMeasureScope.layoutDirection|{}layoutDirection[0]
        abstract fun <get-layoutDirection>(): androidx.compose.ui.unit/LayoutDirection // androidx.compose.ui.layout/IntrinsicMeasureScope.layoutDirection.<get-layoutDirection>|<get-layoutDirection>(){}[0]
    open val isLookingAhead // androidx.compose.ui.layout/IntrinsicMeasureScope.isLookingAhead|{}isLookingAhead[0]
        open fun <get-isLookingAhead>(): kotlin/Boolean // androidx.compose.ui.layout/IntrinsicMeasureScope.isLookingAhead.<get-isLookingAhead>|<get-isLookingAhead>(){}[0]
}

abstract interface androidx.compose.ui.layout/LayoutCoordinates { // androidx.compose.ui.layout/LayoutCoordinates|null[0]
    abstract val isAttached // androidx.compose.ui.layout/LayoutCoordinates.isAttached|{}isAttached[0]
        abstract fun <get-isAttached>(): kotlin/Boolean // androidx.compose.ui.layout/LayoutCoordinates.isAttached.<get-isAttached>|<get-isAttached>(){}[0]
    abstract val parentCoordinates // androidx.compose.ui.layout/LayoutCoordinates.parentCoordinates|{}parentCoordinates[0]
        abstract fun <get-parentCoordinates>(): androidx.compose.ui.layout/LayoutCoordinates? // androidx.compose.ui.layout/LayoutCoordinates.parentCoordinates.<get-parentCoordinates>|<get-parentCoordinates>(){}[0]
    abstract val parentLayoutCoordinates // androidx.compose.ui.layout/LayoutCoordinates.parentLayoutCoordinates|{}parentLayoutCoordinates[0]
        abstract fun <get-parentLayoutCoordinates>(): androidx.compose.ui.layout/LayoutCoordinates? // androidx.compose.ui.layout/LayoutCoordinates.parentLayoutCoordinates.<get-parentLayoutCoordinates>|<get-parentLayoutCoordinates>(){}[0]
    abstract val providedAlignmentLines // androidx.compose.ui.layout/LayoutCoordinates.providedAlignmentLines|{}providedAlignmentLines[0]
        abstract fun <get-providedAlignmentLines>(): kotlin.collections/Set<androidx.compose.ui.layout/AlignmentLine> // androidx.compose.ui.layout/LayoutCoordinates.providedAlignmentLines.<get-providedAlignmentLines>|<get-providedAlignmentLines>(){}[0]
    abstract val size // androidx.compose.ui.layout/LayoutCoordinates.size|{}size[0]
        abstract fun <get-size>(): androidx.compose.ui.unit/IntSize // androidx.compose.ui.layout/LayoutCoordinates.size.<get-size>|<get-size>(){}[0]
    open val introducesMotionFrameOfReference // androidx.compose.ui.layout/LayoutCoordinates.introducesMotionFrameOfReference|{}introducesMotionFrameOfReference[0]
        open fun <get-introducesMotionFrameOfReference>(): kotlin/Boolean // androidx.compose.ui.layout/LayoutCoordinates.introducesMotionFrameOfReference.<get-introducesMotionFrameOfReference>|<get-introducesMotionFrameOfReference>(){}[0]

    abstract fun get(androidx.compose.ui.layout/AlignmentLine): kotlin/Int // androidx.compose.ui.layout/LayoutCoordinates.get|get(androidx.compose.ui.layout.AlignmentLine){}[0]
    abstract fun localBoundingBoxOf(androidx.compose.ui.layout/LayoutCoordinates, kotlin/Boolean = ...): androidx.compose.ui.geometry/Rect // androidx.compose.ui.layout/LayoutCoordinates.localBoundingBoxOf|localBoundingBoxOf(androidx.compose.ui.layout.LayoutCoordinates;kotlin.Boolean){}[0]
    abstract fun localPositionOf(androidx.compose.ui.layout/LayoutCoordinates, androidx.compose.ui.geometry/Offset): androidx.compose.ui.geometry/Offset // androidx.compose.ui.layout/LayoutCoordinates.localPositionOf|localPositionOf(androidx.compose.ui.layout.LayoutCoordinates;androidx.compose.ui.geometry.Offset){}[0]
    abstract fun localToRoot(androidx.compose.ui.geometry/Offset): androidx.compose.ui.geometry/Offset // androidx.compose.ui.layout/LayoutCoordinates.localToRoot|localToRoot(androidx.compose.ui.geometry.Offset){}[0]
    abstract fun localToWindow(androidx.compose.ui.geometry/Offset): androidx.compose.ui.geometry/Offset // androidx.compose.ui.layout/LayoutCoordinates.localToWindow|localToWindow(androidx.compose.ui.geometry.Offset){}[0]
    abstract fun windowToLocal(androidx.compose.ui.geometry/Offset): androidx.compose.ui.geometry/Offset // androidx.compose.ui.layout/LayoutCoordinates.windowToLocal|windowToLocal(androidx.compose.ui.geometry.Offset){}[0]
    open fun localPositionOf(androidx.compose.ui.layout/LayoutCoordinates, androidx.compose.ui.geometry/Offset = ..., kotlin/Boolean = ...): androidx.compose.ui.geometry/Offset // androidx.compose.ui.layout/LayoutCoordinates.localPositionOf|localPositionOf(androidx.compose.ui.layout.LayoutCoordinates;androidx.compose.ui.geometry.Offset;kotlin.Boolean){}[0]
    open fun localToScreen(androidx.compose.ui.geometry/Offset): androidx.compose.ui.geometry/Offset // androidx.compose.ui.layout/LayoutCoordinates.localToScreen|localToScreen(androidx.compose.ui.geometry.Offset){}[0]
    open fun screenToLocal(androidx.compose.ui.geometry/Offset): androidx.compose.ui.geometry/Offset // androidx.compose.ui.layout/LayoutCoordinates.screenToLocal|screenToLocal(androidx.compose.ui.geometry.Offset){}[0]
    open fun transformFrom(androidx.compose.ui.layout/LayoutCoordinates, androidx.compose.ui.graphics/Matrix) // androidx.compose.ui.layout/LayoutCoordinates.transformFrom|transformFrom(androidx.compose.ui.layout.LayoutCoordinates;androidx.compose.ui.graphics.Matrix){}[0]
    open fun transformToScreen(androidx.compose.ui.graphics/Matrix) // androidx.compose.ui.layout/LayoutCoordinates.transformToScreen|transformToScreen(androidx.compose.ui.graphics.Matrix){}[0]
}

abstract interface androidx.compose.ui.layout/LayoutIdParentData { // androidx.compose.ui.layout/LayoutIdParentData|null[0]
    abstract val layoutId // androidx.compose.ui.layout/LayoutIdParentData.layoutId|{}layoutId[0]
        abstract fun <get-layoutId>(): kotlin/Any // androidx.compose.ui.layout/LayoutIdParentData.layoutId.<get-layoutId>|<get-layoutId>(){}[0]
}

abstract interface androidx.compose.ui.layout/LayoutInfo { // androidx.compose.ui.layout/LayoutInfo|null[0]
    abstract val coordinates // androidx.compose.ui.layout/LayoutInfo.coordinates|{}coordinates[0]
        abstract fun <get-coordinates>(): androidx.compose.ui.layout/LayoutCoordinates // androidx.compose.ui.layout/LayoutInfo.coordinates.<get-coordinates>|<get-coordinates>(){}[0]
    abstract val density // androidx.compose.ui.layout/LayoutInfo.density|{}density[0]
        abstract fun <get-density>(): androidx.compose.ui.unit/Density // androidx.compose.ui.layout/LayoutInfo.density.<get-density>|<get-density>(){}[0]
    abstract val height // androidx.compose.ui.layout/LayoutInfo.height|{}height[0]
        abstract fun <get-height>(): kotlin/Int // androidx.compose.ui.layout/LayoutInfo.height.<get-height>|<get-height>(){}[0]
    abstract val isAttached // androidx.compose.ui.layout/LayoutInfo.isAttached|{}isAttached[0]
        abstract fun <get-isAttached>(): kotlin/Boolean // androidx.compose.ui.layout/LayoutInfo.isAttached.<get-isAttached>|<get-isAttached>(){}[0]
    abstract val isPlaced // androidx.compose.ui.layout/LayoutInfo.isPlaced|{}isPlaced[0]
        abstract fun <get-isPlaced>(): kotlin/Boolean // androidx.compose.ui.layout/LayoutInfo.isPlaced.<get-isPlaced>|<get-isPlaced>(){}[0]
    abstract val layoutDirection // androidx.compose.ui.layout/LayoutInfo.layoutDirection|{}layoutDirection[0]
        abstract fun <get-layoutDirection>(): androidx.compose.ui.unit/LayoutDirection // androidx.compose.ui.layout/LayoutInfo.layoutDirection.<get-layoutDirection>|<get-layoutDirection>(){}[0]
    abstract val parentInfo // androidx.compose.ui.layout/LayoutInfo.parentInfo|{}parentInfo[0]
        abstract fun <get-parentInfo>(): androidx.compose.ui.layout/LayoutInfo? // androidx.compose.ui.layout/LayoutInfo.parentInfo.<get-parentInfo>|<get-parentInfo>(){}[0]
    abstract val semanticsId // androidx.compose.ui.layout/LayoutInfo.semanticsId|{}semanticsId[0]
        abstract fun <get-semanticsId>(): kotlin/Int // androidx.compose.ui.layout/LayoutInfo.semanticsId.<get-semanticsId>|<get-semanticsId>(){}[0]
    abstract val viewConfiguration // androidx.compose.ui.layout/LayoutInfo.viewConfiguration|{}viewConfiguration[0]
        abstract fun <get-viewConfiguration>(): androidx.compose.ui.platform/ViewConfiguration // androidx.compose.ui.layout/LayoutInfo.viewConfiguration.<get-viewConfiguration>|<get-viewConfiguration>(){}[0]
    abstract val width // androidx.compose.ui.layout/LayoutInfo.width|{}width[0]
        abstract fun <get-width>(): kotlin/Int // androidx.compose.ui.layout/LayoutInfo.width.<get-width>|<get-width>(){}[0]
    open val isDeactivated // androidx.compose.ui.layout/LayoutInfo.isDeactivated|{}isDeactivated[0]
        open fun <get-isDeactivated>(): kotlin/Boolean // androidx.compose.ui.layout/LayoutInfo.isDeactivated.<get-isDeactivated>|<get-isDeactivated>(){}[0]

    abstract fun getModifierInfo(): kotlin.collections/List<androidx.compose.ui.layout/ModifierInfo> // androidx.compose.ui.layout/LayoutInfo.getModifierInfo|getModifierInfo(){}[0]
}

abstract interface androidx.compose.ui.layout/LayoutModifier : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.layout/LayoutModifier|null[0]
    abstract fun (androidx.compose.ui.layout/MeasureScope).measure(androidx.compose.ui.layout/Measurable, androidx.compose.ui.unit/Constraints): androidx.compose.ui.layout/MeasureResult // androidx.compose.ui.layout/LayoutModifier.measure|measure@androidx.compose.ui.layout.MeasureScope(androidx.compose.ui.layout.Measurable;androidx.compose.ui.unit.Constraints){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).maxIntrinsicHeight(androidx.compose.ui.layout/IntrinsicMeasurable, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/LayoutModifier.maxIntrinsicHeight|maxIntrinsicHeight@androidx.compose.ui.layout.IntrinsicMeasureScope(androidx.compose.ui.layout.IntrinsicMeasurable;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).maxIntrinsicWidth(androidx.compose.ui.layout/IntrinsicMeasurable, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/LayoutModifier.maxIntrinsicWidth|maxIntrinsicWidth@androidx.compose.ui.layout.IntrinsicMeasureScope(androidx.compose.ui.layout.IntrinsicMeasurable;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).minIntrinsicHeight(androidx.compose.ui.layout/IntrinsicMeasurable, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/LayoutModifier.minIntrinsicHeight|minIntrinsicHeight@androidx.compose.ui.layout.IntrinsicMeasureScope(androidx.compose.ui.layout.IntrinsicMeasurable;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).minIntrinsicWidth(androidx.compose.ui.layout/IntrinsicMeasurable, kotlin/Int): kotlin/Int // androidx.compose.ui.layout/LayoutModifier.minIntrinsicWidth|minIntrinsicWidth@androidx.compose.ui.layout.IntrinsicMeasureScope(androidx.compose.ui.layout.IntrinsicMeasurable;kotlin.Int){}[0]
}

abstract interface androidx.compose.ui.layout/LookaheadScope { // androidx.compose.ui.layout/LookaheadScope|null[0]
    abstract val lookaheadScopeCoordinates // androidx.compose.ui.layout/LookaheadScope.lookaheadScopeCoordinates|@androidx.compose.ui.layout.Placeable.PlacementScope{}lookaheadScopeCoordinates[0]
        abstract fun (androidx.compose.ui.layout/Placeable.PlacementScope).<get-lookaheadScopeCoordinates>(): androidx.compose.ui.layout/LayoutCoordinates // androidx.compose.ui.layout/LookaheadScope.lookaheadScopeCoordinates.<get-lookaheadScopeCoordinates>|<get-lookaheadScopeCoordinates>@androidx.compose.ui.layout.Placeable.PlacementScope(){}[0]

    abstract fun (androidx.compose.ui.layout/LayoutCoordinates).toLookaheadCoordinates(): androidx.compose.ui.layout/LayoutCoordinates // androidx.compose.ui.layout/LookaheadScope.toLookaheadCoordinates|toLookaheadCoordinates@androidx.compose.ui.layout.LayoutCoordinates(){}[0]
    open fun (androidx.compose.ui.layout/LayoutCoordinates).localLookaheadPositionOf(androidx.compose.ui.layout/LayoutCoordinates, androidx.compose.ui.geometry/Offset = ..., kotlin/Boolean = ...): androidx.compose.ui.geometry/Offset // androidx.compose.ui.layout/LookaheadScope.localLookaheadPositionOf|localLookaheadPositionOf@androidx.compose.ui.layout.LayoutCoordinates(androidx.compose.ui.layout.LayoutCoordinates;androidx.compose.ui.geometry.Offset;kotlin.Boolean){}[0]
}

abstract interface androidx.compose.ui.layout/Measurable : androidx.compose.ui.layout/IntrinsicMeasurable { // androidx.compose.ui.layout/Measurable|null[0]
    abstract fun measure(androidx.compose.ui.unit/Constraints): androidx.compose.ui.layout/Placeable // androidx.compose.ui.layout/Measurable.measure|measure(androidx.compose.ui.unit.Constraints){}[0]
}

abstract interface androidx.compose.ui.layout/MeasureResult { // androidx.compose.ui.layout/MeasureResult|null[0]
    abstract val alignmentLines // androidx.compose.ui.layout/MeasureResult.alignmentLines|{}alignmentLines[0]
        abstract fun <get-alignmentLines>(): kotlin.collections/Map<androidx.compose.ui.layout/AlignmentLine, kotlin/Int> // androidx.compose.ui.layout/MeasureResult.alignmentLines.<get-alignmentLines>|<get-alignmentLines>(){}[0]
    abstract val height // androidx.compose.ui.layout/MeasureResult.height|{}height[0]
        abstract fun <get-height>(): kotlin/Int // androidx.compose.ui.layout/MeasureResult.height.<get-height>|<get-height>(){}[0]
    abstract val width // androidx.compose.ui.layout/MeasureResult.width|{}width[0]
        abstract fun <get-width>(): kotlin/Int // androidx.compose.ui.layout/MeasureResult.width.<get-width>|<get-width>(){}[0]
    open val rulers // androidx.compose.ui.layout/MeasureResult.rulers|{}rulers[0]
        open fun <get-rulers>(): kotlin/Function1<androidx.compose.ui.layout/RulerScope, kotlin/Unit>? // androidx.compose.ui.layout/MeasureResult.rulers.<get-rulers>|<get-rulers>(){}[0]

    abstract fun placeChildren() // androidx.compose.ui.layout/MeasureResult.placeChildren|placeChildren(){}[0]
}

abstract interface androidx.compose.ui.layout/MeasureScope : androidx.compose.ui.layout/IntrinsicMeasureScope { // androidx.compose.ui.layout/MeasureScope|null[0]
    open fun layout(kotlin/Int, kotlin/Int, kotlin.collections/Map<androidx.compose.ui.layout/AlignmentLine, kotlin/Int> = ..., kotlin/Function1<androidx.compose.ui.layout/Placeable.PlacementScope, kotlin/Unit>): androidx.compose.ui.layout/MeasureResult // androidx.compose.ui.layout/MeasureScope.layout|layout(kotlin.Int;kotlin.Int;kotlin.collections.Map<androidx.compose.ui.layout.AlignmentLine,kotlin.Int>;kotlin.Function1<androidx.compose.ui.layout.Placeable.PlacementScope,kotlin.Unit>){}[0]
    open fun layout(kotlin/Int, kotlin/Int, kotlin.collections/Map<androidx.compose.ui.layout/AlignmentLine, kotlin/Int> = ..., kotlin/Function1<androidx.compose.ui.layout/RulerScope, kotlin/Unit>? = ..., kotlin/Function1<androidx.compose.ui.layout/Placeable.PlacementScope, kotlin/Unit>): androidx.compose.ui.layout/MeasureResult // androidx.compose.ui.layout/MeasureScope.layout|layout(kotlin.Int;kotlin.Int;kotlin.collections.Map<androidx.compose.ui.layout.AlignmentLine,kotlin.Int>;kotlin.Function1<androidx.compose.ui.layout.RulerScope,kotlin.Unit>?;kotlin.Function1<androidx.compose.ui.layout.Placeable.PlacementScope,kotlin.Unit>){}[0]
}

abstract interface androidx.compose.ui.layout/Measured { // androidx.compose.ui.layout/Measured|null[0]
    abstract val measuredHeight // androidx.compose.ui.layout/Measured.measuredHeight|{}measuredHeight[0]
        abstract fun <get-measuredHeight>(): kotlin/Int // androidx.compose.ui.layout/Measured.measuredHeight.<get-measuredHeight>|<get-measuredHeight>(){}[0]
    abstract val measuredWidth // androidx.compose.ui.layout/Measured.measuredWidth|{}measuredWidth[0]
        abstract fun <get-measuredWidth>(): kotlin/Int // androidx.compose.ui.layout/Measured.measuredWidth.<get-measuredWidth>|<get-measuredWidth>(){}[0]
    open val parentData // androidx.compose.ui.layout/Measured.parentData|{}parentData[0]
        open fun <get-parentData>(): kotlin/Any? // androidx.compose.ui.layout/Measured.parentData.<get-parentData>|<get-parentData>(){}[0]

    abstract fun get(androidx.compose.ui.layout/AlignmentLine): kotlin/Int // androidx.compose.ui.layout/Measured.get|get(androidx.compose.ui.layout.AlignmentLine){}[0]
}

abstract interface androidx.compose.ui.layout/OnGloballyPositionedModifier : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.layout/OnGloballyPositionedModifier|null[0]
    abstract fun onGloballyPositioned(androidx.compose.ui.layout/LayoutCoordinates) // androidx.compose.ui.layout/OnGloballyPositionedModifier.onGloballyPositioned|onGloballyPositioned(androidx.compose.ui.layout.LayoutCoordinates){}[0]
}

abstract interface androidx.compose.ui.layout/OnPlacedModifier : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.layout/OnPlacedModifier|null[0]
    abstract fun onPlaced(androidx.compose.ui.layout/LayoutCoordinates) // androidx.compose.ui.layout/OnPlacedModifier.onPlaced|onPlaced(androidx.compose.ui.layout.LayoutCoordinates){}[0]
}

abstract interface androidx.compose.ui.layout/OnRemeasuredModifier : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.layout/OnRemeasuredModifier|null[0]
    abstract fun onRemeasured(androidx.compose.ui.unit/IntSize) // androidx.compose.ui.layout/OnRemeasuredModifier.onRemeasured|onRemeasured(androidx.compose.ui.unit.IntSize){}[0]
}

abstract interface androidx.compose.ui.layout/ParentDataModifier : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.layout/ParentDataModifier|null[0]
    abstract fun (androidx.compose.ui.unit/Density).modifyParentData(kotlin/Any?): kotlin/Any? // androidx.compose.ui.layout/ParentDataModifier.modifyParentData|modifyParentData@androidx.compose.ui.unit.Density(kotlin.Any?){}[0]
}

abstract interface androidx.compose.ui.layout/PinnableContainer { // androidx.compose.ui.layout/PinnableContainer|null[0]
    abstract fun pin(): androidx.compose.ui.layout/PinnableContainer.PinnedHandle // androidx.compose.ui.layout/PinnableContainer.pin|pin(){}[0]

    abstract fun interface PinnedHandle { // androidx.compose.ui.layout/PinnableContainer.PinnedHandle|null[0]
        abstract fun release() // androidx.compose.ui.layout/PinnableContainer.PinnedHandle.release|release(){}[0]
    }
}

abstract interface androidx.compose.ui.layout/RectRulers { // androidx.compose.ui.layout/RectRulers|null[0]
    abstract val bottom // androidx.compose.ui.layout/RectRulers.bottom|{}bottom[0]
        abstract fun <get-bottom>(): androidx.compose.ui.layout/HorizontalRuler // androidx.compose.ui.layout/RectRulers.bottom.<get-bottom>|<get-bottom>(){}[0]
    abstract val left // androidx.compose.ui.layout/RectRulers.left|{}left[0]
        abstract fun <get-left>(): androidx.compose.ui.layout/VerticalRuler // androidx.compose.ui.layout/RectRulers.left.<get-left>|<get-left>(){}[0]
    abstract val right // androidx.compose.ui.layout/RectRulers.right|{}right[0]
        abstract fun <get-right>(): androidx.compose.ui.layout/VerticalRuler // androidx.compose.ui.layout/RectRulers.right.<get-right>|<get-right>(){}[0]
    abstract val top // androidx.compose.ui.layout/RectRulers.top|{}top[0]
        abstract fun <get-top>(): androidx.compose.ui.layout/HorizontalRuler // androidx.compose.ui.layout/RectRulers.top.<get-top>|<get-top>(){}[0]

    final object Companion // androidx.compose.ui.layout/RectRulers.Companion|null[0]
}

abstract interface androidx.compose.ui.layout/Remeasurement { // androidx.compose.ui.layout/Remeasurement|null[0]
    abstract fun forceRemeasure() // androidx.compose.ui.layout/Remeasurement.forceRemeasure|forceRemeasure(){}[0]
}

abstract interface androidx.compose.ui.layout/RemeasurementModifier : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.layout/RemeasurementModifier|null[0]
    abstract fun onRemeasurementAvailable(androidx.compose.ui.layout/Remeasurement) // androidx.compose.ui.layout/RemeasurementModifier.onRemeasurementAvailable|onRemeasurementAvailable(androidx.compose.ui.layout.Remeasurement){}[0]
}

abstract interface androidx.compose.ui.layout/RulerScope : androidx.compose.ui.unit/Density { // androidx.compose.ui.layout/RulerScope|null[0]
    abstract val coordinates // androidx.compose.ui.layout/RulerScope.coordinates|{}coordinates[0]
        abstract fun <get-coordinates>(): androidx.compose.ui.layout/LayoutCoordinates // androidx.compose.ui.layout/RulerScope.coordinates.<get-coordinates>|<get-coordinates>(){}[0]

    abstract fun (androidx.compose.ui.layout/Ruler).provides(kotlin/Float) // androidx.compose.ui.layout/RulerScope.provides|provides@androidx.compose.ui.layout.Ruler(kotlin.Float){}[0]
    abstract fun (androidx.compose.ui.layout/VerticalRuler).providesRelative(kotlin/Float) // androidx.compose.ui.layout/RulerScope.providesRelative|providesRelative@androidx.compose.ui.layout.VerticalRuler(kotlin.Float){}[0]
}

abstract interface androidx.compose.ui.layout/SubcomposeMeasureScope : androidx.compose.ui.layout/MeasureScope { // androidx.compose.ui.layout/SubcomposeMeasureScope|null[0]
    abstract fun subcompose(kotlin/Any?, kotlin/Function0<kotlin/Unit>): kotlin.collections/List<androidx.compose.ui.layout/Measurable> // androidx.compose.ui.layout/SubcomposeMeasureScope.subcompose|subcompose(kotlin.Any?;kotlin.Function0<kotlin.Unit>){}[0]
}

abstract interface androidx.compose.ui.layout/SubcomposeSlotReusePolicy { // androidx.compose.ui.layout/SubcomposeSlotReusePolicy|null[0]
    abstract fun areCompatible(kotlin/Any?, kotlin/Any?): kotlin/Boolean // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.areCompatible|areCompatible(kotlin.Any?;kotlin.Any?){}[0]
    abstract fun getSlotsToRetain(androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet) // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.getSlotsToRetain|getSlotsToRetain(androidx.compose.ui.layout.SubcomposeSlotReusePolicy.SlotIdsSet){}[0]

    final class SlotIdsSet : kotlin.collections/Collection<kotlin/Any?> { // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet|null[0]
        final val set // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.set|{}set[0]
            final fun <get-set>(): androidx.collection/MutableOrderedScatterSet<kotlin/Any?> // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.set.<get-set>|<get-set>(){}[0]
        final val size // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.size|{}size[0]
            final fun <get-size>(): kotlin/Int // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.size.<get-size>|<get-size>(){}[0]

        final fun clear() // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.clear|clear(){}[0]
        final fun contains(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.contains|contains(kotlin.Any?){}[0]
        final fun containsAll(kotlin.collections/Collection<kotlin/Any?>): kotlin/Boolean // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.containsAll|containsAll(kotlin.collections.Collection<kotlin.Any?>){}[0]
        final fun forEach(kotlin/Function1<kotlin/Any?, kotlin/Unit>) // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.forEach|forEach(kotlin.Function1<kotlin.Any?,kotlin.Unit>){}[0]
        final fun isEmpty(): kotlin/Boolean // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.isEmpty|isEmpty(){}[0]
        final fun iterator(): kotlin.collections/MutableIterator<kotlin/Any?> // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.iterator|iterator(){}[0]
        final fun remove(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.remove|remove(kotlin.Any?){}[0]
        final fun removeAll(kotlin.collections/Collection<kotlin/Any?>): kotlin/Boolean // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.removeAll|removeAll(kotlin.collections.Collection<kotlin.Any?>){}[0]
        final fun removeAll(kotlin/Function1<kotlin/Any?, kotlin/Boolean>): kotlin/Boolean // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.removeAll|removeAll(kotlin.Function1<kotlin.Any?,kotlin.Boolean>){}[0]
        final fun retainAll(kotlin.collections/Collection<kotlin/Any?>): kotlin/Boolean // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.retainAll|retainAll(kotlin.collections.Collection<kotlin.Any?>){}[0]
        final fun retainAll(kotlin/Function1<kotlin/Any?, kotlin/Boolean>): kotlin/Boolean // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.retainAll|retainAll(kotlin.Function1<kotlin.Any?,kotlin.Boolean>){}[0]
        final fun trimToSize(kotlin/Int) // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.trimToSize|trimToSize(kotlin.Int){}[0]
        final inline fun fastForEach(kotlin/Function1<kotlin/Any?, kotlin/Unit>) // androidx.compose.ui.layout/SubcomposeSlotReusePolicy.SlotIdsSet.fastForEach|fastForEach(kotlin.Function1<kotlin.Any?,kotlin.Unit>){}[0]
    }
}

abstract interface androidx.compose.ui.modifier/ModifierLocalConsumer : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.modifier/ModifierLocalConsumer|null[0]
    abstract fun onModifierLocalsUpdated(androidx.compose.ui.modifier/ModifierLocalReadScope) // androidx.compose.ui.modifier/ModifierLocalConsumer.onModifierLocalsUpdated|onModifierLocalsUpdated(androidx.compose.ui.modifier.ModifierLocalReadScope){}[0]
}

abstract interface androidx.compose.ui.modifier/ModifierLocalModifierNode : androidx.compose.ui.modifier/ModifierLocalReadScope, androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.modifier/ModifierLocalModifierNode|null[0]
    open val current // androidx.compose.ui.modifier/ModifierLocalModifierNode.current|@androidx.compose.ui.modifier.ModifierLocal<0:0>{0§<kotlin.Any?>}current[0]
        open fun <#A2: kotlin/Any?> (androidx.compose.ui.modifier/ModifierLocal<#A2>).<get-current>(): #A2 // androidx.compose.ui.modifier/ModifierLocalModifierNode.current.<get-current>|<get-current>@androidx.compose.ui.modifier.ModifierLocal<0:0>(){0§<kotlin.Any?>}[0]
    open val providedValues // androidx.compose.ui.modifier/ModifierLocalModifierNode.providedValues|{}providedValues[0]
        open fun <get-providedValues>(): androidx.compose.ui.modifier/ModifierLocalMap // androidx.compose.ui.modifier/ModifierLocalModifierNode.providedValues.<get-providedValues>|<get-providedValues>(){}[0]

    open fun <#A1: kotlin/Any?> provide(androidx.compose.ui.modifier/ModifierLocal<#A1>, #A1) // androidx.compose.ui.modifier/ModifierLocalModifierNode.provide|provide(androidx.compose.ui.modifier.ModifierLocal<0:0>;0:0){0§<kotlin.Any?>}[0]
}

abstract interface androidx.compose.ui.modifier/ModifierLocalReadScope { // androidx.compose.ui.modifier/ModifierLocalReadScope|null[0]
    abstract val current // androidx.compose.ui.modifier/ModifierLocalReadScope.current|@androidx.compose.ui.modifier.ModifierLocal<0:0>{0§<kotlin.Any?>}current[0]
        abstract fun <#A2: kotlin/Any?> (androidx.compose.ui.modifier/ModifierLocal<#A2>).<get-current>(): #A2 // androidx.compose.ui.modifier/ModifierLocalReadScope.current.<get-current>|<get-current>@androidx.compose.ui.modifier.ModifierLocal<0:0>(){0§<kotlin.Any?>}[0]
}

abstract interface androidx.compose.ui.node/ComposeUiNode { // androidx.compose.ui.node/ComposeUiNode|null[0]
    abstract var compositeKeyHash // androidx.compose.ui.node/ComposeUiNode.compositeKeyHash|{}compositeKeyHash[0]
        abstract fun <get-compositeKeyHash>(): kotlin/Int // androidx.compose.ui.node/ComposeUiNode.compositeKeyHash.<get-compositeKeyHash>|<get-compositeKeyHash>(){}[0]
        abstract fun <set-compositeKeyHash>(kotlin/Int) // androidx.compose.ui.node/ComposeUiNode.compositeKeyHash.<set-compositeKeyHash>|<set-compositeKeyHash>(kotlin.Int){}[0]
    abstract var compositionLocalMap // androidx.compose.ui.node/ComposeUiNode.compositionLocalMap|{}compositionLocalMap[0]
        abstract fun <get-compositionLocalMap>(): androidx.compose.runtime/CompositionLocalMap // androidx.compose.ui.node/ComposeUiNode.compositionLocalMap.<get-compositionLocalMap>|<get-compositionLocalMap>(){}[0]
        abstract fun <set-compositionLocalMap>(androidx.compose.runtime/CompositionLocalMap) // androidx.compose.ui.node/ComposeUiNode.compositionLocalMap.<set-compositionLocalMap>|<set-compositionLocalMap>(androidx.compose.runtime.CompositionLocalMap){}[0]
    abstract var density // androidx.compose.ui.node/ComposeUiNode.density|{}density[0]
        abstract fun <get-density>(): androidx.compose.ui.unit/Density // androidx.compose.ui.node/ComposeUiNode.density.<get-density>|<get-density>(){}[0]
        abstract fun <set-density>(androidx.compose.ui.unit/Density) // androidx.compose.ui.node/ComposeUiNode.density.<set-density>|<set-density>(androidx.compose.ui.unit.Density){}[0]
    abstract var layoutDirection // androidx.compose.ui.node/ComposeUiNode.layoutDirection|{}layoutDirection[0]
        abstract fun <get-layoutDirection>(): androidx.compose.ui.unit/LayoutDirection // androidx.compose.ui.node/ComposeUiNode.layoutDirection.<get-layoutDirection>|<get-layoutDirection>(){}[0]
        abstract fun <set-layoutDirection>(androidx.compose.ui.unit/LayoutDirection) // androidx.compose.ui.node/ComposeUiNode.layoutDirection.<set-layoutDirection>|<set-layoutDirection>(androidx.compose.ui.unit.LayoutDirection){}[0]
    abstract var measurePolicy // androidx.compose.ui.node/ComposeUiNode.measurePolicy|{}measurePolicy[0]
        abstract fun <get-measurePolicy>(): androidx.compose.ui.layout/MeasurePolicy // androidx.compose.ui.node/ComposeUiNode.measurePolicy.<get-measurePolicy>|<get-measurePolicy>(){}[0]
        abstract fun <set-measurePolicy>(androidx.compose.ui.layout/MeasurePolicy) // androidx.compose.ui.node/ComposeUiNode.measurePolicy.<set-measurePolicy>|<set-measurePolicy>(androidx.compose.ui.layout.MeasurePolicy){}[0]
    abstract var modifier // androidx.compose.ui.node/ComposeUiNode.modifier|{}modifier[0]
        abstract fun <get-modifier>(): androidx.compose.ui/Modifier // androidx.compose.ui.node/ComposeUiNode.modifier.<get-modifier>|<get-modifier>(){}[0]
        abstract fun <set-modifier>(androidx.compose.ui/Modifier) // androidx.compose.ui.node/ComposeUiNode.modifier.<set-modifier>|<set-modifier>(androidx.compose.ui.Modifier){}[0]
    abstract var viewConfiguration // androidx.compose.ui.node/ComposeUiNode.viewConfiguration|{}viewConfiguration[0]
        abstract fun <get-viewConfiguration>(): androidx.compose.ui.platform/ViewConfiguration // androidx.compose.ui.node/ComposeUiNode.viewConfiguration.<get-viewConfiguration>|<get-viewConfiguration>(){}[0]
        abstract fun <set-viewConfiguration>(androidx.compose.ui.platform/ViewConfiguration) // androidx.compose.ui.node/ComposeUiNode.viewConfiguration.<set-viewConfiguration>|<set-viewConfiguration>(androidx.compose.ui.platform.ViewConfiguration){}[0]

    final object Companion { // androidx.compose.ui.node/ComposeUiNode.Companion|null[0]
        final val Constructor // androidx.compose.ui.node/ComposeUiNode.Companion.Constructor|{}Constructor[0]
            final fun <get-Constructor>(): kotlin/Function0<androidx.compose.ui.node/ComposeUiNode> // androidx.compose.ui.node/ComposeUiNode.Companion.Constructor.<get-Constructor>|<get-Constructor>(){}[0]
        final val SetCompositeKeyHash // androidx.compose.ui.node/ComposeUiNode.Companion.SetCompositeKeyHash|{}SetCompositeKeyHash[0]
            final fun <get-SetCompositeKeyHash>(): kotlin/Function2<androidx.compose.ui.node/ComposeUiNode, kotlin/Int, kotlin/Unit> // androidx.compose.ui.node/ComposeUiNode.Companion.SetCompositeKeyHash.<get-SetCompositeKeyHash>|<get-SetCompositeKeyHash>(){}[0]
        final val SetDensity // androidx.compose.ui.node/ComposeUiNode.Companion.SetDensity|{}SetDensity[0]
            final fun <get-SetDensity>(): kotlin/Function2<androidx.compose.ui.node/ComposeUiNode, androidx.compose.ui.unit/Density, kotlin/Unit> // androidx.compose.ui.node/ComposeUiNode.Companion.SetDensity.<get-SetDensity>|<get-SetDensity>(){}[0]
        final val SetLayoutDirection // androidx.compose.ui.node/ComposeUiNode.Companion.SetLayoutDirection|{}SetLayoutDirection[0]
            final fun <get-SetLayoutDirection>(): kotlin/Function2<androidx.compose.ui.node/ComposeUiNode, androidx.compose.ui.unit/LayoutDirection, kotlin/Unit> // androidx.compose.ui.node/ComposeUiNode.Companion.SetLayoutDirection.<get-SetLayoutDirection>|<get-SetLayoutDirection>(){}[0]
        final val SetMeasurePolicy // androidx.compose.ui.node/ComposeUiNode.Companion.SetMeasurePolicy|{}SetMeasurePolicy[0]
            final fun <get-SetMeasurePolicy>(): kotlin/Function2<androidx.compose.ui.node/ComposeUiNode, androidx.compose.ui.layout/MeasurePolicy, kotlin/Unit> // androidx.compose.ui.node/ComposeUiNode.Companion.SetMeasurePolicy.<get-SetMeasurePolicy>|<get-SetMeasurePolicy>(){}[0]
        final val SetModifier // androidx.compose.ui.node/ComposeUiNode.Companion.SetModifier|{}SetModifier[0]
            final fun <get-SetModifier>(): kotlin/Function2<androidx.compose.ui.node/ComposeUiNode, androidx.compose.ui/Modifier, kotlin/Unit> // androidx.compose.ui.node/ComposeUiNode.Companion.SetModifier.<get-SetModifier>|<get-SetModifier>(){}[0]
        final val SetResolvedCompositionLocals // androidx.compose.ui.node/ComposeUiNode.Companion.SetResolvedCompositionLocals|{}SetResolvedCompositionLocals[0]
            final fun <get-SetResolvedCompositionLocals>(): kotlin/Function2<androidx.compose.ui.node/ComposeUiNode, androidx.compose.runtime/CompositionLocalMap, kotlin/Unit> // androidx.compose.ui.node/ComposeUiNode.Companion.SetResolvedCompositionLocals.<get-SetResolvedCompositionLocals>|<get-SetResolvedCompositionLocals>(){}[0]
        final val SetViewConfiguration // androidx.compose.ui.node/ComposeUiNode.Companion.SetViewConfiguration|{}SetViewConfiguration[0]
            final fun <get-SetViewConfiguration>(): kotlin/Function2<androidx.compose.ui.node/ComposeUiNode, androidx.compose.ui.platform/ViewConfiguration, kotlin/Unit> // androidx.compose.ui.node/ComposeUiNode.Companion.SetViewConfiguration.<get-SetViewConfiguration>|<get-SetViewConfiguration>(){}[0]
        final val VirtualConstructor // androidx.compose.ui.node/ComposeUiNode.Companion.VirtualConstructor|{}VirtualConstructor[0]
            final fun <get-VirtualConstructor>(): kotlin/Function0<androidx.compose.ui.node/ComposeUiNode> // androidx.compose.ui.node/ComposeUiNode.Companion.VirtualConstructor.<get-VirtualConstructor>|<get-VirtualConstructor>(){}[0]
    }
}

abstract interface androidx.compose.ui.node/CompositionLocalConsumerModifierNode : androidx.compose.ui.node/DelegatableNode // androidx.compose.ui.node/CompositionLocalConsumerModifierNode|null[0]

abstract interface androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.node/DelegatableNode|null[0]
    abstract val node // androidx.compose.ui.node/DelegatableNode.node|{}node[0]
        abstract fun <get-node>(): androidx.compose.ui/Modifier.Node // androidx.compose.ui.node/DelegatableNode.node.<get-node>|<get-node>(){}[0]

    open fun onDensityChange() // androidx.compose.ui.node/DelegatableNode.onDensityChange|onDensityChange(){}[0]
    open fun onLayoutDirectionChange() // androidx.compose.ui.node/DelegatableNode.onLayoutDirectionChange|onLayoutDirectionChange(){}[0]

    abstract fun interface RegistrationHandle { // androidx.compose.ui.node/DelegatableNode.RegistrationHandle|null[0]
        abstract fun unregister() // androidx.compose.ui.node/DelegatableNode.RegistrationHandle.unregister|unregister(){}[0]
    }
}

abstract interface androidx.compose.ui.node/DrawModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.node/DrawModifierNode|null[0]
    abstract fun (androidx.compose.ui.graphics.drawscope/ContentDrawScope).draw() // androidx.compose.ui.node/DrawModifierNode.draw|draw@androidx.compose.ui.graphics.drawscope.ContentDrawScope(){}[0]
    open fun onMeasureResultChanged() // androidx.compose.ui.node/DrawModifierNode.onMeasureResultChanged|onMeasureResultChanged(){}[0]
}

abstract interface androidx.compose.ui.node/GlobalPositionAwareModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.node/GlobalPositionAwareModifierNode|null[0]
    abstract fun onGloballyPositioned(androidx.compose.ui.layout/LayoutCoordinates) // androidx.compose.ui.node/GlobalPositionAwareModifierNode.onGloballyPositioned|onGloballyPositioned(androidx.compose.ui.layout.LayoutCoordinates){}[0]
}

abstract interface androidx.compose.ui.node/LayoutAwareModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.node/LayoutAwareModifierNode|null[0]
    open fun onPlaced(androidx.compose.ui.layout/LayoutCoordinates) // androidx.compose.ui.node/LayoutAwareModifierNode.onPlaced|onPlaced(androidx.compose.ui.layout.LayoutCoordinates){}[0]
    open fun onRemeasured(androidx.compose.ui.unit/IntSize) // androidx.compose.ui.node/LayoutAwareModifierNode.onRemeasured|onRemeasured(androidx.compose.ui.unit.IntSize){}[0]
}

abstract interface androidx.compose.ui.node/LayoutModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.node/LayoutModifierNode|null[0]
    abstract fun (androidx.compose.ui.layout/MeasureScope).measure(androidx.compose.ui.layout/Measurable, androidx.compose.ui.unit/Constraints): androidx.compose.ui.layout/MeasureResult // androidx.compose.ui.node/LayoutModifierNode.measure|measure@androidx.compose.ui.layout.MeasureScope(androidx.compose.ui.layout.Measurable;androidx.compose.ui.unit.Constraints){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).maxIntrinsicHeight(androidx.compose.ui.layout/IntrinsicMeasurable, kotlin/Int): kotlin/Int // androidx.compose.ui.node/LayoutModifierNode.maxIntrinsicHeight|maxIntrinsicHeight@androidx.compose.ui.layout.IntrinsicMeasureScope(androidx.compose.ui.layout.IntrinsicMeasurable;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).maxIntrinsicWidth(androidx.compose.ui.layout/IntrinsicMeasurable, kotlin/Int): kotlin/Int // androidx.compose.ui.node/LayoutModifierNode.maxIntrinsicWidth|maxIntrinsicWidth@androidx.compose.ui.layout.IntrinsicMeasureScope(androidx.compose.ui.layout.IntrinsicMeasurable;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).minIntrinsicHeight(androidx.compose.ui.layout/IntrinsicMeasurable, kotlin/Int): kotlin/Int // androidx.compose.ui.node/LayoutModifierNode.minIntrinsicHeight|minIntrinsicHeight@androidx.compose.ui.layout.IntrinsicMeasureScope(androidx.compose.ui.layout.IntrinsicMeasurable;kotlin.Int){}[0]
    open fun (androidx.compose.ui.layout/IntrinsicMeasureScope).minIntrinsicWidth(androidx.compose.ui.layout/IntrinsicMeasurable, kotlin/Int): kotlin/Int // androidx.compose.ui.node/LayoutModifierNode.minIntrinsicWidth|minIntrinsicWidth@androidx.compose.ui.layout.IntrinsicMeasureScope(androidx.compose.ui.layout.IntrinsicMeasurable;kotlin.Int){}[0]
}

abstract interface androidx.compose.ui.node/ObserverModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.node/ObserverModifierNode|null[0]
    abstract fun onObservedReadsChanged() // androidx.compose.ui.node/ObserverModifierNode.onObservedReadsChanged|onObservedReadsChanged(){}[0]
}

abstract interface androidx.compose.ui.node/ParentDataModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.node/ParentDataModifierNode|null[0]
    abstract fun (androidx.compose.ui.unit/Density).modifyParentData(kotlin/Any?): kotlin/Any? // androidx.compose.ui.node/ParentDataModifierNode.modifyParentData|modifyParentData@androidx.compose.ui.unit.Density(kotlin.Any?){}[0]
}

abstract interface androidx.compose.ui.node/PointerInputModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.node/PointerInputModifierNode|null[0]
    open val touchBoundsExpansion // androidx.compose.ui.node/PointerInputModifierNode.touchBoundsExpansion|{}touchBoundsExpansion[0]
        open fun <get-touchBoundsExpansion>(): androidx.compose.ui.node/TouchBoundsExpansion // androidx.compose.ui.node/PointerInputModifierNode.touchBoundsExpansion.<get-touchBoundsExpansion>|<get-touchBoundsExpansion>(){}[0]

    abstract fun onCancelPointerInput() // androidx.compose.ui.node/PointerInputModifierNode.onCancelPointerInput|onCancelPointerInput(){}[0]
    abstract fun onPointerEvent(androidx.compose.ui.input.pointer/PointerEvent, androidx.compose.ui.input.pointer/PointerEventPass, androidx.compose.ui.unit/IntSize) // androidx.compose.ui.node/PointerInputModifierNode.onPointerEvent|onPointerEvent(androidx.compose.ui.input.pointer.PointerEvent;androidx.compose.ui.input.pointer.PointerEventPass;androidx.compose.ui.unit.IntSize){}[0]
    open fun interceptOutOfBoundsChildEvents(): kotlin/Boolean // androidx.compose.ui.node/PointerInputModifierNode.interceptOutOfBoundsChildEvents|interceptOutOfBoundsChildEvents(){}[0]
    open fun onDensityChange() // androidx.compose.ui.node/PointerInputModifierNode.onDensityChange|onDensityChange(){}[0]
    open fun onViewConfigurationChange() // androidx.compose.ui.node/PointerInputModifierNode.onViewConfigurationChange|onViewConfigurationChange(){}[0]
    open fun sharePointerInputWithSiblings(): kotlin/Boolean // androidx.compose.ui.node/PointerInputModifierNode.sharePointerInputWithSiblings|sharePointerInputWithSiblings(){}[0]
}

abstract interface androidx.compose.ui.node/RootForTest { // androidx.compose.ui.node/RootForTest|null[0]
    abstract val density // androidx.compose.ui.node/RootForTest.density|{}density[0]
        abstract fun <get-density>(): androidx.compose.ui.unit/Density // androidx.compose.ui.node/RootForTest.density.<get-density>|<get-density>(){}[0]
    abstract val semanticsOwner // androidx.compose.ui.node/RootForTest.semanticsOwner|{}semanticsOwner[0]
        abstract fun <get-semanticsOwner>(): androidx.compose.ui.semantics/SemanticsOwner // androidx.compose.ui.node/RootForTest.semanticsOwner.<get-semanticsOwner>|<get-semanticsOwner>(){}[0]
    abstract val textInputService // androidx.compose.ui.node/RootForTest.textInputService|{}textInputService[0]
        abstract fun <get-textInputService>(): androidx.compose.ui.text.input/TextInputService // androidx.compose.ui.node/RootForTest.textInputService.<get-textInputService>|<get-textInputService>(){}[0]

    abstract fun sendKeyEvent(androidx.compose.ui.input.key/KeyEvent): kotlin/Boolean // androidx.compose.ui.node/RootForTest.sendKeyEvent|sendKeyEvent(androidx.compose.ui.input.key.KeyEvent){}[0]
    open fun forceAccessibilityForTesting(kotlin/Boolean) // androidx.compose.ui.node/RootForTest.forceAccessibilityForTesting|forceAccessibilityForTesting(kotlin.Boolean){}[0]
    open fun measureAndLayoutForTest() // androidx.compose.ui.node/RootForTest.measureAndLayoutForTest|measureAndLayoutForTest(){}[0]
    open fun setAccessibilityEventBatchIntervalMillis(kotlin/Long) // androidx.compose.ui.node/RootForTest.setAccessibilityEventBatchIntervalMillis|setAccessibilityEventBatchIntervalMillis(kotlin.Long){}[0]
    open fun setUncaughtExceptionHandler(androidx.compose.ui.node/RootForTest.UncaughtExceptionHandler?) // androidx.compose.ui.node/RootForTest.setUncaughtExceptionHandler|setUncaughtExceptionHandler(androidx.compose.ui.node.RootForTest.UncaughtExceptionHandler?){}[0]

    abstract interface UncaughtExceptionHandler { // androidx.compose.ui.node/RootForTest.UncaughtExceptionHandler|null[0]
        abstract fun onUncaughtException(kotlin/Throwable) // androidx.compose.ui.node/RootForTest.UncaughtExceptionHandler.onUncaughtException|onUncaughtException(kotlin.Throwable){}[0]
    }
}

abstract interface androidx.compose.ui.node/SemanticsModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.node/SemanticsModifierNode|null[0]
    open val shouldClearDescendantSemantics // androidx.compose.ui.node/SemanticsModifierNode.shouldClearDescendantSemantics|{}shouldClearDescendantSemantics[0]
        open fun <get-shouldClearDescendantSemantics>(): kotlin/Boolean // androidx.compose.ui.node/SemanticsModifierNode.shouldClearDescendantSemantics.<get-shouldClearDescendantSemantics>|<get-shouldClearDescendantSemantics>(){}[0]
    open val shouldMergeDescendantSemantics // androidx.compose.ui.node/SemanticsModifierNode.shouldMergeDescendantSemantics|{}shouldMergeDescendantSemantics[0]
        open fun <get-shouldMergeDescendantSemantics>(): kotlin/Boolean // androidx.compose.ui.node/SemanticsModifierNode.shouldMergeDescendantSemantics.<get-shouldMergeDescendantSemantics>|<get-shouldMergeDescendantSemantics>(){}[0]

    abstract fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).applySemantics() // androidx.compose.ui.node/SemanticsModifierNode.applySemantics|applySemantics@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
}

abstract interface androidx.compose.ui.node/TraversableNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.node/TraversableNode|null[0]
    abstract val traverseKey // androidx.compose.ui.node/TraversableNode.traverseKey|{}traverseKey[0]
        abstract fun <get-traverseKey>(): kotlin/Any // androidx.compose.ui.node/TraversableNode.traverseKey.<get-traverseKey>|<get-traverseKey>(){}[0]

    final object Companion { // androidx.compose.ui.node/TraversableNode.Companion|null[0]
        final enum class TraverseDescendantsAction : kotlin/Enum<androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction> { // androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction|null[0]
            enum entry CancelTraversal // androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction.CancelTraversal|null[0]
            enum entry ContinueTraversal // androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction.ContinueTraversal|null[0]
            enum entry SkipSubtreeAndContinueTraversal // androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction.SkipSubtreeAndContinueTraversal|null[0]

            final val entries // androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction.entries|#static{}entries[0]
                final fun <get-entries>(): kotlin.enums/EnumEntries<androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction> // androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction.entries.<get-entries>|<get-entries>#static(){}[0]

            final fun valueOf(kotlin/String): androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction // androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction.valueOf|valueOf#static(kotlin.String){}[0]
            final fun values(): kotlin/Array<androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction> // androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction.values|values#static(){}[0]
        }
    }
}

abstract interface androidx.compose.ui.platform/AccessibilityManager { // androidx.compose.ui.platform/AccessibilityManager|null[0]
    abstract fun calculateRecommendedTimeoutMillis(kotlin/Long, kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): kotlin/Long // androidx.compose.ui.platform/AccessibilityManager.calculateRecommendedTimeoutMillis|calculateRecommendedTimeoutMillis(kotlin.Long;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
}

abstract interface androidx.compose.ui.platform/Clipboard { // androidx.compose.ui.platform/Clipboard|null[0]
    abstract val nativeClipboard // androidx.compose.ui.platform/Clipboard.nativeClipboard|{}nativeClipboard[0]
        abstract fun <get-nativeClipboard>(): androidx.compose.ui.platform/NativeClipboard // androidx.compose.ui.platform/Clipboard.nativeClipboard.<get-nativeClipboard>|<get-nativeClipboard>(){}[0]

    abstract suspend fun getClipEntry(): androidx.compose.ui.platform/ClipEntry? // androidx.compose.ui.platform/Clipboard.getClipEntry|getClipEntry(){}[0]
    abstract suspend fun setClipEntry(androidx.compose.ui.platform/ClipEntry?) // androidx.compose.ui.platform/Clipboard.setClipEntry|setClipEntry(androidx.compose.ui.platform.ClipEntry?){}[0]
}

abstract interface androidx.compose.ui.platform/ClipboardManager { // androidx.compose.ui.platform/ClipboardManager|null[0]
    open val nativeClipboard // androidx.compose.ui.platform/ClipboardManager.nativeClipboard|{}nativeClipboard[0]
        open fun <get-nativeClipboard>(): androidx.compose.ui.platform/NativeClipboard // androidx.compose.ui.platform/ClipboardManager.nativeClipboard.<get-nativeClipboard>|<get-nativeClipboard>(){}[0]

    abstract fun getText(): androidx.compose.ui.text/AnnotatedString? // androidx.compose.ui.platform/ClipboardManager.getText|getText(){}[0]
    abstract fun setText(androidx.compose.ui.text/AnnotatedString) // androidx.compose.ui.platform/ClipboardManager.setText|setText(androidx.compose.ui.text.AnnotatedString){}[0]
    open fun getClip(): androidx.compose.ui.platform/ClipEntry? // androidx.compose.ui.platform/ClipboardManager.getClip|getClip(){}[0]
    open fun hasText(): kotlin/Boolean // androidx.compose.ui.platform/ClipboardManager.hasText|hasText(){}[0]
    open fun setClip(androidx.compose.ui.platform/ClipEntry?) // androidx.compose.ui.platform/ClipboardManager.setClip|setClip(androidx.compose.ui.platform.ClipEntry?){}[0]
}

abstract interface androidx.compose.ui.platform/InfiniteAnimationPolicy : kotlin.coroutines/CoroutineContext.Element { // androidx.compose.ui.platform/InfiniteAnimationPolicy|null[0]
    open val key // androidx.compose.ui.platform/InfiniteAnimationPolicy.key|{}key[0]
        open fun <get-key>(): kotlin.coroutines/CoroutineContext.Key<*> // androidx.compose.ui.platform/InfiniteAnimationPolicy.key.<get-key>|<get-key>(){}[0]

    abstract suspend fun <#A1: kotlin/Any?> onInfiniteOperation(kotlin.coroutines/SuspendFunction0<#A1>): #A1 // androidx.compose.ui.platform/InfiniteAnimationPolicy.onInfiniteOperation|onInfiniteOperation(kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]

    final object Key : kotlin.coroutines/CoroutineContext.Key<androidx.compose.ui.platform/InfiniteAnimationPolicy> // androidx.compose.ui.platform/InfiniteAnimationPolicy.Key|null[0]
}

abstract interface androidx.compose.ui.platform/InspectableValue { // androidx.compose.ui.platform/InspectableValue|null[0]
    open val inspectableElements // androidx.compose.ui.platform/InspectableValue.inspectableElements|{}inspectableElements[0]
        open fun <get-inspectableElements>(): kotlin.sequences/Sequence<androidx.compose.ui.platform/ValueElement> // androidx.compose.ui.platform/InspectableValue.inspectableElements.<get-inspectableElements>|<get-inspectableElements>(){}[0]
    open val nameFallback // androidx.compose.ui.platform/InspectableValue.nameFallback|{}nameFallback[0]
        open fun <get-nameFallback>(): kotlin/String? // androidx.compose.ui.platform/InspectableValue.nameFallback.<get-nameFallback>|<get-nameFallback>(){}[0]
    open val valueOverride // androidx.compose.ui.platform/InspectableValue.valueOverride|{}valueOverride[0]
        open fun <get-valueOverride>(): kotlin/Any? // androidx.compose.ui.platform/InspectableValue.valueOverride.<get-valueOverride>|<get-valueOverride>(){}[0]
}

abstract interface androidx.compose.ui.platform/PlatformTextInputMethodRequest // androidx.compose.ui.platform/PlatformTextInputMethodRequest|null[0]

abstract interface androidx.compose.ui.platform/PlatformTextInputModifierNode : androidx.compose.ui.node/DelegatableNode // androidx.compose.ui.platform/PlatformTextInputModifierNode|null[0]

abstract interface androidx.compose.ui.platform/PlatformTextInputSession { // androidx.compose.ui.platform/PlatformTextInputSession|null[0]
    abstract suspend fun startInputMethod(androidx.compose.ui.platform/PlatformTextInputMethodRequest): kotlin/Nothing // androidx.compose.ui.platform/PlatformTextInputSession.startInputMethod|startInputMethod(androidx.compose.ui.platform.PlatformTextInputMethodRequest){}[0]
}

abstract interface androidx.compose.ui.platform/PlatformTextInputSessionScope : androidx.compose.ui.platform/PlatformTextInputSession, kotlinx.coroutines/CoroutineScope // androidx.compose.ui.platform/PlatformTextInputSessionScope|null[0]

abstract interface androidx.compose.ui.platform/SoftwareKeyboardController { // androidx.compose.ui.platform/SoftwareKeyboardController|null[0]
    abstract fun hide() // androidx.compose.ui.platform/SoftwareKeyboardController.hide|hide(){}[0]
    abstract fun show() // androidx.compose.ui.platform/SoftwareKeyboardController.show|show(){}[0]
}

abstract interface androidx.compose.ui.platform/TextToolbar { // androidx.compose.ui.platform/TextToolbar|null[0]
    abstract val status // androidx.compose.ui.platform/TextToolbar.status|{}status[0]
        abstract fun <get-status>(): androidx.compose.ui.platform/TextToolbarStatus // androidx.compose.ui.platform/TextToolbar.status.<get-status>|<get-status>(){}[0]

    abstract fun hide() // androidx.compose.ui.platform/TextToolbar.hide|hide(){}[0]
    abstract fun showMenu(androidx.compose.ui.geometry/Rect, kotlin/Function0<kotlin/Unit>? = ..., kotlin/Function0<kotlin/Unit>? = ..., kotlin/Function0<kotlin/Unit>? = ..., kotlin/Function0<kotlin/Unit>? = ...) // androidx.compose.ui.platform/TextToolbar.showMenu|showMenu(androidx.compose.ui.geometry.Rect;kotlin.Function0<kotlin.Unit>?;kotlin.Function0<kotlin.Unit>?;kotlin.Function0<kotlin.Unit>?;kotlin.Function0<kotlin.Unit>?){}[0]
    open fun showMenu(androidx.compose.ui.geometry/Rect, kotlin/Function0<kotlin/Unit>? = ..., kotlin/Function0<kotlin/Unit>? = ..., kotlin/Function0<kotlin/Unit>? = ..., kotlin/Function0<kotlin/Unit>? = ..., kotlin/Function0<kotlin/Unit>? = ...) // androidx.compose.ui.platform/TextToolbar.showMenu|showMenu(androidx.compose.ui.geometry.Rect;kotlin.Function0<kotlin.Unit>?;kotlin.Function0<kotlin.Unit>?;kotlin.Function0<kotlin.Unit>?;kotlin.Function0<kotlin.Unit>?;kotlin.Function0<kotlin.Unit>?){}[0]
}

abstract interface androidx.compose.ui.platform/UriHandler { // androidx.compose.ui.platform/UriHandler|null[0]
    abstract fun openUri(kotlin/String) // androidx.compose.ui.platform/UriHandler.openUri|openUri(kotlin.String){}[0]
}

abstract interface androidx.compose.ui.platform/ViewConfiguration { // androidx.compose.ui.platform/ViewConfiguration|null[0]
    abstract val doubleTapMinTimeMillis // androidx.compose.ui.platform/ViewConfiguration.doubleTapMinTimeMillis|{}doubleTapMinTimeMillis[0]
        abstract fun <get-doubleTapMinTimeMillis>(): kotlin/Long // androidx.compose.ui.platform/ViewConfiguration.doubleTapMinTimeMillis.<get-doubleTapMinTimeMillis>|<get-doubleTapMinTimeMillis>(){}[0]
    abstract val doubleTapTimeoutMillis // androidx.compose.ui.platform/ViewConfiguration.doubleTapTimeoutMillis|{}doubleTapTimeoutMillis[0]
        abstract fun <get-doubleTapTimeoutMillis>(): kotlin/Long // androidx.compose.ui.platform/ViewConfiguration.doubleTapTimeoutMillis.<get-doubleTapTimeoutMillis>|<get-doubleTapTimeoutMillis>(){}[0]
    abstract val longPressTimeoutMillis // androidx.compose.ui.platform/ViewConfiguration.longPressTimeoutMillis|{}longPressTimeoutMillis[0]
        abstract fun <get-longPressTimeoutMillis>(): kotlin/Long // androidx.compose.ui.platform/ViewConfiguration.longPressTimeoutMillis.<get-longPressTimeoutMillis>|<get-longPressTimeoutMillis>(){}[0]
    abstract val touchSlop // androidx.compose.ui.platform/ViewConfiguration.touchSlop|{}touchSlop[0]
        abstract fun <get-touchSlop>(): kotlin/Float // androidx.compose.ui.platform/ViewConfiguration.touchSlop.<get-touchSlop>|<get-touchSlop>(){}[0]
    open val handwritingGestureLineMargin // androidx.compose.ui.platform/ViewConfiguration.handwritingGestureLineMargin|{}handwritingGestureLineMargin[0]
        open fun <get-handwritingGestureLineMargin>(): kotlin/Float // androidx.compose.ui.platform/ViewConfiguration.handwritingGestureLineMargin.<get-handwritingGestureLineMargin>|<get-handwritingGestureLineMargin>(){}[0]
    open val handwritingSlop // androidx.compose.ui.platform/ViewConfiguration.handwritingSlop|{}handwritingSlop[0]
        open fun <get-handwritingSlop>(): kotlin/Float // androidx.compose.ui.platform/ViewConfiguration.handwritingSlop.<get-handwritingSlop>|<get-handwritingSlop>(){}[0]
    open val maximumFlingVelocity // androidx.compose.ui.platform/ViewConfiguration.maximumFlingVelocity|{}maximumFlingVelocity[0]
        open fun <get-maximumFlingVelocity>(): kotlin/Float // androidx.compose.ui.platform/ViewConfiguration.maximumFlingVelocity.<get-maximumFlingVelocity>|<get-maximumFlingVelocity>(){}[0]
    open val minimumTouchTargetSize // androidx.compose.ui.platform/ViewConfiguration.minimumTouchTargetSize|{}minimumTouchTargetSize[0]
        open fun <get-minimumTouchTargetSize>(): androidx.compose.ui.unit/DpSize // androidx.compose.ui.platform/ViewConfiguration.minimumTouchTargetSize.<get-minimumTouchTargetSize>|<get-minimumTouchTargetSize>(){}[0]
}

abstract interface androidx.compose.ui.platform/WindowInfo { // androidx.compose.ui.platform/WindowInfo|null[0]
    abstract val isWindowFocused // androidx.compose.ui.platform/WindowInfo.isWindowFocused|{}isWindowFocused[0]
        abstract fun <get-isWindowFocused>(): kotlin/Boolean // androidx.compose.ui.platform/WindowInfo.isWindowFocused.<get-isWindowFocused>|<get-isWindowFocused>(){}[0]
    open val containerSize // androidx.compose.ui.platform/WindowInfo.containerSize|{}containerSize[0]
        open fun <get-containerSize>(): androidx.compose.ui.unit/IntSize // androidx.compose.ui.platform/WindowInfo.containerSize.<get-containerSize>|<get-containerSize>(){}[0]
    open val keyboardModifiers // androidx.compose.ui.platform/WindowInfo.keyboardModifiers|{}keyboardModifiers[0]
        open fun <get-keyboardModifiers>(): androidx.compose.ui.input.pointer/PointerKeyboardModifiers // androidx.compose.ui.platform/WindowInfo.keyboardModifiers.<get-keyboardModifiers>|<get-keyboardModifiers>(){}[0]
}

abstract interface androidx.compose.ui.relocation/BringIntoViewModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.relocation/BringIntoViewModifierNode|null[0]
    abstract suspend fun bringIntoView(androidx.compose.ui.layout/LayoutCoordinates, kotlin/Function0<androidx.compose.ui.geometry/Rect?>) // androidx.compose.ui.relocation/BringIntoViewModifierNode.bringIntoView|bringIntoView(androidx.compose.ui.layout.LayoutCoordinates;kotlin.Function0<androidx.compose.ui.geometry.Rect?>){}[0]
}

abstract interface androidx.compose.ui.semantics/SemanticsModifier : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.semantics/SemanticsModifier|null[0]
    abstract val semanticsConfiguration // androidx.compose.ui.semantics/SemanticsModifier.semanticsConfiguration|{}semanticsConfiguration[0]
        abstract fun <get-semanticsConfiguration>(): androidx.compose.ui.semantics/SemanticsConfiguration // androidx.compose.ui.semantics/SemanticsModifier.semanticsConfiguration.<get-semanticsConfiguration>|<get-semanticsConfiguration>(){}[0]
    open val id // androidx.compose.ui.semantics/SemanticsModifier.id|{}id[0]
        open fun <get-id>(): kotlin/Int // androidx.compose.ui.semantics/SemanticsModifier.id.<get-id>|<get-id>(){}[0]
}

abstract interface androidx.compose.ui.semantics/SemanticsPropertyReceiver { // androidx.compose.ui.semantics/SemanticsPropertyReceiver|null[0]
    abstract fun <#A1: kotlin/Any?> set(androidx.compose.ui.semantics/SemanticsPropertyKey<#A1>, #A1) // androidx.compose.ui.semantics/SemanticsPropertyReceiver.set|set(androidx.compose.ui.semantics.SemanticsPropertyKey<0:0>;0:0){0§<kotlin.Any?>}[0]
}

abstract interface androidx.compose.ui.window/PopupPositionProvider { // androidx.compose.ui.window/PopupPositionProvider|null[0]
    abstract fun calculatePosition(androidx.compose.ui.unit/IntRect, androidx.compose.ui.unit/IntSize, androidx.compose.ui.unit/LayoutDirection, androidx.compose.ui.unit/IntSize): androidx.compose.ui.unit/IntOffset // androidx.compose.ui.window/PopupPositionProvider.calculatePosition|calculatePosition(androidx.compose.ui.unit.IntRect;androidx.compose.ui.unit.IntSize;androidx.compose.ui.unit.LayoutDirection;androidx.compose.ui.unit.IntSize){}[0]
}

abstract interface androidx.compose.ui/Modifier { // androidx.compose.ui/Modifier|null[0]
    abstract fun <#A1: kotlin/Any?> foldIn(#A1, kotlin/Function2<#A1, androidx.compose.ui/Modifier.Element, #A1>): #A1 // androidx.compose.ui/Modifier.foldIn|foldIn(0:0;kotlin.Function2<0:0,androidx.compose.ui.Modifier.Element,0:0>){0§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> foldOut(#A1, kotlin/Function2<androidx.compose.ui/Modifier.Element, #A1, #A1>): #A1 // androidx.compose.ui/Modifier.foldOut|foldOut(0:0;kotlin.Function2<androidx.compose.ui.Modifier.Element,0:0,0:0>){0§<kotlin.Any?>}[0]
    abstract fun all(kotlin/Function1<androidx.compose.ui/Modifier.Element, kotlin/Boolean>): kotlin/Boolean // androidx.compose.ui/Modifier.all|all(kotlin.Function1<androidx.compose.ui.Modifier.Element,kotlin.Boolean>){}[0]
    abstract fun any(kotlin/Function1<androidx.compose.ui/Modifier.Element, kotlin/Boolean>): kotlin/Boolean // androidx.compose.ui/Modifier.any|any(kotlin.Function1<androidx.compose.ui.Modifier.Element,kotlin.Boolean>){}[0]
    open fun then(androidx.compose.ui/Modifier): androidx.compose.ui/Modifier // androidx.compose.ui/Modifier.then|then(androidx.compose.ui.Modifier){}[0]

    abstract interface Element : androidx.compose.ui/Modifier { // androidx.compose.ui/Modifier.Element|null[0]
        open fun <#A2: kotlin/Any?> foldIn(#A2, kotlin/Function2<#A2, androidx.compose.ui/Modifier.Element, #A2>): #A2 // androidx.compose.ui/Modifier.Element.foldIn|foldIn(0:0;kotlin.Function2<0:0,androidx.compose.ui.Modifier.Element,0:0>){0§<kotlin.Any?>}[0]
        open fun <#A2: kotlin/Any?> foldOut(#A2, kotlin/Function2<androidx.compose.ui/Modifier.Element, #A2, #A2>): #A2 // androidx.compose.ui/Modifier.Element.foldOut|foldOut(0:0;kotlin.Function2<androidx.compose.ui.Modifier.Element,0:0,0:0>){0§<kotlin.Any?>}[0]
        open fun all(kotlin/Function1<androidx.compose.ui/Modifier.Element, kotlin/Boolean>): kotlin/Boolean // androidx.compose.ui/Modifier.Element.all|all(kotlin.Function1<androidx.compose.ui.Modifier.Element,kotlin.Boolean>){}[0]
        open fun any(kotlin/Function1<androidx.compose.ui/Modifier.Element, kotlin/Boolean>): kotlin/Boolean // androidx.compose.ui/Modifier.Element.any|any(kotlin.Function1<androidx.compose.ui.Modifier.Element,kotlin.Boolean>){}[0]
    }

    abstract class Node : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui/Modifier.Node|null[0]
        constructor <init>() // androidx.compose.ui/Modifier.Node.<init>|<init>(){}[0]

        final val coroutineScope // androidx.compose.ui/Modifier.Node.coroutineScope|{}coroutineScope[0]
            final fun <get-coroutineScope>(): kotlinx.coroutines/CoroutineScope // androidx.compose.ui/Modifier.Node.coroutineScope.<get-coroutineScope>|<get-coroutineScope>(){}[0]
        open val shouldAutoInvalidate // androidx.compose.ui/Modifier.Node.shouldAutoInvalidate|{}shouldAutoInvalidate[0]
            open fun <get-shouldAutoInvalidate>(): kotlin/Boolean // androidx.compose.ui/Modifier.Node.shouldAutoInvalidate.<get-shouldAutoInvalidate>|<get-shouldAutoInvalidate>(){}[0]

        final var isAttached // androidx.compose.ui/Modifier.Node.isAttached|{}isAttached[0]
            final fun <get-isAttached>(): kotlin/Boolean // androidx.compose.ui/Modifier.Node.isAttached.<get-isAttached>|<get-isAttached>(){}[0]
        final var node // androidx.compose.ui/Modifier.Node.node|{}node[0]
            final fun <get-node>(): androidx.compose.ui/Modifier.Node // androidx.compose.ui/Modifier.Node.node.<get-node>|<get-node>(){}[0]

        final fun sideEffect(kotlin/Function0<kotlin/Unit>) // androidx.compose.ui/Modifier.Node.sideEffect|sideEffect(kotlin.Function0<kotlin.Unit>){}[0]
        open fun onAttach() // androidx.compose.ui/Modifier.Node.onAttach|onAttach(){}[0]
        open fun onDetach() // androidx.compose.ui/Modifier.Node.onDetach|onDetach(){}[0]
        open fun onReset() // androidx.compose.ui/Modifier.Node.onReset|onReset(){}[0]
    }

    final object Companion : androidx.compose.ui/Modifier { // androidx.compose.ui/Modifier.Companion|null[0]
        final fun <#A2: kotlin/Any?> foldIn(#A2, kotlin/Function2<#A2, androidx.compose.ui/Modifier.Element, #A2>): #A2 // androidx.compose.ui/Modifier.Companion.foldIn|foldIn(0:0;kotlin.Function2<0:0,androidx.compose.ui.Modifier.Element,0:0>){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> foldOut(#A2, kotlin/Function2<androidx.compose.ui/Modifier.Element, #A2, #A2>): #A2 // androidx.compose.ui/Modifier.Companion.foldOut|foldOut(0:0;kotlin.Function2<androidx.compose.ui.Modifier.Element,0:0,0:0>){0§<kotlin.Any?>}[0]
        final fun all(kotlin/Function1<androidx.compose.ui/Modifier.Element, kotlin/Boolean>): kotlin/Boolean // androidx.compose.ui/Modifier.Companion.all|all(kotlin.Function1<androidx.compose.ui.Modifier.Element,kotlin.Boolean>){}[0]
        final fun any(kotlin/Function1<androidx.compose.ui/Modifier.Element, kotlin/Boolean>): kotlin/Boolean // androidx.compose.ui/Modifier.Companion.any|any(kotlin.Function1<androidx.compose.ui.Modifier.Element,kotlin.Boolean>){}[0]
        final fun then(androidx.compose.ui/Modifier): androidx.compose.ui/Modifier // androidx.compose.ui/Modifier.Companion.then|then(androidx.compose.ui.Modifier){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui/Modifier.Companion.toString|toString(){}[0]
    }
}

abstract interface androidx.compose.ui/MotionDurationScale : kotlin.coroutines/CoroutineContext.Element { // androidx.compose.ui/MotionDurationScale|null[0]
    abstract val scaleFactor // androidx.compose.ui/MotionDurationScale.scaleFactor|{}scaleFactor[0]
        abstract fun <get-scaleFactor>(): kotlin/Float // androidx.compose.ui/MotionDurationScale.scaleFactor.<get-scaleFactor>|<get-scaleFactor>(){}[0]
    open val key // androidx.compose.ui/MotionDurationScale.key|{}key[0]
        open fun <get-key>(): kotlin.coroutines/CoroutineContext.Key<*> // androidx.compose.ui/MotionDurationScale.key.<get-key>|<get-key>(){}[0]

    final object Key : kotlin.coroutines/CoroutineContext.Key<androidx.compose.ui/MotionDurationScale> // androidx.compose.ui/MotionDurationScale.Key|null[0]
}

sealed interface androidx.compose.ui.autofill/ContentDataType { // androidx.compose.ui.autofill/ContentDataType|null[0]
    final object Companion { // androidx.compose.ui.autofill/ContentDataType.Companion|null[0]
        final val Date // androidx.compose.ui.autofill/ContentDataType.Companion.Date|{}Date[0]
            final fun <get-Date>(): androidx.compose.ui.autofill/ContentDataType // androidx.compose.ui.autofill/ContentDataType.Companion.Date.<get-Date>|<get-Date>(){}[0]
        final val List // androidx.compose.ui.autofill/ContentDataType.Companion.List|{}List[0]
            final fun <get-List>(): androidx.compose.ui.autofill/ContentDataType // androidx.compose.ui.autofill/ContentDataType.Companion.List.<get-List>|<get-List>(){}[0]
        final val None // androidx.compose.ui.autofill/ContentDataType.Companion.None|{}None[0]
            final fun <get-None>(): androidx.compose.ui.autofill/ContentDataType // androidx.compose.ui.autofill/ContentDataType.Companion.None.<get-None>|<get-None>(){}[0]
        final val Text // androidx.compose.ui.autofill/ContentDataType.Companion.Text|{}Text[0]
            final fun <get-Text>(): androidx.compose.ui.autofill/ContentDataType // androidx.compose.ui.autofill/ContentDataType.Companion.Text.<get-Text>|<get-Text>(){}[0]
        final val Toggle // androidx.compose.ui.autofill/ContentDataType.Companion.Toggle|{}Toggle[0]
            final fun <get-Toggle>(): androidx.compose.ui.autofill/ContentDataType // androidx.compose.ui.autofill/ContentDataType.Companion.Toggle.<get-Toggle>|<get-Toggle>(){}[0]
    }
}

sealed interface androidx.compose.ui.autofill/ContentType { // androidx.compose.ui.autofill/ContentType|null[0]
    final object Companion { // androidx.compose.ui.autofill/ContentType.Companion|null[0]
        final val AddressAuxiliaryDetails // androidx.compose.ui.autofill/ContentType.Companion.AddressAuxiliaryDetails|{}AddressAuxiliaryDetails[0]
            final fun <get-AddressAuxiliaryDetails>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.AddressAuxiliaryDetails.<get-AddressAuxiliaryDetails>|<get-AddressAuxiliaryDetails>(){}[0]
        final val AddressCountry // androidx.compose.ui.autofill/ContentType.Companion.AddressCountry|{}AddressCountry[0]
            final fun <get-AddressCountry>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.AddressCountry.<get-AddressCountry>|<get-AddressCountry>(){}[0]
        final val AddressLocality // androidx.compose.ui.autofill/ContentType.Companion.AddressLocality|{}AddressLocality[0]
            final fun <get-AddressLocality>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.AddressLocality.<get-AddressLocality>|<get-AddressLocality>(){}[0]
        final val AddressRegion // androidx.compose.ui.autofill/ContentType.Companion.AddressRegion|{}AddressRegion[0]
            final fun <get-AddressRegion>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.AddressRegion.<get-AddressRegion>|<get-AddressRegion>(){}[0]
        final val AddressStreet // androidx.compose.ui.autofill/ContentType.Companion.AddressStreet|{}AddressStreet[0]
            final fun <get-AddressStreet>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.AddressStreet.<get-AddressStreet>|<get-AddressStreet>(){}[0]
        final val BirthDateDay // androidx.compose.ui.autofill/ContentType.Companion.BirthDateDay|{}BirthDateDay[0]
            final fun <get-BirthDateDay>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.BirthDateDay.<get-BirthDateDay>|<get-BirthDateDay>(){}[0]
        final val BirthDateFull // androidx.compose.ui.autofill/ContentType.Companion.BirthDateFull|{}BirthDateFull[0]
            final fun <get-BirthDateFull>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.BirthDateFull.<get-BirthDateFull>|<get-BirthDateFull>(){}[0]
        final val BirthDateMonth // androidx.compose.ui.autofill/ContentType.Companion.BirthDateMonth|{}BirthDateMonth[0]
            final fun <get-BirthDateMonth>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.BirthDateMonth.<get-BirthDateMonth>|<get-BirthDateMonth>(){}[0]
        final val BirthDateYear // androidx.compose.ui.autofill/ContentType.Companion.BirthDateYear|{}BirthDateYear[0]
            final fun <get-BirthDateYear>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.BirthDateYear.<get-BirthDateYear>|<get-BirthDateYear>(){}[0]
        final val CreditCardExpirationDate // androidx.compose.ui.autofill/ContentType.Companion.CreditCardExpirationDate|{}CreditCardExpirationDate[0]
            final fun <get-CreditCardExpirationDate>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.CreditCardExpirationDate.<get-CreditCardExpirationDate>|<get-CreditCardExpirationDate>(){}[0]
        final val CreditCardExpirationDay // androidx.compose.ui.autofill/ContentType.Companion.CreditCardExpirationDay|{}CreditCardExpirationDay[0]
            final fun <get-CreditCardExpirationDay>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.CreditCardExpirationDay.<get-CreditCardExpirationDay>|<get-CreditCardExpirationDay>(){}[0]
        final val CreditCardExpirationMonth // androidx.compose.ui.autofill/ContentType.Companion.CreditCardExpirationMonth|{}CreditCardExpirationMonth[0]
            final fun <get-CreditCardExpirationMonth>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.CreditCardExpirationMonth.<get-CreditCardExpirationMonth>|<get-CreditCardExpirationMonth>(){}[0]
        final val CreditCardExpirationYear // androidx.compose.ui.autofill/ContentType.Companion.CreditCardExpirationYear|{}CreditCardExpirationYear[0]
            final fun <get-CreditCardExpirationYear>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.CreditCardExpirationYear.<get-CreditCardExpirationYear>|<get-CreditCardExpirationYear>(){}[0]
        final val CreditCardNumber // androidx.compose.ui.autofill/ContentType.Companion.CreditCardNumber|{}CreditCardNumber[0]
            final fun <get-CreditCardNumber>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.CreditCardNumber.<get-CreditCardNumber>|<get-CreditCardNumber>(){}[0]
        final val CreditCardSecurityCode // androidx.compose.ui.autofill/ContentType.Companion.CreditCardSecurityCode|{}CreditCardSecurityCode[0]
            final fun <get-CreditCardSecurityCode>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.CreditCardSecurityCode.<get-CreditCardSecurityCode>|<get-CreditCardSecurityCode>(){}[0]
        final val EmailAddress // androidx.compose.ui.autofill/ContentType.Companion.EmailAddress|{}EmailAddress[0]
            final fun <get-EmailAddress>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.EmailAddress.<get-EmailAddress>|<get-EmailAddress>(){}[0]
        final val Gender // androidx.compose.ui.autofill/ContentType.Companion.Gender|{}Gender[0]
            final fun <get-Gender>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.Gender.<get-Gender>|<get-Gender>(){}[0]
        final val NewPassword // androidx.compose.ui.autofill/ContentType.Companion.NewPassword|{}NewPassword[0]
            final fun <get-NewPassword>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.NewPassword.<get-NewPassword>|<get-NewPassword>(){}[0]
        final val NewUsername // androidx.compose.ui.autofill/ContentType.Companion.NewUsername|{}NewUsername[0]
            final fun <get-NewUsername>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.NewUsername.<get-NewUsername>|<get-NewUsername>(){}[0]
        final val Password // androidx.compose.ui.autofill/ContentType.Companion.Password|{}Password[0]
            final fun <get-Password>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.Password.<get-Password>|<get-Password>(){}[0]
        final val PersonFirstName // androidx.compose.ui.autofill/ContentType.Companion.PersonFirstName|{}PersonFirstName[0]
            final fun <get-PersonFirstName>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PersonFirstName.<get-PersonFirstName>|<get-PersonFirstName>(){}[0]
        final val PersonFullName // androidx.compose.ui.autofill/ContentType.Companion.PersonFullName|{}PersonFullName[0]
            final fun <get-PersonFullName>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PersonFullName.<get-PersonFullName>|<get-PersonFullName>(){}[0]
        final val PersonLastName // androidx.compose.ui.autofill/ContentType.Companion.PersonLastName|{}PersonLastName[0]
            final fun <get-PersonLastName>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PersonLastName.<get-PersonLastName>|<get-PersonLastName>(){}[0]
        final val PersonMiddleInitial // androidx.compose.ui.autofill/ContentType.Companion.PersonMiddleInitial|{}PersonMiddleInitial[0]
            final fun <get-PersonMiddleInitial>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PersonMiddleInitial.<get-PersonMiddleInitial>|<get-PersonMiddleInitial>(){}[0]
        final val PersonMiddleName // androidx.compose.ui.autofill/ContentType.Companion.PersonMiddleName|{}PersonMiddleName[0]
            final fun <get-PersonMiddleName>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PersonMiddleName.<get-PersonMiddleName>|<get-PersonMiddleName>(){}[0]
        final val PersonNamePrefix // androidx.compose.ui.autofill/ContentType.Companion.PersonNamePrefix|{}PersonNamePrefix[0]
            final fun <get-PersonNamePrefix>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PersonNamePrefix.<get-PersonNamePrefix>|<get-PersonNamePrefix>(){}[0]
        final val PersonNameSuffix // androidx.compose.ui.autofill/ContentType.Companion.PersonNameSuffix|{}PersonNameSuffix[0]
            final fun <get-PersonNameSuffix>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PersonNameSuffix.<get-PersonNameSuffix>|<get-PersonNameSuffix>(){}[0]
        final val PhoneCountryCode // androidx.compose.ui.autofill/ContentType.Companion.PhoneCountryCode|{}PhoneCountryCode[0]
            final fun <get-PhoneCountryCode>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PhoneCountryCode.<get-PhoneCountryCode>|<get-PhoneCountryCode>(){}[0]
        final val PhoneNumber // androidx.compose.ui.autofill/ContentType.Companion.PhoneNumber|{}PhoneNumber[0]
            final fun <get-PhoneNumber>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PhoneNumber.<get-PhoneNumber>|<get-PhoneNumber>(){}[0]
        final val PhoneNumberDevice // androidx.compose.ui.autofill/ContentType.Companion.PhoneNumberDevice|{}PhoneNumberDevice[0]
            final fun <get-PhoneNumberDevice>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PhoneNumberDevice.<get-PhoneNumberDevice>|<get-PhoneNumberDevice>(){}[0]
        final val PhoneNumberNational // androidx.compose.ui.autofill/ContentType.Companion.PhoneNumberNational|{}PhoneNumberNational[0]
            final fun <get-PhoneNumberNational>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PhoneNumberNational.<get-PhoneNumberNational>|<get-PhoneNumberNational>(){}[0]
        final val PostalAddress // androidx.compose.ui.autofill/ContentType.Companion.PostalAddress|{}PostalAddress[0]
            final fun <get-PostalAddress>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PostalAddress.<get-PostalAddress>|<get-PostalAddress>(){}[0]
        final val PostalCode // androidx.compose.ui.autofill/ContentType.Companion.PostalCode|{}PostalCode[0]
            final fun <get-PostalCode>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PostalCode.<get-PostalCode>|<get-PostalCode>(){}[0]
        final val PostalCodeExtended // androidx.compose.ui.autofill/ContentType.Companion.PostalCodeExtended|{}PostalCodeExtended[0]
            final fun <get-PostalCodeExtended>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.PostalCodeExtended.<get-PostalCodeExtended>|<get-PostalCodeExtended>(){}[0]
        final val SmsOtpCode // androidx.compose.ui.autofill/ContentType.Companion.SmsOtpCode|{}SmsOtpCode[0]
            final fun <get-SmsOtpCode>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.SmsOtpCode.<get-SmsOtpCode>|<get-SmsOtpCode>(){}[0]
        final val Username // androidx.compose.ui.autofill/ContentType.Companion.Username|{}Username[0]
            final fun <get-Username>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.autofill/ContentType.Companion.Username.<get-Username>|<get-Username>(){}[0]
    }
}

sealed interface androidx.compose.ui.draganddrop/DragAndDropSourceModifierNode : androidx.compose.ui.node/LayoutAwareModifierNode { // androidx.compose.ui.draganddrop/DragAndDropSourceModifierNode|null[0]
    abstract val isRequestDragAndDropTransferRequired // androidx.compose.ui.draganddrop/DragAndDropSourceModifierNode.isRequestDragAndDropTransferRequired|{}isRequestDragAndDropTransferRequired[0]
        abstract fun <get-isRequestDragAndDropTransferRequired>(): kotlin/Boolean // androidx.compose.ui.draganddrop/DragAndDropSourceModifierNode.isRequestDragAndDropTransferRequired.<get-isRequestDragAndDropTransferRequired>|<get-isRequestDragAndDropTransferRequired>(){}[0]

    abstract fun requestDragAndDropTransfer(androidx.compose.ui.geometry/Offset) // androidx.compose.ui.draganddrop/DragAndDropSourceModifierNode.requestDragAndDropTransfer|requestDragAndDropTransfer(androidx.compose.ui.geometry.Offset){}[0]
}

sealed interface androidx.compose.ui.draganddrop/DragAndDropTargetModifierNode : androidx.compose.ui.node/LayoutAwareModifierNode // androidx.compose.ui.draganddrop/DragAndDropTargetModifierNode|null[0]

sealed interface androidx.compose.ui.draw/CacheDrawModifierNode : androidx.compose.ui.node/DrawModifierNode { // androidx.compose.ui.draw/CacheDrawModifierNode|null[0]
    abstract fun invalidateDrawCache() // androidx.compose.ui.draw/CacheDrawModifierNode.invalidateDrawCache|invalidateDrawCache(){}[0]
}

sealed interface androidx.compose.ui.focus/FocusEnterExitScope { // androidx.compose.ui.focus/FocusEnterExitScope|null[0]
    abstract val requestedFocusDirection // androidx.compose.ui.focus/FocusEnterExitScope.requestedFocusDirection|{}requestedFocusDirection[0]
        abstract fun <get-requestedFocusDirection>(): androidx.compose.ui.focus/FocusDirection // androidx.compose.ui.focus/FocusEnterExitScope.requestedFocusDirection.<get-requestedFocusDirection>|<get-requestedFocusDirection>(){}[0]

    abstract fun cancelFocusChange() // androidx.compose.ui.focus/FocusEnterExitScope.cancelFocusChange|cancelFocusChange(){}[0]
}

sealed interface androidx.compose.ui.focus/FocusTargetModifierNode : androidx.compose.ui.node/DelegatableNode { // androidx.compose.ui.focus/FocusTargetModifierNode|null[0]
    abstract val focusState // androidx.compose.ui.focus/FocusTargetModifierNode.focusState|{}focusState[0]
        abstract fun <get-focusState>(): androidx.compose.ui.focus/FocusState // androidx.compose.ui.focus/FocusTargetModifierNode.focusState.<get-focusState>|<get-focusState>(){}[0]

    abstract var focusability // androidx.compose.ui.focus/FocusTargetModifierNode.focusability|{}focusability[0]
        abstract fun <get-focusability>(): androidx.compose.ui.focus/Focusability // androidx.compose.ui.focus/FocusTargetModifierNode.focusability.<get-focusability>|<get-focusability>(){}[0]
        abstract fun <set-focusability>(androidx.compose.ui.focus/Focusability) // androidx.compose.ui.focus/FocusTargetModifierNode.focusability.<set-focusability>|<set-focusability>(androidx.compose.ui.focus.Focusability){}[0]

    abstract fun requestFocus(): kotlin/Boolean // androidx.compose.ui.focus/FocusTargetModifierNode.requestFocus|requestFocus(){}[0]
    abstract fun requestFocus(androidx.compose.ui.focus/FocusDirection = ...): kotlin/Boolean // androidx.compose.ui.focus/FocusTargetModifierNode.requestFocus|requestFocus(androidx.compose.ui.focus.FocusDirection){}[0]
}

sealed interface androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode : androidx.compose.ui.node/PointerInputModifierNode { // androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode|null[0]
    abstract var pointerInputHandler // androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode.pointerInputHandler|{}pointerInputHandler[0]
        abstract fun <get-pointerInputHandler>(): kotlin.coroutines/SuspendFunction1<androidx.compose.ui.input.pointer/PointerInputScope, kotlin/Unit> // androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode.pointerInputHandler.<get-pointerInputHandler>|<get-pointerInputHandler>(){}[0]
        abstract fun <set-pointerInputHandler>(kotlin.coroutines/SuspendFunction1<androidx.compose.ui.input.pointer/PointerInputScope, kotlin/Unit>) // androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode.pointerInputHandler.<set-pointerInputHandler>|<set-pointerInputHandler>(kotlin.coroutines.SuspendFunction1<androidx.compose.ui.input.pointer.PointerInputScope,kotlin.Unit>){}[0]
    open var pointerInputEventHandler // androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode.pointerInputEventHandler|{}pointerInputEventHandler[0]
        open fun <get-pointerInputEventHandler>(): androidx.compose.ui.input.pointer/PointerInputEventHandler // androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode.pointerInputEventHandler.<get-pointerInputEventHandler>|<get-pointerInputEventHandler>(){}[0]
        open fun <set-pointerInputEventHandler>(androidx.compose.ui.input.pointer/PointerInputEventHandler) // androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode.pointerInputEventHandler.<set-pointerInputEventHandler>|<set-pointerInputEventHandler>(androidx.compose.ui.input.pointer.PointerInputEventHandler){}[0]

    abstract fun resetPointerInputHandler() // androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode.resetPointerInputHandler|resetPointerInputHandler(){}[0]
}

sealed interface androidx.compose.ui.layout/ApproachIntrinsicMeasureScope : androidx.compose.ui.layout/IntrinsicMeasureScope { // androidx.compose.ui.layout/ApproachIntrinsicMeasureScope|null[0]
    abstract val lookaheadConstraints // androidx.compose.ui.layout/ApproachIntrinsicMeasureScope.lookaheadConstraints|{}lookaheadConstraints[0]
        abstract fun <get-lookaheadConstraints>(): androidx.compose.ui.unit/Constraints // androidx.compose.ui.layout/ApproachIntrinsicMeasureScope.lookaheadConstraints.<get-lookaheadConstraints>|<get-lookaheadConstraints>(){}[0]
    abstract val lookaheadSize // androidx.compose.ui.layout/ApproachIntrinsicMeasureScope.lookaheadSize|{}lookaheadSize[0]
        abstract fun <get-lookaheadSize>(): androidx.compose.ui.unit/IntSize // androidx.compose.ui.layout/ApproachIntrinsicMeasureScope.lookaheadSize.<get-lookaheadSize>|<get-lookaheadSize>(){}[0]
}

sealed interface androidx.compose.ui.layout/ApproachMeasureScope : androidx.compose.ui.layout/ApproachIntrinsicMeasureScope, androidx.compose.ui.layout/MeasureScope // androidx.compose.ui.layout/ApproachMeasureScope|null[0]

abstract class <#A: androidx.compose.ui/Modifier.Node> androidx.compose.ui.node/ModifierNodeElement : androidx.compose.ui.platform/InspectableValue, androidx.compose.ui/Modifier.Element { // androidx.compose.ui.node/ModifierNodeElement|null[0]
    constructor <init>() // androidx.compose.ui.node/ModifierNodeElement.<init>|<init>(){}[0]

    final val inspectableElements // androidx.compose.ui.node/ModifierNodeElement.inspectableElements|{}inspectableElements[0]
        final fun <get-inspectableElements>(): kotlin.sequences/Sequence<androidx.compose.ui.platform/ValueElement> // androidx.compose.ui.node/ModifierNodeElement.inspectableElements.<get-inspectableElements>|<get-inspectableElements>(){}[0]
    final val nameFallback // androidx.compose.ui.node/ModifierNodeElement.nameFallback|{}nameFallback[0]
        final fun <get-nameFallback>(): kotlin/String? // androidx.compose.ui.node/ModifierNodeElement.nameFallback.<get-nameFallback>|<get-nameFallback>(){}[0]
    final val valueOverride // androidx.compose.ui.node/ModifierNodeElement.valueOverride|{}valueOverride[0]
        final fun <get-valueOverride>(): kotlin/Any? // androidx.compose.ui.node/ModifierNodeElement.valueOverride.<get-valueOverride>|<get-valueOverride>(){}[0]

    abstract fun create(): #A // androidx.compose.ui.node/ModifierNodeElement.create|create(){}[0]
    abstract fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.node/ModifierNodeElement.equals|equals(kotlin.Any?){}[0]
    abstract fun hashCode(): kotlin/Int // androidx.compose.ui.node/ModifierNodeElement.hashCode|hashCode(){}[0]
    abstract fun update(#A) // androidx.compose.ui.node/ModifierNodeElement.update|update(1:0){}[0]
    open fun (androidx.compose.ui.platform/InspectorInfo).inspectableProperties() // androidx.compose.ui.node/ModifierNodeElement.inspectableProperties|inspectableProperties@androidx.compose.ui.platform.InspectorInfo(){}[0]
}

abstract class androidx.compose.ui.autofill/AutofillManager { // androidx.compose.ui.autofill/AutofillManager|null[0]
    abstract fun cancel() // androidx.compose.ui.autofill/AutofillManager.cancel|cancel(){}[0]
    abstract fun commit() // androidx.compose.ui.autofill/AutofillManager.commit|commit(){}[0]
}

abstract class androidx.compose.ui.input.pointer/PointerInputFilter { // androidx.compose.ui.input.pointer/PointerInputFilter|null[0]
    constructor <init>() // androidx.compose.ui.input.pointer/PointerInputFilter.<init>|<init>(){}[0]

    final val size // androidx.compose.ui.input.pointer/PointerInputFilter.size|{}size[0]
        final fun <get-size>(): androidx.compose.ui.unit/IntSize // androidx.compose.ui.input.pointer/PointerInputFilter.size.<get-size>|<get-size>(){}[0]
    open val interceptOutOfBoundsChildEvents // androidx.compose.ui.input.pointer/PointerInputFilter.interceptOutOfBoundsChildEvents|{}interceptOutOfBoundsChildEvents[0]
        open fun <get-interceptOutOfBoundsChildEvents>(): kotlin/Boolean // androidx.compose.ui.input.pointer/PointerInputFilter.interceptOutOfBoundsChildEvents.<get-interceptOutOfBoundsChildEvents>|<get-interceptOutOfBoundsChildEvents>(){}[0]
    open val shareWithSiblings // androidx.compose.ui.input.pointer/PointerInputFilter.shareWithSiblings|{}shareWithSiblings[0]
        open fun <get-shareWithSiblings>(): kotlin/Boolean // androidx.compose.ui.input.pointer/PointerInputFilter.shareWithSiblings.<get-shareWithSiblings>|<get-shareWithSiblings>(){}[0]

    abstract fun onCancel() // androidx.compose.ui.input.pointer/PointerInputFilter.onCancel|onCancel(){}[0]
    abstract fun onPointerEvent(androidx.compose.ui.input.pointer/PointerEvent, androidx.compose.ui.input.pointer/PointerEventPass, androidx.compose.ui.unit/IntSize) // androidx.compose.ui.input.pointer/PointerInputFilter.onPointerEvent|onPointerEvent(androidx.compose.ui.input.pointer.PointerEvent;androidx.compose.ui.input.pointer.PointerEventPass;androidx.compose.ui.unit.IntSize){}[0]
}

abstract class androidx.compose.ui.layout/Placeable : androidx.compose.ui.layout/Measured { // androidx.compose.ui.layout/Placeable|null[0]
    constructor <init>() // androidx.compose.ui.layout/Placeable.<init>|<init>(){}[0]

    open val measuredHeight // androidx.compose.ui.layout/Placeable.measuredHeight|{}measuredHeight[0]
        open fun <get-measuredHeight>(): kotlin/Int // androidx.compose.ui.layout/Placeable.measuredHeight.<get-measuredHeight>|<get-measuredHeight>(){}[0]
    open val measuredWidth // androidx.compose.ui.layout/Placeable.measuredWidth|{}measuredWidth[0]
        open fun <get-measuredWidth>(): kotlin/Int // androidx.compose.ui.layout/Placeable.measuredWidth.<get-measuredWidth>|<get-measuredWidth>(){}[0]

    final var apparentToRealOffset // androidx.compose.ui.layout/Placeable.apparentToRealOffset|{}apparentToRealOffset[0]
        final fun <get-apparentToRealOffset>(): androidx.compose.ui.unit/IntOffset // androidx.compose.ui.layout/Placeable.apparentToRealOffset.<get-apparentToRealOffset>|<get-apparentToRealOffset>(){}[0]
    final var height // androidx.compose.ui.layout/Placeable.height|{}height[0]
        final fun <get-height>(): kotlin/Int // androidx.compose.ui.layout/Placeable.height.<get-height>|<get-height>(){}[0]
    final var measuredSize // androidx.compose.ui.layout/Placeable.measuredSize|{}measuredSize[0]
        final fun <get-measuredSize>(): androidx.compose.ui.unit/IntSize // androidx.compose.ui.layout/Placeable.measuredSize.<get-measuredSize>|<get-measuredSize>(){}[0]
        final fun <set-measuredSize>(androidx.compose.ui.unit/IntSize) // androidx.compose.ui.layout/Placeable.measuredSize.<set-measuredSize>|<set-measuredSize>(androidx.compose.ui.unit.IntSize){}[0]
    final var measurementConstraints // androidx.compose.ui.layout/Placeable.measurementConstraints|{}measurementConstraints[0]
        final fun <get-measurementConstraints>(): androidx.compose.ui.unit/Constraints // androidx.compose.ui.layout/Placeable.measurementConstraints.<get-measurementConstraints>|<get-measurementConstraints>(){}[0]
        final fun <set-measurementConstraints>(androidx.compose.ui.unit/Constraints) // androidx.compose.ui.layout/Placeable.measurementConstraints.<set-measurementConstraints>|<set-measurementConstraints>(androidx.compose.ui.unit.Constraints){}[0]
    final var width // androidx.compose.ui.layout/Placeable.width|{}width[0]
        final fun <get-width>(): kotlin/Int // androidx.compose.ui.layout/Placeable.width.<get-width>|<get-width>(){}[0]

    abstract fun placeAt(androidx.compose.ui.unit/IntOffset, kotlin/Float, kotlin/Function1<androidx.compose.ui.graphics/GraphicsLayerScope, kotlin/Unit>?) // androidx.compose.ui.layout/Placeable.placeAt|placeAt(androidx.compose.ui.unit.IntOffset;kotlin.Float;kotlin.Function1<androidx.compose.ui.graphics.GraphicsLayerScope,kotlin.Unit>?){}[0]
    open fun placeAt(androidx.compose.ui.unit/IntOffset, kotlin/Float, androidx.compose.ui.graphics.layer/GraphicsLayer) // androidx.compose.ui.layout/Placeable.placeAt|placeAt(androidx.compose.ui.unit.IntOffset;kotlin.Float;androidx.compose.ui.graphics.layer.GraphicsLayer){}[0]

    abstract class PlacementScope : androidx.compose.ui.unit/Density { // androidx.compose.ui.layout/Placeable.PlacementScope|null[0]
        constructor <init>() // androidx.compose.ui.layout/Placeable.PlacementScope.<init>|<init>(){}[0]

        abstract val parentLayoutDirection // androidx.compose.ui.layout/Placeable.PlacementScope.parentLayoutDirection|{}parentLayoutDirection[0]
            abstract fun <get-parentLayoutDirection>(): androidx.compose.ui.unit/LayoutDirection // androidx.compose.ui.layout/Placeable.PlacementScope.parentLayoutDirection.<get-parentLayoutDirection>|<get-parentLayoutDirection>(){}[0]
        abstract val parentWidth // androidx.compose.ui.layout/Placeable.PlacementScope.parentWidth|{}parentWidth[0]
            abstract fun <get-parentWidth>(): kotlin/Int // androidx.compose.ui.layout/Placeable.PlacementScope.parentWidth.<get-parentWidth>|<get-parentWidth>(){}[0]
        open val coordinates // androidx.compose.ui.layout/Placeable.PlacementScope.coordinates|{}coordinates[0]
            open fun <get-coordinates>(): androidx.compose.ui.layout/LayoutCoordinates? // androidx.compose.ui.layout/Placeable.PlacementScope.coordinates.<get-coordinates>|<get-coordinates>(){}[0]
        open val density // androidx.compose.ui.layout/Placeable.PlacementScope.density|{}density[0]
            open fun <get-density>(): kotlin/Float // androidx.compose.ui.layout/Placeable.PlacementScope.density.<get-density>|<get-density>(){}[0]
        open val fontScale // androidx.compose.ui.layout/Placeable.PlacementScope.fontScale|{}fontScale[0]
            open fun <get-fontScale>(): kotlin/Float // androidx.compose.ui.layout/Placeable.PlacementScope.fontScale.<get-fontScale>|<get-fontScale>(){}[0]

        final fun (androidx.compose.ui.layout/Placeable).place(androidx.compose.ui.unit/IntOffset, kotlin/Float = ...) // androidx.compose.ui.layout/Placeable.PlacementScope.place|place@androidx.compose.ui.layout.Placeable(androidx.compose.ui.unit.IntOffset;kotlin.Float){}[0]
        final fun (androidx.compose.ui.layout/Placeable).place(kotlin/Int, kotlin/Int, kotlin/Float = ...) // androidx.compose.ui.layout/Placeable.PlacementScope.place|place@androidx.compose.ui.layout.Placeable(kotlin.Int;kotlin.Int;kotlin.Float){}[0]
        final fun (androidx.compose.ui.layout/Placeable).placeRelative(androidx.compose.ui.unit/IntOffset, kotlin/Float = ...) // androidx.compose.ui.layout/Placeable.PlacementScope.placeRelative|placeRelative@androidx.compose.ui.layout.Placeable(androidx.compose.ui.unit.IntOffset;kotlin.Float){}[0]
        final fun (androidx.compose.ui.layout/Placeable).placeRelative(kotlin/Int, kotlin/Int, kotlin/Float = ...) // androidx.compose.ui.layout/Placeable.PlacementScope.placeRelative|placeRelative@androidx.compose.ui.layout.Placeable(kotlin.Int;kotlin.Int;kotlin.Float){}[0]
        final fun (androidx.compose.ui.layout/Placeable).placeRelativeWithLayer(androidx.compose.ui.unit/IntOffset, androidx.compose.ui.graphics.layer/GraphicsLayer, kotlin/Float = ...) // androidx.compose.ui.layout/Placeable.PlacementScope.placeRelativeWithLayer|placeRelativeWithLayer@androidx.compose.ui.layout.Placeable(androidx.compose.ui.unit.IntOffset;androidx.compose.ui.graphics.layer.GraphicsLayer;kotlin.Float){}[0]
        final fun (androidx.compose.ui.layout/Placeable).placeRelativeWithLayer(androidx.compose.ui.unit/IntOffset, kotlin/Float = ..., kotlin/Function1<androidx.compose.ui.graphics/GraphicsLayerScope, kotlin/Unit> = ...) // androidx.compose.ui.layout/Placeable.PlacementScope.placeRelativeWithLayer|placeRelativeWithLayer@androidx.compose.ui.layout.Placeable(androidx.compose.ui.unit.IntOffset;kotlin.Float;kotlin.Function1<androidx.compose.ui.graphics.GraphicsLayerScope,kotlin.Unit>){}[0]
        final fun (androidx.compose.ui.layout/Placeable).placeRelativeWithLayer(kotlin/Int, kotlin/Int, androidx.compose.ui.graphics.layer/GraphicsLayer, kotlin/Float = ...) // androidx.compose.ui.layout/Placeable.PlacementScope.placeRelativeWithLayer|placeRelativeWithLayer@androidx.compose.ui.layout.Placeable(kotlin.Int;kotlin.Int;androidx.compose.ui.graphics.layer.GraphicsLayer;kotlin.Float){}[0]
        final fun (androidx.compose.ui.layout/Placeable).placeRelativeWithLayer(kotlin/Int, kotlin/Int, kotlin/Float = ..., kotlin/Function1<androidx.compose.ui.graphics/GraphicsLayerScope, kotlin/Unit> = ...) // androidx.compose.ui.layout/Placeable.PlacementScope.placeRelativeWithLayer|placeRelativeWithLayer@androidx.compose.ui.layout.Placeable(kotlin.Int;kotlin.Int;kotlin.Float;kotlin.Function1<androidx.compose.ui.graphics.GraphicsLayerScope,kotlin.Unit>){}[0]
        final fun (androidx.compose.ui.layout/Placeable).placeWithLayer(androidx.compose.ui.unit/IntOffset, androidx.compose.ui.graphics.layer/GraphicsLayer, kotlin/Float = ...) // androidx.compose.ui.layout/Placeable.PlacementScope.placeWithLayer|placeWithLayer@androidx.compose.ui.layout.Placeable(androidx.compose.ui.unit.IntOffset;androidx.compose.ui.graphics.layer.GraphicsLayer;kotlin.Float){}[0]
        final fun (androidx.compose.ui.layout/Placeable).placeWithLayer(androidx.compose.ui.unit/IntOffset, kotlin/Float = ..., kotlin/Function1<androidx.compose.ui.graphics/GraphicsLayerScope, kotlin/Unit> = ...) // androidx.compose.ui.layout/Placeable.PlacementScope.placeWithLayer|placeWithLayer@androidx.compose.ui.layout.Placeable(androidx.compose.ui.unit.IntOffset;kotlin.Float;kotlin.Function1<androidx.compose.ui.graphics.GraphicsLayerScope,kotlin.Unit>){}[0]
        final fun (androidx.compose.ui.layout/Placeable).placeWithLayer(kotlin/Int, kotlin/Int, androidx.compose.ui.graphics.layer/GraphicsLayer, kotlin/Float = ...) // androidx.compose.ui.layout/Placeable.PlacementScope.placeWithLayer|placeWithLayer@androidx.compose.ui.layout.Placeable(kotlin.Int;kotlin.Int;androidx.compose.ui.graphics.layer.GraphicsLayer;kotlin.Float){}[0]
        final fun (androidx.compose.ui.layout/Placeable).placeWithLayer(kotlin/Int, kotlin/Int, kotlin/Float = ..., kotlin/Function1<androidx.compose.ui.graphics/GraphicsLayerScope, kotlin/Unit> = ...) // androidx.compose.ui.layout/Placeable.PlacementScope.placeWithLayer|placeWithLayer@androidx.compose.ui.layout.Placeable(kotlin.Int;kotlin.Int;kotlin.Float;kotlin.Function1<androidx.compose.ui.graphics.GraphicsLayerScope,kotlin.Unit>){}[0]
        final fun withMotionFrameOfReferencePlacement(kotlin/Function1<androidx.compose.ui.layout/Placeable.PlacementScope, kotlin/Unit>) // androidx.compose.ui.layout/Placeable.PlacementScope.withMotionFrameOfReferencePlacement|withMotionFrameOfReferencePlacement(kotlin.Function1<androidx.compose.ui.layout.Placeable.PlacementScope,kotlin.Unit>){}[0]
        open fun (androidx.compose.ui.layout/Ruler).current(kotlin/Float): kotlin/Float // androidx.compose.ui.layout/Placeable.PlacementScope.current|current@androidx.compose.ui.layout.Ruler(kotlin.Float){}[0]
    }
}

abstract class androidx.compose.ui.node/DelegatingNode : androidx.compose.ui/Modifier.Node { // androidx.compose.ui.node/DelegatingNode|null[0]
    constructor <init>() // androidx.compose.ui.node/DelegatingNode.<init>|<init>(){}[0]

    final fun <#A1: androidx.compose.ui.node/DelegatableNode> delegate(#A1): #A1 // androidx.compose.ui.node/DelegatingNode.delegate|delegate(0:0){0§<androidx.compose.ui.node.DelegatableNode>}[0]
    final fun undelegate(androidx.compose.ui.node/DelegatableNode) // androidx.compose.ui.node/DelegatingNode.undelegate|undelegate(androidx.compose.ui.node.DelegatableNode){}[0]
}

abstract class androidx.compose.ui.platform/InspectorValueInfo : androidx.compose.ui.platform/InspectableValue { // androidx.compose.ui.platform/InspectorValueInfo|null[0]
    constructor <init>(kotlin/Function1<androidx.compose.ui.platform/InspectorInfo, kotlin/Unit>) // androidx.compose.ui.platform/InspectorValueInfo.<init>|<init>(kotlin.Function1<androidx.compose.ui.platform.InspectorInfo,kotlin.Unit>){}[0]

    open val inspectableElements // androidx.compose.ui.platform/InspectorValueInfo.inspectableElements|{}inspectableElements[0]
        open fun <get-inspectableElements>(): kotlin.sequences/Sequence<androidx.compose.ui.platform/ValueElement> // androidx.compose.ui.platform/InspectorValueInfo.inspectableElements.<get-inspectableElements>|<get-inspectableElements>(){}[0]
    open val nameFallback // androidx.compose.ui.platform/InspectorValueInfo.nameFallback|{}nameFallback[0]
        open fun <get-nameFallback>(): kotlin/String? // androidx.compose.ui.platform/InspectorValueInfo.nameFallback.<get-nameFallback>|<get-nameFallback>(){}[0]
    open val valueOverride // androidx.compose.ui.platform/InspectorValueInfo.valueOverride|{}valueOverride[0]
        open fun <get-valueOverride>(): kotlin/Any? // androidx.compose.ui.platform/InspectorValueInfo.valueOverride.<get-valueOverride>|<get-valueOverride>(){}[0]
}

final class <#A: kotlin/Any?> androidx.compose.ui.modifier/ProvidableModifierLocal : androidx.compose.ui.modifier/ModifierLocal<#A> { // androidx.compose.ui.modifier/ProvidableModifierLocal|null[0]
    constructor <init>(kotlin/Function0<#A>) // androidx.compose.ui.modifier/ProvidableModifierLocal.<init>|<init>(kotlin.Function0<1:0>){}[0]
}

final class <#A: kotlin/Any?> androidx.compose.ui.node/Ref { // androidx.compose.ui.node/Ref|null[0]
    constructor <init>() // androidx.compose.ui.node/Ref.<init>|<init>(){}[0]

    final var value // androidx.compose.ui.node/Ref.value|{}value[0]
        final fun <get-value>(): #A? // androidx.compose.ui.node/Ref.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(#A?) // androidx.compose.ui.node/Ref.value.<set-value>|<set-value>(1:0?){}[0]
}

final class <#A: kotlin/Any?> androidx.compose.ui.semantics/SemanticsPropertyKey { // androidx.compose.ui.semantics/SemanticsPropertyKey|null[0]
    constructor <init>(kotlin/String, kotlin/Function2<#A?, #A, #A?> = ...) // androidx.compose.ui.semantics/SemanticsPropertyKey.<init>|<init>(kotlin.String;kotlin.Function2<1:0?,1:0,1:0?>){}[0]

    final val name // androidx.compose.ui.semantics/SemanticsPropertyKey.name|{}name[0]
        final fun <get-name>(): kotlin/String // androidx.compose.ui.semantics/SemanticsPropertyKey.name.<get-name>|<get-name>(){}[0]

    final fun getValue(androidx.compose.ui.semantics/SemanticsPropertyReceiver, kotlin.reflect/KProperty<*>): #A // androidx.compose.ui.semantics/SemanticsPropertyKey.getValue|getValue(androidx.compose.ui.semantics.SemanticsPropertyReceiver;kotlin.reflect.KProperty<*>){}[0]
    final fun merge(#A?, #A): #A? // androidx.compose.ui.semantics/SemanticsPropertyKey.merge|merge(1:0?;1:0){}[0]
    final fun setValue(androidx.compose.ui.semantics/SemanticsPropertyReceiver, kotlin.reflect/KProperty<*>, #A) // androidx.compose.ui.semantics/SemanticsPropertyKey.setValue|setValue(androidx.compose.ui.semantics.SemanticsPropertyReceiver;kotlin.reflect.KProperty<*>;1:0){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.semantics/SemanticsPropertyKey.toString|toString(){}[0]
}

final class <#A: kotlin/Function<kotlin/Boolean>> androidx.compose.ui.semantics/AccessibilityAction { // androidx.compose.ui.semantics/AccessibilityAction|null[0]
    constructor <init>(kotlin/String?, #A?) // androidx.compose.ui.semantics/AccessibilityAction.<init>|<init>(kotlin.String?;1:0?){}[0]

    final val action // androidx.compose.ui.semantics/AccessibilityAction.action|{}action[0]
        final fun <get-action>(): #A? // androidx.compose.ui.semantics/AccessibilityAction.action.<get-action>|<get-action>(){}[0]
    final val label // androidx.compose.ui.semantics/AccessibilityAction.label|{}label[0]
        final fun <get-label>(): kotlin/String? // androidx.compose.ui.semantics/AccessibilityAction.label.<get-label>|<get-label>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.semantics/AccessibilityAction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.semantics/AccessibilityAction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.semantics/AccessibilityAction.toString|toString(){}[0]
}

final class androidx.compose.ui.autofill/AutofillNode { // androidx.compose.ui.autofill/AutofillNode|null[0]
    constructor <init>(kotlin.collections/List<androidx.compose.ui.autofill/AutofillType> = ..., androidx.compose.ui.geometry/Rect? = ..., kotlin/Function1<kotlin/String, kotlin/Unit>?) // androidx.compose.ui.autofill/AutofillNode.<init>|<init>(kotlin.collections.List<androidx.compose.ui.autofill.AutofillType>;androidx.compose.ui.geometry.Rect?;kotlin.Function1<kotlin.String,kotlin.Unit>?){}[0]

    final val autofillTypes // androidx.compose.ui.autofill/AutofillNode.autofillTypes|{}autofillTypes[0]
        final fun <get-autofillTypes>(): kotlin.collections/List<androidx.compose.ui.autofill/AutofillType> // androidx.compose.ui.autofill/AutofillNode.autofillTypes.<get-autofillTypes>|<get-autofillTypes>(){}[0]
    final val id // androidx.compose.ui.autofill/AutofillNode.id|{}id[0]
        final fun <get-id>(): kotlin/Int // androidx.compose.ui.autofill/AutofillNode.id.<get-id>|<get-id>(){}[0]
    final val onFill // androidx.compose.ui.autofill/AutofillNode.onFill|{}onFill[0]
        final fun <get-onFill>(): kotlin/Function1<kotlin/String, kotlin/Unit>? // androidx.compose.ui.autofill/AutofillNode.onFill.<get-onFill>|<get-onFill>(){}[0]

    final var boundingBox // androidx.compose.ui.autofill/AutofillNode.boundingBox|{}boundingBox[0]
        final fun <get-boundingBox>(): androidx.compose.ui.geometry/Rect? // androidx.compose.ui.autofill/AutofillNode.boundingBox.<get-boundingBox>|<get-boundingBox>(){}[0]
        final fun <set-boundingBox>(androidx.compose.ui.geometry/Rect?) // androidx.compose.ui.autofill/AutofillNode.boundingBox.<set-boundingBox>|<set-boundingBox>(androidx.compose.ui.geometry.Rect?){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.autofill/AutofillNode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.autofill/AutofillNode.hashCode|hashCode(){}[0]
}

final class androidx.compose.ui.autofill/AutofillTree { // androidx.compose.ui.autofill/AutofillTree|null[0]
    constructor <init>() // androidx.compose.ui.autofill/AutofillTree.<init>|<init>(){}[0]

    final val children // androidx.compose.ui.autofill/AutofillTree.children|{}children[0]
        final fun <get-children>(): kotlin.collections/MutableMap<kotlin/Int, androidx.compose.ui.autofill/AutofillNode> // androidx.compose.ui.autofill/AutofillTree.children.<get-children>|<get-children>(){}[0]

    final fun performAutofill(kotlin/Int, kotlin/String): kotlin/Unit? // androidx.compose.ui.autofill/AutofillTree.performAutofill|performAutofill(kotlin.Int;kotlin.String){}[0]
    final fun plusAssign(androidx.compose.ui.autofill/AutofillNode) // androidx.compose.ui.autofill/AutofillTree.plusAssign|plusAssign(androidx.compose.ui.autofill.AutofillNode){}[0]
}

final class androidx.compose.ui.draganddrop/DragAndDropEvent { // androidx.compose.ui.draganddrop/DragAndDropEvent|null[0]
    constructor <init>() // androidx.compose.ui.draganddrop/DragAndDropEvent.<init>|<init>(){}[0]
}

final class androidx.compose.ui.draganddrop/DragAndDropTransferData { // androidx.compose.ui.draganddrop/DragAndDropTransferData|null[0]
    constructor <init>() // androidx.compose.ui.draganddrop/DragAndDropTransferData.<init>|<init>(){}[0]
}

final class androidx.compose.ui.draw/CacheDrawScope : androidx.compose.ui.unit/Density { // androidx.compose.ui.draw/CacheDrawScope|null[0]
    final val density // androidx.compose.ui.draw/CacheDrawScope.density|{}density[0]
        final fun <get-density>(): kotlin/Float // androidx.compose.ui.draw/CacheDrawScope.density.<get-density>|<get-density>(){}[0]
    final val fontScale // androidx.compose.ui.draw/CacheDrawScope.fontScale|{}fontScale[0]
        final fun <get-fontScale>(): kotlin/Float // androidx.compose.ui.draw/CacheDrawScope.fontScale.<get-fontScale>|<get-fontScale>(){}[0]
    final val layoutDirection // androidx.compose.ui.draw/CacheDrawScope.layoutDirection|{}layoutDirection[0]
        final fun <get-layoutDirection>(): androidx.compose.ui.unit/LayoutDirection // androidx.compose.ui.draw/CacheDrawScope.layoutDirection.<get-layoutDirection>|<get-layoutDirection>(){}[0]
    final val size // androidx.compose.ui.draw/CacheDrawScope.size|{}size[0]
        final fun <get-size>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.draw/CacheDrawScope.size.<get-size>|<get-size>(){}[0]

    final fun (androidx.compose.ui.graphics.layer/GraphicsLayer).record(androidx.compose.ui.unit/Density = ..., androidx.compose.ui.unit/LayoutDirection = ..., androidx.compose.ui.unit/IntSize = ..., kotlin/Function1<androidx.compose.ui.graphics.drawscope/ContentDrawScope, kotlin/Unit>) // androidx.compose.ui.draw/CacheDrawScope.record|record@androidx.compose.ui.graphics.layer.GraphicsLayer(androidx.compose.ui.unit.Density;androidx.compose.ui.unit.LayoutDirection;androidx.compose.ui.unit.IntSize;kotlin.Function1<androidx.compose.ui.graphics.drawscope.ContentDrawScope,kotlin.Unit>){}[0]
    final fun obtainGraphicsLayer(): androidx.compose.ui.graphics.layer/GraphicsLayer // androidx.compose.ui.draw/CacheDrawScope.obtainGraphicsLayer|obtainGraphicsLayer(){}[0]
    final fun onDrawBehind(kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>): androidx.compose.ui.draw/DrawResult // androidx.compose.ui.draw/CacheDrawScope.onDrawBehind|onDrawBehind(kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
    final fun onDrawWithContent(kotlin/Function1<androidx.compose.ui.graphics.drawscope/ContentDrawScope, kotlin/Unit>): androidx.compose.ui.draw/DrawResult // androidx.compose.ui.draw/CacheDrawScope.onDrawWithContent|onDrawWithContent(kotlin.Function1<androidx.compose.ui.graphics.drawscope.ContentDrawScope,kotlin.Unit>){}[0]
}

final class androidx.compose.ui.draw/DrawResult // androidx.compose.ui.draw/DrawResult|null[0]

final class androidx.compose.ui.focus/FocusOrder { // androidx.compose.ui.focus/FocusOrder|null[0]
    constructor <init>() // androidx.compose.ui.focus/FocusOrder.<init>|<init>(){}[0]

    final var down // androidx.compose.ui.focus/FocusOrder.down|{}down[0]
        final fun <get-down>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusOrder.down.<get-down>|<get-down>(){}[0]
        final fun <set-down>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusOrder.down.<set-down>|<set-down>(androidx.compose.ui.focus.FocusRequester){}[0]
    final var end // androidx.compose.ui.focus/FocusOrder.end|{}end[0]
        final fun <get-end>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusOrder.end.<get-end>|<get-end>(){}[0]
        final fun <set-end>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusOrder.end.<set-end>|<set-end>(androidx.compose.ui.focus.FocusRequester){}[0]
    final var left // androidx.compose.ui.focus/FocusOrder.left|{}left[0]
        final fun <get-left>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusOrder.left.<get-left>|<get-left>(){}[0]
        final fun <set-left>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusOrder.left.<set-left>|<set-left>(androidx.compose.ui.focus.FocusRequester){}[0]
    final var next // androidx.compose.ui.focus/FocusOrder.next|{}next[0]
        final fun <get-next>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusOrder.next.<get-next>|<get-next>(){}[0]
        final fun <set-next>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusOrder.next.<set-next>|<set-next>(androidx.compose.ui.focus.FocusRequester){}[0]
    final var previous // androidx.compose.ui.focus/FocusOrder.previous|{}previous[0]
        final fun <get-previous>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusOrder.previous.<get-previous>|<get-previous>(){}[0]
        final fun <set-previous>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusOrder.previous.<set-previous>|<set-previous>(androidx.compose.ui.focus.FocusRequester){}[0]
    final var right // androidx.compose.ui.focus/FocusOrder.right|{}right[0]
        final fun <get-right>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusOrder.right.<get-right>|<get-right>(){}[0]
        final fun <set-right>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusOrder.right.<set-right>|<set-right>(androidx.compose.ui.focus.FocusRequester){}[0]
    final var start // androidx.compose.ui.focus/FocusOrder.start|{}start[0]
        final fun <get-start>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusOrder.start.<get-start>|<get-start>(){}[0]
        final fun <set-start>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusOrder.start.<set-start>|<set-start>(androidx.compose.ui.focus.FocusRequester){}[0]
    final var up // androidx.compose.ui.focus/FocusOrder.up|{}up[0]
        final fun <get-up>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusOrder.up.<get-up>|<get-up>(){}[0]
        final fun <set-up>(androidx.compose.ui.focus/FocusRequester) // androidx.compose.ui.focus/FocusOrder.up.<set-up>|<set-up>(androidx.compose.ui.focus.FocusRequester){}[0]
}

final class androidx.compose.ui.focus/FocusRequester { // androidx.compose.ui.focus/FocusRequester|null[0]
    constructor <init>() // androidx.compose.ui.focus/FocusRequester.<init>|<init>(){}[0]

    final fun captureFocus(): kotlin/Boolean // androidx.compose.ui.focus/FocusRequester.captureFocus|captureFocus(){}[0]
    final fun freeFocus(): kotlin/Boolean // androidx.compose.ui.focus/FocusRequester.freeFocus|freeFocus(){}[0]
    final fun requestFocus() // androidx.compose.ui.focus/FocusRequester.requestFocus|requestFocus(){}[0]
    final fun requestFocus(androidx.compose.ui.focus/FocusDirection = ...): kotlin/Boolean // androidx.compose.ui.focus/FocusRequester.requestFocus|requestFocus(androidx.compose.ui.focus.FocusDirection){}[0]
    final fun restoreFocusedChild(): kotlin/Boolean // androidx.compose.ui.focus/FocusRequester.restoreFocusedChild|restoreFocusedChild(){}[0]
    final fun saveFocusedChild(): kotlin/Boolean // androidx.compose.ui.focus/FocusRequester.saveFocusedChild|saveFocusedChild(){}[0]

    final object Companion { // androidx.compose.ui.focus/FocusRequester.Companion|null[0]
        final val Cancel // androidx.compose.ui.focus/FocusRequester.Companion.Cancel|{}Cancel[0]
            final fun <get-Cancel>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.Cancel.<get-Cancel>|<get-Cancel>(){}[0]
        final val Default // androidx.compose.ui.focus/FocusRequester.Companion.Default|{}Default[0]
            final fun <get-Default>(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.Default.<get-Default>|<get-Default>(){}[0]

        final fun createRefs(): androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory // androidx.compose.ui.focus/FocusRequester.Companion.createRefs|createRefs(){}[0]

        final object FocusRequesterFactory { // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory|null[0]
            final fun component1(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component1|component1(){}[0]
            final fun component10(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component10|component10(){}[0]
            final fun component11(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component11|component11(){}[0]
            final fun component12(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component12|component12(){}[0]
            final fun component13(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component13|component13(){}[0]
            final fun component14(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component14|component14(){}[0]
            final fun component15(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component15|component15(){}[0]
            final fun component16(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component16|component16(){}[0]
            final fun component2(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component2|component2(){}[0]
            final fun component3(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component3|component3(){}[0]
            final fun component4(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component4|component4(){}[0]
            final fun component5(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component5|component5(){}[0]
            final fun component6(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component6|component6(){}[0]
            final fun component7(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component7|component7(){}[0]
            final fun component8(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component8|component8(){}[0]
            final fun component9(): androidx.compose.ui.focus/FocusRequester // androidx.compose.ui.focus/FocusRequester.Companion.FocusRequesterFactory.component9|component9(){}[0]
        }
    }
}

final class androidx.compose.ui.graphics.vector/ImageVector { // androidx.compose.ui.graphics.vector/ImageVector|null[0]
    final val autoMirror // androidx.compose.ui.graphics.vector/ImageVector.autoMirror|{}autoMirror[0]
        final fun <get-autoMirror>(): kotlin/Boolean // androidx.compose.ui.graphics.vector/ImageVector.autoMirror.<get-autoMirror>|<get-autoMirror>(){}[0]
    final val defaultHeight // androidx.compose.ui.graphics.vector/ImageVector.defaultHeight|{}defaultHeight[0]
        final fun <get-defaultHeight>(): androidx.compose.ui.unit/Dp // androidx.compose.ui.graphics.vector/ImageVector.defaultHeight.<get-defaultHeight>|<get-defaultHeight>(){}[0]
    final val defaultWidth // androidx.compose.ui.graphics.vector/ImageVector.defaultWidth|{}defaultWidth[0]
        final fun <get-defaultWidth>(): androidx.compose.ui.unit/Dp // androidx.compose.ui.graphics.vector/ImageVector.defaultWidth.<get-defaultWidth>|<get-defaultWidth>(){}[0]
    final val name // androidx.compose.ui.graphics.vector/ImageVector.name|{}name[0]
        final fun <get-name>(): kotlin/String // androidx.compose.ui.graphics.vector/ImageVector.name.<get-name>|<get-name>(){}[0]
    final val root // androidx.compose.ui.graphics.vector/ImageVector.root|{}root[0]
        final fun <get-root>(): androidx.compose.ui.graphics.vector/VectorGroup // androidx.compose.ui.graphics.vector/ImageVector.root.<get-root>|<get-root>(){}[0]
    final val tintBlendMode // androidx.compose.ui.graphics.vector/ImageVector.tintBlendMode|{}tintBlendMode[0]
        final fun <get-tintBlendMode>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics.vector/ImageVector.tintBlendMode.<get-tintBlendMode>|<get-tintBlendMode>(){}[0]
    final val tintColor // androidx.compose.ui.graphics.vector/ImageVector.tintColor|{}tintColor[0]
        final fun <get-tintColor>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics.vector/ImageVector.tintColor.<get-tintColor>|<get-tintColor>(){}[0]
    final val viewportHeight // androidx.compose.ui.graphics.vector/ImageVector.viewportHeight|{}viewportHeight[0]
        final fun <get-viewportHeight>(): kotlin/Float // androidx.compose.ui.graphics.vector/ImageVector.viewportHeight.<get-viewportHeight>|<get-viewportHeight>(){}[0]
    final val viewportWidth // androidx.compose.ui.graphics.vector/ImageVector.viewportWidth|{}viewportWidth[0]
        final fun <get-viewportWidth>(): kotlin/Float // androidx.compose.ui.graphics.vector/ImageVector.viewportWidth.<get-viewportWidth>|<get-viewportWidth>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/ImageVector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/ImageVector.hashCode|hashCode(){}[0]

    final class Builder { // androidx.compose.ui.graphics.vector/ImageVector.Builder|null[0]
        constructor <init>(kotlin/String = ..., androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, kotlin/Float, kotlin/Float, androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/BlendMode = ...) // androidx.compose.ui.graphics.vector/ImageVector.Builder.<init>|<init>(kotlin.String;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.BlendMode){}[0]
        constructor <init>(kotlin/String = ..., androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, kotlin/Float, kotlin/Float, androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/BlendMode = ..., kotlin/Boolean = ...) // androidx.compose.ui.graphics.vector/ImageVector.Builder.<init>|<init>(kotlin.String;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.BlendMode;kotlin.Boolean){}[0]

        final fun addGroup(kotlin/String = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode> = ...): androidx.compose.ui.graphics.vector/ImageVector.Builder // androidx.compose.ui.graphics.vector/ImageVector.Builder.addGroup|addGroup(kotlin.String;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.collections.List<androidx.compose.ui.graphics.vector.PathNode>){}[0]
        final fun addPath(kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode>, androidx.compose.ui.graphics/PathFillType = ..., kotlin/String = ..., androidx.compose.ui.graphics/Brush? = ..., kotlin/Float = ..., androidx.compose.ui.graphics/Brush? = ..., kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/StrokeCap = ..., androidx.compose.ui.graphics/StrokeJoin = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics.vector/ImageVector.Builder // androidx.compose.ui.graphics.vector/ImageVector.Builder.addPath|addPath(kotlin.collections.List<androidx.compose.ui.graphics.vector.PathNode>;androidx.compose.ui.graphics.PathFillType;kotlin.String;androidx.compose.ui.graphics.Brush?;kotlin.Float;androidx.compose.ui.graphics.Brush?;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.StrokeCap;androidx.compose.ui.graphics.StrokeJoin;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
        final fun build(): androidx.compose.ui.graphics.vector/ImageVector // androidx.compose.ui.graphics.vector/ImageVector.Builder.build|build(){}[0]
        final fun clearGroup(): androidx.compose.ui.graphics.vector/ImageVector.Builder // androidx.compose.ui.graphics.vector/ImageVector.Builder.clearGroup|clearGroup(){}[0]
    }

    final object Companion // androidx.compose.ui.graphics.vector/ImageVector.Companion|null[0]
}

final class androidx.compose.ui.graphics.vector/VectorApplier : androidx.compose.runtime/AbstractApplier<androidx.compose.ui.graphics.vector/VNode> { // androidx.compose.ui.graphics.vector/VectorApplier|null[0]
    constructor <init>(androidx.compose.ui.graphics.vector/VNode) // androidx.compose.ui.graphics.vector/VectorApplier.<init>|<init>(androidx.compose.ui.graphics.vector.VNode){}[0]

    final fun insertBottomUp(kotlin/Int, androidx.compose.ui.graphics.vector/VNode) // androidx.compose.ui.graphics.vector/VectorApplier.insertBottomUp|insertBottomUp(kotlin.Int;androidx.compose.ui.graphics.vector.VNode){}[0]
    final fun insertTopDown(kotlin/Int, androidx.compose.ui.graphics.vector/VNode) // androidx.compose.ui.graphics.vector/VectorApplier.insertTopDown|insertTopDown(kotlin.Int;androidx.compose.ui.graphics.vector.VNode){}[0]
    final fun move(kotlin/Int, kotlin/Int, kotlin/Int) // androidx.compose.ui.graphics.vector/VectorApplier.move|move(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun remove(kotlin/Int, kotlin/Int) // androidx.compose.ui.graphics.vector/VectorApplier.remove|remove(kotlin.Int;kotlin.Int){}[0]
}

final class androidx.compose.ui.graphics.vector/VectorGroup : androidx.compose.ui.graphics.vector/VectorNode, kotlin.collections/Iterable<androidx.compose.ui.graphics.vector/VectorNode> { // androidx.compose.ui.graphics.vector/VectorGroup|null[0]
    final val clipPathData // androidx.compose.ui.graphics.vector/VectorGroup.clipPathData|{}clipPathData[0]
        final fun <get-clipPathData>(): kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode> // androidx.compose.ui.graphics.vector/VectorGroup.clipPathData.<get-clipPathData>|<get-clipPathData>(){}[0]
    final val name // androidx.compose.ui.graphics.vector/VectorGroup.name|{}name[0]
        final fun <get-name>(): kotlin/String // androidx.compose.ui.graphics.vector/VectorGroup.name.<get-name>|<get-name>(){}[0]
    final val pivotX // androidx.compose.ui.graphics.vector/VectorGroup.pivotX|{}pivotX[0]
        final fun <get-pivotX>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorGroup.pivotX.<get-pivotX>|<get-pivotX>(){}[0]
    final val pivotY // androidx.compose.ui.graphics.vector/VectorGroup.pivotY|{}pivotY[0]
        final fun <get-pivotY>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorGroup.pivotY.<get-pivotY>|<get-pivotY>(){}[0]
    final val rotation // androidx.compose.ui.graphics.vector/VectorGroup.rotation|{}rotation[0]
        final fun <get-rotation>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorGroup.rotation.<get-rotation>|<get-rotation>(){}[0]
    final val scaleX // androidx.compose.ui.graphics.vector/VectorGroup.scaleX|{}scaleX[0]
        final fun <get-scaleX>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorGroup.scaleX.<get-scaleX>|<get-scaleX>(){}[0]
    final val scaleY // androidx.compose.ui.graphics.vector/VectorGroup.scaleY|{}scaleY[0]
        final fun <get-scaleY>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorGroup.scaleY.<get-scaleY>|<get-scaleY>(){}[0]
    final val size // androidx.compose.ui.graphics.vector/VectorGroup.size|{}size[0]
        final fun <get-size>(): kotlin/Int // androidx.compose.ui.graphics.vector/VectorGroup.size.<get-size>|<get-size>(){}[0]
    final val translationX // androidx.compose.ui.graphics.vector/VectorGroup.translationX|{}translationX[0]
        final fun <get-translationX>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorGroup.translationX.<get-translationX>|<get-translationX>(){}[0]
    final val translationY // androidx.compose.ui.graphics.vector/VectorGroup.translationY|{}translationY[0]
        final fun <get-translationY>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorGroup.translationY.<get-translationY>|<get-translationY>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/VectorGroup.equals|equals(kotlin.Any?){}[0]
    final fun get(kotlin/Int): androidx.compose.ui.graphics.vector/VectorNode // androidx.compose.ui.graphics.vector/VectorGroup.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/VectorGroup.hashCode|hashCode(){}[0]
    final fun iterator(): kotlin.collections/Iterator<androidx.compose.ui.graphics.vector/VectorNode> // androidx.compose.ui.graphics.vector/VectorGroup.iterator|iterator(){}[0]
}

final class androidx.compose.ui.graphics.vector/VectorPainter : androidx.compose.ui.graphics.painter/Painter { // androidx.compose.ui.graphics.vector/VectorPainter|null[0]
    final val intrinsicSize // androidx.compose.ui.graphics.vector/VectorPainter.intrinsicSize|{}intrinsicSize[0]
        final fun <get-intrinsicSize>(): androidx.compose.ui.geometry/Size // androidx.compose.ui.graphics.vector/VectorPainter.intrinsicSize.<get-intrinsicSize>|<get-intrinsicSize>(){}[0]
}

final class androidx.compose.ui.graphics.vector/VectorPath : androidx.compose.ui.graphics.vector/VectorNode { // androidx.compose.ui.graphics.vector/VectorPath|null[0]
    final val fill // androidx.compose.ui.graphics.vector/VectorPath.fill|{}fill[0]
        final fun <get-fill>(): androidx.compose.ui.graphics/Brush? // androidx.compose.ui.graphics.vector/VectorPath.fill.<get-fill>|<get-fill>(){}[0]
    final val fillAlpha // androidx.compose.ui.graphics.vector/VectorPath.fillAlpha|{}fillAlpha[0]
        final fun <get-fillAlpha>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorPath.fillAlpha.<get-fillAlpha>|<get-fillAlpha>(){}[0]
    final val name // androidx.compose.ui.graphics.vector/VectorPath.name|{}name[0]
        final fun <get-name>(): kotlin/String // androidx.compose.ui.graphics.vector/VectorPath.name.<get-name>|<get-name>(){}[0]
    final val pathData // androidx.compose.ui.graphics.vector/VectorPath.pathData|{}pathData[0]
        final fun <get-pathData>(): kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode> // androidx.compose.ui.graphics.vector/VectorPath.pathData.<get-pathData>|<get-pathData>(){}[0]
    final val pathFillType // androidx.compose.ui.graphics.vector/VectorPath.pathFillType|{}pathFillType[0]
        final fun <get-pathFillType>(): androidx.compose.ui.graphics/PathFillType // androidx.compose.ui.graphics.vector/VectorPath.pathFillType.<get-pathFillType>|<get-pathFillType>(){}[0]
    final val stroke // androidx.compose.ui.graphics.vector/VectorPath.stroke|{}stroke[0]
        final fun <get-stroke>(): androidx.compose.ui.graphics/Brush? // androidx.compose.ui.graphics.vector/VectorPath.stroke.<get-stroke>|<get-stroke>(){}[0]
    final val strokeAlpha // androidx.compose.ui.graphics.vector/VectorPath.strokeAlpha|{}strokeAlpha[0]
        final fun <get-strokeAlpha>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorPath.strokeAlpha.<get-strokeAlpha>|<get-strokeAlpha>(){}[0]
    final val strokeLineCap // androidx.compose.ui.graphics.vector/VectorPath.strokeLineCap|{}strokeLineCap[0]
        final fun <get-strokeLineCap>(): androidx.compose.ui.graphics/StrokeCap // androidx.compose.ui.graphics.vector/VectorPath.strokeLineCap.<get-strokeLineCap>|<get-strokeLineCap>(){}[0]
    final val strokeLineJoin // androidx.compose.ui.graphics.vector/VectorPath.strokeLineJoin|{}strokeLineJoin[0]
        final fun <get-strokeLineJoin>(): androidx.compose.ui.graphics/StrokeJoin // androidx.compose.ui.graphics.vector/VectorPath.strokeLineJoin.<get-strokeLineJoin>|<get-strokeLineJoin>(){}[0]
    final val strokeLineMiter // androidx.compose.ui.graphics.vector/VectorPath.strokeLineMiter|{}strokeLineMiter[0]
        final fun <get-strokeLineMiter>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorPath.strokeLineMiter.<get-strokeLineMiter>|<get-strokeLineMiter>(){}[0]
    final val strokeLineWidth // androidx.compose.ui.graphics.vector/VectorPath.strokeLineWidth|{}strokeLineWidth[0]
        final fun <get-strokeLineWidth>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorPath.strokeLineWidth.<get-strokeLineWidth>|<get-strokeLineWidth>(){}[0]
    final val trimPathEnd // androidx.compose.ui.graphics.vector/VectorPath.trimPathEnd|{}trimPathEnd[0]
        final fun <get-trimPathEnd>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorPath.trimPathEnd.<get-trimPathEnd>|<get-trimPathEnd>(){}[0]
    final val trimPathOffset // androidx.compose.ui.graphics.vector/VectorPath.trimPathOffset|{}trimPathOffset[0]
        final fun <get-trimPathOffset>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorPath.trimPathOffset.<get-trimPathOffset>|<get-trimPathOffset>(){}[0]
    final val trimPathStart // androidx.compose.ui.graphics.vector/VectorPath.trimPathStart|{}trimPathStart[0]
        final fun <get-trimPathStart>(): kotlin/Float // androidx.compose.ui.graphics.vector/VectorPath.trimPathStart.<get-trimPathStart>|<get-trimPathStart>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics.vector/VectorPath.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics.vector/VectorPath.hashCode|hashCode(){}[0]
}

final class androidx.compose.ui.input.key/NativeKeyEvent { // androidx.compose.ui.input.key/NativeKeyEvent|null[0]
    constructor <init>() // androidx.compose.ui.input.key/NativeKeyEvent.<init>|<init>(){}[0]
}

final class androidx.compose.ui.input.nestedscroll/NestedScrollDispatcher { // androidx.compose.ui.input.nestedscroll/NestedScrollDispatcher|null[0]
    constructor <init>() // androidx.compose.ui.input.nestedscroll/NestedScrollDispatcher.<init>|<init>(){}[0]

    final val coroutineScope // androidx.compose.ui.input.nestedscroll/NestedScrollDispatcher.coroutineScope|{}coroutineScope[0]
        final fun <get-coroutineScope>(): kotlinx.coroutines/CoroutineScope // androidx.compose.ui.input.nestedscroll/NestedScrollDispatcher.coroutineScope.<get-coroutineScope>|<get-coroutineScope>(){}[0]

    final fun dispatchPostScroll(androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Offset, androidx.compose.ui.input.nestedscroll/NestedScrollSource): androidx.compose.ui.geometry/Offset // androidx.compose.ui.input.nestedscroll/NestedScrollDispatcher.dispatchPostScroll|dispatchPostScroll(androidx.compose.ui.geometry.Offset;androidx.compose.ui.geometry.Offset;androidx.compose.ui.input.nestedscroll.NestedScrollSource){}[0]
    final fun dispatchPreScroll(androidx.compose.ui.geometry/Offset, androidx.compose.ui.input.nestedscroll/NestedScrollSource): androidx.compose.ui.geometry/Offset // androidx.compose.ui.input.nestedscroll/NestedScrollDispatcher.dispatchPreScroll|dispatchPreScroll(androidx.compose.ui.geometry.Offset;androidx.compose.ui.input.nestedscroll.NestedScrollSource){}[0]
    final suspend fun dispatchPostFling(androidx.compose.ui.unit/Velocity, androidx.compose.ui.unit/Velocity): androidx.compose.ui.unit/Velocity // androidx.compose.ui.input.nestedscroll/NestedScrollDispatcher.dispatchPostFling|dispatchPostFling(androidx.compose.ui.unit.Velocity;androidx.compose.ui.unit.Velocity){}[0]
    final suspend fun dispatchPreFling(androidx.compose.ui.unit/Velocity): androidx.compose.ui.unit/Velocity // androidx.compose.ui.input.nestedscroll/NestedScrollDispatcher.dispatchPreFling|dispatchPreFling(androidx.compose.ui.unit.Velocity){}[0]
}

final class androidx.compose.ui.input.pointer.util/VelocityTracker { // androidx.compose.ui.input.pointer.util/VelocityTracker|null[0]
    constructor <init>() // androidx.compose.ui.input.pointer.util/VelocityTracker.<init>|<init>(){}[0]

    final fun addPosition(kotlin/Long, androidx.compose.ui.geometry/Offset) // androidx.compose.ui.input.pointer.util/VelocityTracker.addPosition|addPosition(kotlin.Long;androidx.compose.ui.geometry.Offset){}[0]
    final fun calculateVelocity(): androidx.compose.ui.unit/Velocity // androidx.compose.ui.input.pointer.util/VelocityTracker.calculateVelocity|calculateVelocity(){}[0]
    final fun calculateVelocity(androidx.compose.ui.unit/Velocity): androidx.compose.ui.unit/Velocity // androidx.compose.ui.input.pointer.util/VelocityTracker.calculateVelocity|calculateVelocity(androidx.compose.ui.unit.Velocity){}[0]
    final fun resetTracking() // androidx.compose.ui.input.pointer.util/VelocityTracker.resetTracking|resetTracking(){}[0]
}

final class androidx.compose.ui.input.pointer.util/VelocityTracker1D { // androidx.compose.ui.input.pointer.util/VelocityTracker1D|null[0]
    constructor <init>(kotlin/Boolean) // androidx.compose.ui.input.pointer.util/VelocityTracker1D.<init>|<init>(kotlin.Boolean){}[0]

    final val isDataDifferential // androidx.compose.ui.input.pointer.util/VelocityTracker1D.isDataDifferential|{}isDataDifferential[0]
        final fun <get-isDataDifferential>(): kotlin/Boolean // androidx.compose.ui.input.pointer.util/VelocityTracker1D.isDataDifferential.<get-isDataDifferential>|<get-isDataDifferential>(){}[0]

    final fun addDataPoint(kotlin/Long, kotlin/Float) // androidx.compose.ui.input.pointer.util/VelocityTracker1D.addDataPoint|addDataPoint(kotlin.Long;kotlin.Float){}[0]
    final fun calculateVelocity(): kotlin/Float // androidx.compose.ui.input.pointer.util/VelocityTracker1D.calculateVelocity|calculateVelocity(){}[0]
    final fun calculateVelocity(kotlin/Float): kotlin/Float // androidx.compose.ui.input.pointer.util/VelocityTracker1D.calculateVelocity|calculateVelocity(kotlin.Float){}[0]
    final fun resetTracking() // androidx.compose.ui.input.pointer.util/VelocityTracker1D.resetTracking|resetTracking(){}[0]
}

final class androidx.compose.ui.input.pointer/ConsumedData { // androidx.compose.ui.input.pointer/ConsumedData|null[0]
    constructor <init>(kotlin/Boolean = ..., kotlin/Boolean = ...) // androidx.compose.ui.input.pointer/ConsumedData.<init>|<init>(kotlin.Boolean;kotlin.Boolean){}[0]

    final var downChange // androidx.compose.ui.input.pointer/ConsumedData.downChange|{}downChange[0]
        final fun <get-downChange>(): kotlin/Boolean // androidx.compose.ui.input.pointer/ConsumedData.downChange.<get-downChange>|<get-downChange>(){}[0]
        final fun <set-downChange>(kotlin/Boolean) // androidx.compose.ui.input.pointer/ConsumedData.downChange.<set-downChange>|<set-downChange>(kotlin.Boolean){}[0]
    final var positionChange // androidx.compose.ui.input.pointer/ConsumedData.positionChange|{}positionChange[0]
        final fun <get-positionChange>(): kotlin/Boolean // androidx.compose.ui.input.pointer/ConsumedData.positionChange.<get-positionChange>|<get-positionChange>(){}[0]
        final fun <set-positionChange>(kotlin/Boolean) // androidx.compose.ui.input.pointer/ConsumedData.positionChange.<set-positionChange>|<set-positionChange>(kotlin.Boolean){}[0]
}

final class androidx.compose.ui.input.pointer/HistoricalChange { // androidx.compose.ui.input.pointer/HistoricalChange|null[0]
    constructor <init>(kotlin/Long, androidx.compose.ui.geometry/Offset) // androidx.compose.ui.input.pointer/HistoricalChange.<init>|<init>(kotlin.Long;androidx.compose.ui.geometry.Offset){}[0]

    final val position // androidx.compose.ui.input.pointer/HistoricalChange.position|{}position[0]
        final fun <get-position>(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.input.pointer/HistoricalChange.position.<get-position>|<get-position>(){}[0]
    final val uptimeMillis // androidx.compose.ui.input.pointer/HistoricalChange.uptimeMillis|{}uptimeMillis[0]
        final fun <get-uptimeMillis>(): kotlin/Long // androidx.compose.ui.input.pointer/HistoricalChange.uptimeMillis.<get-uptimeMillis>|<get-uptimeMillis>(){}[0]

    final fun toString(): kotlin/String // androidx.compose.ui.input.pointer/HistoricalChange.toString|toString(){}[0]
}

final class androidx.compose.ui.input.pointer/PointerEvent { // androidx.compose.ui.input.pointer/PointerEvent|null[0]
    constructor <init>(kotlin.collections/List<androidx.compose.ui.input.pointer/PointerInputChange>) // androidx.compose.ui.input.pointer/PointerEvent.<init>|<init>(kotlin.collections.List<androidx.compose.ui.input.pointer.PointerInputChange>){}[0]

    final val buttons // androidx.compose.ui.input.pointer/PointerEvent.buttons|{}buttons[0]
        final fun <get-buttons>(): androidx.compose.ui.input.pointer/PointerButtons // androidx.compose.ui.input.pointer/PointerEvent.buttons.<get-buttons>|<get-buttons>(){}[0]
    final val changes // androidx.compose.ui.input.pointer/PointerEvent.changes|{}changes[0]
        final fun <get-changes>(): kotlin.collections/List<androidx.compose.ui.input.pointer/PointerInputChange> // androidx.compose.ui.input.pointer/PointerEvent.changes.<get-changes>|<get-changes>(){}[0]
    final val keyboardModifiers // androidx.compose.ui.input.pointer/PointerEvent.keyboardModifiers|{}keyboardModifiers[0]
        final fun <get-keyboardModifiers>(): androidx.compose.ui.input.pointer/PointerKeyboardModifiers // androidx.compose.ui.input.pointer/PointerEvent.keyboardModifiers.<get-keyboardModifiers>|<get-keyboardModifiers>(){}[0]

    final var type // androidx.compose.ui.input.pointer/PointerEvent.type|{}type[0]
        final fun <get-type>(): androidx.compose.ui.input.pointer/PointerEventType // androidx.compose.ui.input.pointer/PointerEvent.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(androidx.compose.ui.input.pointer/PointerEventType) // androidx.compose.ui.input.pointer/PointerEvent.type.<set-type>|<set-type>(androidx.compose.ui.input.pointer.PointerEventType){}[0]

    final fun component1(): kotlin.collections/List<androidx.compose.ui.input.pointer/PointerInputChange> // androidx.compose.ui.input.pointer/PointerEvent.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<androidx.compose.ui.input.pointer/PointerInputChange> = ..., androidx.compose.ui.input.pointer/InternalPointerEvent? = ...): androidx.compose.ui.input.pointer/PointerEvent // androidx.compose.ui.input.pointer/PointerEvent.copy|copy(kotlin.collections.List<androidx.compose.ui.input.pointer.PointerInputChange>;androidx.compose.ui.input.pointer.InternalPointerEvent?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.input.pointer/PointerEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.input.pointer/PointerEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.input.pointer/PointerEvent.toString|toString(){}[0]
}

final class androidx.compose.ui.input.pointer/PointerEventTimeoutCancellationException : kotlin.coroutines.cancellation/CancellationException { // androidx.compose.ui.input.pointer/PointerEventTimeoutCancellationException|null[0]
    constructor <init>(kotlin/Long) // androidx.compose.ui.input.pointer/PointerEventTimeoutCancellationException.<init>|<init>(kotlin.Long){}[0]
}

final class androidx.compose.ui.input.pointer/PointerInputChange { // androidx.compose.ui.input.pointer/PointerInputChange|null[0]
    constructor <init>(androidx.compose.ui.input.pointer/PointerId, kotlin/Long, androidx.compose.ui.geometry/Offset, kotlin/Boolean, kotlin/Float, kotlin/Long, androidx.compose.ui.geometry/Offset, kotlin/Boolean, kotlin/Boolean, androidx.compose.ui.input.pointer/PointerType = ..., androidx.compose.ui.geometry/Offset = ...) // androidx.compose.ui.input.pointer/PointerInputChange.<init>|<init>(androidx.compose.ui.input.pointer.PointerId;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;kotlin.Float;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;kotlin.Boolean;androidx.compose.ui.input.pointer.PointerType;androidx.compose.ui.geometry.Offset){}[0]
    constructor <init>(androidx.compose.ui.input.pointer/PointerId, kotlin/Long, androidx.compose.ui.geometry/Offset, kotlin/Boolean, kotlin/Long, androidx.compose.ui.geometry/Offset, kotlin/Boolean, androidx.compose.ui.input.pointer/ConsumedData, androidx.compose.ui.input.pointer/PointerType = ...) // androidx.compose.ui.input.pointer/PointerInputChange.<init>|<init>(androidx.compose.ui.input.pointer.PointerId;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;androidx.compose.ui.input.pointer.ConsumedData;androidx.compose.ui.input.pointer.PointerType){}[0]
    constructor <init>(androidx.compose.ui.input.pointer/PointerId, kotlin/Long, androidx.compose.ui.geometry/Offset, kotlin/Boolean, kotlin/Long, androidx.compose.ui.geometry/Offset, kotlin/Boolean, kotlin/Boolean, androidx.compose.ui.input.pointer/PointerType = ..., androidx.compose.ui.geometry/Offset = ...) // androidx.compose.ui.input.pointer/PointerInputChange.<init>|<init>(androidx.compose.ui.input.pointer.PointerId;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;kotlin.Boolean;androidx.compose.ui.input.pointer.PointerType;androidx.compose.ui.geometry.Offset){}[0]

    final val consumed // androidx.compose.ui.input.pointer/PointerInputChange.consumed|{}consumed[0]
        final fun <get-consumed>(): androidx.compose.ui.input.pointer/ConsumedData // androidx.compose.ui.input.pointer/PointerInputChange.consumed.<get-consumed>|<get-consumed>(){}[0]
    final val historical // androidx.compose.ui.input.pointer/PointerInputChange.historical|{}historical[0]
        final fun <get-historical>(): kotlin.collections/List<androidx.compose.ui.input.pointer/HistoricalChange> // androidx.compose.ui.input.pointer/PointerInputChange.historical.<get-historical>|<get-historical>(){}[0]
    final val id // androidx.compose.ui.input.pointer/PointerInputChange.id|{}id[0]
        final fun <get-id>(): androidx.compose.ui.input.pointer/PointerId // androidx.compose.ui.input.pointer/PointerInputChange.id.<get-id>|<get-id>(){}[0]
    final val isConsumed // androidx.compose.ui.input.pointer/PointerInputChange.isConsumed|{}isConsumed[0]
        final fun <get-isConsumed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/PointerInputChange.isConsumed.<get-isConsumed>|<get-isConsumed>(){}[0]
    final val position // androidx.compose.ui.input.pointer/PointerInputChange.position|{}position[0]
        final fun <get-position>(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.input.pointer/PointerInputChange.position.<get-position>|<get-position>(){}[0]
    final val pressed // androidx.compose.ui.input.pointer/PointerInputChange.pressed|{}pressed[0]
        final fun <get-pressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/PointerInputChange.pressed.<get-pressed>|<get-pressed>(){}[0]
    final val pressure // androidx.compose.ui.input.pointer/PointerInputChange.pressure|{}pressure[0]
        final fun <get-pressure>(): kotlin/Float // androidx.compose.ui.input.pointer/PointerInputChange.pressure.<get-pressure>|<get-pressure>(){}[0]
    final val previousPosition // androidx.compose.ui.input.pointer/PointerInputChange.previousPosition|{}previousPosition[0]
        final fun <get-previousPosition>(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.input.pointer/PointerInputChange.previousPosition.<get-previousPosition>|<get-previousPosition>(){}[0]
    final val previousPressed // androidx.compose.ui.input.pointer/PointerInputChange.previousPressed|{}previousPressed[0]
        final fun <get-previousPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/PointerInputChange.previousPressed.<get-previousPressed>|<get-previousPressed>(){}[0]
    final val previousUptimeMillis // androidx.compose.ui.input.pointer/PointerInputChange.previousUptimeMillis|{}previousUptimeMillis[0]
        final fun <get-previousUptimeMillis>(): kotlin/Long // androidx.compose.ui.input.pointer/PointerInputChange.previousUptimeMillis.<get-previousUptimeMillis>|<get-previousUptimeMillis>(){}[0]
    final val scrollDelta // androidx.compose.ui.input.pointer/PointerInputChange.scrollDelta|{}scrollDelta[0]
        final fun <get-scrollDelta>(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.input.pointer/PointerInputChange.scrollDelta.<get-scrollDelta>|<get-scrollDelta>(){}[0]
    final val type // androidx.compose.ui.input.pointer/PointerInputChange.type|{}type[0]
        final fun <get-type>(): androidx.compose.ui.input.pointer/PointerType // androidx.compose.ui.input.pointer/PointerInputChange.type.<get-type>|<get-type>(){}[0]
    final val uptimeMillis // androidx.compose.ui.input.pointer/PointerInputChange.uptimeMillis|{}uptimeMillis[0]
        final fun <get-uptimeMillis>(): kotlin/Long // androidx.compose.ui.input.pointer/PointerInputChange.uptimeMillis.<get-uptimeMillis>|<get-uptimeMillis>(){}[0]

    final fun consume() // androidx.compose.ui.input.pointer/PointerInputChange.consume|consume(){}[0]
    final fun copy(androidx.compose.ui.input.pointer/PointerId = ..., kotlin/Long = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Boolean = ..., kotlin/Float = ..., kotlin/Long = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Boolean = ..., androidx.compose.ui.input.pointer/PointerType = ..., androidx.compose.ui.geometry/Offset = ...): androidx.compose.ui.input.pointer/PointerInputChange // androidx.compose.ui.input.pointer/PointerInputChange.copy|copy(androidx.compose.ui.input.pointer.PointerId;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;kotlin.Float;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;androidx.compose.ui.input.pointer.PointerType;androidx.compose.ui.geometry.Offset){}[0]
    final fun copy(androidx.compose.ui.input.pointer/PointerId = ..., kotlin/Long = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Boolean = ..., kotlin/Float = ..., kotlin/Long = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Boolean = ..., androidx.compose.ui.input.pointer/PointerType = ..., kotlin.collections/List<androidx.compose.ui.input.pointer/HistoricalChange> = ..., androidx.compose.ui.geometry/Offset = ...): androidx.compose.ui.input.pointer/PointerInputChange // androidx.compose.ui.input.pointer/PointerInputChange.copy|copy(androidx.compose.ui.input.pointer.PointerId;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;kotlin.Float;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;androidx.compose.ui.input.pointer.PointerType;kotlin.collections.List<androidx.compose.ui.input.pointer.HistoricalChange>;androidx.compose.ui.geometry.Offset){}[0]
    final fun copy(androidx.compose.ui.input.pointer/PointerId = ..., kotlin/Long = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Boolean = ..., kotlin/Long = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Boolean = ..., androidx.compose.ui.input.pointer/ConsumedData = ..., androidx.compose.ui.input.pointer/PointerType = ...): androidx.compose.ui.input.pointer/PointerInputChange // androidx.compose.ui.input.pointer/PointerInputChange.copy|copy(androidx.compose.ui.input.pointer.PointerId;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;androidx.compose.ui.input.pointer.ConsumedData;androidx.compose.ui.input.pointer.PointerType){}[0]
    final fun copy(androidx.compose.ui.input.pointer/PointerId = ..., kotlin/Long = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Boolean = ..., kotlin/Long = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Boolean = ..., androidx.compose.ui.input.pointer/ConsumedData, androidx.compose.ui.input.pointer/PointerType = ..., androidx.compose.ui.geometry/Offset = ...): androidx.compose.ui.input.pointer/PointerInputChange // androidx.compose.ui.input.pointer/PointerInputChange.copy|copy(androidx.compose.ui.input.pointer.PointerId;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;androidx.compose.ui.input.pointer.ConsumedData;androidx.compose.ui.input.pointer.PointerType;androidx.compose.ui.geometry.Offset){}[0]
    final fun copy(androidx.compose.ui.input.pointer/PointerId = ..., kotlin/Long = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Boolean = ..., kotlin/Long = ..., androidx.compose.ui.geometry/Offset = ..., kotlin/Boolean = ..., androidx.compose.ui.input.pointer/PointerType = ..., androidx.compose.ui.geometry/Offset = ...): androidx.compose.ui.input.pointer/PointerInputChange // androidx.compose.ui.input.pointer/PointerInputChange.copy|copy(androidx.compose.ui.input.pointer.PointerId;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;kotlin.Long;androidx.compose.ui.geometry.Offset;kotlin.Boolean;androidx.compose.ui.input.pointer.PointerType;androidx.compose.ui.geometry.Offset){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.input.pointer/PointerInputChange.toString|toString(){}[0]
}

final class androidx.compose.ui.input.rotary/RotaryScrollEvent { // androidx.compose.ui.input.rotary/RotaryScrollEvent|null[0]
    final val horizontalScrollPixels // androidx.compose.ui.input.rotary/RotaryScrollEvent.horizontalScrollPixels|{}horizontalScrollPixels[0]
        final fun <get-horizontalScrollPixels>(): kotlin/Float // androidx.compose.ui.input.rotary/RotaryScrollEvent.horizontalScrollPixels.<get-horizontalScrollPixels>|<get-horizontalScrollPixels>(){}[0]
    final val uptimeMillis // androidx.compose.ui.input.rotary/RotaryScrollEvent.uptimeMillis|{}uptimeMillis[0]
        final fun <get-uptimeMillis>(): kotlin/Long // androidx.compose.ui.input.rotary/RotaryScrollEvent.uptimeMillis.<get-uptimeMillis>|<get-uptimeMillis>(){}[0]
    final val verticalScrollPixels // androidx.compose.ui.input.rotary/RotaryScrollEvent.verticalScrollPixels|{}verticalScrollPixels[0]
        final fun <get-verticalScrollPixels>(): kotlin/Float // androidx.compose.ui.input.rotary/RotaryScrollEvent.verticalScrollPixels.<get-verticalScrollPixels>|<get-verticalScrollPixels>(){}[0]
}

final class androidx.compose.ui.layout/FixedScale : androidx.compose.ui.layout/ContentScale { // androidx.compose.ui.layout/FixedScale|null[0]
    constructor <init>(kotlin/Float) // androidx.compose.ui.layout/FixedScale.<init>|<init>(kotlin.Float){}[0]

    final val value // androidx.compose.ui.layout/FixedScale.value|{}value[0]
        final fun <get-value>(): kotlin/Float // androidx.compose.ui.layout/FixedScale.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/Float // androidx.compose.ui.layout/FixedScale.component1|component1(){}[0]
    final fun computeScaleFactor(androidx.compose.ui.geometry/Size, androidx.compose.ui.geometry/Size): androidx.compose.ui.layout/ScaleFactor // androidx.compose.ui.layout/FixedScale.computeScaleFactor|computeScaleFactor(androidx.compose.ui.geometry.Size;androidx.compose.ui.geometry.Size){}[0]
    final fun copy(kotlin/Float = ...): androidx.compose.ui.layout/FixedScale // androidx.compose.ui.layout/FixedScale.copy|copy(kotlin.Float){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.layout/FixedScale.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.layout/FixedScale.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.layout/FixedScale.toString|toString(){}[0]
}

final class androidx.compose.ui.layout/HorizontalAlignmentLine : androidx.compose.ui.layout/AlignmentLine { // androidx.compose.ui.layout/HorizontalAlignmentLine|null[0]
    constructor <init>(kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Int>) // androidx.compose.ui.layout/HorizontalAlignmentLine.<init>|<init>(kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Int>){}[0]
}

final class androidx.compose.ui.layout/HorizontalRuler : androidx.compose.ui.layout/Ruler { // androidx.compose.ui.layout/HorizontalRuler|null[0]
    constructor <init>() // androidx.compose.ui.layout/HorizontalRuler.<init>|<init>(){}[0]

    final object Companion { // androidx.compose.ui.layout/HorizontalRuler.Companion|null[0]
        final fun derived(kotlin/Function2<androidx.compose.ui.layout/Placeable.PlacementScope, kotlin/Float, kotlin/Float>): androidx.compose.ui.layout/HorizontalRuler // androidx.compose.ui.layout/HorizontalRuler.Companion.derived|derived(kotlin.Function2<androidx.compose.ui.layout.Placeable.PlacementScope,kotlin.Float,kotlin.Float>){}[0]
        final fun maxOf(kotlin/Array<out androidx.compose.ui.layout/HorizontalRuler>...): androidx.compose.ui.layout/HorizontalRuler // androidx.compose.ui.layout/HorizontalRuler.Companion.maxOf|maxOf(kotlin.Array<out|androidx.compose.ui.layout.HorizontalRuler>...){}[0]
        final fun minOf(kotlin/Array<out androidx.compose.ui.layout/HorizontalRuler>...): androidx.compose.ui.layout/HorizontalRuler // androidx.compose.ui.layout/HorizontalRuler.Companion.minOf|minOf(kotlin.Array<out|androidx.compose.ui.layout.HorizontalRuler>...){}[0]
    }
}

final class androidx.compose.ui.layout/ModifierInfo { // androidx.compose.ui.layout/ModifierInfo|null[0]
    constructor <init>(androidx.compose.ui/Modifier, androidx.compose.ui.layout/LayoutCoordinates, kotlin/Any? = ...) // androidx.compose.ui.layout/ModifierInfo.<init>|<init>(androidx.compose.ui.Modifier;androidx.compose.ui.layout.LayoutCoordinates;kotlin.Any?){}[0]

    final val coordinates // androidx.compose.ui.layout/ModifierInfo.coordinates|{}coordinates[0]
        final fun <get-coordinates>(): androidx.compose.ui.layout/LayoutCoordinates // androidx.compose.ui.layout/ModifierInfo.coordinates.<get-coordinates>|<get-coordinates>(){}[0]
    final val extra // androidx.compose.ui.layout/ModifierInfo.extra|{}extra[0]
        final fun <get-extra>(): kotlin/Any? // androidx.compose.ui.layout/ModifierInfo.extra.<get-extra>|<get-extra>(){}[0]
    final val modifier // androidx.compose.ui.layout/ModifierInfo.modifier|{}modifier[0]
        final fun <get-modifier>(): androidx.compose.ui/Modifier // androidx.compose.ui.layout/ModifierInfo.modifier.<get-modifier>|<get-modifier>(){}[0]

    final fun toString(): kotlin/String // androidx.compose.ui.layout/ModifierInfo.toString|toString(){}[0]
}

final class androidx.compose.ui.layout/SubcomposeLayoutState { // androidx.compose.ui.layout/SubcomposeLayoutState|null[0]
    constructor <init>() // androidx.compose.ui.layout/SubcomposeLayoutState.<init>|<init>(){}[0]
    constructor <init>(androidx.compose.ui.layout/SubcomposeSlotReusePolicy) // androidx.compose.ui.layout/SubcomposeLayoutState.<init>|<init>(androidx.compose.ui.layout.SubcomposeSlotReusePolicy){}[0]
    constructor <init>(kotlin/Int) // androidx.compose.ui.layout/SubcomposeLayoutState.<init>|<init>(kotlin.Int){}[0]

    final fun createPausedPrecomposition(kotlin/Any?, kotlin/Function0<kotlin/Unit>): androidx.compose.ui.layout/SubcomposeLayoutState.PausedPrecomposition // androidx.compose.ui.layout/SubcomposeLayoutState.createPausedPrecomposition|createPausedPrecomposition(kotlin.Any?;kotlin.Function0<kotlin.Unit>){}[0]
    final fun precompose(kotlin/Any?, kotlin/Function0<kotlin/Unit>): androidx.compose.ui.layout/SubcomposeLayoutState.PrecomposedSlotHandle // androidx.compose.ui.layout/SubcomposeLayoutState.precompose|precompose(kotlin.Any?;kotlin.Function0<kotlin.Unit>){}[0]

    abstract interface PrecomposedSlotHandle { // androidx.compose.ui.layout/SubcomposeLayoutState.PrecomposedSlotHandle|null[0]
        open val placeablesCount // androidx.compose.ui.layout/SubcomposeLayoutState.PrecomposedSlotHandle.placeablesCount|{}placeablesCount[0]
            open fun <get-placeablesCount>(): kotlin/Int // androidx.compose.ui.layout/SubcomposeLayoutState.PrecomposedSlotHandle.placeablesCount.<get-placeablesCount>|<get-placeablesCount>(){}[0]

        abstract fun dispose() // androidx.compose.ui.layout/SubcomposeLayoutState.PrecomposedSlotHandle.dispose|dispose(){}[0]
        open fun getSize(kotlin/Int): androidx.compose.ui.unit/IntSize // androidx.compose.ui.layout/SubcomposeLayoutState.PrecomposedSlotHandle.getSize|getSize(kotlin.Int){}[0]
        open fun premeasure(kotlin/Int, androidx.compose.ui.unit/Constraints) // androidx.compose.ui.layout/SubcomposeLayoutState.PrecomposedSlotHandle.premeasure|premeasure(kotlin.Int;androidx.compose.ui.unit.Constraints){}[0]
        open fun traverseDescendants(kotlin/Any?, kotlin/Function1<androidx.compose.ui.node/TraversableNode, androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction>) // androidx.compose.ui.layout/SubcomposeLayoutState.PrecomposedSlotHandle.traverseDescendants|traverseDescendants(kotlin.Any?;kotlin.Function1<androidx.compose.ui.node.TraversableNode,androidx.compose.ui.node.TraversableNode.Companion.TraverseDescendantsAction>){}[0]
    }

    sealed interface PausedPrecomposition { // androidx.compose.ui.layout/SubcomposeLayoutState.PausedPrecomposition|null[0]
        abstract val isComplete // androidx.compose.ui.layout/SubcomposeLayoutState.PausedPrecomposition.isComplete|{}isComplete[0]
            abstract fun <get-isComplete>(): kotlin/Boolean // androidx.compose.ui.layout/SubcomposeLayoutState.PausedPrecomposition.isComplete.<get-isComplete>|<get-isComplete>(){}[0]

        abstract fun apply(): androidx.compose.ui.layout/SubcomposeLayoutState.PrecomposedSlotHandle // androidx.compose.ui.layout/SubcomposeLayoutState.PausedPrecomposition.apply|apply(){}[0]
        abstract fun cancel() // androidx.compose.ui.layout/SubcomposeLayoutState.PausedPrecomposition.cancel|cancel(){}[0]
        abstract fun resume(androidx.compose.runtime/ShouldPauseCallback): kotlin/Boolean // androidx.compose.ui.layout/SubcomposeLayoutState.PausedPrecomposition.resume|resume(androidx.compose.runtime.ShouldPauseCallback){}[0]
    }
}

final class androidx.compose.ui.layout/TestModifierUpdater { // androidx.compose.ui.layout/TestModifierUpdater|null[0]
    final fun updateModifier(androidx.compose.ui/Modifier) // androidx.compose.ui.layout/TestModifierUpdater.updateModifier|updateModifier(androidx.compose.ui.Modifier){}[0]
}

final class androidx.compose.ui.layout/VerticalAlignmentLine : androidx.compose.ui.layout/AlignmentLine { // androidx.compose.ui.layout/VerticalAlignmentLine|null[0]
    constructor <init>(kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Int>) // androidx.compose.ui.layout/VerticalAlignmentLine.<init>|<init>(kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Int>){}[0]
}

final class androidx.compose.ui.layout/VerticalRuler : androidx.compose.ui.layout/Ruler { // androidx.compose.ui.layout/VerticalRuler|null[0]
    constructor <init>() // androidx.compose.ui.layout/VerticalRuler.<init>|<init>(){}[0]

    final object Companion { // androidx.compose.ui.layout/VerticalRuler.Companion|null[0]
        final fun derived(kotlin/Function2<androidx.compose.ui.layout/Placeable.PlacementScope, kotlin/Float, kotlin/Float>): androidx.compose.ui.layout/VerticalRuler // androidx.compose.ui.layout/VerticalRuler.Companion.derived|derived(kotlin.Function2<androidx.compose.ui.layout.Placeable.PlacementScope,kotlin.Float,kotlin.Float>){}[0]
        final fun maxOf(kotlin/Array<out androidx.compose.ui.layout/VerticalRuler>...): androidx.compose.ui.layout/VerticalRuler // androidx.compose.ui.layout/VerticalRuler.Companion.maxOf|maxOf(kotlin.Array<out|androidx.compose.ui.layout.VerticalRuler>...){}[0]
        final fun minOf(kotlin/Array<out androidx.compose.ui.layout/VerticalRuler>...): androidx.compose.ui.layout/VerticalRuler // androidx.compose.ui.layout/VerticalRuler.Companion.minOf|minOf(kotlin.Array<out|androidx.compose.ui.layout.VerticalRuler>...){}[0]
    }
}

final class androidx.compose.ui.node/DpTouchBoundsExpansion { // androidx.compose.ui.node/DpTouchBoundsExpansion|null[0]
    constructor <init>(androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, kotlin/Boolean) // androidx.compose.ui.node/DpTouchBoundsExpansion.<init>|<init>(androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;kotlin.Boolean){}[0]

    final val bottom // androidx.compose.ui.node/DpTouchBoundsExpansion.bottom|{}bottom[0]
        final fun <get-bottom>(): androidx.compose.ui.unit/Dp // androidx.compose.ui.node/DpTouchBoundsExpansion.bottom.<get-bottom>|<get-bottom>(){}[0]
    final val end // androidx.compose.ui.node/DpTouchBoundsExpansion.end|{}end[0]
        final fun <get-end>(): androidx.compose.ui.unit/Dp // androidx.compose.ui.node/DpTouchBoundsExpansion.end.<get-end>|<get-end>(){}[0]
    final val isLayoutDirectionAware // androidx.compose.ui.node/DpTouchBoundsExpansion.isLayoutDirectionAware|{}isLayoutDirectionAware[0]
        final fun <get-isLayoutDirectionAware>(): kotlin/Boolean // androidx.compose.ui.node/DpTouchBoundsExpansion.isLayoutDirectionAware.<get-isLayoutDirectionAware>|<get-isLayoutDirectionAware>(){}[0]
    final val start // androidx.compose.ui.node/DpTouchBoundsExpansion.start|{}start[0]
        final fun <get-start>(): androidx.compose.ui.unit/Dp // androidx.compose.ui.node/DpTouchBoundsExpansion.start.<get-start>|<get-start>(){}[0]
    final val top // androidx.compose.ui.node/DpTouchBoundsExpansion.top|{}top[0]
        final fun <get-top>(): androidx.compose.ui.unit/Dp // androidx.compose.ui.node/DpTouchBoundsExpansion.top.<get-top>|<get-top>(){}[0]

    final fun component1(): androidx.compose.ui.unit/Dp // androidx.compose.ui.node/DpTouchBoundsExpansion.component1|component1(){}[0]
    final fun component2(): androidx.compose.ui.unit/Dp // androidx.compose.ui.node/DpTouchBoundsExpansion.component2|component2(){}[0]
    final fun component3(): androidx.compose.ui.unit/Dp // androidx.compose.ui.node/DpTouchBoundsExpansion.component3|component3(){}[0]
    final fun component4(): androidx.compose.ui.unit/Dp // androidx.compose.ui.node/DpTouchBoundsExpansion.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // androidx.compose.ui.node/DpTouchBoundsExpansion.component5|component5(){}[0]
    final fun copy(androidx.compose.ui.unit/Dp = ..., androidx.compose.ui.unit/Dp = ..., androidx.compose.ui.unit/Dp = ..., androidx.compose.ui.unit/Dp = ..., kotlin/Boolean = ...): androidx.compose.ui.node/DpTouchBoundsExpansion // androidx.compose.ui.node/DpTouchBoundsExpansion.copy|copy(androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.node/DpTouchBoundsExpansion.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.node/DpTouchBoundsExpansion.hashCode|hashCode(){}[0]
    final fun roundToTouchBoundsExpansion(androidx.compose.ui.unit/Density): androidx.compose.ui.node/TouchBoundsExpansion // androidx.compose.ui.node/DpTouchBoundsExpansion.roundToTouchBoundsExpansion|roundToTouchBoundsExpansion(androidx.compose.ui.unit.Density){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.node/DpTouchBoundsExpansion.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.node/DpTouchBoundsExpansion.Companion|null[0]
        final fun Absolute(androidx.compose.ui.unit/Dp = ..., androidx.compose.ui.unit/Dp = ..., androidx.compose.ui.unit/Dp = ..., androidx.compose.ui.unit/Dp = ...): androidx.compose.ui.node/DpTouchBoundsExpansion // androidx.compose.ui.node/DpTouchBoundsExpansion.Companion.Absolute|Absolute(androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp){}[0]
    }
}

final class androidx.compose.ui.platform/ClipEntry { // androidx.compose.ui.platform/ClipEntry|null[0]
    constructor <init>() // androidx.compose.ui.platform/ClipEntry.<init>|<init>(){}[0]

    final val clipMetadata // androidx.compose.ui.platform/ClipEntry.clipMetadata|{}clipMetadata[0]
        final fun <get-clipMetadata>(): androidx.compose.ui.platform/ClipMetadata // androidx.compose.ui.platform/ClipEntry.clipMetadata.<get-clipMetadata>|<get-clipMetadata>(){}[0]
}

final class androidx.compose.ui.platform/ClipMetadata { // androidx.compose.ui.platform/ClipMetadata|null[0]
    constructor <init>() // androidx.compose.ui.platform/ClipMetadata.<init>|<init>(){}[0]
}

final class androidx.compose.ui.platform/InspectableModifier : androidx.compose.ui.platform/InspectorValueInfo, androidx.compose.ui/Modifier.Element { // androidx.compose.ui.platform/InspectableModifier|null[0]
    constructor <init>(kotlin/Function1<androidx.compose.ui.platform/InspectorInfo, kotlin/Unit>) // androidx.compose.ui.platform/InspectableModifier.<init>|<init>(kotlin.Function1<androidx.compose.ui.platform.InspectorInfo,kotlin.Unit>){}[0]

    final val end // androidx.compose.ui.platform/InspectableModifier.end|{}end[0]
        final fun <get-end>(): androidx.compose.ui.platform/InspectableModifier.End // androidx.compose.ui.platform/InspectableModifier.end.<get-end>|<get-end>(){}[0]

    final inner class End : androidx.compose.ui/Modifier.Element { // androidx.compose.ui.platform/InspectableModifier.End|null[0]
        constructor <init>() // androidx.compose.ui.platform/InspectableModifier.End.<init>|<init>(){}[0]
    }
}

final class androidx.compose.ui.platform/InspectorInfo { // androidx.compose.ui.platform/InspectorInfo|null[0]
    constructor <init>() // androidx.compose.ui.platform/InspectorInfo.<init>|<init>(){}[0]

    final val properties // androidx.compose.ui.platform/InspectorInfo.properties|{}properties[0]
        final fun <get-properties>(): androidx.compose.ui.platform/ValueElementSequence // androidx.compose.ui.platform/InspectorInfo.properties.<get-properties>|<get-properties>(){}[0]

    final var name // androidx.compose.ui.platform/InspectorInfo.name|{}name[0]
        final fun <get-name>(): kotlin/String? // androidx.compose.ui.platform/InspectorInfo.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // androidx.compose.ui.platform/InspectorInfo.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var value // androidx.compose.ui.platform/InspectorInfo.value|{}value[0]
        final fun <get-value>(): kotlin/Any? // androidx.compose.ui.platform/InspectorInfo.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(kotlin/Any?) // androidx.compose.ui.platform/InspectorInfo.value.<set-value>|<set-value>(kotlin.Any?){}[0]
}

final class androidx.compose.ui.platform/NativeClipboard { // androidx.compose.ui.platform/NativeClipboard|null[0]
    constructor <init>() // androidx.compose.ui.platform/NativeClipboard.<init>|<init>(){}[0]
}

final class androidx.compose.ui.platform/ValueElement { // androidx.compose.ui.platform/ValueElement|null[0]
    constructor <init>(kotlin/String, kotlin/Any?) // androidx.compose.ui.platform/ValueElement.<init>|<init>(kotlin.String;kotlin.Any?){}[0]

    final val name // androidx.compose.ui.platform/ValueElement.name|{}name[0]
        final fun <get-name>(): kotlin/String // androidx.compose.ui.platform/ValueElement.name.<get-name>|<get-name>(){}[0]
    final val value // androidx.compose.ui.platform/ValueElement.value|{}value[0]
        final fun <get-value>(): kotlin/Any? // androidx.compose.ui.platform/ValueElement.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // androidx.compose.ui.platform/ValueElement.component1|component1(){}[0]
    final fun component2(): kotlin/Any? // androidx.compose.ui.platform/ValueElement.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/Any? = ...): androidx.compose.ui.platform/ValueElement // androidx.compose.ui.platform/ValueElement.copy|copy(kotlin.String;kotlin.Any?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.platform/ValueElement.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.platform/ValueElement.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.platform/ValueElement.toString|toString(){}[0]
}

final class androidx.compose.ui.platform/ValueElementSequence : kotlin.sequences/Sequence<androidx.compose.ui.platform/ValueElement> { // androidx.compose.ui.platform/ValueElementSequence|null[0]
    constructor <init>() // androidx.compose.ui.platform/ValueElementSequence.<init>|<init>(){}[0]

    final fun iterator(): kotlin.collections/Iterator<androidx.compose.ui.platform/ValueElement> // androidx.compose.ui.platform/ValueElementSequence.iterator|iterator(){}[0]
    final fun set(kotlin/String, kotlin/Any?) // androidx.compose.ui.platform/ValueElementSequence.set|set(kotlin.String;kotlin.Any?){}[0]
}

final class androidx.compose.ui.semantics/CollectionInfo { // androidx.compose.ui.semantics/CollectionInfo|null[0]
    constructor <init>(kotlin/Int, kotlin/Int) // androidx.compose.ui.semantics/CollectionInfo.<init>|<init>(kotlin.Int;kotlin.Int){}[0]

    final val columnCount // androidx.compose.ui.semantics/CollectionInfo.columnCount|{}columnCount[0]
        final fun <get-columnCount>(): kotlin/Int // androidx.compose.ui.semantics/CollectionInfo.columnCount.<get-columnCount>|<get-columnCount>(){}[0]
    final val rowCount // androidx.compose.ui.semantics/CollectionInfo.rowCount|{}rowCount[0]
        final fun <get-rowCount>(): kotlin/Int // androidx.compose.ui.semantics/CollectionInfo.rowCount.<get-rowCount>|<get-rowCount>(){}[0]
}

final class androidx.compose.ui.semantics/CollectionItemInfo { // androidx.compose.ui.semantics/CollectionItemInfo|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int) // androidx.compose.ui.semantics/CollectionItemInfo.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

    final val columnIndex // androidx.compose.ui.semantics/CollectionItemInfo.columnIndex|{}columnIndex[0]
        final fun <get-columnIndex>(): kotlin/Int // androidx.compose.ui.semantics/CollectionItemInfo.columnIndex.<get-columnIndex>|<get-columnIndex>(){}[0]
    final val columnSpan // androidx.compose.ui.semantics/CollectionItemInfo.columnSpan|{}columnSpan[0]
        final fun <get-columnSpan>(): kotlin/Int // androidx.compose.ui.semantics/CollectionItemInfo.columnSpan.<get-columnSpan>|<get-columnSpan>(){}[0]
    final val rowIndex // androidx.compose.ui.semantics/CollectionItemInfo.rowIndex|{}rowIndex[0]
        final fun <get-rowIndex>(): kotlin/Int // androidx.compose.ui.semantics/CollectionItemInfo.rowIndex.<get-rowIndex>|<get-rowIndex>(){}[0]
    final val rowSpan // androidx.compose.ui.semantics/CollectionItemInfo.rowSpan|{}rowSpan[0]
        final fun <get-rowSpan>(): kotlin/Int // androidx.compose.ui.semantics/CollectionItemInfo.rowSpan.<get-rowSpan>|<get-rowSpan>(){}[0]
}

final class androidx.compose.ui.semantics/CustomAccessibilityAction { // androidx.compose.ui.semantics/CustomAccessibilityAction|null[0]
    constructor <init>(kotlin/String, kotlin/Function0<kotlin/Boolean>) // androidx.compose.ui.semantics/CustomAccessibilityAction.<init>|<init>(kotlin.String;kotlin.Function0<kotlin.Boolean>){}[0]

    final val action // androidx.compose.ui.semantics/CustomAccessibilityAction.action|{}action[0]
        final fun <get-action>(): kotlin/Function0<kotlin/Boolean> // androidx.compose.ui.semantics/CustomAccessibilityAction.action.<get-action>|<get-action>(){}[0]
    final val label // androidx.compose.ui.semantics/CustomAccessibilityAction.label|{}label[0]
        final fun <get-label>(): kotlin/String // androidx.compose.ui.semantics/CustomAccessibilityAction.label.<get-label>|<get-label>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.semantics/CustomAccessibilityAction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.semantics/CustomAccessibilityAction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.semantics/CustomAccessibilityAction.toString|toString(){}[0]
}

final class androidx.compose.ui.semantics/ProgressBarRangeInfo { // androidx.compose.ui.semantics/ProgressBarRangeInfo|null[0]
    constructor <init>(kotlin/Float, kotlin.ranges/ClosedFloatingPointRange<kotlin/Float>, kotlin/Int = ...) // androidx.compose.ui.semantics/ProgressBarRangeInfo.<init>|<init>(kotlin.Float;kotlin.ranges.ClosedFloatingPointRange<kotlin.Float>;kotlin.Int){}[0]

    final val current // androidx.compose.ui.semantics/ProgressBarRangeInfo.current|{}current[0]
        final fun <get-current>(): kotlin/Float // androidx.compose.ui.semantics/ProgressBarRangeInfo.current.<get-current>|<get-current>(){}[0]
    final val range // androidx.compose.ui.semantics/ProgressBarRangeInfo.range|{}range[0]
        final fun <get-range>(): kotlin.ranges/ClosedFloatingPointRange<kotlin/Float> // androidx.compose.ui.semantics/ProgressBarRangeInfo.range.<get-range>|<get-range>(){}[0]
    final val steps // androidx.compose.ui.semantics/ProgressBarRangeInfo.steps|{}steps[0]
        final fun <get-steps>(): kotlin/Int // androidx.compose.ui.semantics/ProgressBarRangeInfo.steps.<get-steps>|<get-steps>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.semantics/ProgressBarRangeInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.semantics/ProgressBarRangeInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.semantics/ProgressBarRangeInfo.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.semantics/ProgressBarRangeInfo.Companion|null[0]
        final val Indeterminate // androidx.compose.ui.semantics/ProgressBarRangeInfo.Companion.Indeterminate|{}Indeterminate[0]
            final fun <get-Indeterminate>(): androidx.compose.ui.semantics/ProgressBarRangeInfo // androidx.compose.ui.semantics/ProgressBarRangeInfo.Companion.Indeterminate.<get-Indeterminate>|<get-Indeterminate>(){}[0]
    }
}

final class androidx.compose.ui.semantics/ScrollAxisRange { // androidx.compose.ui.semantics/ScrollAxisRange|null[0]
    constructor <init>(kotlin/Function0<kotlin/Float>, kotlin/Function0<kotlin/Float>, kotlin/Boolean = ...) // androidx.compose.ui.semantics/ScrollAxisRange.<init>|<init>(kotlin.Function0<kotlin.Float>;kotlin.Function0<kotlin.Float>;kotlin.Boolean){}[0]

    final val maxValue // androidx.compose.ui.semantics/ScrollAxisRange.maxValue|{}maxValue[0]
        final fun <get-maxValue>(): kotlin/Function0<kotlin/Float> // androidx.compose.ui.semantics/ScrollAxisRange.maxValue.<get-maxValue>|<get-maxValue>(){}[0]
    final val reverseScrolling // androidx.compose.ui.semantics/ScrollAxisRange.reverseScrolling|{}reverseScrolling[0]
        final fun <get-reverseScrolling>(): kotlin/Boolean // androidx.compose.ui.semantics/ScrollAxisRange.reverseScrolling.<get-reverseScrolling>|<get-reverseScrolling>(){}[0]
    final val value // androidx.compose.ui.semantics/ScrollAxisRange.value|{}value[0]
        final fun <get-value>(): kotlin/Function0<kotlin/Float> // androidx.compose.ui.semantics/ScrollAxisRange.value.<get-value>|<get-value>(){}[0]

    final fun toString(): kotlin/String // androidx.compose.ui.semantics/ScrollAxisRange.toString|toString(){}[0]
}

final class androidx.compose.ui.semantics/SemanticsConfiguration : androidx.compose.ui.semantics/SemanticsPropertyReceiver, kotlin.collections/Iterable<kotlin.collections/Map.Entry<androidx.compose.ui.semantics/SemanticsPropertyKey<*>, kotlin/Any?>> { // androidx.compose.ui.semantics/SemanticsConfiguration|null[0]
    constructor <init>() // androidx.compose.ui.semantics/SemanticsConfiguration.<init>|<init>(){}[0]

    final var isClearingSemantics // androidx.compose.ui.semantics/SemanticsConfiguration.isClearingSemantics|{}isClearingSemantics[0]
        final fun <get-isClearingSemantics>(): kotlin/Boolean // androidx.compose.ui.semantics/SemanticsConfiguration.isClearingSemantics.<get-isClearingSemantics>|<get-isClearingSemantics>(){}[0]
        final fun <set-isClearingSemantics>(kotlin/Boolean) // androidx.compose.ui.semantics/SemanticsConfiguration.isClearingSemantics.<set-isClearingSemantics>|<set-isClearingSemantics>(kotlin.Boolean){}[0]
    final var isMergingSemanticsOfDescendants // androidx.compose.ui.semantics/SemanticsConfiguration.isMergingSemanticsOfDescendants|{}isMergingSemanticsOfDescendants[0]
        final fun <get-isMergingSemanticsOfDescendants>(): kotlin/Boolean // androidx.compose.ui.semantics/SemanticsConfiguration.isMergingSemanticsOfDescendants.<get-isMergingSemanticsOfDescendants>|<get-isMergingSemanticsOfDescendants>(){}[0]
        final fun <set-isMergingSemanticsOfDescendants>(kotlin/Boolean) // androidx.compose.ui.semantics/SemanticsConfiguration.isMergingSemanticsOfDescendants.<set-isMergingSemanticsOfDescendants>|<set-isMergingSemanticsOfDescendants>(kotlin.Boolean){}[0]

    final fun <#A1: kotlin/Any?> contains(androidx.compose.ui.semantics/SemanticsPropertyKey<#A1>): kotlin/Boolean // androidx.compose.ui.semantics/SemanticsConfiguration.contains|contains(androidx.compose.ui.semantics.SemanticsPropertyKey<0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> get(androidx.compose.ui.semantics/SemanticsPropertyKey<#A1>): #A1 // androidx.compose.ui.semantics/SemanticsConfiguration.get|get(androidx.compose.ui.semantics.SemanticsPropertyKey<0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> getOrElse(androidx.compose.ui.semantics/SemanticsPropertyKey<#A1>, kotlin/Function0<#A1>): #A1 // androidx.compose.ui.semantics/SemanticsConfiguration.getOrElse|getOrElse(androidx.compose.ui.semantics.SemanticsPropertyKey<0:0>;kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> getOrElseNullable(androidx.compose.ui.semantics/SemanticsPropertyKey<#A1>, kotlin/Function0<#A1?>): #A1? // androidx.compose.ui.semantics/SemanticsConfiguration.getOrElseNullable|getOrElseNullable(androidx.compose.ui.semantics.SemanticsPropertyKey<0:0>;kotlin.Function0<0:0?>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> set(androidx.compose.ui.semantics/SemanticsPropertyKey<#A1>, #A1) // androidx.compose.ui.semantics/SemanticsConfiguration.set|set(androidx.compose.ui.semantics.SemanticsPropertyKey<0:0>;0:0){0§<kotlin.Any?>}[0]
    final fun copy(): androidx.compose.ui.semantics/SemanticsConfiguration // androidx.compose.ui.semantics/SemanticsConfiguration.copy|copy(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.semantics/SemanticsConfiguration.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.semantics/SemanticsConfiguration.hashCode|hashCode(){}[0]
    final fun iterator(): kotlin.collections/Iterator<kotlin.collections/Map.Entry<androidx.compose.ui.semantics/SemanticsPropertyKey<*>, kotlin/Any?>> // androidx.compose.ui.semantics/SemanticsConfiguration.iterator|iterator(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.semantics/SemanticsConfiguration.toString|toString(){}[0]
}

final class androidx.compose.ui.semantics/SemanticsNode { // androidx.compose.ui.semantics/SemanticsNode|null[0]
    final val boundsInRoot // androidx.compose.ui.semantics/SemanticsNode.boundsInRoot|{}boundsInRoot[0]
        final fun <get-boundsInRoot>(): androidx.compose.ui.geometry/Rect // androidx.compose.ui.semantics/SemanticsNode.boundsInRoot.<get-boundsInRoot>|<get-boundsInRoot>(){}[0]
    final val boundsInWindow // androidx.compose.ui.semantics/SemanticsNode.boundsInWindow|{}boundsInWindow[0]
        final fun <get-boundsInWindow>(): androidx.compose.ui.geometry/Rect // androidx.compose.ui.semantics/SemanticsNode.boundsInWindow.<get-boundsInWindow>|<get-boundsInWindow>(){}[0]
    final val children // androidx.compose.ui.semantics/SemanticsNode.children|{}children[0]
        final fun <get-children>(): kotlin.collections/List<androidx.compose.ui.semantics/SemanticsNode> // androidx.compose.ui.semantics/SemanticsNode.children.<get-children>|<get-children>(){}[0]
    final val config // androidx.compose.ui.semantics/SemanticsNode.config|{}config[0]
        final fun <get-config>(): androidx.compose.ui.semantics/SemanticsConfiguration // androidx.compose.ui.semantics/SemanticsNode.config.<get-config>|<get-config>(){}[0]
    final val id // androidx.compose.ui.semantics/SemanticsNode.id|{}id[0]
        final fun <get-id>(): kotlin/Int // androidx.compose.ui.semantics/SemanticsNode.id.<get-id>|<get-id>(){}[0]
    final val isRoot // androidx.compose.ui.semantics/SemanticsNode.isRoot|{}isRoot[0]
        final fun <get-isRoot>(): kotlin/Boolean // androidx.compose.ui.semantics/SemanticsNode.isRoot.<get-isRoot>|<get-isRoot>(){}[0]
    final val layoutInfo // androidx.compose.ui.semantics/SemanticsNode.layoutInfo|{}layoutInfo[0]
        final fun <get-layoutInfo>(): androidx.compose.ui.layout/LayoutInfo // androidx.compose.ui.semantics/SemanticsNode.layoutInfo.<get-layoutInfo>|<get-layoutInfo>(){}[0]
    final val mergingEnabled // androidx.compose.ui.semantics/SemanticsNode.mergingEnabled|{}mergingEnabled[0]
        final fun <get-mergingEnabled>(): kotlin/Boolean // androidx.compose.ui.semantics/SemanticsNode.mergingEnabled.<get-mergingEnabled>|<get-mergingEnabled>(){}[0]
    final val parent // androidx.compose.ui.semantics/SemanticsNode.parent|{}parent[0]
        final fun <get-parent>(): androidx.compose.ui.semantics/SemanticsNode? // androidx.compose.ui.semantics/SemanticsNode.parent.<get-parent>|<get-parent>(){}[0]
    final val positionInRoot // androidx.compose.ui.semantics/SemanticsNode.positionInRoot|{}positionInRoot[0]
        final fun <get-positionInRoot>(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.semantics/SemanticsNode.positionInRoot.<get-positionInRoot>|<get-positionInRoot>(){}[0]
    final val positionInWindow // androidx.compose.ui.semantics/SemanticsNode.positionInWindow|{}positionInWindow[0]
        final fun <get-positionInWindow>(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.semantics/SemanticsNode.positionInWindow.<get-positionInWindow>|<get-positionInWindow>(){}[0]
    final val positionOnScreen // androidx.compose.ui.semantics/SemanticsNode.positionOnScreen|{}positionOnScreen[0]
        final fun <get-positionOnScreen>(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.semantics/SemanticsNode.positionOnScreen.<get-positionOnScreen>|<get-positionOnScreen>(){}[0]
    final val root // androidx.compose.ui.semantics/SemanticsNode.root|{}root[0]
        final fun <get-root>(): androidx.compose.ui.node/RootForTest? // androidx.compose.ui.semantics/SemanticsNode.root.<get-root>|<get-root>(){}[0]
    final val size // androidx.compose.ui.semantics/SemanticsNode.size|{}size[0]
        final fun <get-size>(): androidx.compose.ui.unit/IntSize // androidx.compose.ui.semantics/SemanticsNode.size.<get-size>|<get-size>(){}[0]
    final val touchBoundsInRoot // androidx.compose.ui.semantics/SemanticsNode.touchBoundsInRoot|{}touchBoundsInRoot[0]
        final fun <get-touchBoundsInRoot>(): androidx.compose.ui.geometry/Rect // androidx.compose.ui.semantics/SemanticsNode.touchBoundsInRoot.<get-touchBoundsInRoot>|<get-touchBoundsInRoot>(){}[0]

    final fun getAlignmentLinePosition(androidx.compose.ui.layout/AlignmentLine): kotlin/Int // androidx.compose.ui.semantics/SemanticsNode.getAlignmentLinePosition|getAlignmentLinePosition(androidx.compose.ui.layout.AlignmentLine){}[0]
}

final class androidx.compose.ui.semantics/SemanticsOwner { // androidx.compose.ui.semantics/SemanticsOwner|null[0]
    final val rootSemanticsNode // androidx.compose.ui.semantics/SemanticsOwner.rootSemanticsNode|{}rootSemanticsNode[0]
        final fun <get-rootSemanticsNode>(): androidx.compose.ui.semantics/SemanticsNode // androidx.compose.ui.semantics/SemanticsOwner.rootSemanticsNode.<get-rootSemanticsNode>|<get-rootSemanticsNode>(){}[0]
    final val unmergedRootSemanticsNode // androidx.compose.ui.semantics/SemanticsOwner.unmergedRootSemanticsNode|{}unmergedRootSemanticsNode[0]
        final fun <get-unmergedRootSemanticsNode>(): androidx.compose.ui.semantics/SemanticsNode // androidx.compose.ui.semantics/SemanticsOwner.unmergedRootSemanticsNode.<get-unmergedRootSemanticsNode>|<get-unmergedRootSemanticsNode>(){}[0]
}

final class androidx.compose.ui.spatial/RelativeLayoutBounds { // androidx.compose.ui.spatial/RelativeLayoutBounds|null[0]
    final val boundsInRoot // androidx.compose.ui.spatial/RelativeLayoutBounds.boundsInRoot|{}boundsInRoot[0]
        final fun <get-boundsInRoot>(): androidx.compose.ui.unit/IntRect // androidx.compose.ui.spatial/RelativeLayoutBounds.boundsInRoot.<get-boundsInRoot>|<get-boundsInRoot>(){}[0]
    final val boundsInScreen // androidx.compose.ui.spatial/RelativeLayoutBounds.boundsInScreen|{}boundsInScreen[0]
        final fun <get-boundsInScreen>(): androidx.compose.ui.unit/IntRect // androidx.compose.ui.spatial/RelativeLayoutBounds.boundsInScreen.<get-boundsInScreen>|<get-boundsInScreen>(){}[0]
    final val boundsInWindow // androidx.compose.ui.spatial/RelativeLayoutBounds.boundsInWindow|{}boundsInWindow[0]
        final fun <get-boundsInWindow>(): androidx.compose.ui.unit/IntRect // androidx.compose.ui.spatial/RelativeLayoutBounds.boundsInWindow.<get-boundsInWindow>|<get-boundsInWindow>(){}[0]
    final val height // androidx.compose.ui.spatial/RelativeLayoutBounds.height|{}height[0]
        final fun <get-height>(): kotlin/Int // androidx.compose.ui.spatial/RelativeLayoutBounds.height.<get-height>|<get-height>(){}[0]
    final val positionInRoot // androidx.compose.ui.spatial/RelativeLayoutBounds.positionInRoot|{}positionInRoot[0]
        final fun <get-positionInRoot>(): androidx.compose.ui.unit/IntOffset // androidx.compose.ui.spatial/RelativeLayoutBounds.positionInRoot.<get-positionInRoot>|<get-positionInRoot>(){}[0]
    final val positionInScreen // androidx.compose.ui.spatial/RelativeLayoutBounds.positionInScreen|{}positionInScreen[0]
        final fun <get-positionInScreen>(): androidx.compose.ui.unit/IntOffset // androidx.compose.ui.spatial/RelativeLayoutBounds.positionInScreen.<get-positionInScreen>|<get-positionInScreen>(){}[0]
    final val positionInWindow // androidx.compose.ui.spatial/RelativeLayoutBounds.positionInWindow|{}positionInWindow[0]
        final fun <get-positionInWindow>(): androidx.compose.ui.unit/IntOffset // androidx.compose.ui.spatial/RelativeLayoutBounds.positionInWindow.<get-positionInWindow>|<get-positionInWindow>(){}[0]
    final val width // androidx.compose.ui.spatial/RelativeLayoutBounds.width|{}width[0]
        final fun <get-width>(): kotlin/Int // androidx.compose.ui.spatial/RelativeLayoutBounds.width.<get-width>|<get-width>(){}[0]

    final fun calculateOcclusions(): kotlin.collections/List<androidx.compose.ui.unit/IntRect> // androidx.compose.ui.spatial/RelativeLayoutBounds.calculateOcclusions|calculateOcclusions(){}[0]
}

final class androidx.compose.ui.window/DialogProperties { // androidx.compose.ui.window/DialogProperties|null[0]
    constructor <init>(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...) // androidx.compose.ui.window/DialogProperties.<init>|<init>(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]

    final val dismissOnBackPress // androidx.compose.ui.window/DialogProperties.dismissOnBackPress|{}dismissOnBackPress[0]
        final fun <get-dismissOnBackPress>(): kotlin/Boolean // androidx.compose.ui.window/DialogProperties.dismissOnBackPress.<get-dismissOnBackPress>|<get-dismissOnBackPress>(){}[0]
    final val dismissOnClickOutside // androidx.compose.ui.window/DialogProperties.dismissOnClickOutside|{}dismissOnClickOutside[0]
        final fun <get-dismissOnClickOutside>(): kotlin/Boolean // androidx.compose.ui.window/DialogProperties.dismissOnClickOutside.<get-dismissOnClickOutside>|<get-dismissOnClickOutside>(){}[0]
    final val usePlatformDefaultWidth // androidx.compose.ui.window/DialogProperties.usePlatformDefaultWidth|{}usePlatformDefaultWidth[0]
        final fun <get-usePlatformDefaultWidth>(): kotlin/Boolean // androidx.compose.ui.window/DialogProperties.usePlatformDefaultWidth.<get-usePlatformDefaultWidth>|<get-usePlatformDefaultWidth>(){}[0]
}

final class androidx.compose.ui.window/PopupProperties { // androidx.compose.ui.window/PopupProperties|null[0]
    constructor <init>(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...) // androidx.compose.ui.window/PopupProperties.<init>|<init>(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]

    final val clippingEnabled // androidx.compose.ui.window/PopupProperties.clippingEnabled|{}clippingEnabled[0]
        final fun <get-clippingEnabled>(): kotlin/Boolean // androidx.compose.ui.window/PopupProperties.clippingEnabled.<get-clippingEnabled>|<get-clippingEnabled>(){}[0]
    final val dismissOnBackPress // androidx.compose.ui.window/PopupProperties.dismissOnBackPress|{}dismissOnBackPress[0]
        final fun <get-dismissOnBackPress>(): kotlin/Boolean // androidx.compose.ui.window/PopupProperties.dismissOnBackPress.<get-dismissOnBackPress>|<get-dismissOnBackPress>(){}[0]
    final val dismissOnClickOutside // androidx.compose.ui.window/PopupProperties.dismissOnClickOutside|{}dismissOnClickOutside[0]
        final fun <get-dismissOnClickOutside>(): kotlin/Boolean // androidx.compose.ui.window/PopupProperties.dismissOnClickOutside.<get-dismissOnClickOutside>|<get-dismissOnClickOutside>(){}[0]
    final val focusable // androidx.compose.ui.window/PopupProperties.focusable|{}focusable[0]
        final fun <get-focusable>(): kotlin/Boolean // androidx.compose.ui.window/PopupProperties.focusable.<get-focusable>|<get-focusable>(){}[0]
}

final class androidx.compose.ui/BiasAbsoluteAlignment : androidx.compose.ui/Alignment { // androidx.compose.ui/BiasAbsoluteAlignment|null[0]
    constructor <init>(kotlin/Float, kotlin/Float) // androidx.compose.ui/BiasAbsoluteAlignment.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

    final val horizontalBias // androidx.compose.ui/BiasAbsoluteAlignment.horizontalBias|{}horizontalBias[0]
        final fun <get-horizontalBias>(): kotlin/Float // androidx.compose.ui/BiasAbsoluteAlignment.horizontalBias.<get-horizontalBias>|<get-horizontalBias>(){}[0]
    final val verticalBias // androidx.compose.ui/BiasAbsoluteAlignment.verticalBias|{}verticalBias[0]
        final fun <get-verticalBias>(): kotlin/Float // androidx.compose.ui/BiasAbsoluteAlignment.verticalBias.<get-verticalBias>|<get-verticalBias>(){}[0]

    final fun align(androidx.compose.ui.unit/IntSize, androidx.compose.ui.unit/IntSize, androidx.compose.ui.unit/LayoutDirection): androidx.compose.ui.unit/IntOffset // androidx.compose.ui/BiasAbsoluteAlignment.align|align(androidx.compose.ui.unit.IntSize;androidx.compose.ui.unit.IntSize;androidx.compose.ui.unit.LayoutDirection){}[0]
    final fun component1(): kotlin/Float // androidx.compose.ui/BiasAbsoluteAlignment.component1|component1(){}[0]
    final fun component2(): kotlin/Float // androidx.compose.ui/BiasAbsoluteAlignment.component2|component2(){}[0]
    final fun copy(kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui/BiasAbsoluteAlignment // androidx.compose.ui/BiasAbsoluteAlignment.copy|copy(kotlin.Float;kotlin.Float){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui/BiasAbsoluteAlignment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui/BiasAbsoluteAlignment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui/BiasAbsoluteAlignment.toString|toString(){}[0]

    final class Horizontal : androidx.compose.ui/Alignment.Horizontal { // androidx.compose.ui/BiasAbsoluteAlignment.Horizontal|null[0]
        constructor <init>(kotlin/Float) // androidx.compose.ui/BiasAbsoluteAlignment.Horizontal.<init>|<init>(kotlin.Float){}[0]

        final val bias // androidx.compose.ui/BiasAbsoluteAlignment.Horizontal.bias|{}bias[0]
            final fun <get-bias>(): kotlin/Float // androidx.compose.ui/BiasAbsoluteAlignment.Horizontal.bias.<get-bias>|<get-bias>(){}[0]

        final fun align(kotlin/Int, kotlin/Int, androidx.compose.ui.unit/LayoutDirection): kotlin/Int // androidx.compose.ui/BiasAbsoluteAlignment.Horizontal.align|align(kotlin.Int;kotlin.Int;androidx.compose.ui.unit.LayoutDirection){}[0]
        final fun component1(): kotlin/Float // androidx.compose.ui/BiasAbsoluteAlignment.Horizontal.component1|component1(){}[0]
        final fun copy(kotlin/Float = ...): androidx.compose.ui/BiasAbsoluteAlignment.Horizontal // androidx.compose.ui/BiasAbsoluteAlignment.Horizontal.copy|copy(kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui/BiasAbsoluteAlignment.Horizontal.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui/BiasAbsoluteAlignment.Horizontal.hashCode|hashCode(){}[0]
        final fun plus(androidx.compose.ui/Alignment.Vertical): androidx.compose.ui/Alignment // androidx.compose.ui/BiasAbsoluteAlignment.Horizontal.plus|plus(androidx.compose.ui.Alignment.Vertical){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui/BiasAbsoluteAlignment.Horizontal.toString|toString(){}[0]
    }
}

final class androidx.compose.ui/BiasAlignment : androidx.compose.ui/Alignment { // androidx.compose.ui/BiasAlignment|null[0]
    constructor <init>(kotlin/Float, kotlin/Float) // androidx.compose.ui/BiasAlignment.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

    final val horizontalBias // androidx.compose.ui/BiasAlignment.horizontalBias|{}horizontalBias[0]
        final fun <get-horizontalBias>(): kotlin/Float // androidx.compose.ui/BiasAlignment.horizontalBias.<get-horizontalBias>|<get-horizontalBias>(){}[0]
    final val verticalBias // androidx.compose.ui/BiasAlignment.verticalBias|{}verticalBias[0]
        final fun <get-verticalBias>(): kotlin/Float // androidx.compose.ui/BiasAlignment.verticalBias.<get-verticalBias>|<get-verticalBias>(){}[0]

    final fun align(androidx.compose.ui.unit/IntSize, androidx.compose.ui.unit/IntSize, androidx.compose.ui.unit/LayoutDirection): androidx.compose.ui.unit/IntOffset // androidx.compose.ui/BiasAlignment.align|align(androidx.compose.ui.unit.IntSize;androidx.compose.ui.unit.IntSize;androidx.compose.ui.unit.LayoutDirection){}[0]
    final fun component1(): kotlin/Float // androidx.compose.ui/BiasAlignment.component1|component1(){}[0]
    final fun component2(): kotlin/Float // androidx.compose.ui/BiasAlignment.component2|component2(){}[0]
    final fun copy(kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui/BiasAlignment // androidx.compose.ui/BiasAlignment.copy|copy(kotlin.Float;kotlin.Float){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui/BiasAlignment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui/BiasAlignment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui/BiasAlignment.toString|toString(){}[0]

    final class Horizontal : androidx.compose.ui/Alignment.Horizontal { // androidx.compose.ui/BiasAlignment.Horizontal|null[0]
        constructor <init>(kotlin/Float) // androidx.compose.ui/BiasAlignment.Horizontal.<init>|<init>(kotlin.Float){}[0]

        final val bias // androidx.compose.ui/BiasAlignment.Horizontal.bias|{}bias[0]
            final fun <get-bias>(): kotlin/Float // androidx.compose.ui/BiasAlignment.Horizontal.bias.<get-bias>|<get-bias>(){}[0]

        final fun align(kotlin/Int, kotlin/Int, androidx.compose.ui.unit/LayoutDirection): kotlin/Int // androidx.compose.ui/BiasAlignment.Horizontal.align|align(kotlin.Int;kotlin.Int;androidx.compose.ui.unit.LayoutDirection){}[0]
        final fun component1(): kotlin/Float // androidx.compose.ui/BiasAlignment.Horizontal.component1|component1(){}[0]
        final fun copy(kotlin/Float = ...): androidx.compose.ui/BiasAlignment.Horizontal // androidx.compose.ui/BiasAlignment.Horizontal.copy|copy(kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui/BiasAlignment.Horizontal.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui/BiasAlignment.Horizontal.hashCode|hashCode(){}[0]
        final fun plus(androidx.compose.ui/Alignment.Vertical): androidx.compose.ui/Alignment // androidx.compose.ui/BiasAlignment.Horizontal.plus|plus(androidx.compose.ui.Alignment.Vertical){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui/BiasAlignment.Horizontal.toString|toString(){}[0]
    }

    final class Vertical : androidx.compose.ui/Alignment.Vertical { // androidx.compose.ui/BiasAlignment.Vertical|null[0]
        constructor <init>(kotlin/Float) // androidx.compose.ui/BiasAlignment.Vertical.<init>|<init>(kotlin.Float){}[0]

        final val bias // androidx.compose.ui/BiasAlignment.Vertical.bias|{}bias[0]
            final fun <get-bias>(): kotlin/Float // androidx.compose.ui/BiasAlignment.Vertical.bias.<get-bias>|<get-bias>(){}[0]

        final fun align(kotlin/Int, kotlin/Int): kotlin/Int // androidx.compose.ui/BiasAlignment.Vertical.align|align(kotlin.Int;kotlin.Int){}[0]
        final fun component1(): kotlin/Float // androidx.compose.ui/BiasAlignment.Vertical.component1|component1(){}[0]
        final fun copy(kotlin/Float = ...): androidx.compose.ui/BiasAlignment.Vertical // androidx.compose.ui/BiasAlignment.Vertical.copy|copy(kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui/BiasAlignment.Vertical.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.ui/BiasAlignment.Vertical.hashCode|hashCode(){}[0]
        final fun plus(androidx.compose.ui/Alignment.Horizontal): androidx.compose.ui/Alignment // androidx.compose.ui/BiasAlignment.Vertical.plus|plus(androidx.compose.ui.Alignment.Horizontal){}[0]
        final fun toString(): kotlin/String // androidx.compose.ui/BiasAlignment.Vertical.toString|toString(){}[0]
    }
}

final class androidx.compose.ui/CombinedModifier : androidx.compose.ui/Modifier { // androidx.compose.ui/CombinedModifier|null[0]
    constructor <init>(androidx.compose.ui/Modifier, androidx.compose.ui/Modifier) // androidx.compose.ui/CombinedModifier.<init>|<init>(androidx.compose.ui.Modifier;androidx.compose.ui.Modifier){}[0]

    final fun <#A1: kotlin/Any?> foldIn(#A1, kotlin/Function2<#A1, androidx.compose.ui/Modifier.Element, #A1>): #A1 // androidx.compose.ui/CombinedModifier.foldIn|foldIn(0:0;kotlin.Function2<0:0,androidx.compose.ui.Modifier.Element,0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> foldOut(#A1, kotlin/Function2<androidx.compose.ui/Modifier.Element, #A1, #A1>): #A1 // androidx.compose.ui/CombinedModifier.foldOut|foldOut(0:0;kotlin.Function2<androidx.compose.ui.Modifier.Element,0:0,0:0>){0§<kotlin.Any?>}[0]
    final fun all(kotlin/Function1<androidx.compose.ui/Modifier.Element, kotlin/Boolean>): kotlin/Boolean // androidx.compose.ui/CombinedModifier.all|all(kotlin.Function1<androidx.compose.ui.Modifier.Element,kotlin.Boolean>){}[0]
    final fun any(kotlin/Function1<androidx.compose.ui/Modifier.Element, kotlin/Boolean>): kotlin/Boolean // androidx.compose.ui/CombinedModifier.any|any(kotlin.Function1<androidx.compose.ui.Modifier.Element,kotlin.Boolean>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui/CombinedModifier.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui/CombinedModifier.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui/CombinedModifier.toString|toString(){}[0]
}

final value class androidx.compose.ui.draw/BlurredEdgeTreatment { // androidx.compose.ui.draw/BlurredEdgeTreatment|null[0]
    constructor <init>(androidx.compose.ui.graphics/Shape?) // androidx.compose.ui.draw/BlurredEdgeTreatment.<init>|<init>(androidx.compose.ui.graphics.Shape?){}[0]

    final val shape // androidx.compose.ui.draw/BlurredEdgeTreatment.shape|{}shape[0]
        final fun <get-shape>(): androidx.compose.ui.graphics/Shape? // androidx.compose.ui.draw/BlurredEdgeTreatment.shape.<get-shape>|<get-shape>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.draw/BlurredEdgeTreatment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.draw/BlurredEdgeTreatment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.draw/BlurredEdgeTreatment.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.draw/BlurredEdgeTreatment.Companion|null[0]
        final val Rectangle // androidx.compose.ui.draw/BlurredEdgeTreatment.Companion.Rectangle|{}Rectangle[0]
            final fun <get-Rectangle>(): androidx.compose.ui.draw/BlurredEdgeTreatment // androidx.compose.ui.draw/BlurredEdgeTreatment.Companion.Rectangle.<get-Rectangle>|<get-Rectangle>(){}[0]
        final val Unbounded // androidx.compose.ui.draw/BlurredEdgeTreatment.Companion.Unbounded|{}Unbounded[0]
            final fun <get-Unbounded>(): androidx.compose.ui.draw/BlurredEdgeTreatment // androidx.compose.ui.draw/BlurredEdgeTreatment.Companion.Unbounded.<get-Unbounded>|<get-Unbounded>(){}[0]
    }
}

final value class androidx.compose.ui.focus/FocusDirection { // androidx.compose.ui.focus/FocusDirection|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.focus/FocusDirection.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.focus/FocusDirection.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.focus/FocusDirection.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.focus/FocusDirection.Companion|null[0]
        final val Down // androidx.compose.ui.focus/FocusDirection.Companion.Down|{}Down[0]
            final fun <get-Down>(): androidx.compose.ui.focus/FocusDirection // androidx.compose.ui.focus/FocusDirection.Companion.Down.<get-Down>|<get-Down>(){}[0]
        final val Enter // androidx.compose.ui.focus/FocusDirection.Companion.Enter|{}Enter[0]
            final fun <get-Enter>(): androidx.compose.ui.focus/FocusDirection // androidx.compose.ui.focus/FocusDirection.Companion.Enter.<get-Enter>|<get-Enter>(){}[0]
        final val Exit // androidx.compose.ui.focus/FocusDirection.Companion.Exit|{}Exit[0]
            final fun <get-Exit>(): androidx.compose.ui.focus/FocusDirection // androidx.compose.ui.focus/FocusDirection.Companion.Exit.<get-Exit>|<get-Exit>(){}[0]
        final val Left // androidx.compose.ui.focus/FocusDirection.Companion.Left|{}Left[0]
            final fun <get-Left>(): androidx.compose.ui.focus/FocusDirection // androidx.compose.ui.focus/FocusDirection.Companion.Left.<get-Left>|<get-Left>(){}[0]
        final val Next // androidx.compose.ui.focus/FocusDirection.Companion.Next|{}Next[0]
            final fun <get-Next>(): androidx.compose.ui.focus/FocusDirection // androidx.compose.ui.focus/FocusDirection.Companion.Next.<get-Next>|<get-Next>(){}[0]
        final val Previous // androidx.compose.ui.focus/FocusDirection.Companion.Previous|{}Previous[0]
            final fun <get-Previous>(): androidx.compose.ui.focus/FocusDirection // androidx.compose.ui.focus/FocusDirection.Companion.Previous.<get-Previous>|<get-Previous>(){}[0]
        final val Right // androidx.compose.ui.focus/FocusDirection.Companion.Right|{}Right[0]
            final fun <get-Right>(): androidx.compose.ui.focus/FocusDirection // androidx.compose.ui.focus/FocusDirection.Companion.Right.<get-Right>|<get-Right>(){}[0]
        final val Up // androidx.compose.ui.focus/FocusDirection.Companion.Up|{}Up[0]
            final fun <get-Up>(): androidx.compose.ui.focus/FocusDirection // androidx.compose.ui.focus/FocusDirection.Companion.Up.<get-Up>|<get-Up>(){}[0]
    }
}

final value class androidx.compose.ui.focus/Focusability { // androidx.compose.ui.focus/Focusability|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.focus/Focusability.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.focus/Focusability.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.focus/Focusability.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.focus/Focusability.Companion|null[0]
        final val Always // androidx.compose.ui.focus/Focusability.Companion.Always|{}Always[0]
            final fun <get-Always>(): androidx.compose.ui.focus/Focusability // androidx.compose.ui.focus/Focusability.Companion.Always.<get-Always>|<get-Always>(){}[0]
        final val Never // androidx.compose.ui.focus/Focusability.Companion.Never|{}Never[0]
            final fun <get-Never>(): androidx.compose.ui.focus/Focusability // androidx.compose.ui.focus/Focusability.Companion.Never.<get-Never>|<get-Never>(){}[0]
        final val SystemDefined // androidx.compose.ui.focus/Focusability.Companion.SystemDefined|{}SystemDefined[0]
            final fun <get-SystemDefined>(): androidx.compose.ui.focus/Focusability // androidx.compose.ui.focus/Focusability.Companion.SystemDefined.<get-SystemDefined>|<get-SystemDefined>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/CompositingStrategy { // androidx.compose.ui.graphics/CompositingStrategy|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/CompositingStrategy.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/CompositingStrategy.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/CompositingStrategy.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.graphics/CompositingStrategy.Companion|null[0]
        final val Auto // androidx.compose.ui.graphics/CompositingStrategy.Companion.Auto|{}Auto[0]
            final fun <get-Auto>(): androidx.compose.ui.graphics/CompositingStrategy // androidx.compose.ui.graphics/CompositingStrategy.Companion.Auto.<get-Auto>|<get-Auto>(){}[0]
        final val ModulateAlpha // androidx.compose.ui.graphics/CompositingStrategy.Companion.ModulateAlpha|{}ModulateAlpha[0]
            final fun <get-ModulateAlpha>(): androidx.compose.ui.graphics/CompositingStrategy // androidx.compose.ui.graphics/CompositingStrategy.Companion.ModulateAlpha.<get-ModulateAlpha>|<get-ModulateAlpha>(){}[0]
        final val Offscreen // androidx.compose.ui.graphics/CompositingStrategy.Companion.Offscreen|{}Offscreen[0]
            final fun <get-Offscreen>(): androidx.compose.ui.graphics/CompositingStrategy // androidx.compose.ui.graphics/CompositingStrategy.Companion.Offscreen.<get-Offscreen>|<get-Offscreen>(){}[0]
    }
}

final value class androidx.compose.ui.graphics/TransformOrigin { // androidx.compose.ui.graphics/TransformOrigin|null[0]
    final val packedValue // androidx.compose.ui.graphics/TransformOrigin.packedValue|{}packedValue[0]
        final fun <get-packedValue>(): kotlin/Long // androidx.compose.ui.graphics/TransformOrigin.packedValue.<get-packedValue>|<get-packedValue>(){}[0]
    final val pivotFractionX // androidx.compose.ui.graphics/TransformOrigin.pivotFractionX|{}pivotFractionX[0]
        final fun <get-pivotFractionX>(): kotlin/Float // androidx.compose.ui.graphics/TransformOrigin.pivotFractionX.<get-pivotFractionX>|<get-pivotFractionX>(){}[0]
    final val pivotFractionY // androidx.compose.ui.graphics/TransformOrigin.pivotFractionY|{}pivotFractionY[0]
        final fun <get-pivotFractionY>(): kotlin/Float // androidx.compose.ui.graphics/TransformOrigin.pivotFractionY.<get-pivotFractionY>|<get-pivotFractionY>(){}[0]

    final fun copy(kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.graphics/TransformOrigin // androidx.compose.ui.graphics/TransformOrigin.copy|copy(kotlin.Float;kotlin.Float){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.graphics/TransformOrigin.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.graphics/TransformOrigin.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.graphics/TransformOrigin.toString|toString(){}[0]
    final inline fun component1(): kotlin/Float // androidx.compose.ui.graphics/TransformOrigin.component1|component1(){}[0]
    final inline fun component2(): kotlin/Float // androidx.compose.ui.graphics/TransformOrigin.component2|component2(){}[0]

    final object Companion { // androidx.compose.ui.graphics/TransformOrigin.Companion|null[0]
        final val Center // androidx.compose.ui.graphics/TransformOrigin.Companion.Center|{}Center[0]
            final fun <get-Center>(): androidx.compose.ui.graphics/TransformOrigin // androidx.compose.ui.graphics/TransformOrigin.Companion.Center.<get-Center>|<get-Center>(){}[0]
    }
}

final value class androidx.compose.ui.hapticfeedback/HapticFeedbackType { // androidx.compose.ui.hapticfeedback/HapticFeedbackType|null[0]
    constructor <init>(kotlin/Int) // androidx.compose.ui.hapticfeedback/HapticFeedbackType.<init>|<init>(kotlin.Int){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.hapticfeedback/HapticFeedbackType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.hapticfeedback/HapticFeedbackType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.hapticfeedback/HapticFeedbackType.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion|null[0]
        final val Confirm // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.Confirm|{}Confirm[0]
            final fun <get-Confirm>(): androidx.compose.ui.hapticfeedback/HapticFeedbackType // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.Confirm.<get-Confirm>|<get-Confirm>(){}[0]
        final val ContextClick // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.ContextClick|{}ContextClick[0]
            final fun <get-ContextClick>(): androidx.compose.ui.hapticfeedback/HapticFeedbackType // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.ContextClick.<get-ContextClick>|<get-ContextClick>(){}[0]
        final val GestureEnd // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.GestureEnd|{}GestureEnd[0]
            final fun <get-GestureEnd>(): androidx.compose.ui.hapticfeedback/HapticFeedbackType // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.GestureEnd.<get-GestureEnd>|<get-GestureEnd>(){}[0]
        final val GestureThresholdActivate // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.GestureThresholdActivate|{}GestureThresholdActivate[0]
            final fun <get-GestureThresholdActivate>(): androidx.compose.ui.hapticfeedback/HapticFeedbackType // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.GestureThresholdActivate.<get-GestureThresholdActivate>|<get-GestureThresholdActivate>(){}[0]
        final val KeyboardTap // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.KeyboardTap|{}KeyboardTap[0]
            final fun <get-KeyboardTap>(): androidx.compose.ui.hapticfeedback/HapticFeedbackType // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.KeyboardTap.<get-KeyboardTap>|<get-KeyboardTap>(){}[0]
        final val LongPress // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.LongPress|{}LongPress[0]
            final fun <get-LongPress>(): androidx.compose.ui.hapticfeedback/HapticFeedbackType // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.LongPress.<get-LongPress>|<get-LongPress>(){}[0]
        final val Reject // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.Reject|{}Reject[0]
            final fun <get-Reject>(): androidx.compose.ui.hapticfeedback/HapticFeedbackType // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.Reject.<get-Reject>|<get-Reject>(){}[0]
        final val SegmentFrequentTick // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.SegmentFrequentTick|{}SegmentFrequentTick[0]
            final fun <get-SegmentFrequentTick>(): androidx.compose.ui.hapticfeedback/HapticFeedbackType // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.SegmentFrequentTick.<get-SegmentFrequentTick>|<get-SegmentFrequentTick>(){}[0]
        final val SegmentTick // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.SegmentTick|{}SegmentTick[0]
            final fun <get-SegmentTick>(): androidx.compose.ui.hapticfeedback/HapticFeedbackType // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.SegmentTick.<get-SegmentTick>|<get-SegmentTick>(){}[0]
        final val TextHandleMove // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.TextHandleMove|{}TextHandleMove[0]
            final fun <get-TextHandleMove>(): androidx.compose.ui.hapticfeedback/HapticFeedbackType // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.TextHandleMove.<get-TextHandleMove>|<get-TextHandleMove>(){}[0]
        final val ToggleOff // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.ToggleOff|{}ToggleOff[0]
            final fun <get-ToggleOff>(): androidx.compose.ui.hapticfeedback/HapticFeedbackType // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.ToggleOff.<get-ToggleOff>|<get-ToggleOff>(){}[0]
        final val ToggleOn // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.ToggleOn|{}ToggleOn[0]
            final fun <get-ToggleOn>(): androidx.compose.ui.hapticfeedback/HapticFeedbackType // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.ToggleOn.<get-ToggleOn>|<get-ToggleOn>(){}[0]
        final val VirtualKey // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.VirtualKey|{}VirtualKey[0]
            final fun <get-VirtualKey>(): androidx.compose.ui.hapticfeedback/HapticFeedbackType // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.VirtualKey.<get-VirtualKey>|<get-VirtualKey>(){}[0]

        final fun values(): kotlin.collections/List<androidx.compose.ui.hapticfeedback/HapticFeedbackType> // androidx.compose.ui.hapticfeedback/HapticFeedbackType.Companion.values|values(){}[0]
    }
}

final value class androidx.compose.ui.input.key/Key { // androidx.compose.ui.input.key/Key|null[0]
    constructor <init>(kotlin/Long) // androidx.compose.ui.input.key/Key.<init>|<init>(kotlin.Long){}[0]

    final val keyCode // androidx.compose.ui.input.key/Key.keyCode|{}keyCode[0]
        final fun <get-keyCode>(): kotlin/Long // androidx.compose.ui.input.key/Key.keyCode.<get-keyCode>|<get-keyCode>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.input.key/Key.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.input.key/Key.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.input.key/Key.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.input.key/Key.Companion|null[0]
        final val A // androidx.compose.ui.input.key/Key.Companion.A|{}A[0]
            final fun <get-A>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.A.<get-A>|<get-A>(){}[0]
        final val AllApps // androidx.compose.ui.input.key/Key.Companion.AllApps|{}AllApps[0]
            final fun <get-AllApps>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.AllApps.<get-AllApps>|<get-AllApps>(){}[0]
        final val AltLeft // androidx.compose.ui.input.key/Key.Companion.AltLeft|{}AltLeft[0]
            final fun <get-AltLeft>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.AltLeft.<get-AltLeft>|<get-AltLeft>(){}[0]
        final val AltRight // androidx.compose.ui.input.key/Key.Companion.AltRight|{}AltRight[0]
            final fun <get-AltRight>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.AltRight.<get-AltRight>|<get-AltRight>(){}[0]
        final val Apostrophe // androidx.compose.ui.input.key/Key.Companion.Apostrophe|{}Apostrophe[0]
            final fun <get-Apostrophe>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Apostrophe.<get-Apostrophe>|<get-Apostrophe>(){}[0]
        final val AppSwitch // androidx.compose.ui.input.key/Key.Companion.AppSwitch|{}AppSwitch[0]
            final fun <get-AppSwitch>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.AppSwitch.<get-AppSwitch>|<get-AppSwitch>(){}[0]
        final val Assist // androidx.compose.ui.input.key/Key.Companion.Assist|{}Assist[0]
            final fun <get-Assist>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Assist.<get-Assist>|<get-Assist>(){}[0]
        final val At // androidx.compose.ui.input.key/Key.Companion.At|{}At[0]
            final fun <get-At>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.At.<get-At>|<get-At>(){}[0]
        final val AvReceiverInput // androidx.compose.ui.input.key/Key.Companion.AvReceiverInput|{}AvReceiverInput[0]
            final fun <get-AvReceiverInput>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.AvReceiverInput.<get-AvReceiverInput>|<get-AvReceiverInput>(){}[0]
        final val AvReceiverPower // androidx.compose.ui.input.key/Key.Companion.AvReceiverPower|{}AvReceiverPower[0]
            final fun <get-AvReceiverPower>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.AvReceiverPower.<get-AvReceiverPower>|<get-AvReceiverPower>(){}[0]
        final val B // androidx.compose.ui.input.key/Key.Companion.B|{}B[0]
            final fun <get-B>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.B.<get-B>|<get-B>(){}[0]
        final val Back // androidx.compose.ui.input.key/Key.Companion.Back|{}Back[0]
            final fun <get-Back>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Back.<get-Back>|<get-Back>(){}[0]
        final val Backslash // androidx.compose.ui.input.key/Key.Companion.Backslash|{}Backslash[0]
            final fun <get-Backslash>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Backslash.<get-Backslash>|<get-Backslash>(){}[0]
        final val Backspace // androidx.compose.ui.input.key/Key.Companion.Backspace|{}Backspace[0]
            final fun <get-Backspace>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Backspace.<get-Backspace>|<get-Backspace>(){}[0]
        final val Bookmark // androidx.compose.ui.input.key/Key.Companion.Bookmark|{}Bookmark[0]
            final fun <get-Bookmark>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Bookmark.<get-Bookmark>|<get-Bookmark>(){}[0]
        final val Break // androidx.compose.ui.input.key/Key.Companion.Break|{}Break[0]
            final fun <get-Break>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Break.<get-Break>|<get-Break>(){}[0]
        final val BrightnessDown // androidx.compose.ui.input.key/Key.Companion.BrightnessDown|{}BrightnessDown[0]
            final fun <get-BrightnessDown>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.BrightnessDown.<get-BrightnessDown>|<get-BrightnessDown>(){}[0]
        final val BrightnessUp // androidx.compose.ui.input.key/Key.Companion.BrightnessUp|{}BrightnessUp[0]
            final fun <get-BrightnessUp>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.BrightnessUp.<get-BrightnessUp>|<get-BrightnessUp>(){}[0]
        final val Browser // androidx.compose.ui.input.key/Key.Companion.Browser|{}Browser[0]
            final fun <get-Browser>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Browser.<get-Browser>|<get-Browser>(){}[0]
        final val Button1 // androidx.compose.ui.input.key/Key.Companion.Button1|{}Button1[0]
            final fun <get-Button1>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button1.<get-Button1>|<get-Button1>(){}[0]
        final val Button10 // androidx.compose.ui.input.key/Key.Companion.Button10|{}Button10[0]
            final fun <get-Button10>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button10.<get-Button10>|<get-Button10>(){}[0]
        final val Button11 // androidx.compose.ui.input.key/Key.Companion.Button11|{}Button11[0]
            final fun <get-Button11>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button11.<get-Button11>|<get-Button11>(){}[0]
        final val Button12 // androidx.compose.ui.input.key/Key.Companion.Button12|{}Button12[0]
            final fun <get-Button12>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button12.<get-Button12>|<get-Button12>(){}[0]
        final val Button13 // androidx.compose.ui.input.key/Key.Companion.Button13|{}Button13[0]
            final fun <get-Button13>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button13.<get-Button13>|<get-Button13>(){}[0]
        final val Button14 // androidx.compose.ui.input.key/Key.Companion.Button14|{}Button14[0]
            final fun <get-Button14>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button14.<get-Button14>|<get-Button14>(){}[0]
        final val Button15 // androidx.compose.ui.input.key/Key.Companion.Button15|{}Button15[0]
            final fun <get-Button15>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button15.<get-Button15>|<get-Button15>(){}[0]
        final val Button16 // androidx.compose.ui.input.key/Key.Companion.Button16|{}Button16[0]
            final fun <get-Button16>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button16.<get-Button16>|<get-Button16>(){}[0]
        final val Button2 // androidx.compose.ui.input.key/Key.Companion.Button2|{}Button2[0]
            final fun <get-Button2>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button2.<get-Button2>|<get-Button2>(){}[0]
        final val Button3 // androidx.compose.ui.input.key/Key.Companion.Button3|{}Button3[0]
            final fun <get-Button3>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button3.<get-Button3>|<get-Button3>(){}[0]
        final val Button4 // androidx.compose.ui.input.key/Key.Companion.Button4|{}Button4[0]
            final fun <get-Button4>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button4.<get-Button4>|<get-Button4>(){}[0]
        final val Button5 // androidx.compose.ui.input.key/Key.Companion.Button5|{}Button5[0]
            final fun <get-Button5>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button5.<get-Button5>|<get-Button5>(){}[0]
        final val Button6 // androidx.compose.ui.input.key/Key.Companion.Button6|{}Button6[0]
            final fun <get-Button6>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button6.<get-Button6>|<get-Button6>(){}[0]
        final val Button7 // androidx.compose.ui.input.key/Key.Companion.Button7|{}Button7[0]
            final fun <get-Button7>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button7.<get-Button7>|<get-Button7>(){}[0]
        final val Button8 // androidx.compose.ui.input.key/Key.Companion.Button8|{}Button8[0]
            final fun <get-Button8>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button8.<get-Button8>|<get-Button8>(){}[0]
        final val Button9 // androidx.compose.ui.input.key/Key.Companion.Button9|{}Button9[0]
            final fun <get-Button9>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Button9.<get-Button9>|<get-Button9>(){}[0]
        final val ButtonA // androidx.compose.ui.input.key/Key.Companion.ButtonA|{}ButtonA[0]
            final fun <get-ButtonA>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonA.<get-ButtonA>|<get-ButtonA>(){}[0]
        final val ButtonB // androidx.compose.ui.input.key/Key.Companion.ButtonB|{}ButtonB[0]
            final fun <get-ButtonB>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonB.<get-ButtonB>|<get-ButtonB>(){}[0]
        final val ButtonC // androidx.compose.ui.input.key/Key.Companion.ButtonC|{}ButtonC[0]
            final fun <get-ButtonC>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonC.<get-ButtonC>|<get-ButtonC>(){}[0]
        final val ButtonL1 // androidx.compose.ui.input.key/Key.Companion.ButtonL1|{}ButtonL1[0]
            final fun <get-ButtonL1>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonL1.<get-ButtonL1>|<get-ButtonL1>(){}[0]
        final val ButtonL2 // androidx.compose.ui.input.key/Key.Companion.ButtonL2|{}ButtonL2[0]
            final fun <get-ButtonL2>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonL2.<get-ButtonL2>|<get-ButtonL2>(){}[0]
        final val ButtonMode // androidx.compose.ui.input.key/Key.Companion.ButtonMode|{}ButtonMode[0]
            final fun <get-ButtonMode>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonMode.<get-ButtonMode>|<get-ButtonMode>(){}[0]
        final val ButtonR1 // androidx.compose.ui.input.key/Key.Companion.ButtonR1|{}ButtonR1[0]
            final fun <get-ButtonR1>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonR1.<get-ButtonR1>|<get-ButtonR1>(){}[0]
        final val ButtonR2 // androidx.compose.ui.input.key/Key.Companion.ButtonR2|{}ButtonR2[0]
            final fun <get-ButtonR2>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonR2.<get-ButtonR2>|<get-ButtonR2>(){}[0]
        final val ButtonSelect // androidx.compose.ui.input.key/Key.Companion.ButtonSelect|{}ButtonSelect[0]
            final fun <get-ButtonSelect>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonSelect.<get-ButtonSelect>|<get-ButtonSelect>(){}[0]
        final val ButtonStart // androidx.compose.ui.input.key/Key.Companion.ButtonStart|{}ButtonStart[0]
            final fun <get-ButtonStart>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonStart.<get-ButtonStart>|<get-ButtonStart>(){}[0]
        final val ButtonThumbLeft // androidx.compose.ui.input.key/Key.Companion.ButtonThumbLeft|{}ButtonThumbLeft[0]
            final fun <get-ButtonThumbLeft>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonThumbLeft.<get-ButtonThumbLeft>|<get-ButtonThumbLeft>(){}[0]
        final val ButtonThumbRight // androidx.compose.ui.input.key/Key.Companion.ButtonThumbRight|{}ButtonThumbRight[0]
            final fun <get-ButtonThumbRight>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonThumbRight.<get-ButtonThumbRight>|<get-ButtonThumbRight>(){}[0]
        final val ButtonX // androidx.compose.ui.input.key/Key.Companion.ButtonX|{}ButtonX[0]
            final fun <get-ButtonX>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonX.<get-ButtonX>|<get-ButtonX>(){}[0]
        final val ButtonY // androidx.compose.ui.input.key/Key.Companion.ButtonY|{}ButtonY[0]
            final fun <get-ButtonY>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonY.<get-ButtonY>|<get-ButtonY>(){}[0]
        final val ButtonZ // androidx.compose.ui.input.key/Key.Companion.ButtonZ|{}ButtonZ[0]
            final fun <get-ButtonZ>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ButtonZ.<get-ButtonZ>|<get-ButtonZ>(){}[0]
        final val C // androidx.compose.ui.input.key/Key.Companion.C|{}C[0]
            final fun <get-C>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.C.<get-C>|<get-C>(){}[0]
        final val Calculator // androidx.compose.ui.input.key/Key.Companion.Calculator|{}Calculator[0]
            final fun <get-Calculator>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Calculator.<get-Calculator>|<get-Calculator>(){}[0]
        final val Calendar // androidx.compose.ui.input.key/Key.Companion.Calendar|{}Calendar[0]
            final fun <get-Calendar>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Calendar.<get-Calendar>|<get-Calendar>(){}[0]
        final val Call // androidx.compose.ui.input.key/Key.Companion.Call|{}Call[0]
            final fun <get-Call>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Call.<get-Call>|<get-Call>(){}[0]
        final val Camera // androidx.compose.ui.input.key/Key.Companion.Camera|{}Camera[0]
            final fun <get-Camera>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Camera.<get-Camera>|<get-Camera>(){}[0]
        final val CapsLock // androidx.compose.ui.input.key/Key.Companion.CapsLock|{}CapsLock[0]
            final fun <get-CapsLock>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.CapsLock.<get-CapsLock>|<get-CapsLock>(){}[0]
        final val Captions // androidx.compose.ui.input.key/Key.Companion.Captions|{}Captions[0]
            final fun <get-Captions>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Captions.<get-Captions>|<get-Captions>(){}[0]
        final val ChannelDown // androidx.compose.ui.input.key/Key.Companion.ChannelDown|{}ChannelDown[0]
            final fun <get-ChannelDown>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ChannelDown.<get-ChannelDown>|<get-ChannelDown>(){}[0]
        final val ChannelUp // androidx.compose.ui.input.key/Key.Companion.ChannelUp|{}ChannelUp[0]
            final fun <get-ChannelUp>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ChannelUp.<get-ChannelUp>|<get-ChannelUp>(){}[0]
        final val Clear // androidx.compose.ui.input.key/Key.Companion.Clear|{}Clear[0]
            final fun <get-Clear>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Clear.<get-Clear>|<get-Clear>(){}[0]
        final val Comma // androidx.compose.ui.input.key/Key.Companion.Comma|{}Comma[0]
            final fun <get-Comma>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Comma.<get-Comma>|<get-Comma>(){}[0]
        final val Contacts // androidx.compose.ui.input.key/Key.Companion.Contacts|{}Contacts[0]
            final fun <get-Contacts>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Contacts.<get-Contacts>|<get-Contacts>(){}[0]
        final val Copy // androidx.compose.ui.input.key/Key.Companion.Copy|{}Copy[0]
            final fun <get-Copy>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Copy.<get-Copy>|<get-Copy>(){}[0]
        final val CtrlLeft // androidx.compose.ui.input.key/Key.Companion.CtrlLeft|{}CtrlLeft[0]
            final fun <get-CtrlLeft>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.CtrlLeft.<get-CtrlLeft>|<get-CtrlLeft>(){}[0]
        final val CtrlRight // androidx.compose.ui.input.key/Key.Companion.CtrlRight|{}CtrlRight[0]
            final fun <get-CtrlRight>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.CtrlRight.<get-CtrlRight>|<get-CtrlRight>(){}[0]
        final val Cut // androidx.compose.ui.input.key/Key.Companion.Cut|{}Cut[0]
            final fun <get-Cut>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Cut.<get-Cut>|<get-Cut>(){}[0]
        final val D // androidx.compose.ui.input.key/Key.Companion.D|{}D[0]
            final fun <get-D>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.D.<get-D>|<get-D>(){}[0]
        final val Delete // androidx.compose.ui.input.key/Key.Companion.Delete|{}Delete[0]
            final fun <get-Delete>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Delete.<get-Delete>|<get-Delete>(){}[0]
        final val DirectionCenter // androidx.compose.ui.input.key/Key.Companion.DirectionCenter|{}DirectionCenter[0]
            final fun <get-DirectionCenter>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.DirectionCenter.<get-DirectionCenter>|<get-DirectionCenter>(){}[0]
        final val DirectionDown // androidx.compose.ui.input.key/Key.Companion.DirectionDown|{}DirectionDown[0]
            final fun <get-DirectionDown>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.DirectionDown.<get-DirectionDown>|<get-DirectionDown>(){}[0]
        final val DirectionDownLeft // androidx.compose.ui.input.key/Key.Companion.DirectionDownLeft|{}DirectionDownLeft[0]
            final fun <get-DirectionDownLeft>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.DirectionDownLeft.<get-DirectionDownLeft>|<get-DirectionDownLeft>(){}[0]
        final val DirectionDownRight // androidx.compose.ui.input.key/Key.Companion.DirectionDownRight|{}DirectionDownRight[0]
            final fun <get-DirectionDownRight>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.DirectionDownRight.<get-DirectionDownRight>|<get-DirectionDownRight>(){}[0]
        final val DirectionLeft // androidx.compose.ui.input.key/Key.Companion.DirectionLeft|{}DirectionLeft[0]
            final fun <get-DirectionLeft>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.DirectionLeft.<get-DirectionLeft>|<get-DirectionLeft>(){}[0]
        final val DirectionRight // androidx.compose.ui.input.key/Key.Companion.DirectionRight|{}DirectionRight[0]
            final fun <get-DirectionRight>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.DirectionRight.<get-DirectionRight>|<get-DirectionRight>(){}[0]
        final val DirectionUp // androidx.compose.ui.input.key/Key.Companion.DirectionUp|{}DirectionUp[0]
            final fun <get-DirectionUp>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.DirectionUp.<get-DirectionUp>|<get-DirectionUp>(){}[0]
        final val DirectionUpLeft // androidx.compose.ui.input.key/Key.Companion.DirectionUpLeft|{}DirectionUpLeft[0]
            final fun <get-DirectionUpLeft>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.DirectionUpLeft.<get-DirectionUpLeft>|<get-DirectionUpLeft>(){}[0]
        final val DirectionUpRight // androidx.compose.ui.input.key/Key.Companion.DirectionUpRight|{}DirectionUpRight[0]
            final fun <get-DirectionUpRight>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.DirectionUpRight.<get-DirectionUpRight>|<get-DirectionUpRight>(){}[0]
        final val Dvr // androidx.compose.ui.input.key/Key.Companion.Dvr|{}Dvr[0]
            final fun <get-Dvr>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Dvr.<get-Dvr>|<get-Dvr>(){}[0]
        final val E // androidx.compose.ui.input.key/Key.Companion.E|{}E[0]
            final fun <get-E>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.E.<get-E>|<get-E>(){}[0]
        final val Eight // androidx.compose.ui.input.key/Key.Companion.Eight|{}Eight[0]
            final fun <get-Eight>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Eight.<get-Eight>|<get-Eight>(){}[0]
        final val Eisu // androidx.compose.ui.input.key/Key.Companion.Eisu|{}Eisu[0]
            final fun <get-Eisu>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Eisu.<get-Eisu>|<get-Eisu>(){}[0]
        final val EndCall // androidx.compose.ui.input.key/Key.Companion.EndCall|{}EndCall[0]
            final fun <get-EndCall>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.EndCall.<get-EndCall>|<get-EndCall>(){}[0]
        final val Enter // androidx.compose.ui.input.key/Key.Companion.Enter|{}Enter[0]
            final fun <get-Enter>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Enter.<get-Enter>|<get-Enter>(){}[0]
        final val Envelope // androidx.compose.ui.input.key/Key.Companion.Envelope|{}Envelope[0]
            final fun <get-Envelope>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Envelope.<get-Envelope>|<get-Envelope>(){}[0]
        final val Equals // androidx.compose.ui.input.key/Key.Companion.Equals|{}Equals[0]
            final fun <get-Equals>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Equals.<get-Equals>|<get-Equals>(){}[0]
        final val Escape // androidx.compose.ui.input.key/Key.Companion.Escape|{}Escape[0]
            final fun <get-Escape>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Escape.<get-Escape>|<get-Escape>(){}[0]
        final val F // androidx.compose.ui.input.key/Key.Companion.F|{}F[0]
            final fun <get-F>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.F.<get-F>|<get-F>(){}[0]
        final val F1 // androidx.compose.ui.input.key/Key.Companion.F1|{}F1[0]
            final fun <get-F1>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.F1.<get-F1>|<get-F1>(){}[0]
        final val F10 // androidx.compose.ui.input.key/Key.Companion.F10|{}F10[0]
            final fun <get-F10>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.F10.<get-F10>|<get-F10>(){}[0]
        final val F11 // androidx.compose.ui.input.key/Key.Companion.F11|{}F11[0]
            final fun <get-F11>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.F11.<get-F11>|<get-F11>(){}[0]
        final val F12 // androidx.compose.ui.input.key/Key.Companion.F12|{}F12[0]
            final fun <get-F12>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.F12.<get-F12>|<get-F12>(){}[0]
        final val F2 // androidx.compose.ui.input.key/Key.Companion.F2|{}F2[0]
            final fun <get-F2>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.F2.<get-F2>|<get-F2>(){}[0]
        final val F3 // androidx.compose.ui.input.key/Key.Companion.F3|{}F3[0]
            final fun <get-F3>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.F3.<get-F3>|<get-F3>(){}[0]
        final val F4 // androidx.compose.ui.input.key/Key.Companion.F4|{}F4[0]
            final fun <get-F4>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.F4.<get-F4>|<get-F4>(){}[0]
        final val F5 // androidx.compose.ui.input.key/Key.Companion.F5|{}F5[0]
            final fun <get-F5>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.F5.<get-F5>|<get-F5>(){}[0]
        final val F6 // androidx.compose.ui.input.key/Key.Companion.F6|{}F6[0]
            final fun <get-F6>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.F6.<get-F6>|<get-F6>(){}[0]
        final val F7 // androidx.compose.ui.input.key/Key.Companion.F7|{}F7[0]
            final fun <get-F7>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.F7.<get-F7>|<get-F7>(){}[0]
        final val F8 // androidx.compose.ui.input.key/Key.Companion.F8|{}F8[0]
            final fun <get-F8>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.F8.<get-F8>|<get-F8>(){}[0]
        final val F9 // androidx.compose.ui.input.key/Key.Companion.F9|{}F9[0]
            final fun <get-F9>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.F9.<get-F9>|<get-F9>(){}[0]
        final val Five // androidx.compose.ui.input.key/Key.Companion.Five|{}Five[0]
            final fun <get-Five>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Five.<get-Five>|<get-Five>(){}[0]
        final val Focus // androidx.compose.ui.input.key/Key.Companion.Focus|{}Focus[0]
            final fun <get-Focus>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Focus.<get-Focus>|<get-Focus>(){}[0]
        final val Forward // androidx.compose.ui.input.key/Key.Companion.Forward|{}Forward[0]
            final fun <get-Forward>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Forward.<get-Forward>|<get-Forward>(){}[0]
        final val Four // androidx.compose.ui.input.key/Key.Companion.Four|{}Four[0]
            final fun <get-Four>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Four.<get-Four>|<get-Four>(){}[0]
        final val Function // androidx.compose.ui.input.key/Key.Companion.Function|{}Function[0]
            final fun <get-Function>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Function.<get-Function>|<get-Function>(){}[0]
        final val G // androidx.compose.ui.input.key/Key.Companion.G|{}G[0]
            final fun <get-G>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.G.<get-G>|<get-G>(){}[0]
        final val Grave // androidx.compose.ui.input.key/Key.Companion.Grave|{}Grave[0]
            final fun <get-Grave>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Grave.<get-Grave>|<get-Grave>(){}[0]
        final val Guide // androidx.compose.ui.input.key/Key.Companion.Guide|{}Guide[0]
            final fun <get-Guide>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Guide.<get-Guide>|<get-Guide>(){}[0]
        final val H // androidx.compose.ui.input.key/Key.Companion.H|{}H[0]
            final fun <get-H>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.H.<get-H>|<get-H>(){}[0]
        final val HeadsetHook // androidx.compose.ui.input.key/Key.Companion.HeadsetHook|{}HeadsetHook[0]
            final fun <get-HeadsetHook>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.HeadsetHook.<get-HeadsetHook>|<get-HeadsetHook>(){}[0]
        final val Help // androidx.compose.ui.input.key/Key.Companion.Help|{}Help[0]
            final fun <get-Help>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Help.<get-Help>|<get-Help>(){}[0]
        final val Henkan // androidx.compose.ui.input.key/Key.Companion.Henkan|{}Henkan[0]
            final fun <get-Henkan>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Henkan.<get-Henkan>|<get-Henkan>(){}[0]
        final val Home // androidx.compose.ui.input.key/Key.Companion.Home|{}Home[0]
            final fun <get-Home>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Home.<get-Home>|<get-Home>(){}[0]
        final val I // androidx.compose.ui.input.key/Key.Companion.I|{}I[0]
            final fun <get-I>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.I.<get-I>|<get-I>(){}[0]
        final val Info // androidx.compose.ui.input.key/Key.Companion.Info|{}Info[0]
            final fun <get-Info>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Info.<get-Info>|<get-Info>(){}[0]
        final val Insert // androidx.compose.ui.input.key/Key.Companion.Insert|{}Insert[0]
            final fun <get-Insert>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Insert.<get-Insert>|<get-Insert>(){}[0]
        final val J // androidx.compose.ui.input.key/Key.Companion.J|{}J[0]
            final fun <get-J>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.J.<get-J>|<get-J>(){}[0]
        final val K // androidx.compose.ui.input.key/Key.Companion.K|{}K[0]
            final fun <get-K>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.K.<get-K>|<get-K>(){}[0]
        final val Kana // androidx.compose.ui.input.key/Key.Companion.Kana|{}Kana[0]
            final fun <get-Kana>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Kana.<get-Kana>|<get-Kana>(){}[0]
        final val KatakanaHiragana // androidx.compose.ui.input.key/Key.Companion.KatakanaHiragana|{}KatakanaHiragana[0]
            final fun <get-KatakanaHiragana>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.KatakanaHiragana.<get-KatakanaHiragana>|<get-KatakanaHiragana>(){}[0]
        final val L // androidx.compose.ui.input.key/Key.Companion.L|{}L[0]
            final fun <get-L>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.L.<get-L>|<get-L>(){}[0]
        final val LanguageSwitch // androidx.compose.ui.input.key/Key.Companion.LanguageSwitch|{}LanguageSwitch[0]
            final fun <get-LanguageSwitch>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.LanguageSwitch.<get-LanguageSwitch>|<get-LanguageSwitch>(){}[0]
        final val LastChannel // androidx.compose.ui.input.key/Key.Companion.LastChannel|{}LastChannel[0]
            final fun <get-LastChannel>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.LastChannel.<get-LastChannel>|<get-LastChannel>(){}[0]
        final val LeftBracket // androidx.compose.ui.input.key/Key.Companion.LeftBracket|{}LeftBracket[0]
            final fun <get-LeftBracket>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.LeftBracket.<get-LeftBracket>|<get-LeftBracket>(){}[0]
        final val M // androidx.compose.ui.input.key/Key.Companion.M|{}M[0]
            final fun <get-M>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.M.<get-M>|<get-M>(){}[0]
        final val MannerMode // androidx.compose.ui.input.key/Key.Companion.MannerMode|{}MannerMode[0]
            final fun <get-MannerMode>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MannerMode.<get-MannerMode>|<get-MannerMode>(){}[0]
        final val MediaAudioTrack // androidx.compose.ui.input.key/Key.Companion.MediaAudioTrack|{}MediaAudioTrack[0]
            final fun <get-MediaAudioTrack>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaAudioTrack.<get-MediaAudioTrack>|<get-MediaAudioTrack>(){}[0]
        final val MediaClose // androidx.compose.ui.input.key/Key.Companion.MediaClose|{}MediaClose[0]
            final fun <get-MediaClose>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaClose.<get-MediaClose>|<get-MediaClose>(){}[0]
        final val MediaEject // androidx.compose.ui.input.key/Key.Companion.MediaEject|{}MediaEject[0]
            final fun <get-MediaEject>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaEject.<get-MediaEject>|<get-MediaEject>(){}[0]
        final val MediaFastForward // androidx.compose.ui.input.key/Key.Companion.MediaFastForward|{}MediaFastForward[0]
            final fun <get-MediaFastForward>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaFastForward.<get-MediaFastForward>|<get-MediaFastForward>(){}[0]
        final val MediaNext // androidx.compose.ui.input.key/Key.Companion.MediaNext|{}MediaNext[0]
            final fun <get-MediaNext>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaNext.<get-MediaNext>|<get-MediaNext>(){}[0]
        final val MediaPause // androidx.compose.ui.input.key/Key.Companion.MediaPause|{}MediaPause[0]
            final fun <get-MediaPause>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaPause.<get-MediaPause>|<get-MediaPause>(){}[0]
        final val MediaPlay // androidx.compose.ui.input.key/Key.Companion.MediaPlay|{}MediaPlay[0]
            final fun <get-MediaPlay>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaPlay.<get-MediaPlay>|<get-MediaPlay>(){}[0]
        final val MediaPlayPause // androidx.compose.ui.input.key/Key.Companion.MediaPlayPause|{}MediaPlayPause[0]
            final fun <get-MediaPlayPause>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaPlayPause.<get-MediaPlayPause>|<get-MediaPlayPause>(){}[0]
        final val MediaPrevious // androidx.compose.ui.input.key/Key.Companion.MediaPrevious|{}MediaPrevious[0]
            final fun <get-MediaPrevious>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaPrevious.<get-MediaPrevious>|<get-MediaPrevious>(){}[0]
        final val MediaRecord // androidx.compose.ui.input.key/Key.Companion.MediaRecord|{}MediaRecord[0]
            final fun <get-MediaRecord>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaRecord.<get-MediaRecord>|<get-MediaRecord>(){}[0]
        final val MediaRewind // androidx.compose.ui.input.key/Key.Companion.MediaRewind|{}MediaRewind[0]
            final fun <get-MediaRewind>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaRewind.<get-MediaRewind>|<get-MediaRewind>(){}[0]
        final val MediaSkipBackward // androidx.compose.ui.input.key/Key.Companion.MediaSkipBackward|{}MediaSkipBackward[0]
            final fun <get-MediaSkipBackward>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaSkipBackward.<get-MediaSkipBackward>|<get-MediaSkipBackward>(){}[0]
        final val MediaSkipForward // androidx.compose.ui.input.key/Key.Companion.MediaSkipForward|{}MediaSkipForward[0]
            final fun <get-MediaSkipForward>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaSkipForward.<get-MediaSkipForward>|<get-MediaSkipForward>(){}[0]
        final val MediaStepBackward // androidx.compose.ui.input.key/Key.Companion.MediaStepBackward|{}MediaStepBackward[0]
            final fun <get-MediaStepBackward>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaStepBackward.<get-MediaStepBackward>|<get-MediaStepBackward>(){}[0]
        final val MediaStepForward // androidx.compose.ui.input.key/Key.Companion.MediaStepForward|{}MediaStepForward[0]
            final fun <get-MediaStepForward>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaStepForward.<get-MediaStepForward>|<get-MediaStepForward>(){}[0]
        final val MediaStop // androidx.compose.ui.input.key/Key.Companion.MediaStop|{}MediaStop[0]
            final fun <get-MediaStop>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaStop.<get-MediaStop>|<get-MediaStop>(){}[0]
        final val MediaTopMenu // androidx.compose.ui.input.key/Key.Companion.MediaTopMenu|{}MediaTopMenu[0]
            final fun <get-MediaTopMenu>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MediaTopMenu.<get-MediaTopMenu>|<get-MediaTopMenu>(){}[0]
        final val Menu // androidx.compose.ui.input.key/Key.Companion.Menu|{}Menu[0]
            final fun <get-Menu>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Menu.<get-Menu>|<get-Menu>(){}[0]
        final val MetaLeft // androidx.compose.ui.input.key/Key.Companion.MetaLeft|{}MetaLeft[0]
            final fun <get-MetaLeft>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MetaLeft.<get-MetaLeft>|<get-MetaLeft>(){}[0]
        final val MetaRight // androidx.compose.ui.input.key/Key.Companion.MetaRight|{}MetaRight[0]
            final fun <get-MetaRight>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MetaRight.<get-MetaRight>|<get-MetaRight>(){}[0]
        final val MicrophoneMute // androidx.compose.ui.input.key/Key.Companion.MicrophoneMute|{}MicrophoneMute[0]
            final fun <get-MicrophoneMute>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MicrophoneMute.<get-MicrophoneMute>|<get-MicrophoneMute>(){}[0]
        final val Minus // androidx.compose.ui.input.key/Key.Companion.Minus|{}Minus[0]
            final fun <get-Minus>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Minus.<get-Minus>|<get-Minus>(){}[0]
        final val MoveEnd // androidx.compose.ui.input.key/Key.Companion.MoveEnd|{}MoveEnd[0]
            final fun <get-MoveEnd>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MoveEnd.<get-MoveEnd>|<get-MoveEnd>(){}[0]
        final val MoveHome // androidx.compose.ui.input.key/Key.Companion.MoveHome|{}MoveHome[0]
            final fun <get-MoveHome>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.MoveHome.<get-MoveHome>|<get-MoveHome>(){}[0]
        final val Muhenkan // androidx.compose.ui.input.key/Key.Companion.Muhenkan|{}Muhenkan[0]
            final fun <get-Muhenkan>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Muhenkan.<get-Muhenkan>|<get-Muhenkan>(){}[0]
        final val Multiply // androidx.compose.ui.input.key/Key.Companion.Multiply|{}Multiply[0]
            final fun <get-Multiply>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Multiply.<get-Multiply>|<get-Multiply>(){}[0]
        final val Music // androidx.compose.ui.input.key/Key.Companion.Music|{}Music[0]
            final fun <get-Music>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Music.<get-Music>|<get-Music>(){}[0]
        final val N // androidx.compose.ui.input.key/Key.Companion.N|{}N[0]
            final fun <get-N>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.N.<get-N>|<get-N>(){}[0]
        final val NavigateIn // androidx.compose.ui.input.key/Key.Companion.NavigateIn|{}NavigateIn[0]
            final fun <get-NavigateIn>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NavigateIn.<get-NavigateIn>|<get-NavigateIn>(){}[0]
        final val NavigateNext // androidx.compose.ui.input.key/Key.Companion.NavigateNext|{}NavigateNext[0]
            final fun <get-NavigateNext>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NavigateNext.<get-NavigateNext>|<get-NavigateNext>(){}[0]
        final val NavigateOut // androidx.compose.ui.input.key/Key.Companion.NavigateOut|{}NavigateOut[0]
            final fun <get-NavigateOut>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NavigateOut.<get-NavigateOut>|<get-NavigateOut>(){}[0]
        final val NavigatePrevious // androidx.compose.ui.input.key/Key.Companion.NavigatePrevious|{}NavigatePrevious[0]
            final fun <get-NavigatePrevious>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NavigatePrevious.<get-NavigatePrevious>|<get-NavigatePrevious>(){}[0]
        final val Nine // androidx.compose.ui.input.key/Key.Companion.Nine|{}Nine[0]
            final fun <get-Nine>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Nine.<get-Nine>|<get-Nine>(){}[0]
        final val Notification // androidx.compose.ui.input.key/Key.Companion.Notification|{}Notification[0]
            final fun <get-Notification>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Notification.<get-Notification>|<get-Notification>(){}[0]
        final val NumLock // androidx.compose.ui.input.key/Key.Companion.NumLock|{}NumLock[0]
            final fun <get-NumLock>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumLock.<get-NumLock>|<get-NumLock>(){}[0]
        final val NumPad0 // androidx.compose.ui.input.key/Key.Companion.NumPad0|{}NumPad0[0]
            final fun <get-NumPad0>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPad0.<get-NumPad0>|<get-NumPad0>(){}[0]
        final val NumPad1 // androidx.compose.ui.input.key/Key.Companion.NumPad1|{}NumPad1[0]
            final fun <get-NumPad1>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPad1.<get-NumPad1>|<get-NumPad1>(){}[0]
        final val NumPad2 // androidx.compose.ui.input.key/Key.Companion.NumPad2|{}NumPad2[0]
            final fun <get-NumPad2>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPad2.<get-NumPad2>|<get-NumPad2>(){}[0]
        final val NumPad3 // androidx.compose.ui.input.key/Key.Companion.NumPad3|{}NumPad3[0]
            final fun <get-NumPad3>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPad3.<get-NumPad3>|<get-NumPad3>(){}[0]
        final val NumPad4 // androidx.compose.ui.input.key/Key.Companion.NumPad4|{}NumPad4[0]
            final fun <get-NumPad4>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPad4.<get-NumPad4>|<get-NumPad4>(){}[0]
        final val NumPad5 // androidx.compose.ui.input.key/Key.Companion.NumPad5|{}NumPad5[0]
            final fun <get-NumPad5>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPad5.<get-NumPad5>|<get-NumPad5>(){}[0]
        final val NumPad6 // androidx.compose.ui.input.key/Key.Companion.NumPad6|{}NumPad6[0]
            final fun <get-NumPad6>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPad6.<get-NumPad6>|<get-NumPad6>(){}[0]
        final val NumPad7 // androidx.compose.ui.input.key/Key.Companion.NumPad7|{}NumPad7[0]
            final fun <get-NumPad7>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPad7.<get-NumPad7>|<get-NumPad7>(){}[0]
        final val NumPad8 // androidx.compose.ui.input.key/Key.Companion.NumPad8|{}NumPad8[0]
            final fun <get-NumPad8>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPad8.<get-NumPad8>|<get-NumPad8>(){}[0]
        final val NumPad9 // androidx.compose.ui.input.key/Key.Companion.NumPad9|{}NumPad9[0]
            final fun <get-NumPad9>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPad9.<get-NumPad9>|<get-NumPad9>(){}[0]
        final val NumPadAdd // androidx.compose.ui.input.key/Key.Companion.NumPadAdd|{}NumPadAdd[0]
            final fun <get-NumPadAdd>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPadAdd.<get-NumPadAdd>|<get-NumPadAdd>(){}[0]
        final val NumPadComma // androidx.compose.ui.input.key/Key.Companion.NumPadComma|{}NumPadComma[0]
            final fun <get-NumPadComma>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPadComma.<get-NumPadComma>|<get-NumPadComma>(){}[0]
        final val NumPadDivide // androidx.compose.ui.input.key/Key.Companion.NumPadDivide|{}NumPadDivide[0]
            final fun <get-NumPadDivide>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPadDivide.<get-NumPadDivide>|<get-NumPadDivide>(){}[0]
        final val NumPadDot // androidx.compose.ui.input.key/Key.Companion.NumPadDot|{}NumPadDot[0]
            final fun <get-NumPadDot>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPadDot.<get-NumPadDot>|<get-NumPadDot>(){}[0]
        final val NumPadEnter // androidx.compose.ui.input.key/Key.Companion.NumPadEnter|{}NumPadEnter[0]
            final fun <get-NumPadEnter>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPadEnter.<get-NumPadEnter>|<get-NumPadEnter>(){}[0]
        final val NumPadEquals // androidx.compose.ui.input.key/Key.Companion.NumPadEquals|{}NumPadEquals[0]
            final fun <get-NumPadEquals>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPadEquals.<get-NumPadEquals>|<get-NumPadEquals>(){}[0]
        final val NumPadLeftParenthesis // androidx.compose.ui.input.key/Key.Companion.NumPadLeftParenthesis|{}NumPadLeftParenthesis[0]
            final fun <get-NumPadLeftParenthesis>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPadLeftParenthesis.<get-NumPadLeftParenthesis>|<get-NumPadLeftParenthesis>(){}[0]
        final val NumPadMultiply // androidx.compose.ui.input.key/Key.Companion.NumPadMultiply|{}NumPadMultiply[0]
            final fun <get-NumPadMultiply>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPadMultiply.<get-NumPadMultiply>|<get-NumPadMultiply>(){}[0]
        final val NumPadRightParenthesis // androidx.compose.ui.input.key/Key.Companion.NumPadRightParenthesis|{}NumPadRightParenthesis[0]
            final fun <get-NumPadRightParenthesis>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPadRightParenthesis.<get-NumPadRightParenthesis>|<get-NumPadRightParenthesis>(){}[0]
        final val NumPadSubtract // androidx.compose.ui.input.key/Key.Companion.NumPadSubtract|{}NumPadSubtract[0]
            final fun <get-NumPadSubtract>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.NumPadSubtract.<get-NumPadSubtract>|<get-NumPadSubtract>(){}[0]
        final val Number // androidx.compose.ui.input.key/Key.Companion.Number|{}Number[0]
            final fun <get-Number>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Number.<get-Number>|<get-Number>(){}[0]
        final val O // androidx.compose.ui.input.key/Key.Companion.O|{}O[0]
            final fun <get-O>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.O.<get-O>|<get-O>(){}[0]
        final val One // androidx.compose.ui.input.key/Key.Companion.One|{}One[0]
            final fun <get-One>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.One.<get-One>|<get-One>(){}[0]
        final val P // androidx.compose.ui.input.key/Key.Companion.P|{}P[0]
            final fun <get-P>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.P.<get-P>|<get-P>(){}[0]
        final val PageDown // androidx.compose.ui.input.key/Key.Companion.PageDown|{}PageDown[0]
            final fun <get-PageDown>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.PageDown.<get-PageDown>|<get-PageDown>(){}[0]
        final val PageUp // androidx.compose.ui.input.key/Key.Companion.PageUp|{}PageUp[0]
            final fun <get-PageUp>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.PageUp.<get-PageUp>|<get-PageUp>(){}[0]
        final val Pairing // androidx.compose.ui.input.key/Key.Companion.Pairing|{}Pairing[0]
            final fun <get-Pairing>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Pairing.<get-Pairing>|<get-Pairing>(){}[0]
        final val Paste // androidx.compose.ui.input.key/Key.Companion.Paste|{}Paste[0]
            final fun <get-Paste>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Paste.<get-Paste>|<get-Paste>(){}[0]
        final val Period // androidx.compose.ui.input.key/Key.Companion.Period|{}Period[0]
            final fun <get-Period>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Period.<get-Period>|<get-Period>(){}[0]
        final val PictureSymbols // androidx.compose.ui.input.key/Key.Companion.PictureSymbols|{}PictureSymbols[0]
            final fun <get-PictureSymbols>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.PictureSymbols.<get-PictureSymbols>|<get-PictureSymbols>(){}[0]
        final val Plus // androidx.compose.ui.input.key/Key.Companion.Plus|{}Plus[0]
            final fun <get-Plus>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Plus.<get-Plus>|<get-Plus>(){}[0]
        final val Pound // androidx.compose.ui.input.key/Key.Companion.Pound|{}Pound[0]
            final fun <get-Pound>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Pound.<get-Pound>|<get-Pound>(){}[0]
        final val Power // androidx.compose.ui.input.key/Key.Companion.Power|{}Power[0]
            final fun <get-Power>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Power.<get-Power>|<get-Power>(){}[0]
        final val PrintScreen // androidx.compose.ui.input.key/Key.Companion.PrintScreen|{}PrintScreen[0]
            final fun <get-PrintScreen>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.PrintScreen.<get-PrintScreen>|<get-PrintScreen>(){}[0]
        final val ProfileSwitch // androidx.compose.ui.input.key/Key.Companion.ProfileSwitch|{}ProfileSwitch[0]
            final fun <get-ProfileSwitch>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ProfileSwitch.<get-ProfileSwitch>|<get-ProfileSwitch>(){}[0]
        final val ProgramBlue // androidx.compose.ui.input.key/Key.Companion.ProgramBlue|{}ProgramBlue[0]
            final fun <get-ProgramBlue>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ProgramBlue.<get-ProgramBlue>|<get-ProgramBlue>(){}[0]
        final val ProgramGreen // androidx.compose.ui.input.key/Key.Companion.ProgramGreen|{}ProgramGreen[0]
            final fun <get-ProgramGreen>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ProgramGreen.<get-ProgramGreen>|<get-ProgramGreen>(){}[0]
        final val ProgramRed // androidx.compose.ui.input.key/Key.Companion.ProgramRed|{}ProgramRed[0]
            final fun <get-ProgramRed>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ProgramRed.<get-ProgramRed>|<get-ProgramRed>(){}[0]
        final val ProgramYellow // androidx.compose.ui.input.key/Key.Companion.ProgramYellow|{}ProgramYellow[0]
            final fun <get-ProgramYellow>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ProgramYellow.<get-ProgramYellow>|<get-ProgramYellow>(){}[0]
        final val Q // androidx.compose.ui.input.key/Key.Companion.Q|{}Q[0]
            final fun <get-Q>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Q.<get-Q>|<get-Q>(){}[0]
        final val R // androidx.compose.ui.input.key/Key.Companion.R|{}R[0]
            final fun <get-R>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.R.<get-R>|<get-R>(){}[0]
        final val Refresh // androidx.compose.ui.input.key/Key.Companion.Refresh|{}Refresh[0]
            final fun <get-Refresh>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Refresh.<get-Refresh>|<get-Refresh>(){}[0]
        final val RightBracket // androidx.compose.ui.input.key/Key.Companion.RightBracket|{}RightBracket[0]
            final fun <get-RightBracket>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.RightBracket.<get-RightBracket>|<get-RightBracket>(){}[0]
        final val Ro // androidx.compose.ui.input.key/Key.Companion.Ro|{}Ro[0]
            final fun <get-Ro>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Ro.<get-Ro>|<get-Ro>(){}[0]
        final val S // androidx.compose.ui.input.key/Key.Companion.S|{}S[0]
            final fun <get-S>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.S.<get-S>|<get-S>(){}[0]
        final val ScrollLock // androidx.compose.ui.input.key/Key.Companion.ScrollLock|{}ScrollLock[0]
            final fun <get-ScrollLock>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ScrollLock.<get-ScrollLock>|<get-ScrollLock>(){}[0]
        final val Search // androidx.compose.ui.input.key/Key.Companion.Search|{}Search[0]
            final fun <get-Search>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Search.<get-Search>|<get-Search>(){}[0]
        final val Semicolon // androidx.compose.ui.input.key/Key.Companion.Semicolon|{}Semicolon[0]
            final fun <get-Semicolon>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Semicolon.<get-Semicolon>|<get-Semicolon>(){}[0]
        final val SetTopBoxInput // androidx.compose.ui.input.key/Key.Companion.SetTopBoxInput|{}SetTopBoxInput[0]
            final fun <get-SetTopBoxInput>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.SetTopBoxInput.<get-SetTopBoxInput>|<get-SetTopBoxInput>(){}[0]
        final val SetTopBoxPower // androidx.compose.ui.input.key/Key.Companion.SetTopBoxPower|{}SetTopBoxPower[0]
            final fun <get-SetTopBoxPower>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.SetTopBoxPower.<get-SetTopBoxPower>|<get-SetTopBoxPower>(){}[0]
        final val Settings // androidx.compose.ui.input.key/Key.Companion.Settings|{}Settings[0]
            final fun <get-Settings>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Settings.<get-Settings>|<get-Settings>(){}[0]
        final val Seven // androidx.compose.ui.input.key/Key.Companion.Seven|{}Seven[0]
            final fun <get-Seven>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Seven.<get-Seven>|<get-Seven>(){}[0]
        final val ShiftLeft // androidx.compose.ui.input.key/Key.Companion.ShiftLeft|{}ShiftLeft[0]
            final fun <get-ShiftLeft>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ShiftLeft.<get-ShiftLeft>|<get-ShiftLeft>(){}[0]
        final val ShiftRight // androidx.compose.ui.input.key/Key.Companion.ShiftRight|{}ShiftRight[0]
            final fun <get-ShiftRight>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ShiftRight.<get-ShiftRight>|<get-ShiftRight>(){}[0]
        final val Six // androidx.compose.ui.input.key/Key.Companion.Six|{}Six[0]
            final fun <get-Six>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Six.<get-Six>|<get-Six>(){}[0]
        final val Slash // androidx.compose.ui.input.key/Key.Companion.Slash|{}Slash[0]
            final fun <get-Slash>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Slash.<get-Slash>|<get-Slash>(){}[0]
        final val Sleep // androidx.compose.ui.input.key/Key.Companion.Sleep|{}Sleep[0]
            final fun <get-Sleep>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Sleep.<get-Sleep>|<get-Sleep>(){}[0]
        final val SoftLeft // androidx.compose.ui.input.key/Key.Companion.SoftLeft|{}SoftLeft[0]
            final fun <get-SoftLeft>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.SoftLeft.<get-SoftLeft>|<get-SoftLeft>(){}[0]
        final val SoftRight // androidx.compose.ui.input.key/Key.Companion.SoftRight|{}SoftRight[0]
            final fun <get-SoftRight>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.SoftRight.<get-SoftRight>|<get-SoftRight>(){}[0]
        final val SoftSleep // androidx.compose.ui.input.key/Key.Companion.SoftSleep|{}SoftSleep[0]
            final fun <get-SoftSleep>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.SoftSleep.<get-SoftSleep>|<get-SoftSleep>(){}[0]
        final val Spacebar // androidx.compose.ui.input.key/Key.Companion.Spacebar|{}Spacebar[0]
            final fun <get-Spacebar>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Spacebar.<get-Spacebar>|<get-Spacebar>(){}[0]
        final val Stem1 // androidx.compose.ui.input.key/Key.Companion.Stem1|{}Stem1[0]
            final fun <get-Stem1>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Stem1.<get-Stem1>|<get-Stem1>(){}[0]
        final val Stem2 // androidx.compose.ui.input.key/Key.Companion.Stem2|{}Stem2[0]
            final fun <get-Stem2>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Stem2.<get-Stem2>|<get-Stem2>(){}[0]
        final val Stem3 // androidx.compose.ui.input.key/Key.Companion.Stem3|{}Stem3[0]
            final fun <get-Stem3>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Stem3.<get-Stem3>|<get-Stem3>(){}[0]
        final val StemPrimary // androidx.compose.ui.input.key/Key.Companion.StemPrimary|{}StemPrimary[0]
            final fun <get-StemPrimary>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.StemPrimary.<get-StemPrimary>|<get-StemPrimary>(){}[0]
        final val SwitchCharset // androidx.compose.ui.input.key/Key.Companion.SwitchCharset|{}SwitchCharset[0]
            final fun <get-SwitchCharset>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.SwitchCharset.<get-SwitchCharset>|<get-SwitchCharset>(){}[0]
        final val Symbol // androidx.compose.ui.input.key/Key.Companion.Symbol|{}Symbol[0]
            final fun <get-Symbol>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Symbol.<get-Symbol>|<get-Symbol>(){}[0]
        final val SystemNavigationDown // androidx.compose.ui.input.key/Key.Companion.SystemNavigationDown|{}SystemNavigationDown[0]
            final fun <get-SystemNavigationDown>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.SystemNavigationDown.<get-SystemNavigationDown>|<get-SystemNavigationDown>(){}[0]
        final val SystemNavigationLeft // androidx.compose.ui.input.key/Key.Companion.SystemNavigationLeft|{}SystemNavigationLeft[0]
            final fun <get-SystemNavigationLeft>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.SystemNavigationLeft.<get-SystemNavigationLeft>|<get-SystemNavigationLeft>(){}[0]
        final val SystemNavigationRight // androidx.compose.ui.input.key/Key.Companion.SystemNavigationRight|{}SystemNavigationRight[0]
            final fun <get-SystemNavigationRight>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.SystemNavigationRight.<get-SystemNavigationRight>|<get-SystemNavigationRight>(){}[0]
        final val SystemNavigationUp // androidx.compose.ui.input.key/Key.Companion.SystemNavigationUp|{}SystemNavigationUp[0]
            final fun <get-SystemNavigationUp>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.SystemNavigationUp.<get-SystemNavigationUp>|<get-SystemNavigationUp>(){}[0]
        final val T // androidx.compose.ui.input.key/Key.Companion.T|{}T[0]
            final fun <get-T>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.T.<get-T>|<get-T>(){}[0]
        final val Tab // androidx.compose.ui.input.key/Key.Companion.Tab|{}Tab[0]
            final fun <get-Tab>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Tab.<get-Tab>|<get-Tab>(){}[0]
        final val Three // androidx.compose.ui.input.key/Key.Companion.Three|{}Three[0]
            final fun <get-Three>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Three.<get-Three>|<get-Three>(){}[0]
        final val ThumbsDown // androidx.compose.ui.input.key/Key.Companion.ThumbsDown|{}ThumbsDown[0]
            final fun <get-ThumbsDown>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ThumbsDown.<get-ThumbsDown>|<get-ThumbsDown>(){}[0]
        final val ThumbsUp // androidx.compose.ui.input.key/Key.Companion.ThumbsUp|{}ThumbsUp[0]
            final fun <get-ThumbsUp>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ThumbsUp.<get-ThumbsUp>|<get-ThumbsUp>(){}[0]
        final val Toggle2D3D // androidx.compose.ui.input.key/Key.Companion.Toggle2D3D|{}Toggle2D3D[0]
            final fun <get-Toggle2D3D>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Toggle2D3D.<get-Toggle2D3D>|<get-Toggle2D3D>(){}[0]
        final val Tv // androidx.compose.ui.input.key/Key.Companion.Tv|{}Tv[0]
            final fun <get-Tv>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Tv.<get-Tv>|<get-Tv>(){}[0]
        final val TvAntennaCable // androidx.compose.ui.input.key/Key.Companion.TvAntennaCable|{}TvAntennaCable[0]
            final fun <get-TvAntennaCable>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvAntennaCable.<get-TvAntennaCable>|<get-TvAntennaCable>(){}[0]
        final val TvAudioDescription // androidx.compose.ui.input.key/Key.Companion.TvAudioDescription|{}TvAudioDescription[0]
            final fun <get-TvAudioDescription>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvAudioDescription.<get-TvAudioDescription>|<get-TvAudioDescription>(){}[0]
        final val TvAudioDescriptionMixingVolumeDown // androidx.compose.ui.input.key/Key.Companion.TvAudioDescriptionMixingVolumeDown|{}TvAudioDescriptionMixingVolumeDown[0]
            final fun <get-TvAudioDescriptionMixingVolumeDown>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvAudioDescriptionMixingVolumeDown.<get-TvAudioDescriptionMixingVolumeDown>|<get-TvAudioDescriptionMixingVolumeDown>(){}[0]
        final val TvAudioDescriptionMixingVolumeUp // androidx.compose.ui.input.key/Key.Companion.TvAudioDescriptionMixingVolumeUp|{}TvAudioDescriptionMixingVolumeUp[0]
            final fun <get-TvAudioDescriptionMixingVolumeUp>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvAudioDescriptionMixingVolumeUp.<get-TvAudioDescriptionMixingVolumeUp>|<get-TvAudioDescriptionMixingVolumeUp>(){}[0]
        final val TvContentsMenu // androidx.compose.ui.input.key/Key.Companion.TvContentsMenu|{}TvContentsMenu[0]
            final fun <get-TvContentsMenu>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvContentsMenu.<get-TvContentsMenu>|<get-TvContentsMenu>(){}[0]
        final val TvDataService // androidx.compose.ui.input.key/Key.Companion.TvDataService|{}TvDataService[0]
            final fun <get-TvDataService>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvDataService.<get-TvDataService>|<get-TvDataService>(){}[0]
        final val TvInput // androidx.compose.ui.input.key/Key.Companion.TvInput|{}TvInput[0]
            final fun <get-TvInput>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvInput.<get-TvInput>|<get-TvInput>(){}[0]
        final val TvInputComponent1 // androidx.compose.ui.input.key/Key.Companion.TvInputComponent1|{}TvInputComponent1[0]
            final fun <get-TvInputComponent1>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvInputComponent1.<get-TvInputComponent1>|<get-TvInputComponent1>(){}[0]
        final val TvInputComponent2 // androidx.compose.ui.input.key/Key.Companion.TvInputComponent2|{}TvInputComponent2[0]
            final fun <get-TvInputComponent2>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvInputComponent2.<get-TvInputComponent2>|<get-TvInputComponent2>(){}[0]
        final val TvInputComposite1 // androidx.compose.ui.input.key/Key.Companion.TvInputComposite1|{}TvInputComposite1[0]
            final fun <get-TvInputComposite1>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvInputComposite1.<get-TvInputComposite1>|<get-TvInputComposite1>(){}[0]
        final val TvInputComposite2 // androidx.compose.ui.input.key/Key.Companion.TvInputComposite2|{}TvInputComposite2[0]
            final fun <get-TvInputComposite2>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvInputComposite2.<get-TvInputComposite2>|<get-TvInputComposite2>(){}[0]
        final val TvInputHdmi1 // androidx.compose.ui.input.key/Key.Companion.TvInputHdmi1|{}TvInputHdmi1[0]
            final fun <get-TvInputHdmi1>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvInputHdmi1.<get-TvInputHdmi1>|<get-TvInputHdmi1>(){}[0]
        final val TvInputHdmi2 // androidx.compose.ui.input.key/Key.Companion.TvInputHdmi2|{}TvInputHdmi2[0]
            final fun <get-TvInputHdmi2>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvInputHdmi2.<get-TvInputHdmi2>|<get-TvInputHdmi2>(){}[0]
        final val TvInputHdmi3 // androidx.compose.ui.input.key/Key.Companion.TvInputHdmi3|{}TvInputHdmi3[0]
            final fun <get-TvInputHdmi3>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvInputHdmi3.<get-TvInputHdmi3>|<get-TvInputHdmi3>(){}[0]
        final val TvInputHdmi4 // androidx.compose.ui.input.key/Key.Companion.TvInputHdmi4|{}TvInputHdmi4[0]
            final fun <get-TvInputHdmi4>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvInputHdmi4.<get-TvInputHdmi4>|<get-TvInputHdmi4>(){}[0]
        final val TvInputVga1 // androidx.compose.ui.input.key/Key.Companion.TvInputVga1|{}TvInputVga1[0]
            final fun <get-TvInputVga1>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvInputVga1.<get-TvInputVga1>|<get-TvInputVga1>(){}[0]
        final val TvMediaContextMenu // androidx.compose.ui.input.key/Key.Companion.TvMediaContextMenu|{}TvMediaContextMenu[0]
            final fun <get-TvMediaContextMenu>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvMediaContextMenu.<get-TvMediaContextMenu>|<get-TvMediaContextMenu>(){}[0]
        final val TvNetwork // androidx.compose.ui.input.key/Key.Companion.TvNetwork|{}TvNetwork[0]
            final fun <get-TvNetwork>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvNetwork.<get-TvNetwork>|<get-TvNetwork>(){}[0]
        final val TvNumberEntry // androidx.compose.ui.input.key/Key.Companion.TvNumberEntry|{}TvNumberEntry[0]
            final fun <get-TvNumberEntry>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvNumberEntry.<get-TvNumberEntry>|<get-TvNumberEntry>(){}[0]
        final val TvPower // androidx.compose.ui.input.key/Key.Companion.TvPower|{}TvPower[0]
            final fun <get-TvPower>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvPower.<get-TvPower>|<get-TvPower>(){}[0]
        final val TvRadioService // androidx.compose.ui.input.key/Key.Companion.TvRadioService|{}TvRadioService[0]
            final fun <get-TvRadioService>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvRadioService.<get-TvRadioService>|<get-TvRadioService>(){}[0]
        final val TvSatellite // androidx.compose.ui.input.key/Key.Companion.TvSatellite|{}TvSatellite[0]
            final fun <get-TvSatellite>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvSatellite.<get-TvSatellite>|<get-TvSatellite>(){}[0]
        final val TvSatelliteBs // androidx.compose.ui.input.key/Key.Companion.TvSatelliteBs|{}TvSatelliteBs[0]
            final fun <get-TvSatelliteBs>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvSatelliteBs.<get-TvSatelliteBs>|<get-TvSatelliteBs>(){}[0]
        final val TvSatelliteCs // androidx.compose.ui.input.key/Key.Companion.TvSatelliteCs|{}TvSatelliteCs[0]
            final fun <get-TvSatelliteCs>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvSatelliteCs.<get-TvSatelliteCs>|<get-TvSatelliteCs>(){}[0]
        final val TvSatelliteService // androidx.compose.ui.input.key/Key.Companion.TvSatelliteService|{}TvSatelliteService[0]
            final fun <get-TvSatelliteService>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvSatelliteService.<get-TvSatelliteService>|<get-TvSatelliteService>(){}[0]
        final val TvTeletext // androidx.compose.ui.input.key/Key.Companion.TvTeletext|{}TvTeletext[0]
            final fun <get-TvTeletext>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvTeletext.<get-TvTeletext>|<get-TvTeletext>(){}[0]
        final val TvTerrestrialAnalog // androidx.compose.ui.input.key/Key.Companion.TvTerrestrialAnalog|{}TvTerrestrialAnalog[0]
            final fun <get-TvTerrestrialAnalog>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvTerrestrialAnalog.<get-TvTerrestrialAnalog>|<get-TvTerrestrialAnalog>(){}[0]
        final val TvTerrestrialDigital // androidx.compose.ui.input.key/Key.Companion.TvTerrestrialDigital|{}TvTerrestrialDigital[0]
            final fun <get-TvTerrestrialDigital>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvTerrestrialDigital.<get-TvTerrestrialDigital>|<get-TvTerrestrialDigital>(){}[0]
        final val TvTimerProgramming // androidx.compose.ui.input.key/Key.Companion.TvTimerProgramming|{}TvTimerProgramming[0]
            final fun <get-TvTimerProgramming>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvTimerProgramming.<get-TvTimerProgramming>|<get-TvTimerProgramming>(){}[0]
        final val TvZoomMode // androidx.compose.ui.input.key/Key.Companion.TvZoomMode|{}TvZoomMode[0]
            final fun <get-TvZoomMode>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.TvZoomMode.<get-TvZoomMode>|<get-TvZoomMode>(){}[0]
        final val Two // androidx.compose.ui.input.key/Key.Companion.Two|{}Two[0]
            final fun <get-Two>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Two.<get-Two>|<get-Two>(){}[0]
        final val U // androidx.compose.ui.input.key/Key.Companion.U|{}U[0]
            final fun <get-U>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.U.<get-U>|<get-U>(){}[0]
        final val Unknown // androidx.compose.ui.input.key/Key.Companion.Unknown|{}Unknown[0]
            final fun <get-Unknown>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Unknown.<get-Unknown>|<get-Unknown>(){}[0]
        final val V // androidx.compose.ui.input.key/Key.Companion.V|{}V[0]
            final fun <get-V>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.V.<get-V>|<get-V>(){}[0]
        final val VoiceAssist // androidx.compose.ui.input.key/Key.Companion.VoiceAssist|{}VoiceAssist[0]
            final fun <get-VoiceAssist>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.VoiceAssist.<get-VoiceAssist>|<get-VoiceAssist>(){}[0]
        final val VolumeDown // androidx.compose.ui.input.key/Key.Companion.VolumeDown|{}VolumeDown[0]
            final fun <get-VolumeDown>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.VolumeDown.<get-VolumeDown>|<get-VolumeDown>(){}[0]
        final val VolumeMute // androidx.compose.ui.input.key/Key.Companion.VolumeMute|{}VolumeMute[0]
            final fun <get-VolumeMute>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.VolumeMute.<get-VolumeMute>|<get-VolumeMute>(){}[0]
        final val VolumeUp // androidx.compose.ui.input.key/Key.Companion.VolumeUp|{}VolumeUp[0]
            final fun <get-VolumeUp>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.VolumeUp.<get-VolumeUp>|<get-VolumeUp>(){}[0]
        final val W // androidx.compose.ui.input.key/Key.Companion.W|{}W[0]
            final fun <get-W>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.W.<get-W>|<get-W>(){}[0]
        final val WakeUp // androidx.compose.ui.input.key/Key.Companion.WakeUp|{}WakeUp[0]
            final fun <get-WakeUp>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.WakeUp.<get-WakeUp>|<get-WakeUp>(){}[0]
        final val Window // androidx.compose.ui.input.key/Key.Companion.Window|{}Window[0]
            final fun <get-Window>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Window.<get-Window>|<get-Window>(){}[0]
        final val X // androidx.compose.ui.input.key/Key.Companion.X|{}X[0]
            final fun <get-X>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.X.<get-X>|<get-X>(){}[0]
        final val Y // androidx.compose.ui.input.key/Key.Companion.Y|{}Y[0]
            final fun <get-Y>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Y.<get-Y>|<get-Y>(){}[0]
        final val Yen // androidx.compose.ui.input.key/Key.Companion.Yen|{}Yen[0]
            final fun <get-Yen>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Yen.<get-Yen>|<get-Yen>(){}[0]
        final val Z // androidx.compose.ui.input.key/Key.Companion.Z|{}Z[0]
            final fun <get-Z>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Z.<get-Z>|<get-Z>(){}[0]
        final val ZenkakuHankaru // androidx.compose.ui.input.key/Key.Companion.ZenkakuHankaru|{}ZenkakuHankaru[0]
            final fun <get-ZenkakuHankaru>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ZenkakuHankaru.<get-ZenkakuHankaru>|<get-ZenkakuHankaru>(){}[0]
        final val Zero // androidx.compose.ui.input.key/Key.Companion.Zero|{}Zero[0]
            final fun <get-Zero>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.Zero.<get-Zero>|<get-Zero>(){}[0]
        final val ZoomIn // androidx.compose.ui.input.key/Key.Companion.ZoomIn|{}ZoomIn[0]
            final fun <get-ZoomIn>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ZoomIn.<get-ZoomIn>|<get-ZoomIn>(){}[0]
        final val ZoomOut // androidx.compose.ui.input.key/Key.Companion.ZoomOut|{}ZoomOut[0]
            final fun <get-ZoomOut>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/Key.Companion.ZoomOut.<get-ZoomOut>|<get-ZoomOut>(){}[0]
    }
}

final value class androidx.compose.ui.input.key/KeyEvent { // androidx.compose.ui.input.key/KeyEvent|null[0]
    constructor <init>(androidx.compose.ui.input.key/NativeKeyEvent) // androidx.compose.ui.input.key/KeyEvent.<init>|<init>(androidx.compose.ui.input.key.NativeKeyEvent){}[0]

    final val nativeKeyEvent // androidx.compose.ui.input.key/KeyEvent.nativeKeyEvent|{}nativeKeyEvent[0]
        final fun <get-nativeKeyEvent>(): androidx.compose.ui.input.key/NativeKeyEvent // androidx.compose.ui.input.key/KeyEvent.nativeKeyEvent.<get-nativeKeyEvent>|<get-nativeKeyEvent>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.input.key/KeyEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.input.key/KeyEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.input.key/KeyEvent.toString|toString(){}[0]
}

final value class androidx.compose.ui.input.key/KeyEventType { // androidx.compose.ui.input.key/KeyEventType|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.input.key/KeyEventType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.input.key/KeyEventType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.input.key/KeyEventType.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.input.key/KeyEventType.Companion|null[0]
        final val KeyDown // androidx.compose.ui.input.key/KeyEventType.Companion.KeyDown|{}KeyDown[0]
            final fun <get-KeyDown>(): androidx.compose.ui.input.key/KeyEventType // androidx.compose.ui.input.key/KeyEventType.Companion.KeyDown.<get-KeyDown>|<get-KeyDown>(){}[0]
        final val KeyUp // androidx.compose.ui.input.key/KeyEventType.Companion.KeyUp|{}KeyUp[0]
            final fun <get-KeyUp>(): androidx.compose.ui.input.key/KeyEventType // androidx.compose.ui.input.key/KeyEventType.Companion.KeyUp.<get-KeyUp>|<get-KeyUp>(){}[0]
        final val Unknown // androidx.compose.ui.input.key/KeyEventType.Companion.Unknown|{}Unknown[0]
            final fun <get-Unknown>(): androidx.compose.ui.input.key/KeyEventType // androidx.compose.ui.input.key/KeyEventType.Companion.Unknown.<get-Unknown>|<get-Unknown>(){}[0]
    }
}

final value class androidx.compose.ui.input.nestedscroll/NestedScrollSource { // androidx.compose.ui.input.nestedscroll/NestedScrollSource|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.input.nestedscroll/NestedScrollSource.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.input.nestedscroll/NestedScrollSource.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.input.nestedscroll/NestedScrollSource.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.input.nestedscroll/NestedScrollSource.Companion|null[0]
        final val Drag // androidx.compose.ui.input.nestedscroll/NestedScrollSource.Companion.Drag|{}Drag[0]
            final fun <get-Drag>(): androidx.compose.ui.input.nestedscroll/NestedScrollSource // androidx.compose.ui.input.nestedscroll/NestedScrollSource.Companion.Drag.<get-Drag>|<get-Drag>(){}[0]
        final val Fling // androidx.compose.ui.input.nestedscroll/NestedScrollSource.Companion.Fling|{}Fling[0]
            final fun <get-Fling>(): androidx.compose.ui.input.nestedscroll/NestedScrollSource // androidx.compose.ui.input.nestedscroll/NestedScrollSource.Companion.Fling.<get-Fling>|<get-Fling>(){}[0]
        final val Relocate // androidx.compose.ui.input.nestedscroll/NestedScrollSource.Companion.Relocate|{}Relocate[0]
            final fun <get-Relocate>(): androidx.compose.ui.input.nestedscroll/NestedScrollSource // androidx.compose.ui.input.nestedscroll/NestedScrollSource.Companion.Relocate.<get-Relocate>|<get-Relocate>(){}[0]
        final val SideEffect // androidx.compose.ui.input.nestedscroll/NestedScrollSource.Companion.SideEffect|{}SideEffect[0]
            final fun <get-SideEffect>(): androidx.compose.ui.input.nestedscroll/NestedScrollSource // androidx.compose.ui.input.nestedscroll/NestedScrollSource.Companion.SideEffect.<get-SideEffect>|<get-SideEffect>(){}[0]
        final val UserInput // androidx.compose.ui.input.nestedscroll/NestedScrollSource.Companion.UserInput|{}UserInput[0]
            final fun <get-UserInput>(): androidx.compose.ui.input.nestedscroll/NestedScrollSource // androidx.compose.ui.input.nestedscroll/NestedScrollSource.Companion.UserInput.<get-UserInput>|<get-UserInput>(){}[0]
        final val Wheel // androidx.compose.ui.input.nestedscroll/NestedScrollSource.Companion.Wheel|{}Wheel[0]
            final fun <get-Wheel>(): androidx.compose.ui.input.nestedscroll/NestedScrollSource // androidx.compose.ui.input.nestedscroll/NestedScrollSource.Companion.Wheel.<get-Wheel>|<get-Wheel>(){}[0]
    }
}

final value class androidx.compose.ui.input.pointer/PointerButtons { // androidx.compose.ui.input.pointer/PointerButtons|null[0]
    constructor <init>(kotlin/Int) // androidx.compose.ui.input.pointer/PointerButtons.<init>|<init>(kotlin.Int){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.input.pointer/PointerButtons.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.input.pointer/PointerButtons.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.input.pointer/PointerButtons.toString|toString(){}[0]
}

final value class androidx.compose.ui.input.pointer/PointerEventType { // androidx.compose.ui.input.pointer/PointerEventType|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.input.pointer/PointerEventType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.input.pointer/PointerEventType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.input.pointer/PointerEventType.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.input.pointer/PointerEventType.Companion|null[0]
        final val Enter // androidx.compose.ui.input.pointer/PointerEventType.Companion.Enter|{}Enter[0]
            final fun <get-Enter>(): androidx.compose.ui.input.pointer/PointerEventType // androidx.compose.ui.input.pointer/PointerEventType.Companion.Enter.<get-Enter>|<get-Enter>(){}[0]
        final val Exit // androidx.compose.ui.input.pointer/PointerEventType.Companion.Exit|{}Exit[0]
            final fun <get-Exit>(): androidx.compose.ui.input.pointer/PointerEventType // androidx.compose.ui.input.pointer/PointerEventType.Companion.Exit.<get-Exit>|<get-Exit>(){}[0]
        final val Move // androidx.compose.ui.input.pointer/PointerEventType.Companion.Move|{}Move[0]
            final fun <get-Move>(): androidx.compose.ui.input.pointer/PointerEventType // androidx.compose.ui.input.pointer/PointerEventType.Companion.Move.<get-Move>|<get-Move>(){}[0]
        final val Press // androidx.compose.ui.input.pointer/PointerEventType.Companion.Press|{}Press[0]
            final fun <get-Press>(): androidx.compose.ui.input.pointer/PointerEventType // androidx.compose.ui.input.pointer/PointerEventType.Companion.Press.<get-Press>|<get-Press>(){}[0]
        final val Release // androidx.compose.ui.input.pointer/PointerEventType.Companion.Release|{}Release[0]
            final fun <get-Release>(): androidx.compose.ui.input.pointer/PointerEventType // androidx.compose.ui.input.pointer/PointerEventType.Companion.Release.<get-Release>|<get-Release>(){}[0]
        final val Scroll // androidx.compose.ui.input.pointer/PointerEventType.Companion.Scroll|{}Scroll[0]
            final fun <get-Scroll>(): androidx.compose.ui.input.pointer/PointerEventType // androidx.compose.ui.input.pointer/PointerEventType.Companion.Scroll.<get-Scroll>|<get-Scroll>(){}[0]
        final val Unknown // androidx.compose.ui.input.pointer/PointerEventType.Companion.Unknown|{}Unknown[0]
            final fun <get-Unknown>(): androidx.compose.ui.input.pointer/PointerEventType // androidx.compose.ui.input.pointer/PointerEventType.Companion.Unknown.<get-Unknown>|<get-Unknown>(){}[0]
    }
}

final value class androidx.compose.ui.input.pointer/PointerId { // androidx.compose.ui.input.pointer/PointerId|null[0]
    constructor <init>(kotlin/Long) // androidx.compose.ui.input.pointer/PointerId.<init>|<init>(kotlin.Long){}[0]

    final val value // androidx.compose.ui.input.pointer/PointerId.value|{}value[0]
        final fun <get-value>(): kotlin/Long // androidx.compose.ui.input.pointer/PointerId.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.input.pointer/PointerId.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.input.pointer/PointerId.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.input.pointer/PointerId.toString|toString(){}[0]
}

final value class androidx.compose.ui.input.pointer/PointerKeyboardModifiers { // androidx.compose.ui.input.pointer/PointerKeyboardModifiers|null[0]
    constructor <init>(kotlin/Int) // androidx.compose.ui.input.pointer/PointerKeyboardModifiers.<init>|<init>(kotlin.Int){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.input.pointer/PointerKeyboardModifiers.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.input.pointer/PointerKeyboardModifiers.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.input.pointer/PointerKeyboardModifiers.toString|toString(){}[0]
}

final value class androidx.compose.ui.input.pointer/PointerType { // androidx.compose.ui.input.pointer/PointerType|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.input.pointer/PointerType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.input.pointer/PointerType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.input.pointer/PointerType.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.input.pointer/PointerType.Companion|null[0]
        final val Eraser // androidx.compose.ui.input.pointer/PointerType.Companion.Eraser|{}Eraser[0]
            final fun <get-Eraser>(): androidx.compose.ui.input.pointer/PointerType // androidx.compose.ui.input.pointer/PointerType.Companion.Eraser.<get-Eraser>|<get-Eraser>(){}[0]
        final val Mouse // androidx.compose.ui.input.pointer/PointerType.Companion.Mouse|{}Mouse[0]
            final fun <get-Mouse>(): androidx.compose.ui.input.pointer/PointerType // androidx.compose.ui.input.pointer/PointerType.Companion.Mouse.<get-Mouse>|<get-Mouse>(){}[0]
        final val Stylus // androidx.compose.ui.input.pointer/PointerType.Companion.Stylus|{}Stylus[0]
            final fun <get-Stylus>(): androidx.compose.ui.input.pointer/PointerType // androidx.compose.ui.input.pointer/PointerType.Companion.Stylus.<get-Stylus>|<get-Stylus>(){}[0]
        final val Touch // androidx.compose.ui.input.pointer/PointerType.Companion.Touch|{}Touch[0]
            final fun <get-Touch>(): androidx.compose.ui.input.pointer/PointerType // androidx.compose.ui.input.pointer/PointerType.Companion.Touch.<get-Touch>|<get-Touch>(){}[0]
        final val Unknown // androidx.compose.ui.input.pointer/PointerType.Companion.Unknown|{}Unknown[0]
            final fun <get-Unknown>(): androidx.compose.ui.input.pointer/PointerType // androidx.compose.ui.input.pointer/PointerType.Companion.Unknown.<get-Unknown>|<get-Unknown>(){}[0]
    }
}

final value class androidx.compose.ui.input/InputMode { // androidx.compose.ui.input/InputMode|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.input/InputMode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.input/InputMode.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.input/InputMode.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.input/InputMode.Companion|null[0]
        final val Keyboard // androidx.compose.ui.input/InputMode.Companion.Keyboard|{}Keyboard[0]
            final fun <get-Keyboard>(): androidx.compose.ui.input/InputMode // androidx.compose.ui.input/InputMode.Companion.Keyboard.<get-Keyboard>|<get-Keyboard>(){}[0]
        final val Touch // androidx.compose.ui.input/InputMode.Companion.Touch|{}Touch[0]
            final fun <get-Touch>(): androidx.compose.ui.input/InputMode // androidx.compose.ui.input/InputMode.Companion.Touch.<get-Touch>|<get-Touch>(){}[0]
    }
}

final value class androidx.compose.ui.layout/ScaleFactor { // androidx.compose.ui.layout/ScaleFactor|null[0]
    constructor <init>(kotlin/Long) // androidx.compose.ui.layout/ScaleFactor.<init>|<init>(kotlin.Long){}[0]

    final val packedValue // androidx.compose.ui.layout/ScaleFactor.packedValue|{}packedValue[0]
        final fun <get-packedValue>(): kotlin/Long // androidx.compose.ui.layout/ScaleFactor.packedValue.<get-packedValue>|<get-packedValue>(){}[0]
    final val scaleX // androidx.compose.ui.layout/ScaleFactor.scaleX|{}scaleX[0]
        final inline fun <get-scaleX>(): kotlin/Float // androidx.compose.ui.layout/ScaleFactor.scaleX.<get-scaleX>|<get-scaleX>(){}[0]
    final val scaleY // androidx.compose.ui.layout/ScaleFactor.scaleY|{}scaleY[0]
        final inline fun <get-scaleY>(): kotlin/Float // androidx.compose.ui.layout/ScaleFactor.scaleY.<get-scaleY>|<get-scaleY>(){}[0]

    final fun copy(kotlin/Float = ..., kotlin/Float = ...): androidx.compose.ui.layout/ScaleFactor // androidx.compose.ui.layout/ScaleFactor.copy|copy(kotlin.Float;kotlin.Float){}[0]
    final fun div(kotlin/Float): androidx.compose.ui.layout/ScaleFactor // androidx.compose.ui.layout/ScaleFactor.div|div(kotlin.Float){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.layout/ScaleFactor.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.layout/ScaleFactor.hashCode|hashCode(){}[0]
    final fun times(kotlin/Float): androidx.compose.ui.layout/ScaleFactor // androidx.compose.ui.layout/ScaleFactor.times|times(kotlin.Float){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.layout/ScaleFactor.toString|toString(){}[0]
    final inline fun component1(): kotlin/Float // androidx.compose.ui.layout/ScaleFactor.component1|component1(){}[0]
    final inline fun component2(): kotlin/Float // androidx.compose.ui.layout/ScaleFactor.component2|component2(){}[0]

    final object Companion { // androidx.compose.ui.layout/ScaleFactor.Companion|null[0]
        final val Unspecified // androidx.compose.ui.layout/ScaleFactor.Companion.Unspecified|{}Unspecified[0]
            final fun <get-Unspecified>(): androidx.compose.ui.layout/ScaleFactor // androidx.compose.ui.layout/ScaleFactor.Companion.Unspecified.<get-Unspecified>|<get-Unspecified>(){}[0]
    }
}

final value class androidx.compose.ui.node/TouchBoundsExpansion { // androidx.compose.ui.node/TouchBoundsExpansion|null[0]
    final val bottom // androidx.compose.ui.node/TouchBoundsExpansion.bottom|{}bottom[0]
        final fun <get-bottom>(): kotlin/Int // androidx.compose.ui.node/TouchBoundsExpansion.bottom.<get-bottom>|<get-bottom>(){}[0]
    final val end // androidx.compose.ui.node/TouchBoundsExpansion.end|{}end[0]
        final fun <get-end>(): kotlin/Int // androidx.compose.ui.node/TouchBoundsExpansion.end.<get-end>|<get-end>(){}[0]
    final val isLayoutDirectionAware // androidx.compose.ui.node/TouchBoundsExpansion.isLayoutDirectionAware|{}isLayoutDirectionAware[0]
        final fun <get-isLayoutDirectionAware>(): kotlin/Boolean // androidx.compose.ui.node/TouchBoundsExpansion.isLayoutDirectionAware.<get-isLayoutDirectionAware>|<get-isLayoutDirectionAware>(){}[0]
    final val start // androidx.compose.ui.node/TouchBoundsExpansion.start|{}start[0]
        final fun <get-start>(): kotlin/Int // androidx.compose.ui.node/TouchBoundsExpansion.start.<get-start>|<get-start>(){}[0]
    final val top // androidx.compose.ui.node/TouchBoundsExpansion.top|{}top[0]
        final fun <get-top>(): kotlin/Int // androidx.compose.ui.node/TouchBoundsExpansion.top.<get-top>|<get-top>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.node/TouchBoundsExpansion.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.node/TouchBoundsExpansion.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.node/TouchBoundsExpansion.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.node/TouchBoundsExpansion.Companion|null[0]
        final val None // androidx.compose.ui.node/TouchBoundsExpansion.Companion.None|{}None[0]
            final fun <get-None>(): androidx.compose.ui.node/TouchBoundsExpansion // androidx.compose.ui.node/TouchBoundsExpansion.Companion.None.<get-None>|<get-None>(){}[0]

        final fun Absolute(kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): androidx.compose.ui.node/TouchBoundsExpansion // androidx.compose.ui.node/TouchBoundsExpansion.Companion.Absolute|Absolute(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    }
}

final value class androidx.compose.ui.semantics/LiveRegionMode { // androidx.compose.ui.semantics/LiveRegionMode|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.semantics/LiveRegionMode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.semantics/LiveRegionMode.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.semantics/LiveRegionMode.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.semantics/LiveRegionMode.Companion|null[0]
        final val Assertive // androidx.compose.ui.semantics/LiveRegionMode.Companion.Assertive|{}Assertive[0]
            final fun <get-Assertive>(): androidx.compose.ui.semantics/LiveRegionMode // androidx.compose.ui.semantics/LiveRegionMode.Companion.Assertive.<get-Assertive>|<get-Assertive>(){}[0]
        final val Polite // androidx.compose.ui.semantics/LiveRegionMode.Companion.Polite|{}Polite[0]
            final fun <get-Polite>(): androidx.compose.ui.semantics/LiveRegionMode // androidx.compose.ui.semantics/LiveRegionMode.Companion.Polite.<get-Polite>|<get-Polite>(){}[0]
    }
}

final value class androidx.compose.ui.semantics/Role { // androidx.compose.ui.semantics/Role|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.semantics/Role.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.semantics/Role.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.semantics/Role.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.semantics/Role.Companion|null[0]
        final val Button // androidx.compose.ui.semantics/Role.Companion.Button|{}Button[0]
            final fun <get-Button>(): androidx.compose.ui.semantics/Role // androidx.compose.ui.semantics/Role.Companion.Button.<get-Button>|<get-Button>(){}[0]
        final val Carousel // androidx.compose.ui.semantics/Role.Companion.Carousel|{}Carousel[0]
            final fun <get-Carousel>(): androidx.compose.ui.semantics/Role // androidx.compose.ui.semantics/Role.Companion.Carousel.<get-Carousel>|<get-Carousel>(){}[0]
        final val Checkbox // androidx.compose.ui.semantics/Role.Companion.Checkbox|{}Checkbox[0]
            final fun <get-Checkbox>(): androidx.compose.ui.semantics/Role // androidx.compose.ui.semantics/Role.Companion.Checkbox.<get-Checkbox>|<get-Checkbox>(){}[0]
        final val DropdownList // androidx.compose.ui.semantics/Role.Companion.DropdownList|{}DropdownList[0]
            final fun <get-DropdownList>(): androidx.compose.ui.semantics/Role // androidx.compose.ui.semantics/Role.Companion.DropdownList.<get-DropdownList>|<get-DropdownList>(){}[0]
        final val Image // androidx.compose.ui.semantics/Role.Companion.Image|{}Image[0]
            final fun <get-Image>(): androidx.compose.ui.semantics/Role // androidx.compose.ui.semantics/Role.Companion.Image.<get-Image>|<get-Image>(){}[0]
        final val RadioButton // androidx.compose.ui.semantics/Role.Companion.RadioButton|{}RadioButton[0]
            final fun <get-RadioButton>(): androidx.compose.ui.semantics/Role // androidx.compose.ui.semantics/Role.Companion.RadioButton.<get-RadioButton>|<get-RadioButton>(){}[0]
        final val Switch // androidx.compose.ui.semantics/Role.Companion.Switch|{}Switch[0]
            final fun <get-Switch>(): androidx.compose.ui.semantics/Role // androidx.compose.ui.semantics/Role.Companion.Switch.<get-Switch>|<get-Switch>(){}[0]
        final val Tab // androidx.compose.ui.semantics/Role.Companion.Tab|{}Tab[0]
            final fun <get-Tab>(): androidx.compose.ui.semantics/Role // androidx.compose.ui.semantics/Role.Companion.Tab.<get-Tab>|<get-Tab>(){}[0]
        final val ValuePicker // androidx.compose.ui.semantics/Role.Companion.ValuePicker|{}ValuePicker[0]
            final fun <get-ValuePicker>(): androidx.compose.ui.semantics/Role // androidx.compose.ui.semantics/Role.Companion.ValuePicker.<get-ValuePicker>|<get-ValuePicker>(){}[0]
    }
}

final value class androidx.compose.ui.ui/FrameRateCategory { // androidx.compose.ui.ui/FrameRateCategory|null[0]
    final val value // androidx.compose.ui.ui/FrameRateCategory.value|{}value[0]
        final fun <get-value>(): kotlin/Float // androidx.compose.ui.ui/FrameRateCategory.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.ui.ui/FrameRateCategory.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.ui.ui/FrameRateCategory.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.ui.ui/FrameRateCategory.toString|toString(){}[0]

    final object Companion { // androidx.compose.ui.ui/FrameRateCategory.Companion|null[0]
        final val Default // androidx.compose.ui.ui/FrameRateCategory.Companion.Default|{}Default[0]
            final fun <get-Default>(): androidx.compose.ui.ui/FrameRateCategory // androidx.compose.ui.ui/FrameRateCategory.Companion.Default.<get-Default>|<get-Default>(){}[0]
        final val High // androidx.compose.ui.ui/FrameRateCategory.Companion.High|{}High[0]
            final fun <get-High>(): androidx.compose.ui.ui/FrameRateCategory // androidx.compose.ui.ui/FrameRateCategory.Companion.High.<get-High>|<get-High>(){}[0]
        final val NoPreference // androidx.compose.ui.ui/FrameRateCategory.Companion.NoPreference|{}NoPreference[0]
            final fun <get-NoPreference>(): androidx.compose.ui.ui/FrameRateCategory // androidx.compose.ui.ui/FrameRateCategory.Companion.NoPreference.<get-NoPreference>|<get-NoPreference>(){}[0]
        final val Normal // androidx.compose.ui.ui/FrameRateCategory.Companion.Normal|{}Normal[0]
            final fun <get-Normal>(): androidx.compose.ui.ui/FrameRateCategory // androidx.compose.ui.ui/FrameRateCategory.Companion.Normal.<get-Normal>|<get-Normal>(){}[0]
    }
}

sealed class <#A: kotlin/Any?> androidx.compose.ui.graphics.vector/VectorProperty { // androidx.compose.ui.graphics.vector/VectorProperty|null[0]
    final object Fill : androidx.compose.ui.graphics.vector/VectorProperty<androidx.compose.ui.graphics/Brush?> // androidx.compose.ui.graphics.vector/VectorProperty.Fill|null[0]

    final object FillAlpha : androidx.compose.ui.graphics.vector/VectorProperty<kotlin/Float> // androidx.compose.ui.graphics.vector/VectorProperty.FillAlpha|null[0]

    final object PathData : androidx.compose.ui.graphics.vector/VectorProperty<kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode>> // androidx.compose.ui.graphics.vector/VectorProperty.PathData|null[0]

    final object PivotX : androidx.compose.ui.graphics.vector/VectorProperty<kotlin/Float> // androidx.compose.ui.graphics.vector/VectorProperty.PivotX|null[0]

    final object PivotY : androidx.compose.ui.graphics.vector/VectorProperty<kotlin/Float> // androidx.compose.ui.graphics.vector/VectorProperty.PivotY|null[0]

    final object Rotation : androidx.compose.ui.graphics.vector/VectorProperty<kotlin/Float> // androidx.compose.ui.graphics.vector/VectorProperty.Rotation|null[0]

    final object ScaleX : androidx.compose.ui.graphics.vector/VectorProperty<kotlin/Float> // androidx.compose.ui.graphics.vector/VectorProperty.ScaleX|null[0]

    final object ScaleY : androidx.compose.ui.graphics.vector/VectorProperty<kotlin/Float> // androidx.compose.ui.graphics.vector/VectorProperty.ScaleY|null[0]

    final object Stroke : androidx.compose.ui.graphics.vector/VectorProperty<androidx.compose.ui.graphics/Brush?> // androidx.compose.ui.graphics.vector/VectorProperty.Stroke|null[0]

    final object StrokeAlpha : androidx.compose.ui.graphics.vector/VectorProperty<kotlin/Float> // androidx.compose.ui.graphics.vector/VectorProperty.StrokeAlpha|null[0]

    final object StrokeLineWidth : androidx.compose.ui.graphics.vector/VectorProperty<kotlin/Float> // androidx.compose.ui.graphics.vector/VectorProperty.StrokeLineWidth|null[0]

    final object TranslateX : androidx.compose.ui.graphics.vector/VectorProperty<kotlin/Float> // androidx.compose.ui.graphics.vector/VectorProperty.TranslateX|null[0]

    final object TranslateY : androidx.compose.ui.graphics.vector/VectorProperty<kotlin/Float> // androidx.compose.ui.graphics.vector/VectorProperty.TranslateY|null[0]

    final object TrimPathEnd : androidx.compose.ui.graphics.vector/VectorProperty<kotlin/Float> // androidx.compose.ui.graphics.vector/VectorProperty.TrimPathEnd|null[0]

    final object TrimPathOffset : androidx.compose.ui.graphics.vector/VectorProperty<kotlin/Float> // androidx.compose.ui.graphics.vector/VectorProperty.TrimPathOffset|null[0]

    final object TrimPathStart : androidx.compose.ui.graphics.vector/VectorProperty<kotlin/Float> // androidx.compose.ui.graphics.vector/VectorProperty.TrimPathStart|null[0]
}

sealed class <#A: kotlin/Any?> androidx.compose.ui.modifier/ModifierLocal // androidx.compose.ui.modifier/ModifierLocal|null[0]

sealed class androidx.compose.ui.graphics.vector/VNode { // androidx.compose.ui.graphics.vector/VNode|null[0]
    abstract fun (androidx.compose.ui.graphics.drawscope/DrawScope).draw() // androidx.compose.ui.graphics.vector/VNode.draw|draw@androidx.compose.ui.graphics.drawscope.DrawScope(){}[0]
    final fun invalidate() // androidx.compose.ui.graphics.vector/VNode.invalidate|invalidate(){}[0]
}

sealed class androidx.compose.ui.graphics.vector/VectorNode // androidx.compose.ui.graphics.vector/VectorNode|null[0]

sealed class androidx.compose.ui.layout/AlignmentLine { // androidx.compose.ui.layout/AlignmentLine|null[0]
    final object Companion { // androidx.compose.ui.layout/AlignmentLine.Companion|null[0]
        final const val Unspecified // androidx.compose.ui.layout/AlignmentLine.Companion.Unspecified|{}Unspecified[0]
            final fun <get-Unspecified>(): kotlin/Int // androidx.compose.ui.layout/AlignmentLine.Companion.Unspecified.<get-Unspecified>|<get-Unspecified>(){}[0]
    }
}

sealed class androidx.compose.ui.layout/Ruler // androidx.compose.ui.layout/Ruler|null[0]

sealed class androidx.compose.ui.modifier/ModifierLocalMap // androidx.compose.ui.modifier/ModifierLocalMap|null[0]

final object androidx.compose.ui.semantics/SemanticsActions { // androidx.compose.ui.semantics/SemanticsActions|null[0]
    final val ClearTextSubstitution // androidx.compose.ui.semantics/SemanticsActions.ClearTextSubstitution|{}ClearTextSubstitution[0]
        final fun <get-ClearTextSubstitution>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.ClearTextSubstitution.<get-ClearTextSubstitution>|<get-ClearTextSubstitution>(){}[0]
    final val Collapse // androidx.compose.ui.semantics/SemanticsActions.Collapse|{}Collapse[0]
        final fun <get-Collapse>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.Collapse.<get-Collapse>|<get-Collapse>(){}[0]
    final val CopyText // androidx.compose.ui.semantics/SemanticsActions.CopyText|{}CopyText[0]
        final fun <get-CopyText>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.CopyText.<get-CopyText>|<get-CopyText>(){}[0]
    final val CustomActions // androidx.compose.ui.semantics/SemanticsActions.CustomActions|{}CustomActions[0]
        final fun <get-CustomActions>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin.collections/List<androidx.compose.ui.semantics/CustomAccessibilityAction>> // androidx.compose.ui.semantics/SemanticsActions.CustomActions.<get-CustomActions>|<get-CustomActions>(){}[0]
    final val CutText // androidx.compose.ui.semantics/SemanticsActions.CutText|{}CutText[0]
        final fun <get-CutText>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.CutText.<get-CutText>|<get-CutText>(){}[0]
    final val Dismiss // androidx.compose.ui.semantics/SemanticsActions.Dismiss|{}Dismiss[0]
        final fun <get-Dismiss>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.Dismiss.<get-Dismiss>|<get-Dismiss>(){}[0]
    final val Expand // androidx.compose.ui.semantics/SemanticsActions.Expand|{}Expand[0]
        final fun <get-Expand>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.Expand.<get-Expand>|<get-Expand>(){}[0]
    final val GetScrollViewportLength // androidx.compose.ui.semantics/SemanticsActions.GetScrollViewportLength|{}GetScrollViewportLength[0]
        final fun <get-GetScrollViewportLength>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function1<kotlin.collections/MutableList<kotlin/Float>, kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.GetScrollViewportLength.<get-GetScrollViewportLength>|<get-GetScrollViewportLength>(){}[0]
    final val GetTextLayoutResult // androidx.compose.ui.semantics/SemanticsActions.GetTextLayoutResult|{}GetTextLayoutResult[0]
        final fun <get-GetTextLayoutResult>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function1<kotlin.collections/MutableList<androidx.compose.ui.text/TextLayoutResult>, kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.GetTextLayoutResult.<get-GetTextLayoutResult>|<get-GetTextLayoutResult>(){}[0]
    final val InsertTextAtCursor // androidx.compose.ui.semantics/SemanticsActions.InsertTextAtCursor|{}InsertTextAtCursor[0]
        final fun <get-InsertTextAtCursor>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function1<androidx.compose.ui.text/AnnotatedString, kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.InsertTextAtCursor.<get-InsertTextAtCursor>|<get-InsertTextAtCursor>(){}[0]
    final val OnAutofillText // androidx.compose.ui.semantics/SemanticsActions.OnAutofillText|{}OnAutofillText[0]
        final fun <get-OnAutofillText>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function1<androidx.compose.ui.text/AnnotatedString, kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.OnAutofillText.<get-OnAutofillText>|<get-OnAutofillText>(){}[0]
    final val OnClick // androidx.compose.ui.semantics/SemanticsActions.OnClick|{}OnClick[0]
        final fun <get-OnClick>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.OnClick.<get-OnClick>|<get-OnClick>(){}[0]
    final val OnImeAction // androidx.compose.ui.semantics/SemanticsActions.OnImeAction|{}OnImeAction[0]
        final fun <get-OnImeAction>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.OnImeAction.<get-OnImeAction>|<get-OnImeAction>(){}[0]
    final val OnLongClick // androidx.compose.ui.semantics/SemanticsActions.OnLongClick|{}OnLongClick[0]
        final fun <get-OnLongClick>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.OnLongClick.<get-OnLongClick>|<get-OnLongClick>(){}[0]
    final val PageDown // androidx.compose.ui.semantics/SemanticsActions.PageDown|{}PageDown[0]
        final fun <get-PageDown>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.PageDown.<get-PageDown>|<get-PageDown>(){}[0]
    final val PageLeft // androidx.compose.ui.semantics/SemanticsActions.PageLeft|{}PageLeft[0]
        final fun <get-PageLeft>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.PageLeft.<get-PageLeft>|<get-PageLeft>(){}[0]
    final val PageRight // androidx.compose.ui.semantics/SemanticsActions.PageRight|{}PageRight[0]
        final fun <get-PageRight>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.PageRight.<get-PageRight>|<get-PageRight>(){}[0]
    final val PageUp // androidx.compose.ui.semantics/SemanticsActions.PageUp|{}PageUp[0]
        final fun <get-PageUp>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.PageUp.<get-PageUp>|<get-PageUp>(){}[0]
    final val PasteText // androidx.compose.ui.semantics/SemanticsActions.PasteText|{}PasteText[0]
        final fun <get-PasteText>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.PasteText.<get-PasteText>|<get-PasteText>(){}[0]
    final val PerformImeAction // androidx.compose.ui.semantics/SemanticsActions.PerformImeAction|{}PerformImeAction[0]
        final fun <get-PerformImeAction>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.PerformImeAction.<get-PerformImeAction>|<get-PerformImeAction>(){}[0]
    final val RequestFocus // androidx.compose.ui.semantics/SemanticsActions.RequestFocus|{}RequestFocus[0]
        final fun <get-RequestFocus>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function0<kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.RequestFocus.<get-RequestFocus>|<get-RequestFocus>(){}[0]
    final val ScrollBy // androidx.compose.ui.semantics/SemanticsActions.ScrollBy|{}ScrollBy[0]
        final fun <get-ScrollBy>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function2<kotlin/Float, kotlin/Float, kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.ScrollBy.<get-ScrollBy>|<get-ScrollBy>(){}[0]
    final val ScrollByOffset // androidx.compose.ui.semantics/SemanticsActions.ScrollByOffset|{}ScrollByOffset[0]
        final fun <get-ScrollByOffset>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin.coroutines/SuspendFunction1<androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Offset>> // androidx.compose.ui.semantics/SemanticsActions.ScrollByOffset.<get-ScrollByOffset>|<get-ScrollByOffset>(){}[0]
    final val ScrollToIndex // androidx.compose.ui.semantics/SemanticsActions.ScrollToIndex|{}ScrollToIndex[0]
        final fun <get-ScrollToIndex>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function1<kotlin/Int, kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.ScrollToIndex.<get-ScrollToIndex>|<get-ScrollToIndex>(){}[0]
    final val SetProgress // androidx.compose.ui.semantics/SemanticsActions.SetProgress|{}SetProgress[0]
        final fun <get-SetProgress>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function1<kotlin/Float, kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.SetProgress.<get-SetProgress>|<get-SetProgress>(){}[0]
    final val SetSelection // androidx.compose.ui.semantics/SemanticsActions.SetSelection|{}SetSelection[0]
        final fun <get-SetSelection>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function3<kotlin/Int, kotlin/Int, kotlin/Boolean, kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.SetSelection.<get-SetSelection>|<get-SetSelection>(){}[0]
    final val SetText // androidx.compose.ui.semantics/SemanticsActions.SetText|{}SetText[0]
        final fun <get-SetText>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function1<androidx.compose.ui.text/AnnotatedString, kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.SetText.<get-SetText>|<get-SetText>(){}[0]
    final val SetTextSubstitution // androidx.compose.ui.semantics/SemanticsActions.SetTextSubstitution|{}SetTextSubstitution[0]
        final fun <get-SetTextSubstitution>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function1<androidx.compose.ui.text/AnnotatedString, kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.SetTextSubstitution.<get-SetTextSubstitution>|<get-SetTextSubstitution>(){}[0]
    final val ShowTextSubstitution // androidx.compose.ui.semantics/SemanticsActions.ShowTextSubstitution|{}ShowTextSubstitution[0]
        final fun <get-ShowTextSubstitution>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/AccessibilityAction<kotlin/Function1<kotlin/Boolean, kotlin/Boolean>>> // androidx.compose.ui.semantics/SemanticsActions.ShowTextSubstitution.<get-ShowTextSubstitution>|<get-ShowTextSubstitution>(){}[0]
}

final object androidx.compose.ui.semantics/SemanticsProperties { // androidx.compose.ui.semantics/SemanticsProperties|null[0]
    final val CollectionInfo // androidx.compose.ui.semantics/SemanticsProperties.CollectionInfo|{}CollectionInfo[0]
        final fun <get-CollectionInfo>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/CollectionInfo> // androidx.compose.ui.semantics/SemanticsProperties.CollectionInfo.<get-CollectionInfo>|<get-CollectionInfo>(){}[0]
    final val CollectionItemInfo // androidx.compose.ui.semantics/SemanticsProperties.CollectionItemInfo|{}CollectionItemInfo[0]
        final fun <get-CollectionItemInfo>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/CollectionItemInfo> // androidx.compose.ui.semantics/SemanticsProperties.CollectionItemInfo.<get-CollectionItemInfo>|<get-CollectionItemInfo>(){}[0]
    final val ContentDataType // androidx.compose.ui.semantics/SemanticsProperties.ContentDataType|{}ContentDataType[0]
        final fun <get-ContentDataType>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.autofill/ContentDataType> // androidx.compose.ui.semantics/SemanticsProperties.ContentDataType.<get-ContentDataType>|<get-ContentDataType>(){}[0]
    final val ContentDescription // androidx.compose.ui.semantics/SemanticsProperties.ContentDescription|{}ContentDescription[0]
        final fun <get-ContentDescription>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin.collections/List<kotlin/String>> // androidx.compose.ui.semantics/SemanticsProperties.ContentDescription.<get-ContentDescription>|<get-ContentDescription>(){}[0]
    final val ContentType // androidx.compose.ui.semantics/SemanticsProperties.ContentType|{}ContentType[0]
        final fun <get-ContentType>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.autofill/ContentType> // androidx.compose.ui.semantics/SemanticsProperties.ContentType.<get-ContentType>|<get-ContentType>(){}[0]
    final val Disabled // androidx.compose.ui.semantics/SemanticsProperties.Disabled|{}Disabled[0]
        final fun <get-Disabled>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Unit> // androidx.compose.ui.semantics/SemanticsProperties.Disabled.<get-Disabled>|<get-Disabled>(){}[0]
    final val EditableText // androidx.compose.ui.semantics/SemanticsProperties.EditableText|{}EditableText[0]
        final fun <get-EditableText>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.text/AnnotatedString> // androidx.compose.ui.semantics/SemanticsProperties.EditableText.<get-EditableText>|<get-EditableText>(){}[0]
    final val Error // androidx.compose.ui.semantics/SemanticsProperties.Error|{}Error[0]
        final fun <get-Error>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/String> // androidx.compose.ui.semantics/SemanticsProperties.Error.<get-Error>|<get-Error>(){}[0]
    final val Focused // androidx.compose.ui.semantics/SemanticsProperties.Focused|{}Focused[0]
        final fun <get-Focused>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Boolean> // androidx.compose.ui.semantics/SemanticsProperties.Focused.<get-Focused>|<get-Focused>(){}[0]
    final val Heading // androidx.compose.ui.semantics/SemanticsProperties.Heading|{}Heading[0]
        final fun <get-Heading>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Unit> // androidx.compose.ui.semantics/SemanticsProperties.Heading.<get-Heading>|<get-Heading>(){}[0]
    final val HideFromAccessibility // androidx.compose.ui.semantics/SemanticsProperties.HideFromAccessibility|{}HideFromAccessibility[0]
        final fun <get-HideFromAccessibility>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Unit> // androidx.compose.ui.semantics/SemanticsProperties.HideFromAccessibility.<get-HideFromAccessibility>|<get-HideFromAccessibility>(){}[0]
    final val HorizontalScrollAxisRange // androidx.compose.ui.semantics/SemanticsProperties.HorizontalScrollAxisRange|{}HorizontalScrollAxisRange[0]
        final fun <get-HorizontalScrollAxisRange>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/ScrollAxisRange> // androidx.compose.ui.semantics/SemanticsProperties.HorizontalScrollAxisRange.<get-HorizontalScrollAxisRange>|<get-HorizontalScrollAxisRange>(){}[0]
    final val ImeAction // androidx.compose.ui.semantics/SemanticsProperties.ImeAction|{}ImeAction[0]
        final fun <get-ImeAction>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.text.input/ImeAction> // androidx.compose.ui.semantics/SemanticsProperties.ImeAction.<get-ImeAction>|<get-ImeAction>(){}[0]
    final val IndexForKey // androidx.compose.ui.semantics/SemanticsProperties.IndexForKey|{}IndexForKey[0]
        final fun <get-IndexForKey>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Function1<kotlin/Any, kotlin/Int>> // androidx.compose.ui.semantics/SemanticsProperties.IndexForKey.<get-IndexForKey>|<get-IndexForKey>(){}[0]
    final val InputText // androidx.compose.ui.semantics/SemanticsProperties.InputText|{}InputText[0]
        final fun <get-InputText>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.text/AnnotatedString> // androidx.compose.ui.semantics/SemanticsProperties.InputText.<get-InputText>|<get-InputText>(){}[0]
    final val InvisibleToUser // androidx.compose.ui.semantics/SemanticsProperties.InvisibleToUser|{}InvisibleToUser[0]
        final fun <get-InvisibleToUser>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Unit> // androidx.compose.ui.semantics/SemanticsProperties.InvisibleToUser.<get-InvisibleToUser>|<get-InvisibleToUser>(){}[0]
    final val IsContainer // androidx.compose.ui.semantics/SemanticsProperties.IsContainer|{}IsContainer[0]
        final fun <get-IsContainer>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Boolean> // androidx.compose.ui.semantics/SemanticsProperties.IsContainer.<get-IsContainer>|<get-IsContainer>(){}[0]
    final val IsDialog // androidx.compose.ui.semantics/SemanticsProperties.IsDialog|{}IsDialog[0]
        final fun <get-IsDialog>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Unit> // androidx.compose.ui.semantics/SemanticsProperties.IsDialog.<get-IsDialog>|<get-IsDialog>(){}[0]
    final val IsEditable // androidx.compose.ui.semantics/SemanticsProperties.IsEditable|{}IsEditable[0]
        final fun <get-IsEditable>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Boolean> // androidx.compose.ui.semantics/SemanticsProperties.IsEditable.<get-IsEditable>|<get-IsEditable>(){}[0]
    final val IsPopup // androidx.compose.ui.semantics/SemanticsProperties.IsPopup|{}IsPopup[0]
        final fun <get-IsPopup>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Unit> // androidx.compose.ui.semantics/SemanticsProperties.IsPopup.<get-IsPopup>|<get-IsPopup>(){}[0]
    final val IsSensitiveData // androidx.compose.ui.semantics/SemanticsProperties.IsSensitiveData|{}IsSensitiveData[0]
        final fun <get-IsSensitiveData>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Boolean> // androidx.compose.ui.semantics/SemanticsProperties.IsSensitiveData.<get-IsSensitiveData>|<get-IsSensitiveData>(){}[0]
    final val IsShowingTextSubstitution // androidx.compose.ui.semantics/SemanticsProperties.IsShowingTextSubstitution|{}IsShowingTextSubstitution[0]
        final fun <get-IsShowingTextSubstitution>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Boolean> // androidx.compose.ui.semantics/SemanticsProperties.IsShowingTextSubstitution.<get-IsShowingTextSubstitution>|<get-IsShowingTextSubstitution>(){}[0]
    final val IsTraversalGroup // androidx.compose.ui.semantics/SemanticsProperties.IsTraversalGroup|{}IsTraversalGroup[0]
        final fun <get-IsTraversalGroup>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Boolean> // androidx.compose.ui.semantics/SemanticsProperties.IsTraversalGroup.<get-IsTraversalGroup>|<get-IsTraversalGroup>(){}[0]
    final val LinkTestMarker // androidx.compose.ui.semantics/SemanticsProperties.LinkTestMarker|{}LinkTestMarker[0]
        final fun <get-LinkTestMarker>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Unit> // androidx.compose.ui.semantics/SemanticsProperties.LinkTestMarker.<get-LinkTestMarker>|<get-LinkTestMarker>(){}[0]
    final val LiveRegion // androidx.compose.ui.semantics/SemanticsProperties.LiveRegion|{}LiveRegion[0]
        final fun <get-LiveRegion>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/LiveRegionMode> // androidx.compose.ui.semantics/SemanticsProperties.LiveRegion.<get-LiveRegion>|<get-LiveRegion>(){}[0]
    final val MaxTextLength // androidx.compose.ui.semantics/SemanticsProperties.MaxTextLength|{}MaxTextLength[0]
        final fun <get-MaxTextLength>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Int> // androidx.compose.ui.semantics/SemanticsProperties.MaxTextLength.<get-MaxTextLength>|<get-MaxTextLength>(){}[0]
    final val PaneTitle // androidx.compose.ui.semantics/SemanticsProperties.PaneTitle|{}PaneTitle[0]
        final fun <get-PaneTitle>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/String> // androidx.compose.ui.semantics/SemanticsProperties.PaneTitle.<get-PaneTitle>|<get-PaneTitle>(){}[0]
    final val Password // androidx.compose.ui.semantics/SemanticsProperties.Password|{}Password[0]
        final fun <get-Password>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Unit> // androidx.compose.ui.semantics/SemanticsProperties.Password.<get-Password>|<get-Password>(){}[0]
    final val ProgressBarRangeInfo // androidx.compose.ui.semantics/SemanticsProperties.ProgressBarRangeInfo|{}ProgressBarRangeInfo[0]
        final fun <get-ProgressBarRangeInfo>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/ProgressBarRangeInfo> // androidx.compose.ui.semantics/SemanticsProperties.ProgressBarRangeInfo.<get-ProgressBarRangeInfo>|<get-ProgressBarRangeInfo>(){}[0]
    final val Role // androidx.compose.ui.semantics/SemanticsProperties.Role|{}Role[0]
        final fun <get-Role>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/Role> // androidx.compose.ui.semantics/SemanticsProperties.Role.<get-Role>|<get-Role>(){}[0]
    final val SelectableGroup // androidx.compose.ui.semantics/SemanticsProperties.SelectableGroup|{}SelectableGroup[0]
        final fun <get-SelectableGroup>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Unit> // androidx.compose.ui.semantics/SemanticsProperties.SelectableGroup.<get-SelectableGroup>|<get-SelectableGroup>(){}[0]
    final val Selected // androidx.compose.ui.semantics/SemanticsProperties.Selected|{}Selected[0]
        final fun <get-Selected>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Boolean> // androidx.compose.ui.semantics/SemanticsProperties.Selected.<get-Selected>|<get-Selected>(){}[0]
    final val Shape // androidx.compose.ui.semantics/SemanticsProperties.Shape|{}Shape[0]
        final fun <get-Shape>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.graphics/Shape> // androidx.compose.ui.semantics/SemanticsProperties.Shape.<get-Shape>|<get-Shape>(){}[0]
    final val StateDescription // androidx.compose.ui.semantics/SemanticsProperties.StateDescription|{}StateDescription[0]
        final fun <get-StateDescription>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/String> // androidx.compose.ui.semantics/SemanticsProperties.StateDescription.<get-StateDescription>|<get-StateDescription>(){}[0]
    final val TestTag // androidx.compose.ui.semantics/SemanticsProperties.TestTag|{}TestTag[0]
        final fun <get-TestTag>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/String> // androidx.compose.ui.semantics/SemanticsProperties.TestTag.<get-TestTag>|<get-TestTag>(){}[0]
    final val Text // androidx.compose.ui.semantics/SemanticsProperties.Text|{}Text[0]
        final fun <get-Text>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin.collections/List<androidx.compose.ui.text/AnnotatedString>> // androidx.compose.ui.semantics/SemanticsProperties.Text.<get-Text>|<get-Text>(){}[0]
    final val TextSelectionRange // androidx.compose.ui.semantics/SemanticsProperties.TextSelectionRange|{}TextSelectionRange[0]
        final fun <get-TextSelectionRange>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.text/TextRange> // androidx.compose.ui.semantics/SemanticsProperties.TextSelectionRange.<get-TextSelectionRange>|<get-TextSelectionRange>(){}[0]
    final val TextSubstitution // androidx.compose.ui.semantics/SemanticsProperties.TextSubstitution|{}TextSubstitution[0]
        final fun <get-TextSubstitution>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.text/AnnotatedString> // androidx.compose.ui.semantics/SemanticsProperties.TextSubstitution.<get-TextSubstitution>|<get-TextSubstitution>(){}[0]
    final val ToggleableState // androidx.compose.ui.semantics/SemanticsProperties.ToggleableState|{}ToggleableState[0]
        final fun <get-ToggleableState>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.state/ToggleableState> // androidx.compose.ui.semantics/SemanticsProperties.ToggleableState.<get-ToggleableState>|<get-ToggleableState>(){}[0]
    final val TraversalIndex // androidx.compose.ui.semantics/SemanticsProperties.TraversalIndex|{}TraversalIndex[0]
        final fun <get-TraversalIndex>(): androidx.compose.ui.semantics/SemanticsPropertyKey<kotlin/Float> // androidx.compose.ui.semantics/SemanticsProperties.TraversalIndex.<get-TraversalIndex>|<get-TraversalIndex>(){}[0]
    final val VerticalScrollAxisRange // androidx.compose.ui.semantics/SemanticsProperties.VerticalScrollAxisRange|{}VerticalScrollAxisRange[0]
        final fun <get-VerticalScrollAxisRange>(): androidx.compose.ui.semantics/SemanticsPropertyKey<androidx.compose.ui.semantics/ScrollAxisRange> // androidx.compose.ui.semantics/SemanticsProperties.VerticalScrollAxisRange.<get-VerticalScrollAxisRange>|<get-VerticalScrollAxisRange>(){}[0]
}

final object androidx.compose.ui/AbsoluteAlignment { // androidx.compose.ui/AbsoluteAlignment|null[0]
    final val BottomLeft // androidx.compose.ui/AbsoluteAlignment.BottomLeft|{}BottomLeft[0]
        final fun <get-BottomLeft>(): androidx.compose.ui/Alignment // androidx.compose.ui/AbsoluteAlignment.BottomLeft.<get-BottomLeft>|<get-BottomLeft>(){}[0]
    final val BottomRight // androidx.compose.ui/AbsoluteAlignment.BottomRight|{}BottomRight[0]
        final fun <get-BottomRight>(): androidx.compose.ui/Alignment // androidx.compose.ui/AbsoluteAlignment.BottomRight.<get-BottomRight>|<get-BottomRight>(){}[0]
    final val CenterLeft // androidx.compose.ui/AbsoluteAlignment.CenterLeft|{}CenterLeft[0]
        final fun <get-CenterLeft>(): androidx.compose.ui/Alignment // androidx.compose.ui/AbsoluteAlignment.CenterLeft.<get-CenterLeft>|<get-CenterLeft>(){}[0]
    final val CenterRight // androidx.compose.ui/AbsoluteAlignment.CenterRight|{}CenterRight[0]
        final fun <get-CenterRight>(): androidx.compose.ui/Alignment // androidx.compose.ui/AbsoluteAlignment.CenterRight.<get-CenterRight>|<get-CenterRight>(){}[0]
    final val Left // androidx.compose.ui/AbsoluteAlignment.Left|{}Left[0]
        final fun <get-Left>(): androidx.compose.ui/Alignment.Horizontal // androidx.compose.ui/AbsoluteAlignment.Left.<get-Left>|<get-Left>(){}[0]
    final val Right // androidx.compose.ui/AbsoluteAlignment.Right|{}Right[0]
        final fun <get-Right>(): androidx.compose.ui/Alignment.Horizontal // androidx.compose.ui/AbsoluteAlignment.Right.<get-Right>|<get-Right>(){}[0]
    final val TopLeft // androidx.compose.ui/AbsoluteAlignment.TopLeft|{}TopLeft[0]
        final fun <get-TopLeft>(): androidx.compose.ui/Alignment // androidx.compose.ui/AbsoluteAlignment.TopLeft.<get-TopLeft>|<get-TopLeft>(){}[0]
    final val TopRight // androidx.compose.ui/AbsoluteAlignment.TopRight|{}TopRight[0]
        final fun <get-TopRight>(): androidx.compose.ui/Alignment // androidx.compose.ui/AbsoluteAlignment.TopRight.<get-TopRight>|<get-TopRight>(){}[0]
}

final const val androidx.compose.ui.graphics.vector/DefaultGroupName // androidx.compose.ui.graphics.vector/DefaultGroupName|{}DefaultGroupName[0]
    final fun <get-DefaultGroupName>(): kotlin/String // androidx.compose.ui.graphics.vector/DefaultGroupName.<get-DefaultGroupName>|<get-DefaultGroupName>(){}[0]
final const val androidx.compose.ui.graphics.vector/DefaultPathName // androidx.compose.ui.graphics.vector/DefaultPathName|{}DefaultPathName[0]
    final fun <get-DefaultPathName>(): kotlin/String // androidx.compose.ui.graphics.vector/DefaultPathName.<get-DefaultPathName>|<get-DefaultPathName>(){}[0]
final const val androidx.compose.ui.graphics.vector/DefaultPivotX // androidx.compose.ui.graphics.vector/DefaultPivotX|{}DefaultPivotX[0]
    final fun <get-DefaultPivotX>(): kotlin/Float // androidx.compose.ui.graphics.vector/DefaultPivotX.<get-DefaultPivotX>|<get-DefaultPivotX>(){}[0]
final const val androidx.compose.ui.graphics.vector/DefaultPivotY // androidx.compose.ui.graphics.vector/DefaultPivotY|{}DefaultPivotY[0]
    final fun <get-DefaultPivotY>(): kotlin/Float // androidx.compose.ui.graphics.vector/DefaultPivotY.<get-DefaultPivotY>|<get-DefaultPivotY>(){}[0]
final const val androidx.compose.ui.graphics.vector/DefaultRotation // androidx.compose.ui.graphics.vector/DefaultRotation|{}DefaultRotation[0]
    final fun <get-DefaultRotation>(): kotlin/Float // androidx.compose.ui.graphics.vector/DefaultRotation.<get-DefaultRotation>|<get-DefaultRotation>(){}[0]
final const val androidx.compose.ui.graphics.vector/DefaultScaleX // androidx.compose.ui.graphics.vector/DefaultScaleX|{}DefaultScaleX[0]
    final fun <get-DefaultScaleX>(): kotlin/Float // androidx.compose.ui.graphics.vector/DefaultScaleX.<get-DefaultScaleX>|<get-DefaultScaleX>(){}[0]
final const val androidx.compose.ui.graphics.vector/DefaultScaleY // androidx.compose.ui.graphics.vector/DefaultScaleY|{}DefaultScaleY[0]
    final fun <get-DefaultScaleY>(): kotlin/Float // androidx.compose.ui.graphics.vector/DefaultScaleY.<get-DefaultScaleY>|<get-DefaultScaleY>(){}[0]
final const val androidx.compose.ui.graphics.vector/DefaultStrokeLineMiter // androidx.compose.ui.graphics.vector/DefaultStrokeLineMiter|{}DefaultStrokeLineMiter[0]
    final fun <get-DefaultStrokeLineMiter>(): kotlin/Float // androidx.compose.ui.graphics.vector/DefaultStrokeLineMiter.<get-DefaultStrokeLineMiter>|<get-DefaultStrokeLineMiter>(){}[0]
final const val androidx.compose.ui.graphics.vector/DefaultStrokeLineWidth // androidx.compose.ui.graphics.vector/DefaultStrokeLineWidth|{}DefaultStrokeLineWidth[0]
    final fun <get-DefaultStrokeLineWidth>(): kotlin/Float // androidx.compose.ui.graphics.vector/DefaultStrokeLineWidth.<get-DefaultStrokeLineWidth>|<get-DefaultStrokeLineWidth>(){}[0]
final const val androidx.compose.ui.graphics.vector/DefaultTranslationX // androidx.compose.ui.graphics.vector/DefaultTranslationX|{}DefaultTranslationX[0]
    final fun <get-DefaultTranslationX>(): kotlin/Float // androidx.compose.ui.graphics.vector/DefaultTranslationX.<get-DefaultTranslationX>|<get-DefaultTranslationX>(){}[0]
final const val androidx.compose.ui.graphics.vector/DefaultTranslationY // androidx.compose.ui.graphics.vector/DefaultTranslationY|{}DefaultTranslationY[0]
    final fun <get-DefaultTranslationY>(): kotlin/Float // androidx.compose.ui.graphics.vector/DefaultTranslationY.<get-DefaultTranslationY>|<get-DefaultTranslationY>(){}[0]
final const val androidx.compose.ui.graphics.vector/DefaultTrimPathEnd // androidx.compose.ui.graphics.vector/DefaultTrimPathEnd|{}DefaultTrimPathEnd[0]
    final fun <get-DefaultTrimPathEnd>(): kotlin/Float // androidx.compose.ui.graphics.vector/DefaultTrimPathEnd.<get-DefaultTrimPathEnd>|<get-DefaultTrimPathEnd>(){}[0]
final const val androidx.compose.ui.graphics.vector/DefaultTrimPathOffset // androidx.compose.ui.graphics.vector/DefaultTrimPathOffset|{}DefaultTrimPathOffset[0]
    final fun <get-DefaultTrimPathOffset>(): kotlin/Float // androidx.compose.ui.graphics.vector/DefaultTrimPathOffset.<get-DefaultTrimPathOffset>|<get-DefaultTrimPathOffset>(){}[0]
final const val androidx.compose.ui.graphics.vector/DefaultTrimPathStart // androidx.compose.ui.graphics.vector/DefaultTrimPathStart|{}DefaultTrimPathStart[0]
    final fun <get-DefaultTrimPathStart>(): kotlin/Float // androidx.compose.ui.graphics.vector/DefaultTrimPathStart.<get-DefaultTrimPathStart>|<get-DefaultTrimPathStart>(){}[0]
final const val androidx.compose.ui.graphics.vector/RootGroupName // androidx.compose.ui.graphics.vector/RootGroupName|{}RootGroupName[0]
    final fun <get-RootGroupName>(): kotlin/String // androidx.compose.ui.graphics.vector/RootGroupName.<get-RootGroupName>|<get-RootGroupName>(){}[0]
final const val androidx.compose.ui.graphics/DefaultCameraDistance // androidx.compose.ui.graphics/DefaultCameraDistance|{}DefaultCameraDistance[0]
    final fun <get-DefaultCameraDistance>(): kotlin/Float // androidx.compose.ui.graphics/DefaultCameraDistance.<get-DefaultCameraDistance>|<get-DefaultCameraDistance>(){}[0]

final val androidx.compose.ui.graphics.vector/DefaultFillType // androidx.compose.ui.graphics.vector/DefaultFillType|{}DefaultFillType[0]
    final fun <get-DefaultFillType>(): androidx.compose.ui.graphics/PathFillType // androidx.compose.ui.graphics.vector/DefaultFillType.<get-DefaultFillType>|<get-DefaultFillType>(){}[0]
final val androidx.compose.ui.graphics.vector/DefaultStrokeLineCap // androidx.compose.ui.graphics.vector/DefaultStrokeLineCap|{}DefaultStrokeLineCap[0]
    final fun <get-DefaultStrokeLineCap>(): androidx.compose.ui.graphics/StrokeCap // androidx.compose.ui.graphics.vector/DefaultStrokeLineCap.<get-DefaultStrokeLineCap>|<get-DefaultStrokeLineCap>(){}[0]
final val androidx.compose.ui.graphics.vector/DefaultStrokeLineJoin // androidx.compose.ui.graphics.vector/DefaultStrokeLineJoin|{}DefaultStrokeLineJoin[0]
    final fun <get-DefaultStrokeLineJoin>(): androidx.compose.ui.graphics/StrokeJoin // androidx.compose.ui.graphics.vector/DefaultStrokeLineJoin.<get-DefaultStrokeLineJoin>|<get-DefaultStrokeLineJoin>(){}[0]
final val androidx.compose.ui.graphics.vector/DefaultTintBlendMode // androidx.compose.ui.graphics.vector/DefaultTintBlendMode|{}DefaultTintBlendMode[0]
    final fun <get-DefaultTintBlendMode>(): androidx.compose.ui.graphics/BlendMode // androidx.compose.ui.graphics.vector/DefaultTintBlendMode.<get-DefaultTintBlendMode>|<get-DefaultTintBlendMode>(){}[0]
final val androidx.compose.ui.graphics.vector/DefaultTintColor // androidx.compose.ui.graphics.vector/DefaultTintColor|{}DefaultTintColor[0]
    final fun <get-DefaultTintColor>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics.vector/DefaultTintColor.<get-DefaultTintColor>|<get-DefaultTintColor>(){}[0]
final val androidx.compose.ui.graphics.vector/EmptyPath // androidx.compose.ui.graphics.vector/EmptyPath|{}EmptyPath[0]
    final fun <get-EmptyPath>(): kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode> // androidx.compose.ui.graphics.vector/EmptyPath.<get-EmptyPath>|<get-EmptyPath>(){}[0]
final val androidx.compose.ui.graphics/DefaultShadowColor // androidx.compose.ui.graphics/DefaultShadowColor|{}DefaultShadowColor[0]
    final fun <get-DefaultShadowColor>(): androidx.compose.ui.graphics/Color // androidx.compose.ui.graphics/DefaultShadowColor.<get-DefaultShadowColor>|<get-DefaultShadowColor>(){}[0]
final val androidx.compose.ui.input.key/isAltPressed // androidx.compose.ui.input.key/isAltPressed|@androidx.compose.ui.input.key.KeyEvent{}isAltPressed[0]
    final fun (androidx.compose.ui.input.key/KeyEvent).<get-isAltPressed>(): kotlin/Boolean // androidx.compose.ui.input.key/isAltPressed.<get-isAltPressed>|<get-isAltPressed>@androidx.compose.ui.input.key.KeyEvent(){}[0]
final val androidx.compose.ui.input.key/isCtrlPressed // androidx.compose.ui.input.key/isCtrlPressed|@androidx.compose.ui.input.key.KeyEvent{}isCtrlPressed[0]
    final fun (androidx.compose.ui.input.key/KeyEvent).<get-isCtrlPressed>(): kotlin/Boolean // androidx.compose.ui.input.key/isCtrlPressed.<get-isCtrlPressed>|<get-isCtrlPressed>@androidx.compose.ui.input.key.KeyEvent(){}[0]
final val androidx.compose.ui.input.key/isMetaPressed // androidx.compose.ui.input.key/isMetaPressed|@androidx.compose.ui.input.key.KeyEvent{}isMetaPressed[0]
    final fun (androidx.compose.ui.input.key/KeyEvent).<get-isMetaPressed>(): kotlin/Boolean // androidx.compose.ui.input.key/isMetaPressed.<get-isMetaPressed>|<get-isMetaPressed>@androidx.compose.ui.input.key.KeyEvent(){}[0]
final val androidx.compose.ui.input.key/isShiftPressed // androidx.compose.ui.input.key/isShiftPressed|@androidx.compose.ui.input.key.KeyEvent{}isShiftPressed[0]
    final fun (androidx.compose.ui.input.key/KeyEvent).<get-isShiftPressed>(): kotlin/Boolean // androidx.compose.ui.input.key/isShiftPressed.<get-isShiftPressed>|<get-isShiftPressed>@androidx.compose.ui.input.key.KeyEvent(){}[0]
final val androidx.compose.ui.input.key/key // androidx.compose.ui.input.key/key|@androidx.compose.ui.input.key.KeyEvent{}key[0]
    final fun (androidx.compose.ui.input.key/KeyEvent).<get-key>(): androidx.compose.ui.input.key/Key // androidx.compose.ui.input.key/key.<get-key>|<get-key>@androidx.compose.ui.input.key.KeyEvent(){}[0]
final val androidx.compose.ui.input.key/type // androidx.compose.ui.input.key/type|@androidx.compose.ui.input.key.KeyEvent{}type[0]
    final fun (androidx.compose.ui.input.key/KeyEvent).<get-type>(): androidx.compose.ui.input.key/KeyEventType // androidx.compose.ui.input.key/type.<get-type>|<get-type>@androidx.compose.ui.input.key.KeyEvent(){}[0]
final val androidx.compose.ui.input.key/utf16CodePoint // androidx.compose.ui.input.key/utf16CodePoint|@androidx.compose.ui.input.key.KeyEvent{}utf16CodePoint[0]
    final fun (androidx.compose.ui.input.key/KeyEvent).<get-utf16CodePoint>(): kotlin/Int // androidx.compose.ui.input.key/utf16CodePoint.<get-utf16CodePoint>|<get-utf16CodePoint>@androidx.compose.ui.input.key.KeyEvent(){}[0]
final val androidx.compose.ui.input.pointer/areAnyPressed // androidx.compose.ui.input.pointer/areAnyPressed|@androidx.compose.ui.input.pointer.PointerButtons{}areAnyPressed[0]
    final fun (androidx.compose.ui.input.pointer/PointerButtons).<get-areAnyPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/areAnyPressed.<get-areAnyPressed>|<get-areAnyPressed>@androidx.compose.ui.input.pointer.PointerButtons(){}[0]
final val androidx.compose.ui.input.pointer/isAltGraphPressed // androidx.compose.ui.input.pointer/isAltGraphPressed|@androidx.compose.ui.input.pointer.PointerKeyboardModifiers{}isAltGraphPressed[0]
    final fun (androidx.compose.ui.input.pointer/PointerKeyboardModifiers).<get-isAltGraphPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isAltGraphPressed.<get-isAltGraphPressed>|<get-isAltGraphPressed>@androidx.compose.ui.input.pointer.PointerKeyboardModifiers(){}[0]
final val androidx.compose.ui.input.pointer/isAltPressed // androidx.compose.ui.input.pointer/isAltPressed|@androidx.compose.ui.input.pointer.PointerKeyboardModifiers{}isAltPressed[0]
    final fun (androidx.compose.ui.input.pointer/PointerKeyboardModifiers).<get-isAltPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isAltPressed.<get-isAltPressed>|<get-isAltPressed>@androidx.compose.ui.input.pointer.PointerKeyboardModifiers(){}[0]
final val androidx.compose.ui.input.pointer/isBackPressed // androidx.compose.ui.input.pointer/isBackPressed|@androidx.compose.ui.input.pointer.PointerButtons{}isBackPressed[0]
    final fun (androidx.compose.ui.input.pointer/PointerButtons).<get-isBackPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isBackPressed.<get-isBackPressed>|<get-isBackPressed>@androidx.compose.ui.input.pointer.PointerButtons(){}[0]
final val androidx.compose.ui.input.pointer/isCapsLockOn // androidx.compose.ui.input.pointer/isCapsLockOn|@androidx.compose.ui.input.pointer.PointerKeyboardModifiers{}isCapsLockOn[0]
    final fun (androidx.compose.ui.input.pointer/PointerKeyboardModifiers).<get-isCapsLockOn>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isCapsLockOn.<get-isCapsLockOn>|<get-isCapsLockOn>@androidx.compose.ui.input.pointer.PointerKeyboardModifiers(){}[0]
final val androidx.compose.ui.input.pointer/isCtrlPressed // androidx.compose.ui.input.pointer/isCtrlPressed|@androidx.compose.ui.input.pointer.PointerKeyboardModifiers{}isCtrlPressed[0]
    final fun (androidx.compose.ui.input.pointer/PointerKeyboardModifiers).<get-isCtrlPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isCtrlPressed.<get-isCtrlPressed>|<get-isCtrlPressed>@androidx.compose.ui.input.pointer.PointerKeyboardModifiers(){}[0]
final val androidx.compose.ui.input.pointer/isForwardPressed // androidx.compose.ui.input.pointer/isForwardPressed|@androidx.compose.ui.input.pointer.PointerButtons{}isForwardPressed[0]
    final fun (androidx.compose.ui.input.pointer/PointerButtons).<get-isForwardPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isForwardPressed.<get-isForwardPressed>|<get-isForwardPressed>@androidx.compose.ui.input.pointer.PointerButtons(){}[0]
final val androidx.compose.ui.input.pointer/isFunctionPressed // androidx.compose.ui.input.pointer/isFunctionPressed|@androidx.compose.ui.input.pointer.PointerKeyboardModifiers{}isFunctionPressed[0]
    final fun (androidx.compose.ui.input.pointer/PointerKeyboardModifiers).<get-isFunctionPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isFunctionPressed.<get-isFunctionPressed>|<get-isFunctionPressed>@androidx.compose.ui.input.pointer.PointerKeyboardModifiers(){}[0]
final val androidx.compose.ui.input.pointer/isMetaPressed // androidx.compose.ui.input.pointer/isMetaPressed|@androidx.compose.ui.input.pointer.PointerKeyboardModifiers{}isMetaPressed[0]
    final fun (androidx.compose.ui.input.pointer/PointerKeyboardModifiers).<get-isMetaPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isMetaPressed.<get-isMetaPressed>|<get-isMetaPressed>@androidx.compose.ui.input.pointer.PointerKeyboardModifiers(){}[0]
final val androidx.compose.ui.input.pointer/isNumLockOn // androidx.compose.ui.input.pointer/isNumLockOn|@androidx.compose.ui.input.pointer.PointerKeyboardModifiers{}isNumLockOn[0]
    final fun (androidx.compose.ui.input.pointer/PointerKeyboardModifiers).<get-isNumLockOn>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isNumLockOn.<get-isNumLockOn>|<get-isNumLockOn>@androidx.compose.ui.input.pointer.PointerKeyboardModifiers(){}[0]
final val androidx.compose.ui.input.pointer/isPrimaryPressed // androidx.compose.ui.input.pointer/isPrimaryPressed|@androidx.compose.ui.input.pointer.PointerButtons{}isPrimaryPressed[0]
    final fun (androidx.compose.ui.input.pointer/PointerButtons).<get-isPrimaryPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isPrimaryPressed.<get-isPrimaryPressed>|<get-isPrimaryPressed>@androidx.compose.ui.input.pointer.PointerButtons(){}[0]
final val androidx.compose.ui.input.pointer/isScrollLockOn // androidx.compose.ui.input.pointer/isScrollLockOn|@androidx.compose.ui.input.pointer.PointerKeyboardModifiers{}isScrollLockOn[0]
    final fun (androidx.compose.ui.input.pointer/PointerKeyboardModifiers).<get-isScrollLockOn>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isScrollLockOn.<get-isScrollLockOn>|<get-isScrollLockOn>@androidx.compose.ui.input.pointer.PointerKeyboardModifiers(){}[0]
final val androidx.compose.ui.input.pointer/isSecondaryPressed // androidx.compose.ui.input.pointer/isSecondaryPressed|@androidx.compose.ui.input.pointer.PointerButtons{}isSecondaryPressed[0]
    final fun (androidx.compose.ui.input.pointer/PointerButtons).<get-isSecondaryPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isSecondaryPressed.<get-isSecondaryPressed>|<get-isSecondaryPressed>@androidx.compose.ui.input.pointer.PointerButtons(){}[0]
final val androidx.compose.ui.input.pointer/isShiftPressed // androidx.compose.ui.input.pointer/isShiftPressed|@androidx.compose.ui.input.pointer.PointerKeyboardModifiers{}isShiftPressed[0]
    final fun (androidx.compose.ui.input.pointer/PointerKeyboardModifiers).<get-isShiftPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isShiftPressed.<get-isShiftPressed>|<get-isShiftPressed>@androidx.compose.ui.input.pointer.PointerKeyboardModifiers(){}[0]
final val androidx.compose.ui.input.pointer/isSymPressed // androidx.compose.ui.input.pointer/isSymPressed|@androidx.compose.ui.input.pointer.PointerKeyboardModifiers{}isSymPressed[0]
    final fun (androidx.compose.ui.input.pointer/PointerKeyboardModifiers).<get-isSymPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isSymPressed.<get-isSymPressed>|<get-isSymPressed>@androidx.compose.ui.input.pointer.PointerKeyboardModifiers(){}[0]
final val androidx.compose.ui.input.pointer/isTertiaryPressed // androidx.compose.ui.input.pointer/isTertiaryPressed|@androidx.compose.ui.input.pointer.PointerButtons{}isTertiaryPressed[0]
    final fun (androidx.compose.ui.input.pointer/PointerButtons).<get-isTertiaryPressed>(): kotlin/Boolean // androidx.compose.ui.input.pointer/isTertiaryPressed.<get-isTertiaryPressed>|<get-isTertiaryPressed>@androidx.compose.ui.input.pointer.PointerButtons(){}[0]
final val androidx.compose.ui.layout/FirstBaseline // androidx.compose.ui.layout/FirstBaseline|{}FirstBaseline[0]
    final fun <get-FirstBaseline>(): androidx.compose.ui.layout/HorizontalAlignmentLine // androidx.compose.ui.layout/FirstBaseline.<get-FirstBaseline>|<get-FirstBaseline>(){}[0]
final val androidx.compose.ui.layout/LastBaseline // androidx.compose.ui.layout/LastBaseline|{}LastBaseline[0]
    final fun <get-LastBaseline>(): androidx.compose.ui.layout/HorizontalAlignmentLine // androidx.compose.ui.layout/LastBaseline.<get-LastBaseline>|<get-LastBaseline>(){}[0]
final val androidx.compose.ui.layout/LocalPinnableContainer // androidx.compose.ui.layout/LocalPinnableContainer|{}LocalPinnableContainer[0]
    final fun <get-LocalPinnableContainer>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.layout/PinnableContainer?> // androidx.compose.ui.layout/LocalPinnableContainer.<get-LocalPinnableContainer>|<get-LocalPinnableContainer>(){}[0]
final val androidx.compose.ui.layout/ModifierLocalBeyondBoundsLayout // androidx.compose.ui.layout/ModifierLocalBeyondBoundsLayout|{}ModifierLocalBeyondBoundsLayout[0]
    final fun <get-ModifierLocalBeyondBoundsLayout>(): androidx.compose.ui.modifier/ProvidableModifierLocal<androidx.compose.ui.layout/BeyondBoundsLayout?> // androidx.compose.ui.layout/ModifierLocalBeyondBoundsLayout.<get-ModifierLocalBeyondBoundsLayout>|<get-ModifierLocalBeyondBoundsLayout>(){}[0]
final val androidx.compose.ui.layout/isSpecified // androidx.compose.ui.layout/isSpecified|@androidx.compose.ui.layout.ScaleFactor{}isSpecified[0]
    final inline fun (androidx.compose.ui.layout/ScaleFactor).<get-isSpecified>(): kotlin/Boolean // androidx.compose.ui.layout/isSpecified.<get-isSpecified>|<get-isSpecified>@androidx.compose.ui.layout.ScaleFactor(){}[0]
final val androidx.compose.ui.layout/isUnspecified // androidx.compose.ui.layout/isUnspecified|@androidx.compose.ui.layout.ScaleFactor{}isUnspecified[0]
    final inline fun (androidx.compose.ui.layout/ScaleFactor).<get-isUnspecified>(): kotlin/Boolean // androidx.compose.ui.layout/isUnspecified.<get-isUnspecified>|<get-isUnspecified>@androidx.compose.ui.layout.ScaleFactor(){}[0]
final val androidx.compose.ui.layout/layoutId // androidx.compose.ui.layout/layoutId|@androidx.compose.ui.layout.Measurable{}layoutId[0]
    final fun (androidx.compose.ui.layout/Measurable).<get-layoutId>(): kotlin/Any? // androidx.compose.ui.layout/layoutId.<get-layoutId>|<get-layoutId>@androidx.compose.ui.layout.Measurable(){}[0]
final val androidx.compose.ui.platform/LocalAccessibilityManager // androidx.compose.ui.platform/LocalAccessibilityManager|{}LocalAccessibilityManager[0]
    final fun <get-LocalAccessibilityManager>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.platform/AccessibilityManager?> // androidx.compose.ui.platform/LocalAccessibilityManager.<get-LocalAccessibilityManager>|<get-LocalAccessibilityManager>(){}[0]
final val androidx.compose.ui.platform/LocalAutofill // androidx.compose.ui.platform/LocalAutofill|{}LocalAutofill[0]
    final fun <get-LocalAutofill>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.autofill/Autofill?> // androidx.compose.ui.platform/LocalAutofill.<get-LocalAutofill>|<get-LocalAutofill>(){}[0]
final val androidx.compose.ui.platform/LocalAutofillManager // androidx.compose.ui.platform/LocalAutofillManager|{}LocalAutofillManager[0]
    final fun <get-LocalAutofillManager>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.autofill/AutofillManager?> // androidx.compose.ui.platform/LocalAutofillManager.<get-LocalAutofillManager>|<get-LocalAutofillManager>(){}[0]
final val androidx.compose.ui.platform/LocalAutofillTree // androidx.compose.ui.platform/LocalAutofillTree|{}LocalAutofillTree[0]
    final fun <get-LocalAutofillTree>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.autofill/AutofillTree> // androidx.compose.ui.platform/LocalAutofillTree.<get-LocalAutofillTree>|<get-LocalAutofillTree>(){}[0]
final val androidx.compose.ui.platform/LocalClipboard // androidx.compose.ui.platform/LocalClipboard|{}LocalClipboard[0]
    final fun <get-LocalClipboard>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.platform/Clipboard> // androidx.compose.ui.platform/LocalClipboard.<get-LocalClipboard>|<get-LocalClipboard>(){}[0]
final val androidx.compose.ui.platform/LocalClipboardManager // androidx.compose.ui.platform/LocalClipboardManager|{}LocalClipboardManager[0]
    final fun <get-LocalClipboardManager>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.platform/ClipboardManager> // androidx.compose.ui.platform/LocalClipboardManager.<get-LocalClipboardManager>|<get-LocalClipboardManager>(){}[0]
final val androidx.compose.ui.platform/LocalCursorBlinkEnabled // androidx.compose.ui.platform/LocalCursorBlinkEnabled|{}LocalCursorBlinkEnabled[0]
    final fun <get-LocalCursorBlinkEnabled>(): androidx.compose.runtime/ProvidableCompositionLocal<kotlin/Boolean> // androidx.compose.ui.platform/LocalCursorBlinkEnabled.<get-LocalCursorBlinkEnabled>|<get-LocalCursorBlinkEnabled>(){}[0]
final val androidx.compose.ui.platform/LocalDensity // androidx.compose.ui.platform/LocalDensity|{}LocalDensity[0]
    final fun <get-LocalDensity>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.unit/Density> // androidx.compose.ui.platform/LocalDensity.<get-LocalDensity>|<get-LocalDensity>(){}[0]
final val androidx.compose.ui.platform/LocalFocusManager // androidx.compose.ui.platform/LocalFocusManager|{}LocalFocusManager[0]
    final fun <get-LocalFocusManager>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.focus/FocusManager> // androidx.compose.ui.platform/LocalFocusManager.<get-LocalFocusManager>|<get-LocalFocusManager>(){}[0]
final val androidx.compose.ui.platform/LocalFontFamilyResolver // androidx.compose.ui.platform/LocalFontFamilyResolver|{}LocalFontFamilyResolver[0]
    final fun <get-LocalFontFamilyResolver>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.text.font/FontFamily.Resolver> // androidx.compose.ui.platform/LocalFontFamilyResolver.<get-LocalFontFamilyResolver>|<get-LocalFontFamilyResolver>(){}[0]
final val androidx.compose.ui.platform/LocalFontLoader // androidx.compose.ui.platform/LocalFontLoader|{}LocalFontLoader[0]
    final fun <get-LocalFontLoader>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.text.font/Font.ResourceLoader> // androidx.compose.ui.platform/LocalFontLoader.<get-LocalFontLoader>|<get-LocalFontLoader>(){}[0]
final val androidx.compose.ui.platform/LocalGraphicsContext // androidx.compose.ui.platform/LocalGraphicsContext|{}LocalGraphicsContext[0]
    final fun <get-LocalGraphicsContext>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.graphics/GraphicsContext> // androidx.compose.ui.platform/LocalGraphicsContext.<get-LocalGraphicsContext>|<get-LocalGraphicsContext>(){}[0]
final val androidx.compose.ui.platform/LocalHapticFeedback // androidx.compose.ui.platform/LocalHapticFeedback|{}LocalHapticFeedback[0]
    final fun <get-LocalHapticFeedback>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.hapticfeedback/HapticFeedback> // androidx.compose.ui.platform/LocalHapticFeedback.<get-LocalHapticFeedback>|<get-LocalHapticFeedback>(){}[0]
final val androidx.compose.ui.platform/LocalInputModeManager // androidx.compose.ui.platform/LocalInputModeManager|{}LocalInputModeManager[0]
    final fun <get-LocalInputModeManager>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.input/InputModeManager> // androidx.compose.ui.platform/LocalInputModeManager.<get-LocalInputModeManager>|<get-LocalInputModeManager>(){}[0]
final val androidx.compose.ui.platform/LocalInspectionMode // androidx.compose.ui.platform/LocalInspectionMode|{}LocalInspectionMode[0]
    final fun <get-LocalInspectionMode>(): androidx.compose.runtime/ProvidableCompositionLocal<kotlin/Boolean> // androidx.compose.ui.platform/LocalInspectionMode.<get-LocalInspectionMode>|<get-LocalInspectionMode>(){}[0]
final val androidx.compose.ui.platform/LocalLayoutDirection // androidx.compose.ui.platform/LocalLayoutDirection|{}LocalLayoutDirection[0]
    final fun <get-LocalLayoutDirection>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.unit/LayoutDirection> // androidx.compose.ui.platform/LocalLayoutDirection.<get-LocalLayoutDirection>|<get-LocalLayoutDirection>(){}[0]
final val androidx.compose.ui.platform/LocalLifecycleOwner // androidx.compose.ui.platform/LocalLifecycleOwner|{}LocalLifecycleOwner[0]
    final fun <get-LocalLifecycleOwner>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.lifecycle/LifecycleOwner> // androidx.compose.ui.platform/LocalLifecycleOwner.<get-LocalLifecycleOwner>|<get-LocalLifecycleOwner>(){}[0]
final val androidx.compose.ui.platform/LocalScrollCaptureInProgress // androidx.compose.ui.platform/LocalScrollCaptureInProgress|{}LocalScrollCaptureInProgress[0]
    final fun <get-LocalScrollCaptureInProgress>(): androidx.compose.runtime/CompositionLocal<kotlin/Boolean> // androidx.compose.ui.platform/LocalScrollCaptureInProgress.<get-LocalScrollCaptureInProgress>|<get-LocalScrollCaptureInProgress>(){}[0]
final val androidx.compose.ui.platform/LocalSoftwareKeyboardController // androidx.compose.ui.platform/LocalSoftwareKeyboardController|{}LocalSoftwareKeyboardController[0]
    final fun <get-LocalSoftwareKeyboardController>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.platform/SoftwareKeyboardController?> // androidx.compose.ui.platform/LocalSoftwareKeyboardController.<get-LocalSoftwareKeyboardController>|<get-LocalSoftwareKeyboardController>(){}[0]
final val androidx.compose.ui.platform/LocalTextInputService // androidx.compose.ui.platform/LocalTextInputService|{}LocalTextInputService[0]
    final fun <get-LocalTextInputService>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.text.input/TextInputService?> // androidx.compose.ui.platform/LocalTextInputService.<get-LocalTextInputService>|<get-LocalTextInputService>(){}[0]
final val androidx.compose.ui.platform/LocalTextToolbar // androidx.compose.ui.platform/LocalTextToolbar|{}LocalTextToolbar[0]
    final fun <get-LocalTextToolbar>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.platform/TextToolbar> // androidx.compose.ui.platform/LocalTextToolbar.<get-LocalTextToolbar>|<get-LocalTextToolbar>(){}[0]
final val androidx.compose.ui.platform/LocalUriHandler // androidx.compose.ui.platform/LocalUriHandler|{}LocalUriHandler[0]
    final fun <get-LocalUriHandler>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.platform/UriHandler> // androidx.compose.ui.platform/LocalUriHandler.<get-LocalUriHandler>|<get-LocalUriHandler>(){}[0]
final val androidx.compose.ui.platform/LocalViewConfiguration // androidx.compose.ui.platform/LocalViewConfiguration|{}LocalViewConfiguration[0]
    final fun <get-LocalViewConfiguration>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.platform/ViewConfiguration> // androidx.compose.ui.platform/LocalViewConfiguration.<get-LocalViewConfiguration>|<get-LocalViewConfiguration>(){}[0]
final val androidx.compose.ui.platform/LocalWindowInfo // androidx.compose.ui.platform/LocalWindowInfo|{}LocalWindowInfo[0]
    final fun <get-LocalWindowInfo>(): androidx.compose.runtime/ProvidableCompositionLocal<androidx.compose.ui.platform/WindowInfo> // androidx.compose.ui.platform/LocalWindowInfo.<get-LocalWindowInfo>|<get-LocalWindowInfo>(){}[0]
final val androidx.compose.ui.platform/NoInspectorInfo // androidx.compose.ui.platform/NoInspectorInfo|{}NoInspectorInfo[0]
    final fun <get-NoInspectorInfo>(): kotlin/Function1<androidx.compose.ui.platform/InspectorInfo, kotlin/Unit> // androidx.compose.ui.platform/NoInspectorInfo.<get-NoInspectorInfo>|<get-NoInspectorInfo>(){}[0]

final var androidx.compose.ui.platform/isDebugInspectorInfoEnabled // androidx.compose.ui.platform/isDebugInspectorInfoEnabled|{}isDebugInspectorInfoEnabled[0]
    final fun <get-isDebugInspectorInfoEnabled>(): kotlin/Boolean // androidx.compose.ui.platform/isDebugInspectorInfoEnabled.<get-isDebugInspectorInfoEnabled>|<get-isDebugInspectorInfoEnabled>(){}[0]
    final fun <set-isDebugInspectorInfoEnabled>(kotlin/Boolean) // androidx.compose.ui.platform/isDebugInspectorInfoEnabled.<set-isDebugInspectorInfoEnabled>|<set-isDebugInspectorInfoEnabled>(kotlin.Boolean){}[0]
final var androidx.compose.ui.semantics/collectionInfo // androidx.compose.ui.semantics/collectionInfo|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}collectionInfo[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-collectionInfo>(): androidx.compose.ui.semantics/CollectionInfo // androidx.compose.ui.semantics/collectionInfo.<get-collectionInfo>|<get-collectionInfo>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-collectionInfo>(androidx.compose.ui.semantics/CollectionInfo) // androidx.compose.ui.semantics/collectionInfo.<set-collectionInfo>|<set-collectionInfo>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.semantics.CollectionInfo){}[0]
final var androidx.compose.ui.semantics/collectionItemInfo // androidx.compose.ui.semantics/collectionItemInfo|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}collectionItemInfo[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-collectionItemInfo>(): androidx.compose.ui.semantics/CollectionItemInfo // androidx.compose.ui.semantics/collectionItemInfo.<get-collectionItemInfo>|<get-collectionItemInfo>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-collectionItemInfo>(androidx.compose.ui.semantics/CollectionItemInfo) // androidx.compose.ui.semantics/collectionItemInfo.<set-collectionItemInfo>|<set-collectionItemInfo>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.semantics.CollectionItemInfo){}[0]
final var androidx.compose.ui.semantics/contentDataType // androidx.compose.ui.semantics/contentDataType|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}contentDataType[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-contentDataType>(): androidx.compose.ui.autofill/ContentDataType // androidx.compose.ui.semantics/contentDataType.<get-contentDataType>|<get-contentDataType>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-contentDataType>(androidx.compose.ui.autofill/ContentDataType) // androidx.compose.ui.semantics/contentDataType.<set-contentDataType>|<set-contentDataType>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.autofill.ContentDataType){}[0]
final var androidx.compose.ui.semantics/contentDescription // androidx.compose.ui.semantics/contentDescription|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}contentDescription[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-contentDescription>(): kotlin/String // androidx.compose.ui.semantics/contentDescription.<get-contentDescription>|<get-contentDescription>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-contentDescription>(kotlin/String) // androidx.compose.ui.semantics/contentDescription.<set-contentDescription>|<set-contentDescription>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String){}[0]
final var androidx.compose.ui.semantics/contentType // androidx.compose.ui.semantics/contentType|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}contentType[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-contentType>(): androidx.compose.ui.autofill/ContentType // androidx.compose.ui.semantics/contentType.<get-contentType>|<get-contentType>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-contentType>(androidx.compose.ui.autofill/ContentType) // androidx.compose.ui.semantics/contentType.<set-contentType>|<set-contentType>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.autofill.ContentType){}[0]
final var androidx.compose.ui.semantics/customActions // androidx.compose.ui.semantics/customActions|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}customActions[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-customActions>(): kotlin.collections/List<androidx.compose.ui.semantics/CustomAccessibilityAction> // androidx.compose.ui.semantics/customActions.<get-customActions>|<get-customActions>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-customActions>(kotlin.collections/List<androidx.compose.ui.semantics/CustomAccessibilityAction>) // androidx.compose.ui.semantics/customActions.<set-customActions>|<set-customActions>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.collections.List<androidx.compose.ui.semantics.CustomAccessibilityAction>){}[0]
final var androidx.compose.ui.semantics/editableText // androidx.compose.ui.semantics/editableText|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}editableText[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-editableText>(): androidx.compose.ui.text/AnnotatedString // androidx.compose.ui.semantics/editableText.<get-editableText>|<get-editableText>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-editableText>(androidx.compose.ui.text/AnnotatedString) // androidx.compose.ui.semantics/editableText.<set-editableText>|<set-editableText>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.text.AnnotatedString){}[0]
final var androidx.compose.ui.semantics/focused // androidx.compose.ui.semantics/focused|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}focused[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-focused>(): kotlin/Boolean // androidx.compose.ui.semantics/focused.<get-focused>|<get-focused>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-focused>(kotlin/Boolean) // androidx.compose.ui.semantics/focused.<set-focused>|<set-focused>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.Boolean){}[0]
final var androidx.compose.ui.semantics/horizontalScrollAxisRange // androidx.compose.ui.semantics/horizontalScrollAxisRange|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}horizontalScrollAxisRange[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-horizontalScrollAxisRange>(): androidx.compose.ui.semantics/ScrollAxisRange // androidx.compose.ui.semantics/horizontalScrollAxisRange.<get-horizontalScrollAxisRange>|<get-horizontalScrollAxisRange>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-horizontalScrollAxisRange>(androidx.compose.ui.semantics/ScrollAxisRange) // androidx.compose.ui.semantics/horizontalScrollAxisRange.<set-horizontalScrollAxisRange>|<set-horizontalScrollAxisRange>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.semantics.ScrollAxisRange){}[0]
final var androidx.compose.ui.semantics/imeAction // androidx.compose.ui.semantics/imeAction|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}imeAction[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-imeAction>(): androidx.compose.ui.text.input/ImeAction // androidx.compose.ui.semantics/imeAction.<get-imeAction>|<get-imeAction>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-imeAction>(androidx.compose.ui.text.input/ImeAction) // androidx.compose.ui.semantics/imeAction.<set-imeAction>|<set-imeAction>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.text.input.ImeAction){}[0]
final var androidx.compose.ui.semantics/inputText // androidx.compose.ui.semantics/inputText|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}inputText[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-inputText>(): androidx.compose.ui.text/AnnotatedString // androidx.compose.ui.semantics/inputText.<get-inputText>|<get-inputText>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-inputText>(androidx.compose.ui.text/AnnotatedString) // androidx.compose.ui.semantics/inputText.<set-inputText>|<set-inputText>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.text.AnnotatedString){}[0]
final var androidx.compose.ui.semantics/isContainer // androidx.compose.ui.semantics/isContainer|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}isContainer[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-isContainer>(): kotlin/Boolean // androidx.compose.ui.semantics/isContainer.<get-isContainer>|<get-isContainer>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-isContainer>(kotlin/Boolean) // androidx.compose.ui.semantics/isContainer.<set-isContainer>|<set-isContainer>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.Boolean){}[0]
final var androidx.compose.ui.semantics/isEditable // androidx.compose.ui.semantics/isEditable|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}isEditable[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-isEditable>(): kotlin/Boolean // androidx.compose.ui.semantics/isEditable.<get-isEditable>|<get-isEditable>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-isEditable>(kotlin/Boolean) // androidx.compose.ui.semantics/isEditable.<set-isEditable>|<set-isEditable>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.Boolean){}[0]
final var androidx.compose.ui.semantics/isSensitiveData // androidx.compose.ui.semantics/isSensitiveData|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}isSensitiveData[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-isSensitiveData>(): kotlin/Boolean // androidx.compose.ui.semantics/isSensitiveData.<get-isSensitiveData>|<get-isSensitiveData>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-isSensitiveData>(kotlin/Boolean) // androidx.compose.ui.semantics/isSensitiveData.<set-isSensitiveData>|<set-isSensitiveData>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.Boolean){}[0]
final var androidx.compose.ui.semantics/isShowingTextSubstitution // androidx.compose.ui.semantics/isShowingTextSubstitution|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}isShowingTextSubstitution[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-isShowingTextSubstitution>(): kotlin/Boolean // androidx.compose.ui.semantics/isShowingTextSubstitution.<get-isShowingTextSubstitution>|<get-isShowingTextSubstitution>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-isShowingTextSubstitution>(kotlin/Boolean) // androidx.compose.ui.semantics/isShowingTextSubstitution.<set-isShowingTextSubstitution>|<set-isShowingTextSubstitution>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.Boolean){}[0]
final var androidx.compose.ui.semantics/isTraversalGroup // androidx.compose.ui.semantics/isTraversalGroup|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}isTraversalGroup[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-isTraversalGroup>(): kotlin/Boolean // androidx.compose.ui.semantics/isTraversalGroup.<get-isTraversalGroup>|<get-isTraversalGroup>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-isTraversalGroup>(kotlin/Boolean) // androidx.compose.ui.semantics/isTraversalGroup.<set-isTraversalGroup>|<set-isTraversalGroup>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.Boolean){}[0]
final var androidx.compose.ui.semantics/liveRegion // androidx.compose.ui.semantics/liveRegion|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}liveRegion[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-liveRegion>(): androidx.compose.ui.semantics/LiveRegionMode // androidx.compose.ui.semantics/liveRegion.<get-liveRegion>|<get-liveRegion>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-liveRegion>(androidx.compose.ui.semantics/LiveRegionMode) // androidx.compose.ui.semantics/liveRegion.<set-liveRegion>|<set-liveRegion>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.semantics.LiveRegionMode){}[0]
final var androidx.compose.ui.semantics/maxTextLength // androidx.compose.ui.semantics/maxTextLength|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}maxTextLength[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-maxTextLength>(): kotlin/Int // androidx.compose.ui.semantics/maxTextLength.<get-maxTextLength>|<get-maxTextLength>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-maxTextLength>(kotlin/Int) // androidx.compose.ui.semantics/maxTextLength.<set-maxTextLength>|<set-maxTextLength>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.Int){}[0]
final var androidx.compose.ui.semantics/paneTitle // androidx.compose.ui.semantics/paneTitle|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}paneTitle[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-paneTitle>(): kotlin/String // androidx.compose.ui.semantics/paneTitle.<get-paneTitle>|<get-paneTitle>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-paneTitle>(kotlin/String) // androidx.compose.ui.semantics/paneTitle.<set-paneTitle>|<set-paneTitle>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String){}[0]
final var androidx.compose.ui.semantics/progressBarRangeInfo // androidx.compose.ui.semantics/progressBarRangeInfo|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}progressBarRangeInfo[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-progressBarRangeInfo>(): androidx.compose.ui.semantics/ProgressBarRangeInfo // androidx.compose.ui.semantics/progressBarRangeInfo.<get-progressBarRangeInfo>|<get-progressBarRangeInfo>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-progressBarRangeInfo>(androidx.compose.ui.semantics/ProgressBarRangeInfo) // androidx.compose.ui.semantics/progressBarRangeInfo.<set-progressBarRangeInfo>|<set-progressBarRangeInfo>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.semantics.ProgressBarRangeInfo){}[0]
final var androidx.compose.ui.semantics/role // androidx.compose.ui.semantics/role|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}role[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-role>(): androidx.compose.ui.semantics/Role // androidx.compose.ui.semantics/role.<get-role>|<get-role>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-role>(androidx.compose.ui.semantics/Role) // androidx.compose.ui.semantics/role.<set-role>|<set-role>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.semantics.Role){}[0]
final var androidx.compose.ui.semantics/selected // androidx.compose.ui.semantics/selected|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}selected[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-selected>(): kotlin/Boolean // androidx.compose.ui.semantics/selected.<get-selected>|<get-selected>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-selected>(kotlin/Boolean) // androidx.compose.ui.semantics/selected.<set-selected>|<set-selected>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.Boolean){}[0]
final var androidx.compose.ui.semantics/shape // androidx.compose.ui.semantics/shape|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}shape[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-shape>(): androidx.compose.ui.graphics/Shape // androidx.compose.ui.semantics/shape.<get-shape>|<get-shape>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-shape>(androidx.compose.ui.graphics/Shape) // androidx.compose.ui.semantics/shape.<set-shape>|<set-shape>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.graphics.Shape){}[0]
final var androidx.compose.ui.semantics/stateDescription // androidx.compose.ui.semantics/stateDescription|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}stateDescription[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-stateDescription>(): kotlin/String // androidx.compose.ui.semantics/stateDescription.<get-stateDescription>|<get-stateDescription>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-stateDescription>(kotlin/String) // androidx.compose.ui.semantics/stateDescription.<set-stateDescription>|<set-stateDescription>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String){}[0]
final var androidx.compose.ui.semantics/testTag // androidx.compose.ui.semantics/testTag|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}testTag[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-testTag>(): kotlin/String // androidx.compose.ui.semantics/testTag.<get-testTag>|<get-testTag>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-testTag>(kotlin/String) // androidx.compose.ui.semantics/testTag.<set-testTag>|<set-testTag>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String){}[0]
final var androidx.compose.ui.semantics/text // androidx.compose.ui.semantics/text|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}text[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-text>(): androidx.compose.ui.text/AnnotatedString // androidx.compose.ui.semantics/text.<get-text>|<get-text>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-text>(androidx.compose.ui.text/AnnotatedString) // androidx.compose.ui.semantics/text.<set-text>|<set-text>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.text.AnnotatedString){}[0]
final var androidx.compose.ui.semantics/textSelectionRange // androidx.compose.ui.semantics/textSelectionRange|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}textSelectionRange[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-textSelectionRange>(): androidx.compose.ui.text/TextRange // androidx.compose.ui.semantics/textSelectionRange.<get-textSelectionRange>|<get-textSelectionRange>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-textSelectionRange>(androidx.compose.ui.text/TextRange) // androidx.compose.ui.semantics/textSelectionRange.<set-textSelectionRange>|<set-textSelectionRange>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.text.TextRange){}[0]
final var androidx.compose.ui.semantics/textSubstitution // androidx.compose.ui.semantics/textSubstitution|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}textSubstitution[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-textSubstitution>(): androidx.compose.ui.text/AnnotatedString // androidx.compose.ui.semantics/textSubstitution.<get-textSubstitution>|<get-textSubstitution>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-textSubstitution>(androidx.compose.ui.text/AnnotatedString) // androidx.compose.ui.semantics/textSubstitution.<set-textSubstitution>|<set-textSubstitution>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.text.AnnotatedString){}[0]
final var androidx.compose.ui.semantics/toggleableState // androidx.compose.ui.semantics/toggleableState|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}toggleableState[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-toggleableState>(): androidx.compose.ui.state/ToggleableState // androidx.compose.ui.semantics/toggleableState.<get-toggleableState>|<get-toggleableState>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-toggleableState>(androidx.compose.ui.state/ToggleableState) // androidx.compose.ui.semantics/toggleableState.<set-toggleableState>|<set-toggleableState>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.state.ToggleableState){}[0]
final var androidx.compose.ui.semantics/traversalIndex // androidx.compose.ui.semantics/traversalIndex|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}traversalIndex[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-traversalIndex>(): kotlin/Float // androidx.compose.ui.semantics/traversalIndex.<get-traversalIndex>|<get-traversalIndex>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-traversalIndex>(kotlin/Float) // androidx.compose.ui.semantics/traversalIndex.<set-traversalIndex>|<set-traversalIndex>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.Float){}[0]
final var androidx.compose.ui.semantics/verticalScrollAxisRange // androidx.compose.ui.semantics/verticalScrollAxisRange|@androidx.compose.ui.semantics.SemanticsPropertyReceiver{}verticalScrollAxisRange[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<get-verticalScrollAxisRange>(): androidx.compose.ui.semantics/ScrollAxisRange // androidx.compose.ui.semantics/verticalScrollAxisRange.<get-verticalScrollAxisRange>|<get-verticalScrollAxisRange>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
    final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).<set-verticalScrollAxisRange>(androidx.compose.ui.semantics/ScrollAxisRange) // androidx.compose.ui.semantics/verticalScrollAxisRange.<set-verticalScrollAxisRange>|<set-verticalScrollAxisRange>@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.semantics.ScrollAxisRange){}[0]

final fun (androidx.compose.runtime/Composer).androidx.compose.ui/materialize(androidx.compose.ui/Modifier): androidx.compose.ui/Modifier // androidx.compose.ui/materialize|materialize@androidx.compose.runtime.Composer(androidx.compose.ui.Modifier){}[0]
final fun (androidx.compose.runtime/Composer).androidx.compose.ui/materializeWithCompositionLocalInjection(androidx.compose.ui/Modifier): androidx.compose.ui/Modifier // androidx.compose.ui/materializeWithCompositionLocalInjection|materializeWithCompositionLocalInjection@androidx.compose.runtime.Composer(androidx.compose.ui.Modifier){}[0]
final fun (androidx.compose.ui.focus/FocusPropertiesModifierNode).androidx.compose.ui.focus/invalidateFocusProperties() // androidx.compose.ui.focus/invalidateFocusProperties|invalidateFocusProperties@androidx.compose.ui.focus.FocusPropertiesModifierNode(){}[0]
final fun (androidx.compose.ui.focus/FocusRequesterModifierNode).androidx.compose.ui.focus/captureFocus(): kotlin/Boolean // androidx.compose.ui.focus/captureFocus|captureFocus@androidx.compose.ui.focus.FocusRequesterModifierNode(){}[0]
final fun (androidx.compose.ui.focus/FocusRequesterModifierNode).androidx.compose.ui.focus/freeFocus(): kotlin/Boolean // androidx.compose.ui.focus/freeFocus|freeFocus@androidx.compose.ui.focus.FocusRequesterModifierNode(){}[0]
final fun (androidx.compose.ui.focus/FocusRequesterModifierNode).androidx.compose.ui.focus/requestFocus(): kotlin/Boolean // androidx.compose.ui.focus/requestFocus|requestFocus@androidx.compose.ui.focus.FocusRequesterModifierNode(){}[0]
final fun (androidx.compose.ui.focus/FocusRequesterModifierNode).androidx.compose.ui.focus/restoreFocusedChild(): kotlin/Boolean // androidx.compose.ui.focus/restoreFocusedChild|restoreFocusedChild@androidx.compose.ui.focus.FocusRequesterModifierNode(){}[0]
final fun (androidx.compose.ui.focus/FocusRequesterModifierNode).androidx.compose.ui.focus/saveFocusedChild(): kotlin/Boolean // androidx.compose.ui.focus/saveFocusedChild|saveFocusedChild@androidx.compose.ui.focus.FocusRequesterModifierNode(){}[0]
final fun (androidx.compose.ui.geometry/Size).androidx.compose.ui.layout/div(androidx.compose.ui.layout/ScaleFactor): androidx.compose.ui.geometry/Size // androidx.compose.ui.layout/div|div@androidx.compose.ui.geometry.Size(androidx.compose.ui.layout.ScaleFactor){}[0]
final fun (androidx.compose.ui.geometry/Size).androidx.compose.ui.layout/times(androidx.compose.ui.layout/ScaleFactor): androidx.compose.ui.geometry/Size // androidx.compose.ui.layout/times|times@androidx.compose.ui.geometry.Size(androidx.compose.ui.layout.ScaleFactor){}[0]
final fun (androidx.compose.ui.input.pointer.util/VelocityTracker).androidx.compose.ui.input.pointer.util/addPointerInputChange(androidx.compose.ui.input.pointer/PointerInputChange) // androidx.compose.ui.input.pointer.util/addPointerInputChange|addPointerInputChange@androidx.compose.ui.input.pointer.util.VelocityTracker(androidx.compose.ui.input.pointer.PointerInputChange){}[0]
final fun (androidx.compose.ui.input.pointer.util/VelocityTracker).androidx.compose.ui.input.pointer.util/addPointerInputChange(androidx.compose.ui.input.pointer/PointerInputChange, androidx.compose.ui.geometry/Offset) // androidx.compose.ui.input.pointer.util/addPointerInputChange|addPointerInputChange@androidx.compose.ui.input.pointer.util.VelocityTracker(androidx.compose.ui.input.pointer.PointerInputChange;androidx.compose.ui.geometry.Offset){}[0]
final fun (androidx.compose.ui.input.pointer/PointerButtons).androidx.compose.ui.input.pointer/indexOfFirstPressed(): kotlin/Int // androidx.compose.ui.input.pointer/indexOfFirstPressed|indexOfFirstPressed@androidx.compose.ui.input.pointer.PointerButtons(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerButtons).androidx.compose.ui.input.pointer/indexOfLastPressed(): kotlin/Int // androidx.compose.ui.input.pointer/indexOfLastPressed|indexOfLastPressed@androidx.compose.ui.input.pointer.PointerButtons(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerButtons).androidx.compose.ui.input.pointer/isPressed(kotlin/Int): kotlin/Boolean // androidx.compose.ui.input.pointer/isPressed|isPressed@androidx.compose.ui.input.pointer.PointerButtons(kotlin.Int){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/anyChangeConsumed(): kotlin/Boolean // androidx.compose.ui.input.pointer/anyChangeConsumed|anyChangeConsumed@androidx.compose.ui.input.pointer.PointerInputChange(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/changedToDown(): kotlin/Boolean // androidx.compose.ui.input.pointer/changedToDown|changedToDown@androidx.compose.ui.input.pointer.PointerInputChange(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/changedToDownIgnoreConsumed(): kotlin/Boolean // androidx.compose.ui.input.pointer/changedToDownIgnoreConsumed|changedToDownIgnoreConsumed@androidx.compose.ui.input.pointer.PointerInputChange(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/changedToUp(): kotlin/Boolean // androidx.compose.ui.input.pointer/changedToUp|changedToUp@androidx.compose.ui.input.pointer.PointerInputChange(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/changedToUpIgnoreConsumed(): kotlin/Boolean // androidx.compose.ui.input.pointer/changedToUpIgnoreConsumed|changedToUpIgnoreConsumed@androidx.compose.ui.input.pointer.PointerInputChange(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/consumeAllChanges() // androidx.compose.ui.input.pointer/consumeAllChanges|consumeAllChanges@androidx.compose.ui.input.pointer.PointerInputChange(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/consumeDownChange() // androidx.compose.ui.input.pointer/consumeDownChange|consumeDownChange@androidx.compose.ui.input.pointer.PointerInputChange(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/consumePositionChange() // androidx.compose.ui.input.pointer/consumePositionChange|consumePositionChange@androidx.compose.ui.input.pointer.PointerInputChange(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/isOutOfBounds(androidx.compose.ui.unit/IntSize): kotlin/Boolean // androidx.compose.ui.input.pointer/isOutOfBounds|isOutOfBounds@androidx.compose.ui.input.pointer.PointerInputChange(androidx.compose.ui.unit.IntSize){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/isOutOfBounds(androidx.compose.ui.unit/IntSize, androidx.compose.ui.geometry/Size): kotlin/Boolean // androidx.compose.ui.input.pointer/isOutOfBounds|isOutOfBounds@androidx.compose.ui.input.pointer.PointerInputChange(androidx.compose.ui.unit.IntSize;androidx.compose.ui.geometry.Size){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/positionChange(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.input.pointer/positionChange|positionChange@androidx.compose.ui.input.pointer.PointerInputChange(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/positionChangeConsumed(): kotlin/Boolean // androidx.compose.ui.input.pointer/positionChangeConsumed|positionChangeConsumed@androidx.compose.ui.input.pointer.PointerInputChange(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/positionChangeIgnoreConsumed(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.input.pointer/positionChangeIgnoreConsumed|positionChangeIgnoreConsumed@androidx.compose.ui.input.pointer.PointerInputChange(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/positionChanged(): kotlin/Boolean // androidx.compose.ui.input.pointer/positionChanged|positionChanged@androidx.compose.ui.input.pointer.PointerInputChange(){}[0]
final fun (androidx.compose.ui.input.pointer/PointerInputChange).androidx.compose.ui.input.pointer/positionChangedIgnoreConsumed(): kotlin/Boolean // androidx.compose.ui.input.pointer/positionChangedIgnoreConsumed|positionChangedIgnoreConsumed@androidx.compose.ui.input.pointer.PointerInputChange(){}[0]
final fun (androidx.compose.ui.layout/LayoutCoordinates).androidx.compose.ui.layout/boundsInParent(): androidx.compose.ui.geometry/Rect // androidx.compose.ui.layout/boundsInParent|boundsInParent@androidx.compose.ui.layout.LayoutCoordinates(){}[0]
final fun (androidx.compose.ui.layout/LayoutCoordinates).androidx.compose.ui.layout/boundsInRoot(): androidx.compose.ui.geometry/Rect // androidx.compose.ui.layout/boundsInRoot|boundsInRoot@androidx.compose.ui.layout.LayoutCoordinates(){}[0]
final fun (androidx.compose.ui.layout/LayoutCoordinates).androidx.compose.ui.layout/boundsInWindow(): androidx.compose.ui.geometry/Rect // androidx.compose.ui.layout/boundsInWindow|boundsInWindow@androidx.compose.ui.layout.LayoutCoordinates(){}[0]
final fun (androidx.compose.ui.layout/LayoutCoordinates).androidx.compose.ui.layout/findRootCoordinates(): androidx.compose.ui.layout/LayoutCoordinates // androidx.compose.ui.layout/findRootCoordinates|findRootCoordinates@androidx.compose.ui.layout.LayoutCoordinates(){}[0]
final fun (androidx.compose.ui.layout/LayoutCoordinates).androidx.compose.ui.layout/positionInParent(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.layout/positionInParent|positionInParent@androidx.compose.ui.layout.LayoutCoordinates(){}[0]
final fun (androidx.compose.ui.layout/LayoutCoordinates).androidx.compose.ui.layout/positionInRoot(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.layout/positionInRoot|positionInRoot@androidx.compose.ui.layout.LayoutCoordinates(){}[0]
final fun (androidx.compose.ui.layout/LayoutCoordinates).androidx.compose.ui.layout/positionInWindow(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.layout/positionInWindow|positionInWindow@androidx.compose.ui.layout.LayoutCoordinates(){}[0]
final fun (androidx.compose.ui.layout/LayoutCoordinates).androidx.compose.ui.layout/positionOnScreen(): androidx.compose.ui.geometry/Offset // androidx.compose.ui.layout/positionOnScreen|positionOnScreen@androidx.compose.ui.layout.LayoutCoordinates(){}[0]
final fun (androidx.compose.ui.layout/RectRulers.Companion).androidx.compose.ui.layout/innermostOf(kotlin/Array<out androidx.compose.ui.layout/RectRulers>...): androidx.compose.ui.layout/RectRulers // androidx.compose.ui.layout/innermostOf|innermostOf@androidx.compose.ui.layout.RectRulers.Companion(kotlin.Array<out|androidx.compose.ui.layout.RectRulers>...){}[0]
final fun (androidx.compose.ui.layout/RectRulers.Companion).androidx.compose.ui.layout/outermostOf(kotlin/Array<out androidx.compose.ui.layout/RectRulers>...): androidx.compose.ui.layout/RectRulers // androidx.compose.ui.layout/outermostOf|outermostOf@androidx.compose.ui.layout.RectRulers.Companion(kotlin.Array<out|androidx.compose.ui.layout.RectRulers>...){}[0]
final fun (androidx.compose.ui.layout/ScaleFactor).androidx.compose.ui.layout/times(androidx.compose.ui.geometry/Size): androidx.compose.ui.geometry/Size // androidx.compose.ui.layout/times|times@androidx.compose.ui.layout.ScaleFactor(androidx.compose.ui.geometry.Size){}[0]
final fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.layout/registerOnGlobalLayoutListener(kotlin/Long, kotlin/Long, kotlin/Function1<androidx.compose.ui.spatial/RelativeLayoutBounds, kotlin/Unit>): androidx.compose.ui.node/DelegatableNode.RegistrationHandle // androidx.compose.ui.layout/registerOnGlobalLayoutListener|registerOnGlobalLayoutListener@androidx.compose.ui.node.DelegatableNode(kotlin.Long;kotlin.Long;kotlin.Function1<androidx.compose.ui.spatial.RelativeLayoutBounds,kotlin.Unit>){}[0]
final fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.layout/registerOnLayoutRectChanged(kotlin/Long, kotlin/Long, kotlin/Function1<androidx.compose.ui.spatial/RelativeLayoutBounds, kotlin/Unit>): androidx.compose.ui.node/DelegatableNode.RegistrationHandle // androidx.compose.ui.layout/registerOnLayoutRectChanged|registerOnLayoutRectChanged@androidx.compose.ui.node.DelegatableNode(kotlin.Long;kotlin.Long;kotlin.Function1<androidx.compose.ui.spatial.RelativeLayoutBounds,kotlin.Unit>){}[0]
final fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.node/dispatchOnScrollChanged(androidx.compose.ui.geometry/Offset) // androidx.compose.ui.node/dispatchOnScrollChanged|dispatchOnScrollChanged@androidx.compose.ui.node.DelegatableNode(androidx.compose.ui.geometry.Offset){}[0]
final fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.node/findNearestAncestor(kotlin/Any?): androidx.compose.ui.node/TraversableNode? // androidx.compose.ui.node/findNearestAncestor|findNearestAncestor@androidx.compose.ui.node.DelegatableNode(kotlin.Any?){}[0]
final fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.node/invalidateSubtree() // androidx.compose.ui.node/invalidateSubtree|invalidateSubtree@androidx.compose.ui.node.DelegatableNode(){}[0]
final fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.node/requestAutofill() // androidx.compose.ui.node/requestAutofill|requestAutofill@androidx.compose.ui.node.DelegatableNode(){}[0]
final fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.node/requireDensity(): androidx.compose.ui.unit/Density // androidx.compose.ui.node/requireDensity|requireDensity@androidx.compose.ui.node.DelegatableNode(){}[0]
final fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.node/requireGraphicsContext(): androidx.compose.ui.graphics/GraphicsContext // androidx.compose.ui.node/requireGraphicsContext|requireGraphicsContext@androidx.compose.ui.node.DelegatableNode(){}[0]
final fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.node/requireLayoutCoordinates(): androidx.compose.ui.layout/LayoutCoordinates // androidx.compose.ui.node/requireLayoutCoordinates|requireLayoutCoordinates@androidx.compose.ui.node.DelegatableNode(){}[0]
final fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.node/requireLayoutDirection(): androidx.compose.ui.unit/LayoutDirection // androidx.compose.ui.node/requireLayoutDirection|requireLayoutDirection@androidx.compose.ui.node.DelegatableNode(){}[0]
final fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.node/traverseAncestors(kotlin/Any?, kotlin/Function1<androidx.compose.ui.node/TraversableNode, kotlin/Boolean>) // androidx.compose.ui.node/traverseAncestors|traverseAncestors@androidx.compose.ui.node.DelegatableNode(kotlin.Any?;kotlin.Function1<androidx.compose.ui.node.TraversableNode,kotlin.Boolean>){}[0]
final fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.node/traverseChildren(kotlin/Any?, kotlin/Function1<androidx.compose.ui.node/TraversableNode, kotlin/Boolean>) // androidx.compose.ui.node/traverseChildren|traverseChildren@androidx.compose.ui.node.DelegatableNode(kotlin.Any?;kotlin.Function1<androidx.compose.ui.node.TraversableNode,kotlin.Boolean>){}[0]
final fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.node/traverseDescendants(kotlin/Any?, kotlin/Function1<androidx.compose.ui.node/TraversableNode, androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction>) // androidx.compose.ui.node/traverseDescendants|traverseDescendants@androidx.compose.ui.node.DelegatableNode(kotlin.Any?;kotlin.Function1<androidx.compose.ui.node.TraversableNode,androidx.compose.ui.node.TraversableNode.Companion.TraverseDescendantsAction>){}[0]
final fun (androidx.compose.ui.node/DrawModifierNode).androidx.compose.ui.node/invalidateDraw() // androidx.compose.ui.node/invalidateDraw|invalidateDraw@androidx.compose.ui.node.DrawModifierNode(){}[0]
final fun (androidx.compose.ui.node/LayoutModifierNode).androidx.compose.ui.node/invalidateLayer() // androidx.compose.ui.node/invalidateLayer|invalidateLayer@androidx.compose.ui.node.LayoutModifierNode(){}[0]
final fun (androidx.compose.ui.node/LayoutModifierNode).androidx.compose.ui.node/invalidateMeasurement() // androidx.compose.ui.node/invalidateMeasurement|invalidateMeasurement@androidx.compose.ui.node.LayoutModifierNode(){}[0]
final fun (androidx.compose.ui.node/LayoutModifierNode).androidx.compose.ui.node/invalidatePlacement() // androidx.compose.ui.node/invalidatePlacement|invalidatePlacement@androidx.compose.ui.node.LayoutModifierNode(){}[0]
final fun (androidx.compose.ui.node/LayoutModifierNode).androidx.compose.ui.node/remeasureSync() // androidx.compose.ui.node/remeasureSync|remeasureSync@androidx.compose.ui.node.LayoutModifierNode(){}[0]
final fun (androidx.compose.ui.node/ParentDataModifierNode).androidx.compose.ui.node/invalidateParentData() // androidx.compose.ui.node/invalidateParentData|invalidateParentData@androidx.compose.ui.node.ParentDataModifierNode(){}[0]
final fun (androidx.compose.ui.node/SemanticsModifierNode).androidx.compose.ui.node/invalidateSemantics() // androidx.compose.ui.node/invalidateSemantics|invalidateSemantics@androidx.compose.ui.node.SemanticsModifierNode(){}[0]
final fun (androidx.compose.ui.semantics/SemanticsOwner).androidx.compose.ui.semantics/getAllSemanticsNodes(kotlin/Boolean): kotlin.collections/List<androidx.compose.ui.semantics/SemanticsNode> // androidx.compose.ui.semantics/getAllSemanticsNodes|getAllSemanticsNodes@androidx.compose.ui.semantics.SemanticsOwner(kotlin.Boolean){}[0]
final fun (androidx.compose.ui.semantics/SemanticsOwner).androidx.compose.ui.semantics/getAllSemanticsNodes(kotlin/Boolean, kotlin/Boolean = ...): kotlin.collections/List<androidx.compose.ui.semantics/SemanticsNode> // androidx.compose.ui.semantics/getAllSemanticsNodes|getAllSemanticsNodes@androidx.compose.ui.semantics.SemanticsOwner(kotlin.Boolean;kotlin.Boolean){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/clearTextSubstitution(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/clearTextSubstitution|clearTextSubstitution@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/collapse(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/collapse|collapse@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/copyText(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/copyText|copyText@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/cutText(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/cutText|cutText@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/dialog() // androidx.compose.ui.semantics/dialog|dialog@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/disabled() // androidx.compose.ui.semantics/disabled|disabled@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/dismiss(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/dismiss|dismiss@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/error(kotlin/String) // androidx.compose.ui.semantics/error|error@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/expand(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/expand|expand@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/getScrollViewportLength(kotlin/String? = ..., kotlin/Function0<kotlin/Float?>) // androidx.compose.ui.semantics/getScrollViewportLength|getScrollViewportLength@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Float?>){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/getTextLayoutResult(kotlin/String? = ..., kotlin/Function1<kotlin.collections/MutableList<androidx.compose.ui.text/TextLayoutResult>, kotlin/Boolean>?) // androidx.compose.ui.semantics/getTextLayoutResult|getTextLayoutResult@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function1<kotlin.collections.MutableList<androidx.compose.ui.text.TextLayoutResult>,kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/heading() // androidx.compose.ui.semantics/heading|heading@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/hideFromAccessibility() // androidx.compose.ui.semantics/hideFromAccessibility|hideFromAccessibility@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/indexForKey(kotlin/Function1<kotlin/Any, kotlin/Int>) // androidx.compose.ui.semantics/indexForKey|indexForKey@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.Function1<kotlin.Any,kotlin.Int>){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/insertTextAtCursor(kotlin/String? = ..., kotlin/Function1<androidx.compose.ui.text/AnnotatedString, kotlin/Boolean>?) // androidx.compose.ui.semantics/insertTextAtCursor|insertTextAtCursor@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function1<androidx.compose.ui.text.AnnotatedString,kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/invisibleToUser() // androidx.compose.ui.semantics/invisibleToUser|invisibleToUser@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/onAutofillText(kotlin/String? = ..., kotlin/Function1<androidx.compose.ui.text/AnnotatedString, kotlin/Boolean>?) // androidx.compose.ui.semantics/onAutofillText|onAutofillText@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function1<androidx.compose.ui.text.AnnotatedString,kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/onClick(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/onClick|onClick@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/onImeAction(androidx.compose.ui.text.input/ImeAction, kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/onImeAction|onImeAction@androidx.compose.ui.semantics.SemanticsPropertyReceiver(androidx.compose.ui.text.input.ImeAction;kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/onLongClick(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/onLongClick|onLongClick@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/pageDown(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/pageDown|pageDown@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/pageLeft(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/pageLeft|pageLeft@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/pageRight(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/pageRight|pageRight@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/pageUp(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/pageUp|pageUp@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/password() // androidx.compose.ui.semantics/password|password@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/pasteText(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/pasteText|pasteText@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/performImeAction(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/performImeAction|performImeAction@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/popup() // androidx.compose.ui.semantics/popup|popup@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/requestFocus(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>?) // androidx.compose.ui.semantics/requestFocus|requestFocus@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function0<kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/scrollBy(kotlin/String? = ..., kotlin/Function2<kotlin/Float, kotlin/Float, kotlin/Boolean>?) // androidx.compose.ui.semantics/scrollBy|scrollBy@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function2<kotlin.Float,kotlin.Float,kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/scrollByOffset(kotlin.coroutines/SuspendFunction1<androidx.compose.ui.geometry/Offset, androidx.compose.ui.geometry/Offset>) // androidx.compose.ui.semantics/scrollByOffset|scrollByOffset@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.coroutines.SuspendFunction1<androidx.compose.ui.geometry.Offset,androidx.compose.ui.geometry.Offset>){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/scrollToIndex(kotlin/String? = ..., kotlin/Function1<kotlin/Int, kotlin/Boolean>) // androidx.compose.ui.semantics/scrollToIndex|scrollToIndex@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/selectableGroup() // androidx.compose.ui.semantics/selectableGroup|selectableGroup@androidx.compose.ui.semantics.SemanticsPropertyReceiver(){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/setProgress(kotlin/String? = ..., kotlin/Function1<kotlin/Float, kotlin/Boolean>?) // androidx.compose.ui.semantics/setProgress|setProgress@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function1<kotlin.Float,kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/setSelection(kotlin/String? = ..., kotlin/Function3<kotlin/Int, kotlin/Int, kotlin/Boolean, kotlin/Boolean>?) // androidx.compose.ui.semantics/setSelection|setSelection@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function3<kotlin.Int,kotlin.Int,kotlin.Boolean,kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/setText(kotlin/String? = ..., kotlin/Function1<androidx.compose.ui.text/AnnotatedString, kotlin/Boolean>?) // androidx.compose.ui.semantics/setText|setText@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function1<androidx.compose.ui.text.AnnotatedString,kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/setTextSubstitution(kotlin/String? = ..., kotlin/Function1<androidx.compose.ui.text/AnnotatedString, kotlin/Boolean>?) // androidx.compose.ui.semantics/setTextSubstitution|setTextSubstitution@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function1<androidx.compose.ui.text.AnnotatedString,kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui.semantics/SemanticsPropertyReceiver).androidx.compose.ui.semantics/showTextSubstitution(kotlin/String? = ..., kotlin/Function1<kotlin/Boolean, kotlin/Boolean>?) // androidx.compose.ui.semantics/showTextSubstitution|showTextSubstitution@androidx.compose.ui.semantics.SemanticsPropertyReceiver(kotlin.String?;kotlin.Function1<kotlin.Boolean,kotlin.Boolean>?){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.autofill/contentType(androidx.compose.ui.autofill/ContentType): androidx.compose.ui/Modifier // androidx.compose.ui.autofill/contentType|contentType@androidx.compose.ui.Modifier(androidx.compose.ui.autofill.ContentType){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/alpha(kotlin/Float): androidx.compose.ui/Modifier // androidx.compose.ui.draw/alpha|alpha@androidx.compose.ui.Modifier(kotlin.Float){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/blur(androidx.compose.ui.unit/Dp, androidx.compose.ui.draw/BlurredEdgeTreatment = ...): androidx.compose.ui/Modifier // androidx.compose.ui.draw/blur|blur@androidx.compose.ui.Modifier(androidx.compose.ui.unit.Dp;androidx.compose.ui.draw.BlurredEdgeTreatment){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/blur(androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.ui.draw/BlurredEdgeTreatment = ...): androidx.compose.ui/Modifier // androidx.compose.ui.draw/blur|blur@androidx.compose.ui.Modifier(androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.draw.BlurredEdgeTreatment){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/clip(androidx.compose.ui.graphics/Shape): androidx.compose.ui/Modifier // androidx.compose.ui.draw/clip|clip@androidx.compose.ui.Modifier(androidx.compose.ui.graphics.Shape){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/clipToBounds(): androidx.compose.ui/Modifier // androidx.compose.ui.draw/clipToBounds|clipToBounds@androidx.compose.ui.Modifier(){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/drawBehind(kotlin/Function1<androidx.compose.ui.graphics.drawscope/DrawScope, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.draw/drawBehind|drawBehind@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/drawWithCache(kotlin/Function1<androidx.compose.ui.draw/CacheDrawScope, androidx.compose.ui.draw/DrawResult>): androidx.compose.ui/Modifier // androidx.compose.ui.draw/drawWithCache|drawWithCache@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.draw.CacheDrawScope,androidx.compose.ui.draw.DrawResult>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/drawWithContent(kotlin/Function1<androidx.compose.ui.graphics.drawscope/ContentDrawScope, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.draw/drawWithContent|drawWithContent@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.graphics.drawscope.ContentDrawScope,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/paint(androidx.compose.ui.graphics.painter/Painter, kotlin/Boolean = ..., androidx.compose.ui/Alignment = ..., androidx.compose.ui.layout/ContentScale = ..., kotlin/Float = ..., androidx.compose.ui.graphics/ColorFilter? = ...): androidx.compose.ui/Modifier // androidx.compose.ui.draw/paint|paint@androidx.compose.ui.Modifier(androidx.compose.ui.graphics.painter.Painter;kotlin.Boolean;androidx.compose.ui.Alignment;androidx.compose.ui.layout.ContentScale;kotlin.Float;androidx.compose.ui.graphics.ColorFilter?){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/rotate(kotlin/Float): androidx.compose.ui/Modifier // androidx.compose.ui.draw/rotate|rotate@androidx.compose.ui.Modifier(kotlin.Float){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/scale(kotlin/Float): androidx.compose.ui/Modifier // androidx.compose.ui.draw/scale|scale@androidx.compose.ui.Modifier(kotlin.Float){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/scale(kotlin/Float, kotlin/Float): androidx.compose.ui/Modifier // androidx.compose.ui.draw/scale|scale@androidx.compose.ui.Modifier(kotlin.Float;kotlin.Float){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/shadow(androidx.compose.ui.unit/Dp, androidx.compose.ui.graphics/Shape = ..., kotlin/Boolean = ...): androidx.compose.ui/Modifier // androidx.compose.ui.draw/shadow|shadow@androidx.compose.ui.Modifier(androidx.compose.ui.unit.Dp;androidx.compose.ui.graphics.Shape;kotlin.Boolean){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.draw/shadow(androidx.compose.ui.unit/Dp, androidx.compose.ui.graphics/Shape = ..., kotlin/Boolean = ..., androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/Color = ...): androidx.compose.ui/Modifier // androidx.compose.ui.draw/shadow|shadow@androidx.compose.ui.Modifier(androidx.compose.ui.unit.Dp;androidx.compose.ui.graphics.Shape;kotlin.Boolean;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.focus/focusModifier(): androidx.compose.ui/Modifier // androidx.compose.ui.focus/focusModifier|focusModifier@androidx.compose.ui.Modifier(){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.focus/focusOrder(androidx.compose.ui.focus/FocusRequester): androidx.compose.ui/Modifier // androidx.compose.ui.focus/focusOrder|focusOrder@androidx.compose.ui.Modifier(androidx.compose.ui.focus.FocusRequester){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.focus/focusOrder(androidx.compose.ui.focus/FocusRequester, kotlin/Function1<androidx.compose.ui.focus/FocusOrder, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.focus/focusOrder|focusOrder@androidx.compose.ui.Modifier(androidx.compose.ui.focus.FocusRequester;kotlin.Function1<androidx.compose.ui.focus.FocusOrder,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.focus/focusOrder(kotlin/Function1<androidx.compose.ui.focus/FocusOrder, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.focus/focusOrder|focusOrder@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.focus.FocusOrder,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.focus/focusProperties(kotlin/Function1<androidx.compose.ui.focus/FocusProperties, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.focus/focusProperties|focusProperties@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.focus.FocusProperties,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.focus/focusRequester(androidx.compose.ui.focus/FocusRequester): androidx.compose.ui/Modifier // androidx.compose.ui.focus/focusRequester|focusRequester@androidx.compose.ui.Modifier(androidx.compose.ui.focus.FocusRequester){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.focus/focusRestorer(androidx.compose.ui.focus/FocusRequester = ...): androidx.compose.ui/Modifier // androidx.compose.ui.focus/focusRestorer|focusRestorer@androidx.compose.ui.Modifier(androidx.compose.ui.focus.FocusRequester){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.focus/focusTarget(): androidx.compose.ui/Modifier // androidx.compose.ui.focus/focusTarget|focusTarget@androidx.compose.ui.Modifier(){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.focus/onFocusChanged(kotlin/Function1<androidx.compose.ui.focus/FocusState, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.focus/onFocusChanged|onFocusChanged@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.focus.FocusState,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.focus/onFocusEvent(kotlin/Function1<androidx.compose.ui.focus/FocusState, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.focus/onFocusEvent|onFocusEvent@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.focus.FocusState,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.graphics/graphicsLayer(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/TransformOrigin = ..., androidx.compose.ui.graphics/Shape = ..., kotlin/Boolean = ...): androidx.compose.ui/Modifier // androidx.compose.ui.graphics/graphicsLayer|graphicsLayer@androidx.compose.ui.Modifier(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.TransformOrigin;androidx.compose.ui.graphics.Shape;kotlin.Boolean){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.graphics/graphicsLayer(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/TransformOrigin = ..., androidx.compose.ui.graphics/Shape = ..., kotlin/Boolean = ..., androidx.compose.ui.graphics/RenderEffect? = ...): androidx.compose.ui/Modifier // androidx.compose.ui.graphics/graphicsLayer|graphicsLayer@androidx.compose.ui.Modifier(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.TransformOrigin;androidx.compose.ui.graphics.Shape;kotlin.Boolean;androidx.compose.ui.graphics.RenderEffect?){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.graphics/graphicsLayer(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/TransformOrigin = ..., androidx.compose.ui.graphics/Shape = ..., kotlin/Boolean = ..., androidx.compose.ui.graphics/RenderEffect? = ..., androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/Color = ...): androidx.compose.ui/Modifier // androidx.compose.ui.graphics/graphicsLayer|graphicsLayer@androidx.compose.ui.Modifier(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.TransformOrigin;androidx.compose.ui.graphics.Shape;kotlin.Boolean;androidx.compose.ui.graphics.RenderEffect?;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.graphics/graphicsLayer(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/TransformOrigin = ..., androidx.compose.ui.graphics/Shape = ..., kotlin/Boolean = ..., androidx.compose.ui.graphics/RenderEffect? = ..., androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/CompositingStrategy = ...): androidx.compose.ui/Modifier // androidx.compose.ui.graphics/graphicsLayer|graphicsLayer@androidx.compose.ui.Modifier(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.TransformOrigin;androidx.compose.ui.graphics.Shape;kotlin.Boolean;androidx.compose.ui.graphics.RenderEffect?;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.CompositingStrategy){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.graphics/graphicsLayer(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/TransformOrigin = ..., androidx.compose.ui.graphics/Shape = ..., kotlin/Boolean = ..., androidx.compose.ui.graphics/RenderEffect? = ..., androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/CompositingStrategy = ..., androidx.compose.ui.graphics/BlendMode = ..., androidx.compose.ui.graphics/ColorFilter? = ...): androidx.compose.ui/Modifier // androidx.compose.ui.graphics/graphicsLayer|graphicsLayer@androidx.compose.ui.Modifier(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.TransformOrigin;androidx.compose.ui.graphics.Shape;kotlin.Boolean;androidx.compose.ui.graphics.RenderEffect?;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.CompositingStrategy;androidx.compose.ui.graphics.BlendMode;androidx.compose.ui.graphics.ColorFilter?){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.graphics/graphicsLayer(kotlin/Function1<androidx.compose.ui.graphics/GraphicsLayerScope, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.graphics/graphicsLayer|graphicsLayer@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.graphics.GraphicsLayerScope,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.graphics/toolingGraphicsLayer(): androidx.compose.ui/Modifier // androidx.compose.ui.graphics/toolingGraphicsLayer|toolingGraphicsLayer@androidx.compose.ui.Modifier(){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.key/onInterceptKeyBeforeSoftKeyboard(kotlin/Function1<androidx.compose.ui.input.key/KeyEvent, kotlin/Boolean>): androidx.compose.ui/Modifier // androidx.compose.ui.input.key/onInterceptKeyBeforeSoftKeyboard|onInterceptKeyBeforeSoftKeyboard@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.input.key.KeyEvent,kotlin.Boolean>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.key/onKeyEvent(kotlin/Function1<androidx.compose.ui.input.key/KeyEvent, kotlin/Boolean>): androidx.compose.ui/Modifier // androidx.compose.ui.input.key/onKeyEvent|onKeyEvent@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.input.key.KeyEvent,kotlin.Boolean>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.key/onPreInterceptKeyBeforeSoftKeyboard(kotlin/Function1<androidx.compose.ui.input.key/KeyEvent, kotlin/Boolean>): androidx.compose.ui/Modifier // androidx.compose.ui.input.key/onPreInterceptKeyBeforeSoftKeyboard|onPreInterceptKeyBeforeSoftKeyboard@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.input.key.KeyEvent,kotlin.Boolean>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.key/onPreviewKeyEvent(kotlin/Function1<androidx.compose.ui.input.key/KeyEvent, kotlin/Boolean>): androidx.compose.ui/Modifier // androidx.compose.ui.input.key/onPreviewKeyEvent|onPreviewKeyEvent@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.input.key.KeyEvent,kotlin.Boolean>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.nestedscroll/nestedScroll(androidx.compose.ui.input.nestedscroll/NestedScrollConnection, androidx.compose.ui.input.nestedscroll/NestedScrollDispatcher? = ...): androidx.compose.ui/Modifier // androidx.compose.ui.input.nestedscroll/nestedScroll|nestedScroll@androidx.compose.ui.Modifier(androidx.compose.ui.input.nestedscroll.NestedScrollConnection;androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher?){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.pointer/pointerHoverIcon(androidx.compose.ui.input.pointer/PointerIcon, kotlin/Boolean = ...): androidx.compose.ui/Modifier // androidx.compose.ui.input.pointer/pointerHoverIcon|pointerHoverIcon@androidx.compose.ui.Modifier(androidx.compose.ui.input.pointer.PointerIcon;kotlin.Boolean){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.pointer/pointerInput(kotlin.coroutines/SuspendFunction1<androidx.compose.ui.input.pointer/PointerInputScope, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.input.pointer/pointerInput|pointerInput@androidx.compose.ui.Modifier(kotlin.coroutines.SuspendFunction1<androidx.compose.ui.input.pointer.PointerInputScope,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.pointer/pointerInput(kotlin/Any?, androidx.compose.ui.input.pointer/PointerInputEventHandler): androidx.compose.ui/Modifier // androidx.compose.ui.input.pointer/pointerInput|pointerInput@androidx.compose.ui.Modifier(kotlin.Any?;androidx.compose.ui.input.pointer.PointerInputEventHandler){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.pointer/pointerInput(kotlin/Any?, kotlin.coroutines/SuspendFunction1<androidx.compose.ui.input.pointer/PointerInputScope, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.input.pointer/pointerInput|pointerInput@androidx.compose.ui.Modifier(kotlin.Any?;kotlin.coroutines.SuspendFunction1<androidx.compose.ui.input.pointer.PointerInputScope,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.pointer/pointerInput(kotlin/Any?, kotlin/Any?, androidx.compose.ui.input.pointer/PointerInputEventHandler): androidx.compose.ui/Modifier // androidx.compose.ui.input.pointer/pointerInput|pointerInput@androidx.compose.ui.Modifier(kotlin.Any?;kotlin.Any?;androidx.compose.ui.input.pointer.PointerInputEventHandler){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.pointer/pointerInput(kotlin/Any?, kotlin/Any?, kotlin.coroutines/SuspendFunction1<androidx.compose.ui.input.pointer/PointerInputScope, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.input.pointer/pointerInput|pointerInput@androidx.compose.ui.Modifier(kotlin.Any?;kotlin.Any?;kotlin.coroutines.SuspendFunction1<androidx.compose.ui.input.pointer.PointerInputScope,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.pointer/pointerInput(kotlin/Array<out kotlin/Any?>..., androidx.compose.ui.input.pointer/PointerInputEventHandler): androidx.compose.ui/Modifier // androidx.compose.ui.input.pointer/pointerInput|pointerInput@androidx.compose.ui.Modifier(kotlin.Array<out|kotlin.Any?>...;androidx.compose.ui.input.pointer.PointerInputEventHandler){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.pointer/pointerInput(kotlin/Array<out kotlin/Any?>..., kotlin.coroutines/SuspendFunction1<androidx.compose.ui.input.pointer/PointerInputScope, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.input.pointer/pointerInput|pointerInput@androidx.compose.ui.Modifier(kotlin.Array<out|kotlin.Any?>...;kotlin.coroutines.SuspendFunction1<androidx.compose.ui.input.pointer.PointerInputScope,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.pointer/stylusHoverIcon(androidx.compose.ui.input.pointer/PointerIcon, kotlin/Boolean = ..., androidx.compose.ui.node/DpTouchBoundsExpansion? = ...): androidx.compose.ui/Modifier // androidx.compose.ui.input.pointer/stylusHoverIcon|stylusHoverIcon@androidx.compose.ui.Modifier(androidx.compose.ui.input.pointer.PointerIcon;kotlin.Boolean;androidx.compose.ui.node.DpTouchBoundsExpansion?){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.rotary/onPreRotaryScrollEvent(kotlin/Function1<androidx.compose.ui.input.rotary/RotaryScrollEvent, kotlin/Boolean>): androidx.compose.ui/Modifier // androidx.compose.ui.input.rotary/onPreRotaryScrollEvent|onPreRotaryScrollEvent@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.input.rotary.RotaryScrollEvent,kotlin.Boolean>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.input.rotary/onRotaryScrollEvent(kotlin/Function1<androidx.compose.ui.input.rotary/RotaryScrollEvent, kotlin/Boolean>): androidx.compose.ui/Modifier // androidx.compose.ui.input.rotary/onRotaryScrollEvent|onRotaryScrollEvent@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.input.rotary.RotaryScrollEvent,kotlin.Boolean>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.layout/approachLayout(kotlin/Function1<androidx.compose.ui.unit/IntSize, kotlin/Boolean>, kotlin/Function2<androidx.compose.ui.layout/Placeable.PlacementScope, androidx.compose.ui.layout/LayoutCoordinates, kotlin/Boolean> = ..., kotlin/Function3<androidx.compose.ui.layout/ApproachMeasureScope, androidx.compose.ui.layout/Measurable, androidx.compose.ui.unit/Constraints, androidx.compose.ui.layout/MeasureResult>): androidx.compose.ui/Modifier // androidx.compose.ui.layout/approachLayout|approachLayout@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.unit.IntSize,kotlin.Boolean>;kotlin.Function2<androidx.compose.ui.layout.Placeable.PlacementScope,androidx.compose.ui.layout.LayoutCoordinates,kotlin.Boolean>;kotlin.Function3<androidx.compose.ui.layout.ApproachMeasureScope,androidx.compose.ui.layout.Measurable,androidx.compose.ui.unit.Constraints,androidx.compose.ui.layout.MeasureResult>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.layout/layout(kotlin/Function3<androidx.compose.ui.layout/MeasureScope, androidx.compose.ui.layout/Measurable, androidx.compose.ui.unit/Constraints, androidx.compose.ui.layout/MeasureResult>): androidx.compose.ui/Modifier // androidx.compose.ui.layout/layout|layout@androidx.compose.ui.Modifier(kotlin.Function3<androidx.compose.ui.layout.MeasureScope,androidx.compose.ui.layout.Measurable,androidx.compose.ui.unit.Constraints,androidx.compose.ui.layout.MeasureResult>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.layout/layoutId(kotlin/Any): androidx.compose.ui/Modifier // androidx.compose.ui.layout/layoutId|layoutId@androidx.compose.ui.Modifier(kotlin.Any){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.layout/onGloballyPositioned(kotlin/Function1<androidx.compose.ui.layout/LayoutCoordinates, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.layout/onGloballyPositioned|onGloballyPositioned@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.layout.LayoutCoordinates,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.layout/onLayoutRectChanged(kotlin/Long = ..., kotlin/Long = ..., kotlin/Function1<androidx.compose.ui.spatial/RelativeLayoutBounds, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.layout/onLayoutRectChanged|onLayoutRectChanged@androidx.compose.ui.Modifier(kotlin.Long;kotlin.Long;kotlin.Function1<androidx.compose.ui.spatial.RelativeLayoutBounds,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.layout/onPlaced(kotlin/Function1<androidx.compose.ui.layout/LayoutCoordinates, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.layout/onPlaced|onPlaced@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.layout.LayoutCoordinates,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.layout/onSizeChanged(kotlin/Function1<androidx.compose.ui.unit/IntSize, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.layout/onSizeChanged|onSizeChanged@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.unit.IntSize,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.modifier/modifierLocalConsumer(kotlin/Function1<androidx.compose.ui.modifier/ModifierLocalReadScope, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.modifier/modifierLocalConsumer|modifierLocalConsumer@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.modifier.ModifierLocalReadScope,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.platform/inspectableWrapper(kotlin/Function1<androidx.compose.ui.platform/InspectorInfo, kotlin/Unit>, androidx.compose.ui/Modifier): androidx.compose.ui/Modifier // androidx.compose.ui.platform/inspectableWrapper|inspectableWrapper@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.platform.InspectorInfo,kotlin.Unit>;androidx.compose.ui.Modifier){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.platform/testTag(kotlin/String): androidx.compose.ui/Modifier // androidx.compose.ui.platform/testTag|testTag@androidx.compose.ui.Modifier(kotlin.String){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.semantics/clearAndSetSemantics(kotlin/Function1<androidx.compose.ui.semantics/SemanticsPropertyReceiver, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.semantics/clearAndSetSemantics|clearAndSetSemantics@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.semantics.SemanticsPropertyReceiver,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.semantics/semantics(kotlin/Boolean = ..., kotlin/Function1<androidx.compose.ui.semantics/SemanticsPropertyReceiver, kotlin/Unit>): androidx.compose.ui/Modifier // androidx.compose.ui.semantics/semantics|semantics@androidx.compose.ui.Modifier(kotlin.Boolean;kotlin.Function1<androidx.compose.ui.semantics.SemanticsPropertyReceiver,kotlin.Unit>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.ui/requestedFrameRate(androidx.compose.ui.ui/FrameRateCategory): androidx.compose.ui/Modifier // androidx.compose.ui.ui/requestedFrameRate|requestedFrameRate@androidx.compose.ui.Modifier(androidx.compose.ui.ui.FrameRateCategory){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui.ui/requestedFrameRate(kotlin/Float): androidx.compose.ui/Modifier // androidx.compose.ui.ui/requestedFrameRate|requestedFrameRate@androidx.compose.ui.Modifier(kotlin.Float){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui/composed(kotlin/Function1<androidx.compose.ui.platform/InspectorInfo, kotlin/Unit> = ..., kotlin/Function1<androidx.compose.ui/Modifier, androidx.compose.ui/Modifier>): androidx.compose.ui/Modifier // androidx.compose.ui/composed|composed@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.platform.InspectorInfo,kotlin.Unit>;kotlin.Function1<androidx.compose.ui.Modifier,androidx.compose.ui.Modifier>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui/composed(kotlin/String, kotlin/Any?, kotlin/Any?, kotlin/Any?, kotlin/Function1<androidx.compose.ui.platform/InspectorInfo, kotlin/Unit> = ..., kotlin/Function1<androidx.compose.ui/Modifier, androidx.compose.ui/Modifier>): androidx.compose.ui/Modifier // androidx.compose.ui/composed|composed@androidx.compose.ui.Modifier(kotlin.String;kotlin.Any?;kotlin.Any?;kotlin.Any?;kotlin.Function1<androidx.compose.ui.platform.InspectorInfo,kotlin.Unit>;kotlin.Function1<androidx.compose.ui.Modifier,androidx.compose.ui.Modifier>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui/composed(kotlin/String, kotlin/Any?, kotlin/Any?, kotlin/Function1<androidx.compose.ui.platform/InspectorInfo, kotlin/Unit> = ..., kotlin/Function1<androidx.compose.ui/Modifier, androidx.compose.ui/Modifier>): androidx.compose.ui/Modifier // androidx.compose.ui/composed|composed@androidx.compose.ui.Modifier(kotlin.String;kotlin.Any?;kotlin.Any?;kotlin.Function1<androidx.compose.ui.platform.InspectorInfo,kotlin.Unit>;kotlin.Function1<androidx.compose.ui.Modifier,androidx.compose.ui.Modifier>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui/composed(kotlin/String, kotlin/Any?, kotlin/Function1<androidx.compose.ui.platform/InspectorInfo, kotlin/Unit> = ..., kotlin/Function1<androidx.compose.ui/Modifier, androidx.compose.ui/Modifier>): androidx.compose.ui/Modifier // androidx.compose.ui/composed|composed@androidx.compose.ui.Modifier(kotlin.String;kotlin.Any?;kotlin.Function1<androidx.compose.ui.platform.InspectorInfo,kotlin.Unit>;kotlin.Function1<androidx.compose.ui.Modifier,androidx.compose.ui.Modifier>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui/composed(kotlin/String, kotlin/Array<out kotlin/Any?>..., kotlin/Function1<androidx.compose.ui.platform/InspectorInfo, kotlin/Unit> = ..., kotlin/Function1<androidx.compose.ui/Modifier, androidx.compose.ui/Modifier>): androidx.compose.ui/Modifier // androidx.compose.ui/composed|composed@androidx.compose.ui.Modifier(kotlin.String;kotlin.Array<out|kotlin.Any?>...;kotlin.Function1<androidx.compose.ui.platform.InspectorInfo,kotlin.Unit>;kotlin.Function1<androidx.compose.ui.Modifier,androidx.compose.ui.Modifier>){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui/keepScreenOn(): androidx.compose.ui/Modifier // androidx.compose.ui/keepScreenOn|keepScreenOn@androidx.compose.ui.Modifier(){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui/sensitiveContent(kotlin/Boolean = ...): androidx.compose.ui/Modifier // androidx.compose.ui/sensitiveContent|sensitiveContent@androidx.compose.ui.Modifier(kotlin.Boolean){}[0]
final fun (androidx.compose.ui/Modifier).androidx.compose.ui/zIndex(kotlin/Float): androidx.compose.ui/Modifier // androidx.compose.ui/zIndex|zIndex@androidx.compose.ui.Modifier(kotlin.Float){}[0]
final fun <#A: androidx.compose.ui.node/ObserverModifierNode & androidx.compose.ui/Modifier.Node> (#A).androidx.compose.ui.node/observeReads(kotlin/Function0<kotlin/Unit>) // androidx.compose.ui.node/observeReads|observeReads@0:0(kotlin.Function0<kotlin.Unit>){0§<androidx.compose.ui.Modifier.Node&androidx.compose.ui.node.ObserverModifierNode>}[0]
final fun <#A: androidx.compose.ui.node/TraversableNode> (#A).androidx.compose.ui.node/findNearestAncestor(): #A? // androidx.compose.ui.node/findNearestAncestor|findNearestAncestor@0:0(){0§<androidx.compose.ui.node.TraversableNode>}[0]
final fun <#A: androidx.compose.ui.node/TraversableNode> (#A).androidx.compose.ui.node/traverseAncestors(kotlin/Function1<#A, kotlin/Boolean>) // androidx.compose.ui.node/traverseAncestors|traverseAncestors@0:0(kotlin.Function1<0:0,kotlin.Boolean>){0§<androidx.compose.ui.node.TraversableNode>}[0]
final fun <#A: androidx.compose.ui.node/TraversableNode> (#A).androidx.compose.ui.node/traverseChildren(kotlin/Function1<#A, kotlin/Boolean>) // androidx.compose.ui.node/traverseChildren|traverseChildren@0:0(kotlin.Function1<0:0,kotlin.Boolean>){0§<androidx.compose.ui.node.TraversableNode>}[0]
final fun <#A: androidx.compose.ui.node/TraversableNode> (#A).androidx.compose.ui.node/traverseDescendants(kotlin/Function1<#A, androidx.compose.ui.node/TraversableNode.Companion.TraverseDescendantsAction>) // androidx.compose.ui.node/traverseDescendants|traverseDescendants@0:0(kotlin.Function1<0:0,androidx.compose.ui.node.TraversableNode.Companion.TraverseDescendantsAction>){0§<androidx.compose.ui.node.TraversableNode>}[0]
final fun <#A: kotlin/Any?> (androidx.compose.ui.node/CompositionLocalConsumerModifierNode).androidx.compose.ui.node/currentValueOf(androidx.compose.runtime/CompositionLocal<#A>): #A // androidx.compose.ui.node/currentValueOf|currentValueOf@androidx.compose.ui.node.CompositionLocalConsumerModifierNode(androidx.compose.runtime.CompositionLocal<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (androidx.compose.ui.semantics/SemanticsConfiguration).androidx.compose.ui.semantics/getOrNull(androidx.compose.ui.semantics/SemanticsPropertyKey<#A>): #A? // androidx.compose.ui.semantics/getOrNull|getOrNull@androidx.compose.ui.semantics.SemanticsConfiguration(androidx.compose.ui.semantics.SemanticsPropertyKey<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (androidx.compose.ui/Modifier).androidx.compose.ui.modifier/modifierLocalProvider(androidx.compose.ui.modifier/ProvidableModifierLocal<#A>, kotlin/Function0<#A>): androidx.compose.ui/Modifier // androidx.compose.ui.modifier/modifierLocalProvider|modifierLocalProvider@androidx.compose.ui.Modifier(androidx.compose.ui.modifier.ProvidableModifierLocal<0:0>;kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.ui.modifier/modifierLocalMapOf(androidx.compose.ui.modifier/ModifierLocal<#A>): androidx.compose.ui.modifier/ModifierLocalMap // androidx.compose.ui.modifier/modifierLocalMapOf|modifierLocalMapOf(androidx.compose.ui.modifier.ModifierLocal<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.ui.modifier/modifierLocalMapOf(kotlin/Pair<androidx.compose.ui.modifier/ModifierLocal<#A>, #A>): androidx.compose.ui.modifier/ModifierLocalMap // androidx.compose.ui.modifier/modifierLocalMapOf|modifierLocalMapOf(kotlin.Pair<androidx.compose.ui.modifier.ModifierLocal<0:0>,0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.ui.modifier/modifierLocalOf(kotlin/Function0<#A>): androidx.compose.ui.modifier/ProvidableModifierLocal<#A> // androidx.compose.ui.modifier/modifierLocalOf|modifierLocalOf(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final fun androidx.compose.ui.draganddrop/DragAndDropModifierNode(): androidx.compose.ui.draganddrop/DragAndDropModifierNode // androidx.compose.ui.draganddrop/DragAndDropModifierNode|DragAndDropModifierNode(){}[0]
final fun androidx.compose.ui.draganddrop/DragAndDropModifierNode(kotlin/Function1<androidx.compose.ui.draganddrop/DragAndDropEvent, kotlin/Boolean>, androidx.compose.ui.draganddrop/DragAndDropTarget): androidx.compose.ui.draganddrop/DragAndDropModifierNode // androidx.compose.ui.draganddrop/DragAndDropModifierNode|DragAndDropModifierNode(kotlin.Function1<androidx.compose.ui.draganddrop.DragAndDropEvent,kotlin.Boolean>;androidx.compose.ui.draganddrop.DragAndDropTarget){}[0]
final fun androidx.compose.ui.draganddrop/DragAndDropSourceModifierNode(kotlin/Function2<androidx.compose.ui.draganddrop/DragAndDropStartTransferScope, androidx.compose.ui.geometry/Offset, kotlin/Unit>): androidx.compose.ui.draganddrop/DragAndDropSourceModifierNode // androidx.compose.ui.draganddrop/DragAndDropSourceModifierNode|DragAndDropSourceModifierNode(kotlin.Function2<androidx.compose.ui.draganddrop.DragAndDropStartTransferScope,androidx.compose.ui.geometry.Offset,kotlin.Unit>){}[0]
final fun androidx.compose.ui.draganddrop/DragAndDropTargetModifierNode(kotlin/Function1<androidx.compose.ui.draganddrop/DragAndDropEvent, kotlin/Boolean>, androidx.compose.ui.draganddrop/DragAndDropTarget): androidx.compose.ui.draganddrop/DragAndDropTargetModifierNode // androidx.compose.ui.draganddrop/DragAndDropTargetModifierNode|DragAndDropTargetModifierNode(kotlin.Function1<androidx.compose.ui.draganddrop.DragAndDropEvent,kotlin.Boolean>;androidx.compose.ui.draganddrop.DragAndDropTarget){}[0]
final fun androidx.compose.ui.draw/CacheDrawModifierNode(kotlin/Function1<androidx.compose.ui.draw/CacheDrawScope, androidx.compose.ui.draw/DrawResult>): androidx.compose.ui.draw/CacheDrawModifierNode // androidx.compose.ui.draw/CacheDrawModifierNode|CacheDrawModifierNode(kotlin.Function1<androidx.compose.ui.draw.CacheDrawScope,androidx.compose.ui.draw.DrawResult>){}[0]
final fun androidx.compose.ui.focus/FocusTargetModifierNode(): androidx.compose.ui.focus/FocusTargetModifierNode // androidx.compose.ui.focus/FocusTargetModifierNode|FocusTargetModifierNode(){}[0]
final fun androidx.compose.ui.focus/FocusTargetModifierNode(androidx.compose.ui.focus/Focusability = ..., kotlin/Function2<androidx.compose.ui.focus/FocusState, androidx.compose.ui.focus/FocusState, kotlin/Unit>? = ...): androidx.compose.ui.focus/FocusTargetModifierNode // androidx.compose.ui.focus/FocusTargetModifierNode|FocusTargetModifierNode(androidx.compose.ui.focus.Focusability;kotlin.Function2<androidx.compose.ui.focus.FocusState,androidx.compose.ui.focus.FocusState,kotlin.Unit>?){}[0]
final fun androidx.compose.ui.graphics.vector/Group(kotlin/String = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode> = ..., kotlin/Function0<kotlin/Unit>) // androidx.compose.ui.graphics.vector/Group|Group(kotlin.String;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.collections.List<androidx.compose.ui.graphics.vector.PathNode>;kotlin.Function0<kotlin.Unit>){}[0]
final fun androidx.compose.ui.graphics.vector/Path(kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode>, androidx.compose.ui.graphics/PathFillType = ..., kotlin/String = ..., androidx.compose.ui.graphics/Brush? = ..., kotlin/Float = ..., androidx.compose.ui.graphics/Brush? = ..., kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/StrokeCap = ..., androidx.compose.ui.graphics/StrokeJoin = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...) // androidx.compose.ui.graphics.vector/Path|Path(kotlin.collections.List<androidx.compose.ui.graphics.vector.PathNode>;androidx.compose.ui.graphics.PathFillType;kotlin.String;androidx.compose.ui.graphics.Brush?;kotlin.Float;androidx.compose.ui.graphics.Brush?;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.StrokeCap;androidx.compose.ui.graphics.StrokeJoin;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
final fun androidx.compose.ui.graphics.vector/RenderVectorGroup(androidx.compose.ui.graphics.vector/VectorGroup, kotlin.collections/Map<kotlin/String, androidx.compose.ui.graphics.vector/VectorConfig> = ...) // androidx.compose.ui.graphics.vector/RenderVectorGroup|RenderVectorGroup(androidx.compose.ui.graphics.vector.VectorGroup;kotlin.collections.Map<kotlin.String,androidx.compose.ui.graphics.vector.VectorConfig>){}[0]
final fun androidx.compose.ui.graphics.vector/addPathNodes(kotlin/String?): kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode> // androidx.compose.ui.graphics.vector/addPathNodes|addPathNodes(kotlin.String?){}[0]
final fun androidx.compose.ui.graphics.vector/rememberVectorPainter(androidx.compose.ui.graphics.vector/ImageVector): androidx.compose.ui.graphics.vector/VectorPainter // androidx.compose.ui.graphics.vector/rememberVectorPainter|rememberVectorPainter(androidx.compose.ui.graphics.vector.ImageVector){}[0]
final fun androidx.compose.ui.graphics.vector/rememberVectorPainter(androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, kotlin/Float = ..., kotlin/Float = ..., kotlin/String = ..., androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/BlendMode = ..., kotlin/Boolean = ..., kotlin/Function2<kotlin/Float, kotlin/Float, kotlin/Unit>): androidx.compose.ui.graphics.vector/VectorPainter // androidx.compose.ui.graphics.vector/rememberVectorPainter|rememberVectorPainter(androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;kotlin.Float;kotlin.Float;kotlin.String;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.BlendMode;kotlin.Boolean;kotlin.Function2<kotlin.Float,kotlin.Float,kotlin.Unit>){}[0]
final fun androidx.compose.ui.graphics.vector/rememberVectorPainter(androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, kotlin/Float = ..., kotlin/Float = ..., kotlin/String = ..., androidx.compose.ui.graphics/Color = ..., androidx.compose.ui.graphics/BlendMode = ..., kotlin/Function2<kotlin/Float, kotlin/Float, kotlin/Unit>): androidx.compose.ui.graphics.vector/VectorPainter // androidx.compose.ui.graphics.vector/rememberVectorPainter|rememberVectorPainter(androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;kotlin.Float;kotlin.Float;kotlin.String;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.BlendMode;kotlin.Function2<kotlin.Float,kotlin.Float,kotlin.Unit>){}[0]
final fun androidx.compose.ui.graphics/GraphicsLayerScope(): androidx.compose.ui.graphics/GraphicsLayerScope // androidx.compose.ui.graphics/GraphicsLayerScope|GraphicsLayerScope(){}[0]
final fun androidx.compose.ui.graphics/TransformOrigin(kotlin/Float, kotlin/Float): androidx.compose.ui.graphics/TransformOrigin // androidx.compose.ui.graphics/TransformOrigin|TransformOrigin(kotlin.Float;kotlin.Float){}[0]
final fun androidx.compose.ui.graphics/rememberGraphicsLayer(): androidx.compose.ui.graphics.layer/GraphicsLayer // androidx.compose.ui.graphics/rememberGraphicsLayer|rememberGraphicsLayer(){}[0]
final fun androidx.compose.ui.input.nestedscroll/nestedScrollModifierNode(androidx.compose.ui.input.nestedscroll/NestedScrollConnection, androidx.compose.ui.input.nestedscroll/NestedScrollDispatcher?): androidx.compose.ui.node/DelegatableNode // androidx.compose.ui.input.nestedscroll/nestedScrollModifierNode|nestedScrollModifierNode(androidx.compose.ui.input.nestedscroll.NestedScrollConnection;androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher?){}[0]
final fun androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode(androidx.compose.ui.input.pointer/PointerInputEventHandler): androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode // androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode|SuspendingPointerInputModifierNode(androidx.compose.ui.input.pointer.PointerInputEventHandler){}[0]
final fun androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode(kotlin.coroutines/SuspendFunction1<androidx.compose.ui.input.pointer/PointerInputScope, kotlin/Unit>): androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode // androidx.compose.ui.input.pointer/SuspendingPointerInputModifierNode|SuspendingPointerInputModifierNode(kotlin.coroutines.SuspendFunction1<androidx.compose.ui.input.pointer.PointerInputScope,kotlin.Unit>){}[0]
final fun androidx.compose.ui.layout/LookaheadScope(kotlin/Function1<androidx.compose.ui.layout/LookaheadScope, kotlin/Unit>) // androidx.compose.ui.layout/LookaheadScope|LookaheadScope(kotlin.Function1<androidx.compose.ui.layout.LookaheadScope,kotlin.Unit>){}[0]
final fun androidx.compose.ui.layout/MultiMeasureLayout(androidx.compose.ui/Modifier = ..., kotlin/Function0<kotlin/Unit>, androidx.compose.ui.layout/MeasurePolicy) // androidx.compose.ui.layout/MultiMeasureLayout|MultiMeasureLayout(androidx.compose.ui.Modifier;kotlin.Function0<kotlin.Unit>;androidx.compose.ui.layout.MeasurePolicy){}[0]
final fun androidx.compose.ui.layout/RectRulers(): androidx.compose.ui.layout/RectRulers // androidx.compose.ui.layout/RectRulers|RectRulers(){}[0]
final fun androidx.compose.ui.layout/SubcomposeLayout(androidx.compose.ui.layout/SubcomposeLayoutState, androidx.compose.ui/Modifier = ..., kotlin/Function2<androidx.compose.ui.layout/SubcomposeMeasureScope, androidx.compose.ui.unit/Constraints, androidx.compose.ui.layout/MeasureResult>) // androidx.compose.ui.layout/SubcomposeLayout|SubcomposeLayout(androidx.compose.ui.layout.SubcomposeLayoutState;androidx.compose.ui.Modifier;kotlin.Function2<androidx.compose.ui.layout.SubcomposeMeasureScope,androidx.compose.ui.unit.Constraints,androidx.compose.ui.layout.MeasureResult>){}[0]
final fun androidx.compose.ui.layout/SubcomposeLayout(androidx.compose.ui/Modifier = ..., kotlin/Function2<androidx.compose.ui.layout/SubcomposeMeasureScope, androidx.compose.ui.unit/Constraints, androidx.compose.ui.layout/MeasureResult>) // androidx.compose.ui.layout/SubcomposeLayout|SubcomposeLayout(androidx.compose.ui.Modifier;kotlin.Function2<androidx.compose.ui.layout.SubcomposeMeasureScope,androidx.compose.ui.unit.Constraints,androidx.compose.ui.layout.MeasureResult>){}[0]
final fun androidx.compose.ui.layout/SubcomposeSlotReusePolicy(kotlin/Int): androidx.compose.ui.layout/SubcomposeSlotReusePolicy // androidx.compose.ui.layout/SubcomposeSlotReusePolicy|SubcomposeSlotReusePolicy(kotlin.Int){}[0]
final fun androidx.compose.ui.layout/TestModifierUpdaterLayout(kotlin/Function1<androidx.compose.ui.layout/TestModifierUpdater, kotlin/Unit>) // androidx.compose.ui.layout/TestModifierUpdaterLayout|TestModifierUpdaterLayout(kotlin.Function1<androidx.compose.ui.layout.TestModifierUpdater,kotlin.Unit>){}[0]
final fun androidx.compose.ui.layout/combineAsVirtualLayouts(kotlin.collections/List<kotlin/Function0<kotlin/Unit>>): kotlin/Function0<kotlin/Unit> // androidx.compose.ui.layout/combineAsVirtualLayouts|combineAsVirtualLayouts(kotlin.collections.List<kotlin.Function0<kotlin.Unit>>){}[0]
final fun androidx.compose.ui.layout/createMeasurePolicy(androidx.compose.ui.layout/MultiContentMeasurePolicy): androidx.compose.ui.layout/MeasurePolicy // androidx.compose.ui.layout/createMeasurePolicy|createMeasurePolicy(androidx.compose.ui.layout.MultiContentMeasurePolicy){}[0]
final fun androidx.compose.ui.layout/lerp(androidx.compose.ui.layout/ScaleFactor, androidx.compose.ui.layout/ScaleFactor, kotlin/Float): androidx.compose.ui.layout/ScaleFactor // androidx.compose.ui.layout/lerp|lerp(androidx.compose.ui.layout.ScaleFactor;androidx.compose.ui.layout.ScaleFactor;kotlin.Float){}[0]
final fun androidx.compose.ui.layout/materializerOf(androidx.compose.ui/Modifier): kotlin/Function1<androidx.compose.runtime/SkippableUpdater<androidx.compose.ui.node/ComposeUiNode>, kotlin/Unit> // androidx.compose.ui.layout/materializerOf|materializerOf(androidx.compose.ui.Modifier){}[0]
final fun androidx.compose.ui.layout/materializerOfWithCompositionLocalInjection(androidx.compose.ui/Modifier): kotlin/Function1<androidx.compose.runtime/SkippableUpdater<androidx.compose.ui.node/ComposeUiNode>, kotlin/Unit> // androidx.compose.ui.layout/materializerOfWithCompositionLocalInjection|materializerOfWithCompositionLocalInjection(androidx.compose.ui.Modifier){}[0]
final fun androidx.compose.ui.modifier/modifierLocalMapOf(): androidx.compose.ui.modifier/ModifierLocalMap // androidx.compose.ui.modifier/modifierLocalMapOf|modifierLocalMapOf(){}[0]
final fun androidx.compose.ui.modifier/modifierLocalMapOf(androidx.compose.ui.modifier/ModifierLocal<*>, androidx.compose.ui.modifier/ModifierLocal<*>, kotlin/Array<out androidx.compose.ui.modifier/ModifierLocal<*>>...): androidx.compose.ui.modifier/ModifierLocalMap // androidx.compose.ui.modifier/modifierLocalMapOf|modifierLocalMapOf(androidx.compose.ui.modifier.ModifierLocal<*>;androidx.compose.ui.modifier.ModifierLocal<*>;kotlin.Array<out|androidx.compose.ui.modifier.ModifierLocal<*>>...){}[0]
final fun androidx.compose.ui.modifier/modifierLocalMapOf(kotlin/Array<out androidx.compose.ui.modifier/ModifierLocal<*>>...): androidx.compose.ui.modifier/ModifierLocalMap // androidx.compose.ui.modifier/modifierLocalMapOf|modifierLocalMapOf(kotlin.Array<out|androidx.compose.ui.modifier.ModifierLocal<*>>...){}[0]
final fun androidx.compose.ui.modifier/modifierLocalMapOf(kotlin/Array<out kotlin/Pair<androidx.compose.ui.modifier/ModifierLocal<*>, kotlin/Any>>...): androidx.compose.ui.modifier/ModifierLocalMap // androidx.compose.ui.modifier/modifierLocalMapOf|modifierLocalMapOf(kotlin.Array<out|kotlin.Pair<androidx.compose.ui.modifier.ModifierLocal<*>,kotlin.Any>>...){}[0]
final fun androidx.compose.ui.modifier/modifierLocalMapOf(kotlin/Pair<androidx.compose.ui.modifier/ModifierLocal<*>, kotlin/Any>, kotlin/Pair<androidx.compose.ui.modifier/ModifierLocal<*>, kotlin/Any>, kotlin/Array<out kotlin/Pair<androidx.compose.ui.modifier/ModifierLocal<*>, kotlin/Any>>...): androidx.compose.ui.modifier/ModifierLocalMap // androidx.compose.ui.modifier/modifierLocalMapOf|modifierLocalMapOf(kotlin.Pair<androidx.compose.ui.modifier.ModifierLocal<*>,kotlin.Any>;kotlin.Pair<androidx.compose.ui.modifier.ModifierLocal<*>,kotlin.Any>;kotlin.Array<out|kotlin.Pair<androidx.compose.ui.modifier.ModifierLocal<*>,kotlin.Any>>...){}[0]
final fun androidx.compose.ui.node/DpTouchBoundsExpansion(androidx.compose.ui.unit/Dp = ..., androidx.compose.ui.unit/Dp = ..., androidx.compose.ui.unit/Dp = ..., androidx.compose.ui.unit/Dp = ...): androidx.compose.ui.node/DpTouchBoundsExpansion // androidx.compose.ui.node/DpTouchBoundsExpansion|DpTouchBoundsExpansion(androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp){}[0]
final fun androidx.compose.ui.node/TouchBoundsExpansion(kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): androidx.compose.ui.node/TouchBoundsExpansion // androidx.compose.ui.node/TouchBoundsExpansion|TouchBoundsExpansion(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.ui.state/ToggleableState(kotlin/Boolean): androidx.compose.ui.state/ToggleableState // androidx.compose.ui.state/ToggleableState|ToggleableState(kotlin.Boolean){}[0]
final fun androidx.compose.ui.text/rememberTextMeasurer(kotlin/Int = ...): androidx.compose.ui.text/TextMeasurer // androidx.compose.ui.text/rememberTextMeasurer|rememberTextMeasurer(kotlin.Int){}[0]
final fun androidx.compose.ui.window/Dialog(kotlin/Function0<kotlin/Unit>, androidx.compose.ui.window/DialogProperties = ..., kotlin/Function0<kotlin/Unit>) // androidx.compose.ui.window/Dialog|Dialog(kotlin.Function0<kotlin.Unit>;androidx.compose.ui.window.DialogProperties;kotlin.Function0<kotlin.Unit>){}[0]
final fun androidx.compose.ui.window/Popup(androidx.compose.ui.window/PopupPositionProvider, kotlin/Function0<kotlin/Unit>? = ..., androidx.compose.ui.window/PopupProperties = ..., kotlin/Function0<kotlin/Unit>) // androidx.compose.ui.window/Popup|Popup(androidx.compose.ui.window.PopupPositionProvider;kotlin.Function0<kotlin.Unit>?;androidx.compose.ui.window.PopupProperties;kotlin.Function0<kotlin.Unit>){}[0]
final fun androidx.compose.ui.window/Popup(androidx.compose.ui/Alignment = ..., androidx.compose.ui.unit/IntOffset = ..., kotlin/Function0<kotlin/Unit>? = ..., androidx.compose.ui.window/PopupProperties = ..., kotlin/Function0<kotlin/Unit>) // androidx.compose.ui.window/Popup|Popup(androidx.compose.ui.Alignment;androidx.compose.ui.unit.IntOffset;kotlin.Function0<kotlin.Unit>?;androidx.compose.ui.window.PopupProperties;kotlin.Function0<kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.vector/ImageVector.Builder).androidx.compose.ui.graphics.vector/group(kotlin/String = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode> = ..., kotlin/Function1<androidx.compose.ui.graphics.vector/ImageVector.Builder, kotlin/Unit>): androidx.compose.ui.graphics.vector/ImageVector.Builder // androidx.compose.ui.graphics.vector/group|group@androidx.compose.ui.graphics.vector.ImageVector.Builder(kotlin.String;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.collections.List<androidx.compose.ui.graphics.vector.PathNode>;kotlin.Function1<androidx.compose.ui.graphics.vector.ImageVector.Builder,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.graphics.vector/ImageVector.Builder).androidx.compose.ui.graphics.vector/path(kotlin/String = ..., androidx.compose.ui.graphics/Brush? = ..., kotlin/Float = ..., androidx.compose.ui.graphics/Brush? = ..., kotlin/Float = ..., kotlin/Float = ..., androidx.compose.ui.graphics/StrokeCap = ..., androidx.compose.ui.graphics/StrokeJoin = ..., kotlin/Float = ..., androidx.compose.ui.graphics/PathFillType = ..., kotlin/Function1<androidx.compose.ui.graphics.vector/PathBuilder, kotlin/Unit>): androidx.compose.ui.graphics.vector/ImageVector.Builder // androidx.compose.ui.graphics.vector/path|path@androidx.compose.ui.graphics.vector.ImageVector.Builder(kotlin.String;androidx.compose.ui.graphics.Brush?;kotlin.Float;androidx.compose.ui.graphics.Brush?;kotlin.Float;kotlin.Float;androidx.compose.ui.graphics.StrokeCap;androidx.compose.ui.graphics.StrokeJoin;kotlin.Float;androidx.compose.ui.graphics.PathFillType;kotlin.Function1<androidx.compose.ui.graphics.vector.PathBuilder,kotlin.Unit>){}[0]
final inline fun (androidx.compose.ui.layout/ScaleFactor).androidx.compose.ui.layout/takeOrElse(kotlin/Function0<androidx.compose.ui.layout/ScaleFactor>): androidx.compose.ui.layout/ScaleFactor // androidx.compose.ui.layout/takeOrElse|takeOrElse@androidx.compose.ui.layout.ScaleFactor(kotlin.Function0<androidx.compose.ui.layout.ScaleFactor>){}[0]
final inline fun (androidx.compose.ui/Modifier).androidx.compose.ui.platform/inspectable(noinline kotlin/Function1<androidx.compose.ui.platform/InspectorInfo, kotlin/Unit>, kotlin/Function1<androidx.compose.ui/Modifier, androidx.compose.ui/Modifier>): androidx.compose.ui/Modifier // androidx.compose.ui.platform/inspectable|inspectable@androidx.compose.ui.Modifier(kotlin.Function1<androidx.compose.ui.platform.InspectorInfo,kotlin.Unit>;kotlin.Function1<androidx.compose.ui.Modifier,androidx.compose.ui.Modifier>){}[0]
final inline fun androidx.compose.ui.graphics.vector/PathData(kotlin/Function1<androidx.compose.ui.graphics.vector/PathBuilder, kotlin/Unit>): kotlin.collections/List<androidx.compose.ui.graphics.vector/PathNode> // androidx.compose.ui.graphics.vector/PathData|PathData(kotlin.Function1<androidx.compose.ui.graphics.vector.PathBuilder,kotlin.Unit>){}[0]
final inline fun androidx.compose.ui.layout/Layout(androidx.compose.ui/Modifier = ..., androidx.compose.ui.layout/MeasurePolicy) // androidx.compose.ui.layout/Layout|Layout(androidx.compose.ui.Modifier;androidx.compose.ui.layout.MeasurePolicy){}[0]
final inline fun androidx.compose.ui.layout/Layout(kotlin.collections/List<kotlin/Function0<kotlin/Unit>>, androidx.compose.ui/Modifier = ..., androidx.compose.ui.layout/MultiContentMeasurePolicy) // androidx.compose.ui.layout/Layout|Layout(kotlin.collections.List<kotlin.Function0<kotlin.Unit>>;androidx.compose.ui.Modifier;androidx.compose.ui.layout.MultiContentMeasurePolicy){}[0]
final inline fun androidx.compose.ui.layout/Layout(kotlin/Function0<kotlin/Unit>, androidx.compose.ui/Modifier = ..., androidx.compose.ui.layout/MeasurePolicy) // androidx.compose.ui.layout/Layout|Layout(kotlin.Function0<kotlin.Unit>;androidx.compose.ui.Modifier;androidx.compose.ui.layout.MeasurePolicy){}[0]
final inline fun androidx.compose.ui.layout/ScaleFactor(kotlin/Float, kotlin/Float): androidx.compose.ui.layout/ScaleFactor // androidx.compose.ui.layout/ScaleFactor|ScaleFactor(kotlin.Float;kotlin.Float){}[0]
final inline fun androidx.compose.ui.platform/debugInspectorInfo(crossinline kotlin/Function1<androidx.compose.ui.platform/InspectorInfo, kotlin/Unit>): kotlin/Function1<androidx.compose.ui.platform/InspectorInfo, kotlin/Unit> // androidx.compose.ui.platform/debugInspectorInfo|debugInspectorInfo(kotlin.Function1<androidx.compose.ui.platform.InspectorInfo,kotlin.Unit>){}[0]
final suspend fun (androidx.compose.ui.node/DelegatableNode).androidx.compose.ui.relocation/bringIntoView(kotlin/Function0<androidx.compose.ui.geometry/Rect?>? = ...) // androidx.compose.ui.relocation/bringIntoView|bringIntoView@androidx.compose.ui.node.DelegatableNode(kotlin.Function0<androidx.compose.ui.geometry.Rect?>?){}[0]
final suspend fun (androidx.compose.ui.platform/PlatformTextInputModifierNode).androidx.compose.ui.platform/establishTextInputSession(kotlin.coroutines/SuspendFunction1<androidx.compose.ui.platform/PlatformTextInputSessionScope, kotlin/Nothing>): kotlin/Nothing // androidx.compose.ui.platform/establishTextInputSession|establishTextInputSession@androidx.compose.ui.platform.PlatformTextInputModifierNode(kotlin.coroutines.SuspendFunction1<androidx.compose.ui.platform.PlatformTextInputSessionScope,kotlin.Nothing>){}[0]
