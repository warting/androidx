<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.11.0-alpha10" type="baseline" client="gradle" dependencies="true" name="AGP (8.11.0-alpha10)" variant="all" version="8.11.0-alpha10">

    <issue
        id="NewApi"
        message="Call requires API level 35 (current min is 21): `android.view.Window#setFrameRateBoostOnTouchEnabled`"
        errorLine1="        activity?.window?.frameRateBoostOnTouchEnabled = false"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/SetFrameRateCategorySample.kt"/>
    </issue>

    <issue
        id="NewApi"
        message="Call requires API level 35 (current min is 21): `android.view.Window#setFrameRateBoostOnTouchEnabled`"
        errorLine1="        activity?.window?.frameRateBoostOnTouchEnabled = false"
        errorLine2="                                                       ~">
        <location
            file="src/main/java/androidx/compose/ui/samples/SetFrameRateCategorySample.kt"/>
    </issue>

    <issue
        id="NewApi"
        message="Call requires API level 35 (current min is 21): `android.view.Window#setFrameRateBoostOnTouchEnabled`"
        errorLine1="        onDispose { activity?.window?.frameRateBoostOnTouchEnabled = true }"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/SetFrameRateCategorySample.kt"/>
    </issue>

    <issue
        id="NewApi"
        message="Call requires API level 35 (current min is 21): `android.view.Window#setFrameRateBoostOnTouchEnabled`"
        errorLine1="        onDispose { activity?.window?.frameRateBoostOnTouchEnabled = true }"
        errorLine2="                                                                   ~">
        <location
            file="src/main/java/androidx/compose/ui/samples/SetFrameRateCategorySample.kt"/>
    </issue>

    <issue
        id="NewApi"
        message="Call requires API level 35 (current min is 21): `android.view.Window#setFrameRateBoostOnTouchEnabled`"
        errorLine1="        activity?.window?.frameRateBoostOnTouchEnabled = false"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/SetFrameRateSample.kt"/>
    </issue>

    <issue
        id="NewApi"
        message="Call requires API level 35 (current min is 21): `android.view.Window#setFrameRateBoostOnTouchEnabled`"
        errorLine1="        activity?.window?.frameRateBoostOnTouchEnabled = false"
        errorLine2="                                                       ~">
        <location
            file="src/main/java/androidx/compose/ui/samples/SetFrameRateSample.kt"/>
    </issue>

    <issue
        id="NewApi"
        message="Call requires API level 35 (current min is 21): `android.view.Window#setFrameRateBoostOnTouchEnabled`"
        errorLine1="        onDispose { activity?.window?.frameRateBoostOnTouchEnabled = true }"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/SetFrameRateSample.kt"/>
    </issue>

    <issue
        id="NewApi"
        message="Call requires API level 35 (current min is 21): `android.view.Window#setFrameRateBoostOnTouchEnabled`"
        errorLine1="        onDispose { activity?.window?.frameRateBoostOnTouchEnabled = true }"
        errorLine2="                                                                   ~">
        <location
            file="src/main/java/androidx/compose/ui/samples/SetFrameRateSample.kt"/>
    </issue>

    <issue
        id="ModifierNodeElementDataClassWithLambda"
        message="ModifierNodeElement implementations using a data class with lambda properties will result in incorrect equals implementations"
        errorLine1="    data class PointerInputElement(val callback: (PointerEvent) -> Unit) :"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/ModifierSamples.kt"/>
    </issue>

    <issue
        id="ModifierNodeElementDataClassWithLambda"
        message="ModifierNodeElement implementations using a data class with lambda properties will result in incorrect equals implementations"
        errorLine1="    val block: (TraversableBackgroundModifierNode.() -> Unit)?,"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/TraverseModifierDemo.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="fun approachLayoutSample() {"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/LookaheadScopeSample.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="fun animateContentSizeAfterLookaheadPass() {"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/LookaheadScopeSample.kt"/>
    </issue>

    <issue
        id="ExceptionMessage"
        message="Please specify a lazyMessage param for requireNotNull"
        errorLine1="                        val target = requireNotNull(lookaheadSize)"
        errorLine2="                                     ~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/LookaheadScopeSample.kt"/>
    </issue>

    <issue
        id="AutoboxingStateCreation"
        message="Prefer `mutableIntStateOf` instead of `mutableStateOf`"
        errorLine1="    var size by remember { mutableStateOf(20) }"
        errorLine2="                           ~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/AndroidViewSample.kt"/>
    </issue>

    <issue
        id="AutoboxingStateCreation"
        message="Prefer `mutableFloatStateOf` instead of `mutableStateOf`"
        errorLine1="    val toolbarOffsetHeightPx = remember { mutableStateOf(0f) }"
        errorLine2="                                           ~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/NestedScrollInteropSamples.kt"/>
    </issue>

    <issue
        id="AutoboxingStateCreation"
        message="Prefer `mutableFloatStateOf` instead of `mutableStateOf`"
        errorLine1="    val toolbarOffsetHeightPx = remember { mutableStateOf(0f) }"
        errorLine2="                                           ~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/NestedScrollSamples.kt"/>
    </issue>

    <issue
        id="AutoboxingStateCreation"
        message="Prefer `mutableFloatStateOf` instead of `mutableStateOf`"
        errorLine1="    val basicState = remember { mutableStateOf(0f) }"
        errorLine2="                                ~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/NestedScrollSamples.kt"/>
    </issue>

    <issue
        id="ModifierNodeInspectableProperties"
        message="AnimatePlacementNodeElement does not override inspectableProperties(). The layout inspector will use the default implementation of this function, which will attempt to read AnimatePlacementNodeElement&apos;s properties reflectively. Override inspectableProperties() if you&apos;d like to customize this modifier&apos;s presentation in the layout inspector."
        errorLine1="    data class AnimatePlacementNodeElement(val lookaheadScope: LookaheadScope) :"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/LookaheadScopeSample.kt"/>
    </issue>

    <issue
        id="ModifierNodeInspectableProperties"
        message="LandOnImeElement does not override inspectableProperties(). The layout inspector will use the default implementation of this function, which will attempt to read LandOnImeElement&apos;s properties reflectively. Override inspectableProperties() if you&apos;d like to customize this modifier&apos;s presentation in the layout inspector."
        errorLine1="    class LandOnImeElement : ModifierNodeElement&lt;LandOnImeModifierNode>() {"
        errorLine2="          ~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/ui/samples/WindowInsetsRulersSample.kt"/>
    </issue>

</issues>
