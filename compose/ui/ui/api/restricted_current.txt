// Signature format: 4.0
package androidx.compose.ui {

  public final class AbsoluteAlignment {
    method public androidx.compose.ui.Alignment getBottomLeft();
    method public androidx.compose.ui.Alignment getBottomRight();
    method public androidx.compose.ui.Alignment getCenterLeft();
    method public androidx.compose.ui.Alignment getCenterRight();
    method public androidx.compose.ui.Alignment.Horizontal getLeft();
    method public androidx.compose.ui.Alignment.Horizontal getRight();
    method public androidx.compose.ui.Alignment getTopLeft();
    method public androidx.compose.ui.Alignment getTopRight();
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment BottomLeft;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment BottomRight;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment CenterLeft;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment CenterRight;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment.Horizontal Left;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment.Horizontal Right;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment TopLeft;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment TopRight;
    field public static final androidx.compose.ui.AbsoluteAlignment INSTANCE;
  }

  @androidx.compose.runtime.Stable public fun interface Alignment {
    method public long align(long size, long space, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    field public static final androidx.compose.ui.Alignment.Companion Companion;
  }

  public static final class Alignment.Companion {
    method public androidx.compose.ui.Alignment.Vertical getBottom();
    method public androidx.compose.ui.Alignment getBottomCenter();
    method public androidx.compose.ui.Alignment getBottomEnd();
    method public androidx.compose.ui.Alignment getBottomStart();
    method public androidx.compose.ui.Alignment getCenter();
    method public androidx.compose.ui.Alignment getCenterEnd();
    method public androidx.compose.ui.Alignment.Horizontal getCenterHorizontally();
    method public androidx.compose.ui.Alignment getCenterStart();
    method public androidx.compose.ui.Alignment.Vertical getCenterVertically();
    method public androidx.compose.ui.Alignment.Horizontal getEnd();
    method public androidx.compose.ui.Alignment.Horizontal getStart();
    method public androidx.compose.ui.Alignment.Vertical getTop();
    method public androidx.compose.ui.Alignment getTopCenter();
    method public androidx.compose.ui.Alignment getTopEnd();
    method public androidx.compose.ui.Alignment getTopStart();
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment.Vertical Bottom;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment BottomCenter;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment BottomEnd;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment BottomStart;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment Center;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment CenterEnd;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment.Horizontal CenterHorizontally;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment CenterStart;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment.Vertical CenterVertically;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment.Horizontal End;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment.Horizontal Start;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment.Vertical Top;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment TopCenter;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment TopEnd;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.Alignment TopStart;
  }

  @androidx.compose.runtime.Stable public static fun interface Alignment.Horizontal {
    method public int align(int size, int space, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method public default operator androidx.compose.ui.Alignment plus(androidx.compose.ui.Alignment.Vertical other);
  }

  @androidx.compose.runtime.Stable public static fun interface Alignment.Vertical {
    method public int align(int size, int space);
    method public default operator androidx.compose.ui.Alignment plus(androidx.compose.ui.Alignment.Horizontal other);
  }

  @androidx.compose.runtime.Immutable public final class BiasAbsoluteAlignment implements androidx.compose.ui.Alignment {
    ctor public BiasAbsoluteAlignment(float horizontalBias, float verticalBias);
    method public long align(long size, long space, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method public float component1();
    method public float component2();
    method public androidx.compose.ui.BiasAbsoluteAlignment copy(float horizontalBias, float verticalBias);
    method public float getHorizontalBias();
    method public float getVerticalBias();
    property public float horizontalBias;
    property public float verticalBias;
  }

  @androidx.compose.runtime.Immutable public static final class BiasAbsoluteAlignment.Horizontal implements androidx.compose.ui.Alignment.Horizontal {
    ctor public BiasAbsoluteAlignment.Horizontal(float bias);
    method public int align(int size, int space, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method public float component1();
    method public androidx.compose.ui.BiasAbsoluteAlignment.Horizontal copy(float bias);
    method public float getBias();
    method public androidx.compose.ui.Alignment plus(androidx.compose.ui.Alignment.Vertical other);
    property public float bias;
  }

  @androidx.compose.runtime.Immutable public final class BiasAlignment implements androidx.compose.ui.Alignment {
    ctor public BiasAlignment(float horizontalBias, float verticalBias);
    method public long align(long size, long space, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method public float component1();
    method public float component2();
    method public androidx.compose.ui.BiasAlignment copy(float horizontalBias, float verticalBias);
    method public float getHorizontalBias();
    method public float getVerticalBias();
    property public float horizontalBias;
    property public float verticalBias;
  }

  @androidx.compose.runtime.Immutable public static final class BiasAlignment.Horizontal implements androidx.compose.ui.Alignment.Horizontal {
    ctor public BiasAlignment.Horizontal(float bias);
    method public int align(int size, int space, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method public float component1();
    method public androidx.compose.ui.BiasAlignment.Horizontal copy(float bias);
    method public float getBias();
    method public androidx.compose.ui.Alignment plus(androidx.compose.ui.Alignment.Vertical other);
    property public float bias;
  }

  @androidx.compose.runtime.Immutable public static final class BiasAlignment.Vertical implements androidx.compose.ui.Alignment.Vertical {
    ctor public BiasAlignment.Vertical(float bias);
    method public int align(int size, int space);
    method public float component1();
    method public androidx.compose.ui.BiasAlignment.Vertical copy(float bias);
    method public float getBias();
    method public androidx.compose.ui.Alignment plus(androidx.compose.ui.Alignment.Horizontal other);
    property public float bias;
  }

  public final class CombinedModifier implements androidx.compose.ui.Modifier {
    ctor public CombinedModifier(androidx.compose.ui.Modifier outer, androidx.compose.ui.Modifier inner);
    method public boolean all(kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier.Element,java.lang.Boolean> predicate);
    method public boolean any(kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier.Element,java.lang.Boolean> predicate);
    method public <R> R foldIn(R initial, kotlin.jvm.functions.Function2<? super R,? super androidx.compose.ui.Modifier.Element,? extends R> operation);
    method public <R> R foldOut(R initial, kotlin.jvm.functions.Function2<? super androidx.compose.ui.Modifier.Element,? super R,? extends R> operation);
  }

  @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public final class ComposeUiFlags {
    property public boolean areWindowInsetsRulersEnabled;
    property public boolean isAdaptiveRefreshRateEnabled;
    property public boolean isClearFocusOnResetEnabled;
    property public boolean isFocusActionExitsTouchModeEnabled;
    property public boolean isHitPathTrackerLoggingEnabled;
    property public boolean isNoPinningInFocusRestorationEnabled;
    property public boolean isOutOfFrameDeactivationEnabled;
    property public boolean isPointerInteropFilterDispatchingFixEnabled;
    property public boolean isRectTrackingEnabled;
    property public boolean isRemoveFocusedViewFixEnabled;
    property public boolean isSemanticAutofillEnabled;
    property public boolean isTrackFocusEnabled;
    property public boolean isViewFocusFixEnabled;
    field public static final androidx.compose.ui.ComposeUiFlags INSTANCE;
    field public static boolean areWindowInsetsRulersEnabled;
    field public static boolean isAdaptiveRefreshRateEnabled;
    field public static boolean isClearFocusOnResetEnabled;
    field public static boolean isFocusActionExitsTouchModeEnabled;
    field public static boolean isHitPathTrackerLoggingEnabled;
    field public static boolean isNoPinningInFocusRestorationEnabled;
    field public static boolean isOutOfFrameDeactivationEnabled;
    field public static boolean isPointerInteropFilterDispatchingFixEnabled;
    field public static boolean isRectTrackingEnabled;
    field public static boolean isRemoveFocusedViewFixEnabled;
    field public static boolean isSemanticAutofillEnabled;
    field public static boolean isTrackFocusEnabled;
    field public static boolean isViewFocusFixEnabled;
  }

  public final class ComposedModifierKt {
    method public static androidx.compose.ui.Modifier composed(androidx.compose.ui.Modifier, String fullyQualifiedName, Object? key1, Object? key2, Object? key3, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.platform.InspectorInfo,kotlin.Unit> inspectorInfo, kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier,? extends androidx.compose.ui.Modifier> factory);
    method public static androidx.compose.ui.Modifier composed(androidx.compose.ui.Modifier, String fullyQualifiedName, Object? key1, Object? key2, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.platform.InspectorInfo,kotlin.Unit> inspectorInfo, kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier,? extends androidx.compose.ui.Modifier> factory);
    method public static androidx.compose.ui.Modifier composed(androidx.compose.ui.Modifier, String fullyQualifiedName, Object? key1, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.platform.InspectorInfo,kotlin.Unit> inspectorInfo, kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier,? extends androidx.compose.ui.Modifier> factory);
    method public static androidx.compose.ui.Modifier composed(androidx.compose.ui.Modifier, String fullyQualifiedName, Object?[] keys, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.platform.InspectorInfo,kotlin.Unit> inspectorInfo, kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier,? extends androidx.compose.ui.Modifier> factory);
    method public static androidx.compose.ui.Modifier composed(androidx.compose.ui.Modifier, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.platform.InspectorInfo,kotlin.Unit> inspectorInfo, kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier,? extends androidx.compose.ui.Modifier> factory);
    method @Deprecated public static androidx.compose.ui.Modifier materialize(androidx.compose.runtime.Composer, androidx.compose.ui.Modifier modifier);
    method public static androidx.compose.ui.Modifier materializeModifier(androidx.compose.runtime.Composer, androidx.compose.ui.Modifier modifier);
  }

  @androidx.compose.runtime.Stable @kotlin.jvm.JvmDefaultWithCompatibility public interface Modifier {
    method public boolean all(kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier.Element,java.lang.Boolean> predicate);
    method public boolean any(kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier.Element,java.lang.Boolean> predicate);
    method public <R> R foldIn(R initial, kotlin.jvm.functions.Function2<? super R,? super androidx.compose.ui.Modifier.Element,? extends R> operation);
    method public <R> R foldOut(R initial, kotlin.jvm.functions.Function2<? super androidx.compose.ui.Modifier.Element,? super R,? extends R> operation);
    method public default infix androidx.compose.ui.Modifier then(androidx.compose.ui.Modifier other);
    field public static final androidx.compose.ui.Modifier.Companion Companion;
  }

  public static final class Modifier.Companion implements androidx.compose.ui.Modifier {
    method public boolean all(kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier.Element,java.lang.Boolean> predicate);
    method public boolean any(kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier.Element,java.lang.Boolean> predicate);
    method public <R> R foldIn(R initial, kotlin.jvm.functions.Function2<? super R,? super androidx.compose.ui.Modifier.Element,? extends R> operation);
    method public <R> R foldOut(R initial, kotlin.jvm.functions.Function2<? super androidx.compose.ui.Modifier.Element,? super R,? extends R> operation);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public static interface Modifier.Element extends androidx.compose.ui.Modifier {
    method public default boolean all(kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier.Element,java.lang.Boolean> predicate);
    method public default boolean any(kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier.Element,java.lang.Boolean> predicate);
    method public default <R> R foldIn(R initial, kotlin.jvm.functions.Function2<? super R,? super androidx.compose.ui.Modifier.Element,? extends R> operation);
    method public default <R> R foldOut(R initial, kotlin.jvm.functions.Function2<? super androidx.compose.ui.Modifier.Element,? super R,? extends R> operation);
  }

  public abstract static class Modifier.Node implements androidx.compose.ui.node.DelegatableNode {
    ctor public Modifier.Node();
    method public final kotlinx.coroutines.CoroutineScope getCoroutineScope();
    method public final androidx.compose.ui.Modifier.Node getNode();
    method public boolean getShouldAutoInvalidate();
    method public final boolean isAttached();
    method public void onAttach();
    method public void onDetach();
    method public void onReset();
    method public final void sideEffect(kotlin.jvm.functions.Function0<kotlin.Unit> effect);
    property public final kotlinx.coroutines.CoroutineScope coroutineScope;
    property public final boolean isAttached;
    property public final androidx.compose.ui.Modifier.Node node;
    property public boolean shouldAutoInvalidate;
  }

  @androidx.compose.runtime.Stable public interface MotionDurationScale extends kotlin.coroutines.CoroutineContext.Element {
    method public default kotlin.coroutines.CoroutineContext.Key<? extends java.lang.Object?> getKey();
    method public float getScaleFactor();
    property public default kotlin.coroutines.CoroutineContext.Key<? extends java.lang.Object?> key;
    property public abstract float scaleFactor;
    field public static final androidx.compose.ui.MotionDurationScale.Key Key;
  }

  public static final class MotionDurationScale.Key implements kotlin.coroutines.CoroutineContext.Key<androidx.compose.ui.MotionDurationScale> {
  }

  public final class SensitiveContentKt {
    method public static androidx.compose.ui.Modifier sensitiveContent(androidx.compose.ui.Modifier, optional boolean isContentSensitive);
  }

  @androidx.compose.runtime.ComposableTargetMarker(description="UI Composable") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.FILE, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.TYPE, kotlin.annotation.AnnotationTarget.TYPE_PARAMETER}) public @interface UiComposable {
  }

  public final class ZIndexModifierKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier zIndex(androidx.compose.ui.Modifier, float zIndex);
  }

}

package androidx.compose.ui.autofill {

  @Deprecated public interface Autofill {
    method @Deprecated public void cancelAutofillForNode(androidx.compose.ui.autofill.AutofillNode autofillNode);
    method @Deprecated public void requestAutofillForNode(androidx.compose.ui.autofill.AutofillNode autofillNode);
  }

  public abstract class AutofillManager {
    method public abstract void cancel();
    method public abstract void commit();
  }

  public final class AutofillModifierKt {
    method public static androidx.compose.ui.Modifier contentType(androidx.compose.ui.Modifier, androidx.compose.ui.autofill.ContentType contentType);
  }

  @Deprecated public final class AutofillNode {
    ctor @Deprecated public AutofillNode(optional java.util.List<? extends androidx.compose.ui.autofill.AutofillType> autofillTypes, optional androidx.compose.ui.geometry.Rect? boundingBox, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit>? onFill);
    method @Deprecated public java.util.List<androidx.compose.ui.autofill.AutofillType> getAutofillTypes();
    method @Deprecated public androidx.compose.ui.geometry.Rect? getBoundingBox();
    method @Deprecated public int getId();
    method @Deprecated public kotlin.jvm.functions.Function1<java.lang.String,kotlin.Unit>? getOnFill();
    method @Deprecated public void setBoundingBox(androidx.compose.ui.geometry.Rect?);
    property @Deprecated public java.util.List<androidx.compose.ui.autofill.AutofillType> autofillTypes;
    property @Deprecated public androidx.compose.ui.geometry.Rect? boundingBox;
    property @Deprecated public int id;
    property @Deprecated public kotlin.jvm.functions.Function1<java.lang.String,kotlin.Unit>? onFill;
  }

  @Deprecated public final class AutofillTree {
    ctor @Deprecated public AutofillTree();
    method @Deprecated public java.util.Map<java.lang.Integer,androidx.compose.ui.autofill.AutofillNode> getChildren();
    method @Deprecated public kotlin.Unit? performAutofill(int id, String value);
    method @Deprecated public operator void plusAssign(androidx.compose.ui.autofill.AutofillNode autofillNode);
    property @Deprecated public java.util.Map<java.lang.Integer,androidx.compose.ui.autofill.AutofillNode> children;
  }

  @Deprecated public enum AutofillType {
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType AddressAuxiliaryDetails;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType AddressCountry;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType AddressLocality;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType AddressRegion;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType AddressStreet;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType BirthDateDay;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType BirthDateFull;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType BirthDateMonth;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType BirthDateYear;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType CreditCardExpirationDate;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType CreditCardExpirationDay;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType CreditCardExpirationMonth;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType CreditCardExpirationYear;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType CreditCardNumber;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType CreditCardSecurityCode;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType EmailAddress;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType Gender;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType NewPassword;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType NewUsername;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType Password;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PersonFirstName;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PersonFullName;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PersonLastName;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PersonMiddleInitial;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PersonMiddleName;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PersonNamePrefix;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PersonNameSuffix;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PhoneCountryCode;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PhoneNumber;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PhoneNumberDevice;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PhoneNumberNational;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PostalAddress;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PostalCode;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType PostalCodeExtended;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType SmsOtpCode;
    enum_constant @Deprecated public static final androidx.compose.ui.autofill.AutofillType Username;
  }

  public sealed interface ContentDataType {
    field public static final androidx.compose.ui.autofill.ContentDataType.Companion Companion;
  }

  public static final class ContentDataType.Companion {
    method public androidx.compose.ui.autofill.ContentDataType getDate();
    method public androidx.compose.ui.autofill.ContentDataType getList();
    method public androidx.compose.ui.autofill.ContentDataType getNone();
    method public androidx.compose.ui.autofill.ContentDataType getText();
    method public androidx.compose.ui.autofill.ContentDataType getToggle();
    property public androidx.compose.ui.autofill.ContentDataType Date;
    property public androidx.compose.ui.autofill.ContentDataType List;
    property public androidx.compose.ui.autofill.ContentDataType None;
    property public androidx.compose.ui.autofill.ContentDataType Text;
    property public androidx.compose.ui.autofill.ContentDataType Toggle;
  }

  public final class ContentDataType_androidKt {
    method public static androidx.compose.ui.autofill.ContentDataType ContentDataType(int dataType);
    method public static int getDataType(androidx.compose.ui.autofill.ContentDataType);
    property public static int androidx.compose.ui.autofill.ContentDataType.dataType;
  }

  public sealed interface ContentType {
    method public operator androidx.compose.ui.autofill.ContentType plus(androidx.compose.ui.autofill.ContentType other);
    field public static final androidx.compose.ui.autofill.ContentType.Companion Companion;
  }

  public static final class ContentType.Companion {
    method public androidx.compose.ui.autofill.ContentType getAddressAuxiliaryDetails();
    method public androidx.compose.ui.autofill.ContentType getAddressCountry();
    method public androidx.compose.ui.autofill.ContentType getAddressLocality();
    method public androidx.compose.ui.autofill.ContentType getAddressRegion();
    method public androidx.compose.ui.autofill.ContentType getAddressStreet();
    method public androidx.compose.ui.autofill.ContentType getBirthDateDay();
    method public androidx.compose.ui.autofill.ContentType getBirthDateFull();
    method public androidx.compose.ui.autofill.ContentType getBirthDateMonth();
    method public androidx.compose.ui.autofill.ContentType getBirthDateYear();
    method public androidx.compose.ui.autofill.ContentType getCreditCardExpirationDate();
    method public androidx.compose.ui.autofill.ContentType getCreditCardExpirationDay();
    method public androidx.compose.ui.autofill.ContentType getCreditCardExpirationMonth();
    method public androidx.compose.ui.autofill.ContentType getCreditCardExpirationYear();
    method public androidx.compose.ui.autofill.ContentType getCreditCardNumber();
    method public androidx.compose.ui.autofill.ContentType getCreditCardSecurityCode();
    method public androidx.compose.ui.autofill.ContentType getEmailAddress();
    method public androidx.compose.ui.autofill.ContentType getGender();
    method public androidx.compose.ui.autofill.ContentType getNewPassword();
    method public androidx.compose.ui.autofill.ContentType getNewUsername();
    method public androidx.compose.ui.autofill.ContentType getPassword();
    method public androidx.compose.ui.autofill.ContentType getPersonFirstName();
    method public androidx.compose.ui.autofill.ContentType getPersonFullName();
    method public androidx.compose.ui.autofill.ContentType getPersonLastName();
    method public androidx.compose.ui.autofill.ContentType getPersonMiddleInitial();
    method public androidx.compose.ui.autofill.ContentType getPersonMiddleName();
    method public androidx.compose.ui.autofill.ContentType getPersonNamePrefix();
    method public androidx.compose.ui.autofill.ContentType getPersonNameSuffix();
    method public androidx.compose.ui.autofill.ContentType getPhoneCountryCode();
    method public androidx.compose.ui.autofill.ContentType getPhoneNumber();
    method public androidx.compose.ui.autofill.ContentType getPhoneNumberDevice();
    method public androidx.compose.ui.autofill.ContentType getPhoneNumberNational();
    method public androidx.compose.ui.autofill.ContentType getPostalAddress();
    method public androidx.compose.ui.autofill.ContentType getPostalCode();
    method public androidx.compose.ui.autofill.ContentType getPostalCodeExtended();
    method public androidx.compose.ui.autofill.ContentType getSmsOtpCode();
    method public androidx.compose.ui.autofill.ContentType getUsername();
    property public androidx.compose.ui.autofill.ContentType AddressAuxiliaryDetails;
    property public androidx.compose.ui.autofill.ContentType AddressCountry;
    property public androidx.compose.ui.autofill.ContentType AddressLocality;
    property public androidx.compose.ui.autofill.ContentType AddressRegion;
    property public androidx.compose.ui.autofill.ContentType AddressStreet;
    property public androidx.compose.ui.autofill.ContentType BirthDateDay;
    property public androidx.compose.ui.autofill.ContentType BirthDateFull;
    property public androidx.compose.ui.autofill.ContentType BirthDateMonth;
    property public androidx.compose.ui.autofill.ContentType BirthDateYear;
    property public androidx.compose.ui.autofill.ContentType CreditCardExpirationDate;
    property public androidx.compose.ui.autofill.ContentType CreditCardExpirationDay;
    property public androidx.compose.ui.autofill.ContentType CreditCardExpirationMonth;
    property public androidx.compose.ui.autofill.ContentType CreditCardExpirationYear;
    property public androidx.compose.ui.autofill.ContentType CreditCardNumber;
    property public androidx.compose.ui.autofill.ContentType CreditCardSecurityCode;
    property public androidx.compose.ui.autofill.ContentType EmailAddress;
    property public androidx.compose.ui.autofill.ContentType Gender;
    property public androidx.compose.ui.autofill.ContentType NewPassword;
    property public androidx.compose.ui.autofill.ContentType NewUsername;
    property public androidx.compose.ui.autofill.ContentType Password;
    property public androidx.compose.ui.autofill.ContentType PersonFirstName;
    property public androidx.compose.ui.autofill.ContentType PersonFullName;
    property public androidx.compose.ui.autofill.ContentType PersonLastName;
    property public androidx.compose.ui.autofill.ContentType PersonMiddleInitial;
    property public androidx.compose.ui.autofill.ContentType PersonMiddleName;
    property public androidx.compose.ui.autofill.ContentType PersonNamePrefix;
    property public androidx.compose.ui.autofill.ContentType PersonNameSuffix;
    property public androidx.compose.ui.autofill.ContentType PhoneCountryCode;
    property public androidx.compose.ui.autofill.ContentType PhoneNumber;
    property public androidx.compose.ui.autofill.ContentType PhoneNumberDevice;
    property public androidx.compose.ui.autofill.ContentType PhoneNumberNational;
    property public androidx.compose.ui.autofill.ContentType PostalAddress;
    property public androidx.compose.ui.autofill.ContentType PostalCode;
    property public androidx.compose.ui.autofill.ContentType PostalCodeExtended;
    property public androidx.compose.ui.autofill.ContentType SmsOtpCode;
    property public androidx.compose.ui.autofill.ContentType Username;
  }

  public final class ContentType_androidKt {
    method public static androidx.compose.ui.autofill.ContentType ContentType(String contentHint);
  }

}

package androidx.compose.ui.contentcapture {

  @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public sealed interface ContentCaptureManager {
    field public static final androidx.compose.ui.contentcapture.ContentCaptureManager.Companion Companion;
  }

  public static final class ContentCaptureManager.Companion {
    method @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public boolean isEnabled();
    method @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public void setEnabled(boolean);
    property @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public boolean isEnabled;
  }

}

package androidx.compose.ui.draganddrop {

  public final class DragAndDropEvent {
    ctor public DragAndDropEvent(android.view.DragEvent dragEvent);
  }

  @Deprecated public interface DragAndDropModifierNode extends androidx.compose.ui.node.DelegatableNode androidx.compose.ui.draganddrop.DragAndDropTarget {
    method @Deprecated public boolean acceptDragAndDropTransfer(androidx.compose.ui.draganddrop.DragAndDropEvent startEvent);
    method @Deprecated public void drag(androidx.compose.ui.draganddrop.DragAndDropTransferData transferData, long decorationSize, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit> drawDragDecoration);
  }

  public final class DragAndDropNodeKt {
    method @Deprecated public static androidx.compose.ui.draganddrop.DragAndDropModifierNode DragAndDropModifierNode();
    method @Deprecated public static androidx.compose.ui.draganddrop.DragAndDropModifierNode DragAndDropModifierNode(kotlin.jvm.functions.Function1<? super androidx.compose.ui.draganddrop.DragAndDropEvent,java.lang.Boolean> shouldStartDragAndDrop, androidx.compose.ui.draganddrop.DragAndDropTarget target);
    method public static androidx.compose.ui.draganddrop.DragAndDropSourceModifierNode DragAndDropSourceModifierNode(kotlin.jvm.functions.Function2<? super androidx.compose.ui.draganddrop.DragAndDropStartTransferScope,? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onStartTransfer);
    method public static androidx.compose.ui.draganddrop.DragAndDropTargetModifierNode DragAndDropTargetModifierNode(kotlin.jvm.functions.Function1<? super androidx.compose.ui.draganddrop.DragAndDropEvent,java.lang.Boolean> shouldStartDragAndDrop, androidx.compose.ui.draganddrop.DragAndDropTarget target);
  }

  public sealed interface DragAndDropSourceModifierNode extends androidx.compose.ui.node.LayoutAwareModifierNode {
    method public boolean isRequestDragAndDropTransferRequired();
    method public void requestDragAndDropTransfer(long offset);
    property public abstract boolean isRequestDragAndDropTransferRequired;
  }

  public interface DragAndDropStartTransferScope {
    method public boolean startDragAndDropTransfer(androidx.compose.ui.draganddrop.DragAndDropTransferData transferData, long decorationSize, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit> drawDragDecoration);
  }

  public interface DragAndDropTarget {
    method public default void onChanged(androidx.compose.ui.draganddrop.DragAndDropEvent event);
    method public boolean onDrop(androidx.compose.ui.draganddrop.DragAndDropEvent event);
    method public default void onEnded(androidx.compose.ui.draganddrop.DragAndDropEvent event);
    method public default void onEntered(androidx.compose.ui.draganddrop.DragAndDropEvent event);
    method public default void onExited(androidx.compose.ui.draganddrop.DragAndDropEvent event);
    method public default void onMoved(androidx.compose.ui.draganddrop.DragAndDropEvent event);
    method public default void onStarted(androidx.compose.ui.draganddrop.DragAndDropEvent event);
  }

  public sealed interface DragAndDropTargetModifierNode extends androidx.compose.ui.node.LayoutAwareModifierNode {
  }

  public final class DragAndDropTransferData {
    ctor public DragAndDropTransferData(android.content.ClipData clipData, optional Object? localState, optional int flags);
    method public android.content.ClipData getClipData();
    method public int getFlags();
    method public Object? getLocalState();
    property public android.content.ClipData clipData;
    property public int flags;
    property public Object? localState;
  }

  public final class DragAndDrop_androidKt {
    method public static java.util.Set<java.lang.String> mimeTypes(androidx.compose.ui.draganddrop.DragAndDropEvent);
    method public static android.view.DragEvent toAndroidDragEvent(androidx.compose.ui.draganddrop.DragAndDropEvent);
  }

}

package androidx.compose.ui.draw {

  public final class AlphaKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier alpha(androidx.compose.ui.Modifier, float alpha);
  }

  public final class BlurKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier blur(androidx.compose.ui.Modifier, float radius, optional androidx.compose.ui.graphics.Shape edgeTreatment);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier blur(androidx.compose.ui.Modifier, float radiusX, float radiusY, optional androidx.compose.ui.graphics.Shape edgeTreatment);
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class BlurredEdgeTreatment {
    ctor public BlurredEdgeTreatment(androidx.compose.ui.graphics.Shape? shape);
    method public androidx.compose.ui.graphics.Shape? getShape();
    property public androidx.compose.ui.graphics.Shape? shape;
    field public static final androidx.compose.ui.draw.BlurredEdgeTreatment.Companion Companion;
  }

  public static final class BlurredEdgeTreatment.Companion {
    method public androidx.compose.ui.graphics.Shape getRectangle();
    method public androidx.compose.ui.graphics.Shape getUnbounded();
    property public androidx.compose.ui.graphics.Shape Rectangle;
    property public androidx.compose.ui.graphics.Shape Unbounded;
  }

  public interface BuildDrawCacheParams {
    method public androidx.compose.ui.unit.Density getDensity();
    method public androidx.compose.ui.unit.LayoutDirection getLayoutDirection();
    method public long getSize();
    property public abstract androidx.compose.ui.unit.Density density;
    property public abstract androidx.compose.ui.unit.LayoutDirection layoutDirection;
    property public abstract long size;
  }

  public sealed interface CacheDrawModifierNode extends androidx.compose.ui.node.DrawModifierNode {
    method public void invalidateDrawCache();
  }

  public final class CacheDrawScope implements androidx.compose.ui.unit.Density {
    method public float getDensity();
    method public float getFontScale();
    method public androidx.compose.ui.unit.LayoutDirection getLayoutDirection();
    method public long getSize();
    method public androidx.compose.ui.graphics.layer.GraphicsLayer obtainGraphicsLayer();
    method public androidx.compose.ui.draw.DrawResult onDrawBehind(kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit> block);
    method public androidx.compose.ui.draw.DrawResult onDrawWithContent(kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.ContentDrawScope,kotlin.Unit> block);
    method public void record(androidx.compose.ui.graphics.layer.GraphicsLayer, optional androidx.compose.ui.unit.Density density, optional androidx.compose.ui.unit.LayoutDirection layoutDirection, optional long size, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.ContentDrawScope,kotlin.Unit> block);
    property public float density;
    property public float fontScale;
    property public androidx.compose.ui.unit.LayoutDirection layoutDirection;
    property public long size;
  }

  public final class ClipKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier clip(androidx.compose.ui.Modifier, androidx.compose.ui.graphics.Shape shape);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier clipToBounds(androidx.compose.ui.Modifier);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface DrawCacheModifier extends androidx.compose.ui.draw.DrawModifier {
    method public void onBuildCache(androidx.compose.ui.draw.BuildDrawCacheParams params);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface DrawModifier extends androidx.compose.ui.Modifier.Element {
    method public void draw(androidx.compose.ui.graphics.drawscope.ContentDrawScope);
  }

  public final class DrawModifierKt {
    method public static androidx.compose.ui.draw.CacheDrawModifierNode CacheDrawModifierNode(kotlin.jvm.functions.Function1<? super androidx.compose.ui.draw.CacheDrawScope,androidx.compose.ui.draw.DrawResult> onBuildDrawCache);
    method public static androidx.compose.ui.Modifier drawBehind(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit> onDraw);
    method public static androidx.compose.ui.Modifier drawWithCache(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.draw.CacheDrawScope,androidx.compose.ui.draw.DrawResult> onBuildDrawCache);
    method public static androidx.compose.ui.Modifier drawWithContent(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.ContentDrawScope,kotlin.Unit> onDraw);
  }

  public final class DrawResult {
  }

  public final class PainterModifierKt {
    method public static androidx.compose.ui.Modifier paint(androidx.compose.ui.Modifier, androidx.compose.ui.graphics.painter.Painter painter, optional boolean sizeToIntrinsics, optional androidx.compose.ui.Alignment alignment, optional androidx.compose.ui.layout.ContentScale contentScale, optional float alpha, optional androidx.compose.ui.graphics.ColorFilter? colorFilter);
  }

  public final class RotateKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier rotate(androidx.compose.ui.Modifier, float degrees);
  }

  public final class ScaleKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier scale(androidx.compose.ui.Modifier, float scale);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier scale(androidx.compose.ui.Modifier, float scaleX, float scaleY);
  }

  public final class ShadowKt {
    method @Deprecated @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier shadow(androidx.compose.ui.Modifier, float elevation, optional androidx.compose.ui.graphics.Shape shape, optional boolean clip);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier shadow(androidx.compose.ui.Modifier, float elevation, optional androidx.compose.ui.graphics.Shape shape, optional boolean clip, optional long ambientColor, optional long spotColor);
  }

}

package androidx.compose.ui.focus {

  public final class FocusChangedModifierKt {
    method public static androidx.compose.ui.Modifier onFocusChanged(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.focus.FocusState,kotlin.Unit> onFocusChanged);
  }

  @kotlin.jvm.JvmInline public final value class FocusDirection {
    field public static final androidx.compose.ui.focus.FocusDirection.Companion Companion;
  }

  public static final class FocusDirection.Companion {
    method public int getDown();
    method public int getEnter();
    method public int getExit();
    method public int getLeft();
    method public int getNext();
    method public int getPrevious();
    method public int getRight();
    method public int getUp();
    property public int Down;
    property public int Enter;
    property public int Exit;
    property public int Left;
    property public int Next;
    property public int Previous;
    property public int Right;
    property public int Up;
  }

  public sealed interface FocusEnterExitScope {
    method @Deprecated @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public default void cancelFocus();
    method public void cancelFocusChange();
    method public int getRequestedFocusDirection();
    property public abstract int requestedFocusDirection;
  }

  @Deprecated @kotlin.jvm.JvmDefaultWithCompatibility public interface FocusEventModifier extends androidx.compose.ui.Modifier.Element {
    method @Deprecated public void onFocusEvent(androidx.compose.ui.focus.FocusState focusState);
  }

  public final class FocusEventModifierKt {
    method public static androidx.compose.ui.Modifier onFocusEvent(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.focus.FocusState,kotlin.Unit> onFocusEvent);
  }

  public interface FocusEventModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public void onFocusEvent(androidx.compose.ui.focus.FocusState focusState);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface FocusManager {
    method public void clearFocus(optional boolean force);
    method public boolean moveFocus(int focusDirection);
  }

  public final class FocusModifierKt {
    method @Deprecated public static androidx.compose.ui.Modifier focusModifier(androidx.compose.ui.Modifier);
    method public static androidx.compose.ui.Modifier focusTarget(androidx.compose.ui.Modifier);
  }

  @Deprecated public final class FocusOrder {
    ctor @Deprecated public FocusOrder();
    method @Deprecated public androidx.compose.ui.focus.FocusRequester getDown();
    method @Deprecated public androidx.compose.ui.focus.FocusRequester getEnd();
    method @Deprecated public androidx.compose.ui.focus.FocusRequester getLeft();
    method @Deprecated public androidx.compose.ui.focus.FocusRequester getNext();
    method @Deprecated public androidx.compose.ui.focus.FocusRequester getPrevious();
    method @Deprecated public androidx.compose.ui.focus.FocusRequester getRight();
    method @Deprecated public androidx.compose.ui.focus.FocusRequester getStart();
    method @Deprecated public androidx.compose.ui.focus.FocusRequester getUp();
    method @Deprecated public void setDown(androidx.compose.ui.focus.FocusRequester);
    method @Deprecated public void setEnd(androidx.compose.ui.focus.FocusRequester);
    method @Deprecated public void setLeft(androidx.compose.ui.focus.FocusRequester);
    method @Deprecated public void setNext(androidx.compose.ui.focus.FocusRequester);
    method @Deprecated public void setPrevious(androidx.compose.ui.focus.FocusRequester);
    method @Deprecated public void setRight(androidx.compose.ui.focus.FocusRequester);
    method @Deprecated public void setStart(androidx.compose.ui.focus.FocusRequester);
    method @Deprecated public void setUp(androidx.compose.ui.focus.FocusRequester);
    property @Deprecated public androidx.compose.ui.focus.FocusRequester down;
    property @Deprecated public androidx.compose.ui.focus.FocusRequester end;
    property @Deprecated public androidx.compose.ui.focus.FocusRequester left;
    property @Deprecated public androidx.compose.ui.focus.FocusRequester next;
    property @Deprecated public androidx.compose.ui.focus.FocusRequester previous;
    property @Deprecated public androidx.compose.ui.focus.FocusRequester right;
    property @Deprecated public androidx.compose.ui.focus.FocusRequester start;
    property @Deprecated public androidx.compose.ui.focus.FocusRequester up;
  }

  @Deprecated @kotlin.jvm.JvmDefaultWithCompatibility public interface FocusOrderModifier extends androidx.compose.ui.Modifier.Element {
    method @Deprecated public void populateFocusOrder(androidx.compose.ui.focus.FocusOrder focusOrder);
  }

  public final class FocusOrderModifierKt {
    method @Deprecated public static androidx.compose.ui.Modifier focusOrder(androidx.compose.ui.Modifier, androidx.compose.ui.focus.FocusRequester focusRequester);
    method @Deprecated public static androidx.compose.ui.Modifier focusOrder(androidx.compose.ui.Modifier, androidx.compose.ui.focus.FocusRequester focusRequester, kotlin.jvm.functions.Function1<? super androidx.compose.ui.focus.FocusOrder,kotlin.Unit> focusOrderReceiver);
    method @Deprecated public static androidx.compose.ui.Modifier focusOrder(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.focus.FocusOrder,kotlin.Unit> focusOrderReceiver);
  }

  public interface FocusProperties {
    method public boolean getCanFocus();
    method public default androidx.compose.ui.focus.FocusRequester getDown();
    method public default androidx.compose.ui.focus.FocusRequester getEnd();
    method @Deprecated @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public default kotlin.jvm.functions.Function1<androidx.compose.ui.focus.FocusDirection,androidx.compose.ui.focus.FocusRequester> getEnter();
    method @Deprecated @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public default kotlin.jvm.functions.Function1<androidx.compose.ui.focus.FocusDirection,androidx.compose.ui.focus.FocusRequester> getExit();
    method public default androidx.compose.ui.focus.FocusRequester getLeft();
    method public default androidx.compose.ui.focus.FocusRequester getNext();
    method public default kotlin.jvm.functions.Function1<androidx.compose.ui.focus.FocusEnterExitScope,kotlin.Unit> getOnEnter();
    method public default kotlin.jvm.functions.Function1<androidx.compose.ui.focus.FocusEnterExitScope,kotlin.Unit> getOnExit();
    method public default androidx.compose.ui.focus.FocusRequester getPrevious();
    method public default androidx.compose.ui.focus.FocusRequester getRight();
    method public default androidx.compose.ui.focus.FocusRequester getStart();
    method public default androidx.compose.ui.focus.FocusRequester getUp();
    method public void setCanFocus(boolean);
    method public default void setDown(androidx.compose.ui.focus.FocusRequester);
    method public default void setEnd(androidx.compose.ui.focus.FocusRequester);
    method @Deprecated @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public default void setEnter(kotlin.jvm.functions.Function1<? super androidx.compose.ui.focus.FocusDirection,androidx.compose.ui.focus.FocusRequester>);
    method @Deprecated @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public default void setExit(kotlin.jvm.functions.Function1<? super androidx.compose.ui.focus.FocusDirection,androidx.compose.ui.focus.FocusRequester>);
    method public default void setLeft(androidx.compose.ui.focus.FocusRequester);
    method public default void setNext(androidx.compose.ui.focus.FocusRequester);
    method public default void setOnEnter(kotlin.jvm.functions.Function1<? super androidx.compose.ui.focus.FocusEnterExitScope,kotlin.Unit>);
    method public default void setOnExit(kotlin.jvm.functions.Function1<? super androidx.compose.ui.focus.FocusEnterExitScope,kotlin.Unit>);
    method public default void setPrevious(androidx.compose.ui.focus.FocusRequester);
    method public default void setRight(androidx.compose.ui.focus.FocusRequester);
    method public default void setStart(androidx.compose.ui.focus.FocusRequester);
    method public default void setUp(androidx.compose.ui.focus.FocusRequester);
    property public abstract boolean canFocus;
    property public default androidx.compose.ui.focus.FocusRequester down;
    property public default androidx.compose.ui.focus.FocusRequester end;
    property @Deprecated @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public default kotlin.jvm.functions.Function1<androidx.compose.ui.focus.FocusDirection,androidx.compose.ui.focus.FocusRequester> enter;
    property @Deprecated @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public default kotlin.jvm.functions.Function1<androidx.compose.ui.focus.FocusDirection,androidx.compose.ui.focus.FocusRequester> exit;
    property public default androidx.compose.ui.focus.FocusRequester left;
    property public default androidx.compose.ui.focus.FocusRequester next;
    property public default kotlin.jvm.functions.Function1<androidx.compose.ui.focus.FocusEnterExitScope,kotlin.Unit> onEnter;
    property public default kotlin.jvm.functions.Function1<androidx.compose.ui.focus.FocusEnterExitScope,kotlin.Unit> onExit;
    property public default androidx.compose.ui.focus.FocusRequester previous;
    property public default androidx.compose.ui.focus.FocusRequester right;
    property public default androidx.compose.ui.focus.FocusRequester start;
    property public default androidx.compose.ui.focus.FocusRequester up;
  }

  public final class FocusPropertiesKt {
    method public static androidx.compose.ui.Modifier focusProperties(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.focus.FocusProperties,kotlin.Unit> scope);
  }

  public interface FocusPropertiesModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public void applyFocusProperties(androidx.compose.ui.focus.FocusProperties focusProperties);
  }

  public final class FocusPropertiesModifierNodeKt {
    method public static void invalidateFocusProperties(androidx.compose.ui.focus.FocusPropertiesModifierNode);
  }

  @androidx.compose.runtime.Stable public final class FocusRequester {
    ctor @androidx.compose.runtime.annotation.RememberInComposition public FocusRequester();
    method public boolean captureFocus();
    method public boolean freeFocus();
    method @Deprecated public void requestFocus();
    method public boolean requestFocus(optional int focusDirection);
    method public boolean restoreFocusedChild();
    method public boolean saveFocusedChild();
    field public static final androidx.compose.ui.focus.FocusRequester.Companion Companion;
  }

  public static final class FocusRequester.Companion {
    method public androidx.compose.ui.focus.FocusRequester.Companion.FocusRequesterFactory createRefs();
    method public androidx.compose.ui.focus.FocusRequester getCancel();
    method public androidx.compose.ui.focus.FocusRequester getDefault();
    property public androidx.compose.ui.focus.FocusRequester Cancel;
    property public androidx.compose.ui.focus.FocusRequester Default;
  }

  public static final class FocusRequester.Companion.FocusRequesterFactory {
    method public operator androidx.compose.ui.focus.FocusRequester component1();
    method public operator androidx.compose.ui.focus.FocusRequester component10();
    method public operator androidx.compose.ui.focus.FocusRequester component11();
    method public operator androidx.compose.ui.focus.FocusRequester component12();
    method public operator androidx.compose.ui.focus.FocusRequester component13();
    method public operator androidx.compose.ui.focus.FocusRequester component14();
    method public operator androidx.compose.ui.focus.FocusRequester component15();
    method public operator androidx.compose.ui.focus.FocusRequester component16();
    method public operator androidx.compose.ui.focus.FocusRequester component2();
    method public operator androidx.compose.ui.focus.FocusRequester component3();
    method public operator androidx.compose.ui.focus.FocusRequester component4();
    method public operator androidx.compose.ui.focus.FocusRequester component5();
    method public operator androidx.compose.ui.focus.FocusRequester component6();
    method public operator androidx.compose.ui.focus.FocusRequester component7();
    method public operator androidx.compose.ui.focus.FocusRequester component8();
    method public operator androidx.compose.ui.focus.FocusRequester component9();
    field public static final androidx.compose.ui.focus.FocusRequester.Companion.FocusRequesterFactory INSTANCE;
  }

  @Deprecated @kotlin.jvm.JvmDefaultWithCompatibility public interface FocusRequesterModifier extends androidx.compose.ui.Modifier.Element {
    method @Deprecated public androidx.compose.ui.focus.FocusRequester getFocusRequester();
    property @Deprecated public abstract androidx.compose.ui.focus.FocusRequester focusRequester;
  }

  public final class FocusRequesterModifierKt {
    method public static androidx.compose.ui.Modifier focusRequester(androidx.compose.ui.Modifier, androidx.compose.ui.focus.FocusRequester focusRequester);
  }

  public interface FocusRequesterModifierNode extends androidx.compose.ui.node.DelegatableNode {
  }

  public final class FocusRequesterModifierNodeKt {
    method public static boolean captureFocus(androidx.compose.ui.focus.FocusRequesterModifierNode);
    method public static boolean freeFocus(androidx.compose.ui.focus.FocusRequesterModifierNode);
    method public static boolean requestFocus(androidx.compose.ui.focus.FocusRequesterModifierNode);
    method public static boolean restoreFocusedChild(androidx.compose.ui.focus.FocusRequesterModifierNode);
    method public static boolean saveFocusedChild(androidx.compose.ui.focus.FocusRequesterModifierNode);
  }

  public final class FocusRestorerKt {
    method public static androidx.compose.ui.Modifier focusRestorer(androidx.compose.ui.Modifier, optional androidx.compose.ui.focus.FocusRequester fallback);
    method @Deprecated @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public static androidx.compose.ui.Modifier focusRestorer(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function0<androidx.compose.ui.focus.FocusRequester>? onRestoreFailed);
  }

  public interface FocusState {
    method public boolean getHasFocus();
    method public boolean isCaptured();
    method public boolean isFocused();
    property public abstract boolean hasFocus;
    property public abstract boolean isCaptured;
    property public abstract boolean isFocused;
  }

  public sealed interface FocusTargetModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public androidx.compose.ui.focus.FocusState getFocusState();
    method public int getFocusability();
    method @Deprecated public boolean requestFocus();
    method public boolean requestFocus(optional int focusDirection);
    method public void setFocusability(int);
    property public abstract androidx.compose.ui.focus.FocusState focusState;
    property public abstract int focusability;
  }

  public final class FocusTargetModifierNodeKt {
    method @Deprecated public static androidx.compose.ui.focus.FocusTargetModifierNode FocusTargetModifierNode();
    method public static androidx.compose.ui.focus.FocusTargetModifierNode FocusTargetModifierNode(optional int focusability, optional kotlin.jvm.functions.Function2<? super androidx.compose.ui.focus.FocusState,? super androidx.compose.ui.focus.FocusState,kotlin.Unit>? onFocusChange);
  }

  @kotlin.jvm.JvmInline public final value class Focusability {
    field public static final androidx.compose.ui.focus.Focusability.Companion Companion;
  }

  public static final class Focusability.Companion {
    method public int getAlways();
    method public int getNever();
    method public int getSystemDefined();
    property public int Always;
    property public int Never;
    property public int SystemDefined;
  }

}

package androidx.compose.ui.graphics {

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class CompositingStrategy {
    field public static final androidx.compose.ui.graphics.CompositingStrategy.Companion Companion;
  }

  public static final class CompositingStrategy.Companion {
    method public int getAuto();
    method public int getModulateAlpha();
    method public int getOffscreen();
    property public int Auto;
    property public int ModulateAlpha;
    property public int Offscreen;
  }

  public final class GraphicsLayerModifierKt {
    method @Deprecated @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier graphicsLayer(androidx.compose.ui.Modifier, optional float scaleX, optional float scaleY, optional float alpha, optional float translationX, optional float translationY, optional float shadowElevation, optional float rotationX, optional float rotationY, optional float rotationZ, optional float cameraDistance, optional long transformOrigin, optional androidx.compose.ui.graphics.Shape shape, optional boolean clip);
    method @Deprecated @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier graphicsLayer(androidx.compose.ui.Modifier, optional float scaleX, optional float scaleY, optional float alpha, optional float translationX, optional float translationY, optional float shadowElevation, optional float rotationX, optional float rotationY, optional float rotationZ, optional float cameraDistance, optional long transformOrigin, optional androidx.compose.ui.graphics.Shape shape, optional boolean clip, optional androidx.compose.ui.graphics.RenderEffect? renderEffect);
    method @Deprecated @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier graphicsLayer(androidx.compose.ui.Modifier, optional float scaleX, optional float scaleY, optional float alpha, optional float translationX, optional float translationY, optional float shadowElevation, optional float rotationX, optional float rotationY, optional float rotationZ, optional float cameraDistance, optional long transformOrigin, optional androidx.compose.ui.graphics.Shape shape, optional boolean clip, optional androidx.compose.ui.graphics.RenderEffect? renderEffect, optional long ambientShadowColor, optional long spotShadowColor);
    method @Deprecated @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier graphicsLayer(androidx.compose.ui.Modifier, optional float scaleX, optional float scaleY, optional float alpha, optional float translationX, optional float translationY, optional float shadowElevation, optional float rotationX, optional float rotationY, optional float rotationZ, optional float cameraDistance, optional long transformOrigin, optional androidx.compose.ui.graphics.Shape shape, optional boolean clip, optional androidx.compose.ui.graphics.RenderEffect? renderEffect, optional long ambientShadowColor, optional long spotShadowColor, optional int compositingStrategy);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier graphicsLayer(androidx.compose.ui.Modifier, optional float scaleX, optional float scaleY, optional float alpha, optional float translationX, optional float translationY, optional float shadowElevation, optional float rotationX, optional float rotationY, optional float rotationZ, optional float cameraDistance, optional long transformOrigin, optional androidx.compose.ui.graphics.Shape shape, optional boolean clip, optional androidx.compose.ui.graphics.RenderEffect? renderEffect, optional long ambientShadowColor, optional long spotShadowColor, optional int compositingStrategy, optional int blendMode, optional androidx.compose.ui.graphics.ColorFilter? colorFilter);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier graphicsLayer(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.GraphicsLayerScope,kotlin.Unit> block);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier toolingGraphicsLayer(androidx.compose.ui.Modifier);
  }

  @androidx.compose.ui.layout.PlacementScopeMarker @kotlin.jvm.JvmDefaultWithCompatibility public interface GraphicsLayerScope extends androidx.compose.ui.unit.Density {
    method public float getAlpha();
    method public default long getAmbientShadowColor();
    method public default int getBlendMode();
    method public float getCameraDistance();
    method public boolean getClip();
    method public default androidx.compose.ui.graphics.ColorFilter? getColorFilter();
    method public default int getCompositingStrategy();
    method public default androidx.compose.ui.graphics.RenderEffect? getRenderEffect();
    method public float getRotationX();
    method public float getRotationY();
    method public float getRotationZ();
    method public float getScaleX();
    method public float getScaleY();
    method public float getShadowElevation();
    method public androidx.compose.ui.graphics.Shape getShape();
    method public default long getSize();
    method public default long getSpotShadowColor();
    method public long getTransformOrigin();
    method public float getTranslationX();
    method public float getTranslationY();
    method public void setAlpha(float);
    method public default void setAmbientShadowColor(long);
    method public default void setBlendMode(int);
    method public void setCameraDistance(float);
    method public void setClip(boolean);
    method public default void setColorFilter(androidx.compose.ui.graphics.ColorFilter?);
    method public default void setCompositingStrategy(int);
    method public default void setRenderEffect(androidx.compose.ui.graphics.RenderEffect?);
    method public void setRotationX(float);
    method public void setRotationY(float);
    method public void setRotationZ(float);
    method public void setScaleX(float);
    method public void setScaleY(float);
    method public void setShadowElevation(float);
    method public void setShape(androidx.compose.ui.graphics.Shape);
    method public default void setSpotShadowColor(long);
    method public void setTransformOrigin(long);
    method public void setTranslationX(float);
    method public void setTranslationY(float);
    property public abstract float alpha;
    property public default long ambientShadowColor;
    property public default int blendMode;
    property public abstract float cameraDistance;
    property public abstract boolean clip;
    property public default androidx.compose.ui.graphics.ColorFilter? colorFilter;
    property public default int compositingStrategy;
    property public default androidx.compose.ui.graphics.RenderEffect? renderEffect;
    property public abstract float rotationX;
    property public abstract float rotationY;
    property public abstract float rotationZ;
    property public abstract float scaleX;
    property public abstract float scaleY;
    property public abstract float shadowElevation;
    property public abstract androidx.compose.ui.graphics.Shape shape;
    property public default long size;
    property public default long spotShadowColor;
    property public abstract long transformOrigin;
    property public abstract float translationX;
    property public abstract float translationY;
  }

  public final class GraphicsLayerScopeKt {
    method public static androidx.compose.ui.graphics.GraphicsLayerScope GraphicsLayerScope();
    method public static long getDefaultShadowColor();
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableOpenTarget(index=0xffffffff) public static androidx.compose.ui.graphics.layer.GraphicsLayer rememberGraphicsLayer();
    property public static float DefaultCameraDistance;
    property public static long DefaultShadowColor;
    field public static final float DefaultCameraDistance = 8.0f;
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class TransformOrigin {
    method @androidx.compose.runtime.Stable public inline operator float component1();
    method @androidx.compose.runtime.Stable public inline operator float component2();
    method public long copy(optional float pivotFractionX, optional float pivotFractionY);
    property @kotlin.PublishedApi internal long packedValue;
    property public float pivotFractionX;
    property public float pivotFractionY;
    field public static final androidx.compose.ui.graphics.TransformOrigin.Companion Companion;
  }

  public static final class TransformOrigin.Companion {
    method public long getCenter();
    property public long Center;
  }

  public final class TransformOriginKt {
    method public static long TransformOrigin(float pivotFractionX, float pivotFractionY);
  }

}

package androidx.compose.ui.graphics.vector {

  @androidx.compose.runtime.Immutable public final class ImageVector {
    method public boolean getAutoMirror();
    method public float getDefaultHeight();
    method public float getDefaultWidth();
    method public String getName();
    method public androidx.compose.ui.graphics.vector.VectorGroup getRoot();
    method public int getTintBlendMode();
    method public long getTintColor();
    method public float getViewportHeight();
    method public float getViewportWidth();
    property public boolean autoMirror;
    property public float defaultHeight;
    property public float defaultWidth;
    property public String name;
    property public androidx.compose.ui.graphics.vector.VectorGroup root;
    property public int tintBlendMode;
    property public long tintColor;
    property public float viewportHeight;
    property public float viewportWidth;
    field public static final androidx.compose.ui.graphics.vector.ImageVector.Companion Companion;
  }

  public static final class ImageVector.Builder {
    ctor @Deprecated public ImageVector.Builder(optional String name, float defaultWidth, float defaultHeight, float viewportWidth, float viewportHeight, optional long tintColor, optional int tintBlendMode);
    ctor public ImageVector.Builder(optional String name, float defaultWidth, float defaultHeight, float viewportWidth, float viewportHeight, optional long tintColor, optional int tintBlendMode, optional boolean autoMirror);
    method public androidx.compose.ui.graphics.vector.ImageVector.Builder addGroup(optional String name, optional float rotate, optional float pivotX, optional float pivotY, optional float scaleX, optional float scaleY, optional float translationX, optional float translationY, optional java.util.List<? extends androidx.compose.ui.graphics.vector.PathNode> clipPathData);
    method public androidx.compose.ui.graphics.vector.ImageVector.Builder addPath(java.util.List<? extends androidx.compose.ui.graphics.vector.PathNode> pathData, optional int pathFillType, optional String name, optional androidx.compose.ui.graphics.Brush? fill, optional float fillAlpha, optional androidx.compose.ui.graphics.Brush? stroke, optional float strokeAlpha, optional float strokeLineWidth, optional int strokeLineCap, optional int strokeLineJoin, optional float strokeLineMiter, optional float trimPathStart, optional float trimPathEnd, optional float trimPathOffset);
    method public androidx.compose.ui.graphics.vector.ImageVector build();
    method public androidx.compose.ui.graphics.vector.ImageVector.Builder clearGroup();
  }

  public static final class ImageVector.Companion {
  }

  public final class ImageVectorKt {
    method public static inline androidx.compose.ui.graphics.vector.ImageVector.Builder group(androidx.compose.ui.graphics.vector.ImageVector.Builder, optional String name, optional float rotate, optional float pivotX, optional float pivotY, optional float scaleX, optional float scaleY, optional float translationX, optional float translationY, optional java.util.List<? extends androidx.compose.ui.graphics.vector.PathNode> clipPathData, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.vector.ImageVector.Builder,kotlin.Unit> block);
    method public static inline androidx.compose.ui.graphics.vector.ImageVector.Builder path(androidx.compose.ui.graphics.vector.ImageVector.Builder, optional String name, optional androidx.compose.ui.graphics.Brush? fill, optional float fillAlpha, optional androidx.compose.ui.graphics.Brush? stroke, optional float strokeAlpha, optional float strokeLineWidth, optional int strokeLineCap, optional int strokeLineJoin, optional float strokeLineMiter, optional int pathFillType, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.vector.PathBuilder,kotlin.Unit> pathBuilder);
  }

  public abstract sealed class VNode {
    method public abstract void draw(androidx.compose.ui.graphics.drawscope.DrawScope);
    method public final void invalidate();
  }

  public final class VectorApplier extends androidx.compose.runtime.AbstractApplier<androidx.compose.ui.graphics.vector.VNode> {
    ctor public VectorApplier(androidx.compose.ui.graphics.vector.VNode root);
    method public void insertBottomUp(int index, androidx.compose.ui.graphics.vector.VNode instance);
    method public void insertTopDown(int index, androidx.compose.ui.graphics.vector.VNode instance);
    method public void move(int from, int to, int count);
    method protected void onClear();
    method public void remove(int index, int count);
  }

  @androidx.compose.runtime.ComposableTargetMarker(description="Vector Composable") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.FILE, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.TYPE, kotlin.annotation.AnnotationTarget.TYPE_PARAMETER}) public @interface VectorComposable {
  }

  public final class VectorComposeKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.graphics.vector.VectorComposable public static void Group(optional String name, optional float rotation, optional float pivotX, optional float pivotY, optional float scaleX, optional float scaleY, optional float translationX, optional float translationY, optional java.util.List<? extends androidx.compose.ui.graphics.vector.PathNode> clipPathData, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.graphics.vector.VectorComposable public static void Path(java.util.List<? extends androidx.compose.ui.graphics.vector.PathNode> pathData, optional int pathFillType, optional String name, optional androidx.compose.ui.graphics.Brush? fill, optional float fillAlpha, optional androidx.compose.ui.graphics.Brush? stroke, optional float strokeAlpha, optional float strokeLineWidth, optional int strokeLineCap, optional int strokeLineJoin, optional float strokeLineMiter, optional float trimPathStart, optional float trimPathEnd, optional float trimPathOffset);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface VectorConfig {
    method public default <T> T getOrDefault(androidx.compose.ui.graphics.vector.VectorProperty<T> property, T defaultValue);
  }

  @androidx.compose.runtime.Immutable public final class VectorGroup extends androidx.compose.ui.graphics.vector.VectorNode implements java.lang.Iterable<androidx.compose.ui.graphics.vector.VectorNode> kotlin.jvm.internal.markers.KMappedMarker {
    method public operator androidx.compose.ui.graphics.vector.VectorNode get(int index);
    method public java.util.List<androidx.compose.ui.graphics.vector.PathNode> getClipPathData();
    method public String getName();
    method public float getPivotX();
    method public float getPivotY();
    method public float getRotation();
    method public float getScaleX();
    method public float getScaleY();
    method public int getSize();
    method public float getTranslationX();
    method public float getTranslationY();
    method public java.util.Iterator<androidx.compose.ui.graphics.vector.VectorNode> iterator();
    property public java.util.List<androidx.compose.ui.graphics.vector.PathNode> clipPathData;
    property public String name;
    property public float pivotX;
    property public float pivotY;
    property public float rotation;
    property public float scaleX;
    property public float scaleY;
    property public int size;
    property public float translationX;
    property public float translationY;
  }

  public final class VectorKt {
    method public static inline java.util.List<androidx.compose.ui.graphics.vector.PathNode> PathData(kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.vector.PathBuilder,kotlin.Unit> block);
    method public static java.util.List<androidx.compose.ui.graphics.vector.PathNode> addPathNodes(String? pathStr);
    method public static int getDefaultFillType();
    method public static int getDefaultStrokeLineCap();
    method public static int getDefaultStrokeLineJoin();
    method public static int getDefaultTintBlendMode();
    method public static long getDefaultTintColor();
    method public static java.util.List<androidx.compose.ui.graphics.vector.PathNode> getEmptyPath();
    property public static int DefaultFillType;
    property public static String DefaultGroupName;
    property public static String DefaultPathName;
    property public static float DefaultPivotX;
    property public static float DefaultPivotY;
    property public static float DefaultRotation;
    property public static float DefaultScaleX;
    property public static float DefaultScaleY;
    property public static int DefaultStrokeLineCap;
    property public static int DefaultStrokeLineJoin;
    property public static float DefaultStrokeLineMiter;
    property public static float DefaultStrokeLineWidth;
    property public static int DefaultTintBlendMode;
    property public static long DefaultTintColor;
    property public static float DefaultTranslationX;
    property public static float DefaultTranslationY;
    property public static float DefaultTrimPathEnd;
    property public static float DefaultTrimPathOffset;
    property public static float DefaultTrimPathStart;
    property public static java.util.List<androidx.compose.ui.graphics.vector.PathNode> EmptyPath;
    field public static final String DefaultGroupName = "";
    field public static final String DefaultPathName = "";
    field public static final float DefaultPivotX = 0.0f;
    field public static final float DefaultPivotY = 0.0f;
    field public static final float DefaultRotation = 0.0f;
    field public static final float DefaultScaleX = 1.0f;
    field public static final float DefaultScaleY = 1.0f;
    field public static final float DefaultStrokeLineMiter = 4.0f;
    field public static final float DefaultStrokeLineWidth = 0.0f;
    field public static final float DefaultTranslationX = 0.0f;
    field public static final float DefaultTranslationY = 0.0f;
    field public static final float DefaultTrimPathEnd = 1.0f;
    field public static final float DefaultTrimPathOffset = 0.0f;
    field public static final float DefaultTrimPathStart = 0.0f;
  }

  public abstract sealed class VectorNode {
  }

  public final class VectorPainter extends androidx.compose.ui.graphics.painter.Painter {
    method public long getIntrinsicSize();
    method protected void onDraw(androidx.compose.ui.graphics.drawscope.DrawScope);
    property public long intrinsicSize;
  }

  public final class VectorPainterKt {
    method @androidx.compose.runtime.Composable public static void RenderVectorGroup(androidx.compose.ui.graphics.vector.VectorGroup group, optional java.util.Map<java.lang.String,? extends androidx.compose.ui.graphics.vector.VectorConfig> configs);
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.graphics.vector.VectorPainter rememberVectorPainter(androidx.compose.ui.graphics.vector.ImageVector image);
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableOpenTarget(index=0xffffffff) public static androidx.compose.ui.graphics.vector.VectorPainter rememberVectorPainter(float defaultWidth, float defaultHeight, optional float viewportWidth, optional float viewportHeight, optional String name, optional long tintColor, optional int tintBlendMode, optional boolean autoMirror, kotlin.jvm.functions.Function2<? super java.lang.Float,? super java.lang.Float,kotlin.Unit> content);
    method @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableOpenTarget(index=0xffffffff) public static androidx.compose.ui.graphics.vector.VectorPainter rememberVectorPainter(float defaultWidth, float defaultHeight, optional float viewportWidth, optional float viewportHeight, optional String name, optional long tintColor, optional int tintBlendMode, kotlin.jvm.functions.Function2<? super java.lang.Float,? super java.lang.Float,kotlin.Unit> content);
    property public static String RootGroupName;
    field public static final String RootGroupName = "VectorRootGroup";
  }

  @androidx.compose.runtime.Immutable public final class VectorPath extends androidx.compose.ui.graphics.vector.VectorNode {
    method public androidx.compose.ui.graphics.Brush? getFill();
    method public float getFillAlpha();
    method public String getName();
    method public java.util.List<androidx.compose.ui.graphics.vector.PathNode> getPathData();
    method public int getPathFillType();
    method public androidx.compose.ui.graphics.Brush? getStroke();
    method public float getStrokeAlpha();
    method public int getStrokeLineCap();
    method public int getStrokeLineJoin();
    method public float getStrokeLineMiter();
    method public float getStrokeLineWidth();
    method public float getTrimPathEnd();
    method public float getTrimPathOffset();
    method public float getTrimPathStart();
    property public androidx.compose.ui.graphics.Brush? fill;
    property public float fillAlpha;
    property public String name;
    property public java.util.List<androidx.compose.ui.graphics.vector.PathNode> pathData;
    property public int pathFillType;
    property public androidx.compose.ui.graphics.Brush? stroke;
    property public float strokeAlpha;
    property public int strokeLineCap;
    property public int strokeLineJoin;
    property public float strokeLineMiter;
    property public float strokeLineWidth;
    property public float trimPathEnd;
    property public float trimPathOffset;
    property public float trimPathStart;
  }

  public abstract sealed class VectorProperty<T> {
  }

  public static final class VectorProperty.Fill extends androidx.compose.ui.graphics.vector.VectorProperty<androidx.compose.ui.graphics.Brush?> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.Fill INSTANCE;
  }

  public static final class VectorProperty.FillAlpha extends androidx.compose.ui.graphics.vector.VectorProperty<java.lang.Float> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.FillAlpha INSTANCE;
  }

  public static final class VectorProperty.PathData extends androidx.compose.ui.graphics.vector.VectorProperty<java.util.List<? extends androidx.compose.ui.graphics.vector.PathNode>> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.PathData INSTANCE;
  }

  public static final class VectorProperty.PivotX extends androidx.compose.ui.graphics.vector.VectorProperty<java.lang.Float> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.PivotX INSTANCE;
  }

  public static final class VectorProperty.PivotY extends androidx.compose.ui.graphics.vector.VectorProperty<java.lang.Float> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.PivotY INSTANCE;
  }

  public static final class VectorProperty.Rotation extends androidx.compose.ui.graphics.vector.VectorProperty<java.lang.Float> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.Rotation INSTANCE;
  }

  public static final class VectorProperty.ScaleX extends androidx.compose.ui.graphics.vector.VectorProperty<java.lang.Float> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.ScaleX INSTANCE;
  }

  public static final class VectorProperty.ScaleY extends androidx.compose.ui.graphics.vector.VectorProperty<java.lang.Float> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.ScaleY INSTANCE;
  }

  public static final class VectorProperty.Stroke extends androidx.compose.ui.graphics.vector.VectorProperty<androidx.compose.ui.graphics.Brush?> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.Stroke INSTANCE;
  }

  public static final class VectorProperty.StrokeAlpha extends androidx.compose.ui.graphics.vector.VectorProperty<java.lang.Float> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.StrokeAlpha INSTANCE;
  }

  public static final class VectorProperty.StrokeLineWidth extends androidx.compose.ui.graphics.vector.VectorProperty<java.lang.Float> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.StrokeLineWidth INSTANCE;
  }

  public static final class VectorProperty.TranslateX extends androidx.compose.ui.graphics.vector.VectorProperty<java.lang.Float> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.TranslateX INSTANCE;
  }

  public static final class VectorProperty.TranslateY extends androidx.compose.ui.graphics.vector.VectorProperty<java.lang.Float> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.TranslateY INSTANCE;
  }

  public static final class VectorProperty.TrimPathEnd extends androidx.compose.ui.graphics.vector.VectorProperty<java.lang.Float> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.TrimPathEnd INSTANCE;
  }

  public static final class VectorProperty.TrimPathOffset extends androidx.compose.ui.graphics.vector.VectorProperty<java.lang.Float> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.TrimPathOffset INSTANCE;
  }

  public static final class VectorProperty.TrimPathStart extends androidx.compose.ui.graphics.vector.VectorProperty<java.lang.Float> {
    field public static final androidx.compose.ui.graphics.vector.VectorProperty.TrimPathStart INSTANCE;
  }

}

package androidx.compose.ui.hapticfeedback {

  public interface HapticFeedback {
    method public void performHapticFeedback(int hapticFeedbackType);
  }

  @kotlin.jvm.JvmInline public final value class HapticFeedbackType {
    ctor public HapticFeedbackType(int value);
    field public static final androidx.compose.ui.hapticfeedback.HapticFeedbackType.Companion Companion;
  }

  public static final class HapticFeedbackType.Companion {
    method public int getConfirm();
    method public int getContextClick();
    method public int getGestureEnd();
    method public int getGestureThresholdActivate();
    method public int getKeyboardTap();
    method public int getLongPress();
    method public int getReject();
    method public int getSegmentFrequentTick();
    method public int getSegmentTick();
    method public int getTextHandleMove();
    method public int getToggleOff();
    method public int getToggleOn();
    method public int getVirtualKey();
    method public java.util.List<androidx.compose.ui.hapticfeedback.HapticFeedbackType> values();
    property public int Confirm;
    property public int ContextClick;
    property public int GestureEnd;
    property public int GestureThresholdActivate;
    property public int KeyboardTap;
    property public int LongPress;
    property public int Reject;
    property public int SegmentFrequentTick;
    property public int SegmentTick;
    property public int TextHandleMove;
    property public int ToggleOff;
    property public int ToggleOn;
    property public int VirtualKey;
  }

}

package androidx.compose.ui.input {

  @kotlin.jvm.JvmInline public final value class InputMode {
    field public static final androidx.compose.ui.input.InputMode.Companion Companion;
  }

  public static final class InputMode.Companion {
    method public int getKeyboard();
    method public int getTouch();
    property public int Keyboard;
    property public int Touch;
  }

  public interface InputModeManager {
    method public int getInputMode();
    method public boolean requestInputMode(int inputMode);
    property public abstract int inputMode;
  }

}

package androidx.compose.ui.input.indirect {

  @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public final class IndirectTouchEvent {
    ctor public IndirectTouchEvent(long position, long eventTimeMillis, int type);
    method public long getEventTimeMillis();
    method public long getPosition();
    method public int getType();
    property public long eventTimeMillis;
    property public long position;
    property public int type;
  }

  @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi @kotlin.jvm.JvmInline public final value class IndirectTouchEventType {
    field public static final androidx.compose.ui.input.indirect.IndirectTouchEventType.Companion Companion;
  }

  public static final class IndirectTouchEventType.Companion {
    method public int getMove();
    method public int getPress();
    method public int getRelease();
    method public int getUnknown();
    property public int Move;
    property public int Press;
    property public int Release;
    property public int Unknown;
  }

  public final class IndirectTouchInputModifierKt {
    method @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public static androidx.compose.ui.Modifier onIndirectTouchEvent(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.input.indirect.IndirectTouchEvent,java.lang.Boolean> onIndirectTouchEvent);
    method @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public static androidx.compose.ui.Modifier onPreIndirectTouchEvent(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.input.indirect.IndirectTouchEvent,java.lang.Boolean> onPreIndirectTouchEvent);
  }

  @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public interface IndirectTouchInputModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public boolean onIndirectTouchEvent(androidx.compose.ui.input.indirect.IndirectTouchEvent event);
    method public boolean onPreIndirectTouchEvent(androidx.compose.ui.input.indirect.IndirectTouchEvent event);
  }

}

package androidx.compose.ui.input.key {

  @kotlin.jvm.JvmInline public final value class Key {
    ctor public Key(long keyCode);
    method public long getKeyCode();
    property public long keyCode;
    field public static final androidx.compose.ui.input.key.Key.Companion Companion;
  }

  public static final class Key.Companion {
    method public long getA();
    method public long getAllApps();
    method public long getAltLeft();
    method public long getAltRight();
    method public long getApostrophe();
    method public long getAppSwitch();
    method public long getAssist();
    method public long getAt();
    method public long getAvReceiverInput();
    method public long getAvReceiverPower();
    method public long getB();
    method public long getBack();
    method public long getBackslash();
    method public long getBackspace();
    method public long getBookmark();
    method public long getBreak();
    method public long getBrightnessDown();
    method public long getBrightnessUp();
    method public long getBrowser();
    method public long getButton1();
    method public long getButton10();
    method public long getButton11();
    method public long getButton12();
    method public long getButton13();
    method public long getButton14();
    method public long getButton15();
    method public long getButton16();
    method public long getButton2();
    method public long getButton3();
    method public long getButton4();
    method public long getButton5();
    method public long getButton6();
    method public long getButton7();
    method public long getButton8();
    method public long getButton9();
    method public long getButtonA();
    method public long getButtonB();
    method public long getButtonC();
    method public long getButtonL1();
    method public long getButtonL2();
    method public long getButtonMode();
    method public long getButtonR1();
    method public long getButtonR2();
    method public long getButtonSelect();
    method public long getButtonStart();
    method public long getButtonThumbLeft();
    method public long getButtonThumbRight();
    method public long getButtonX();
    method public long getButtonY();
    method public long getButtonZ();
    method public long getC();
    method public long getCalculator();
    method public long getCalendar();
    method public long getCall();
    method public long getCamera();
    method public long getCapsLock();
    method public long getCaptions();
    method public long getChannelDown();
    method public long getChannelUp();
    method public long getClear();
    method public long getComma();
    method public long getContacts();
    method public long getCopy();
    method public long getCtrlLeft();
    method public long getCtrlRight();
    method public long getCut();
    method public long getD();
    method public long getDelete();
    method public long getDirectionCenter();
    method public long getDirectionDown();
    method public long getDirectionDownLeft();
    method public long getDirectionDownRight();
    method public long getDirectionLeft();
    method public long getDirectionRight();
    method public long getDirectionUp();
    method public long getDirectionUpLeft();
    method public long getDirectionUpRight();
    method public long getDvr();
    method public long getE();
    method public long getEight();
    method public long getEisu();
    method public long getEndCall();
    method public long getEnter();
    method public long getEnvelope();
    method public long getEquals();
    method public long getEscape();
    method public long getF();
    method public long getF1();
    method public long getF10();
    method public long getF11();
    method public long getF12();
    method public long getF2();
    method public long getF3();
    method public long getF4();
    method public long getF5();
    method public long getF6();
    method public long getF7();
    method public long getF8();
    method public long getF9();
    method public long getFive();
    method public long getFocus();
    method public long getForward();
    method public long getFour();
    method public long getFunction();
    method public long getG();
    method public long getGrave();
    method public long getGuide();
    method public long getH();
    method public long getHeadsetHook();
    method public long getHelp();
    method public long getHenkan();
    method public long getHome();
    method public long getI();
    method public long getInfo();
    method public long getInsert();
    method public long getJ();
    method public long getK();
    method public long getKana();
    method public long getKatakanaHiragana();
    method public long getL();
    method public long getLanguageSwitch();
    method public long getLastChannel();
    method public long getLeftBracket();
    method public long getM();
    method public long getMannerMode();
    method public long getMediaAudioTrack();
    method public long getMediaClose();
    method public long getMediaEject();
    method public long getMediaFastForward();
    method public long getMediaNext();
    method public long getMediaPause();
    method public long getMediaPlay();
    method public long getMediaPlayPause();
    method public long getMediaPrevious();
    method public long getMediaRecord();
    method public long getMediaRewind();
    method public long getMediaSkipBackward();
    method public long getMediaSkipForward();
    method public long getMediaStepBackward();
    method public long getMediaStepForward();
    method public long getMediaStop();
    method public long getMediaTopMenu();
    method public long getMenu();
    method public long getMetaLeft();
    method public long getMetaRight();
    method public long getMicrophoneMute();
    method public long getMinus();
    method public long getMoveEnd();
    method public long getMoveHome();
    method public long getMuhenkan();
    method public long getMultiply();
    method public long getMusic();
    method public long getN();
    method public long getNavigateIn();
    method public long getNavigateNext();
    method public long getNavigateOut();
    method public long getNavigatePrevious();
    method public long getNine();
    method public long getNotification();
    method public long getNumLock();
    method public long getNumPad0();
    method public long getNumPad1();
    method public long getNumPad2();
    method public long getNumPad3();
    method public long getNumPad4();
    method public long getNumPad5();
    method public long getNumPad6();
    method public long getNumPad7();
    method public long getNumPad8();
    method public long getNumPad9();
    method public long getNumPadAdd();
    method public long getNumPadComma();
    method public long getNumPadDivide();
    method public long getNumPadDot();
    method public long getNumPadEnter();
    method public long getNumPadEquals();
    method public long getNumPadLeftParenthesis();
    method public long getNumPadMultiply();
    method public long getNumPadRightParenthesis();
    method public long getNumPadSubtract();
    method public long getNumber();
    method public long getO();
    method public long getOne();
    method public long getP();
    method public long getPageDown();
    method public long getPageUp();
    method public long getPairing();
    method public long getPaste();
    method public long getPeriod();
    method public long getPictureSymbols();
    method public long getPlus();
    method public long getPound();
    method public long getPower();
    method public long getPrintScreen();
    method public long getProfileSwitch();
    method public long getProgramBlue();
    method public long getProgramGreen();
    method public long getProgramRed();
    method public long getProgramYellow();
    method public long getQ();
    method public long getR();
    method public long getRefresh();
    method public long getRightBracket();
    method public long getRo();
    method public long getS();
    method public long getScrollLock();
    method public long getSearch();
    method public long getSemicolon();
    method public long getSetTopBoxInput();
    method public long getSetTopBoxPower();
    method public long getSettings();
    method public long getSeven();
    method public long getShiftLeft();
    method public long getShiftRight();
    method public long getSix();
    method public long getSlash();
    method public long getSleep();
    method public long getSoftLeft();
    method public long getSoftRight();
    method public long getSoftSleep();
    method public long getSpacebar();
    method public long getStem1();
    method public long getStem2();
    method public long getStem3();
    method public long getStemPrimary();
    method public long getSwitchCharset();
    method public long getSymbol();
    method public long getSystemNavigationDown();
    method public long getSystemNavigationLeft();
    method public long getSystemNavigationRight();
    method public long getSystemNavigationUp();
    method public long getT();
    method public long getTab();
    method public long getThree();
    method public long getThumbsDown();
    method public long getThumbsUp();
    method public long getToggle2D3D();
    method public long getTv();
    method public long getTvAntennaCable();
    method public long getTvAudioDescription();
    method public long getTvAudioDescriptionMixingVolumeDown();
    method public long getTvAudioDescriptionMixingVolumeUp();
    method public long getTvContentsMenu();
    method public long getTvDataService();
    method public long getTvInput();
    method public long getTvInputComponent1();
    method public long getTvInputComponent2();
    method public long getTvInputComposite1();
    method public long getTvInputComposite2();
    method public long getTvInputHdmi1();
    method public long getTvInputHdmi2();
    method public long getTvInputHdmi3();
    method public long getTvInputHdmi4();
    method public long getTvInputVga1();
    method public long getTvMediaContextMenu();
    method public long getTvNetwork();
    method public long getTvNumberEntry();
    method public long getTvPower();
    method public long getTvRadioService();
    method public long getTvSatellite();
    method public long getTvSatelliteBs();
    method public long getTvSatelliteCs();
    method public long getTvSatelliteService();
    method public long getTvTeletext();
    method public long getTvTerrestrialAnalog();
    method public long getTvTerrestrialDigital();
    method public long getTvTimerProgramming();
    method public long getTvZoomMode();
    method public long getTwo();
    method public long getU();
    method public long getUnknown();
    method public long getV();
    method public long getVoiceAssist();
    method public long getVolumeDown();
    method public long getVolumeMute();
    method public long getVolumeUp();
    method public long getW();
    method public long getWakeUp();
    method public long getWindow();
    method public long getX();
    method public long getY();
    method public long getYen();
    method public long getZ();
    method public long getZenkakuHankaru();
    method public long getZero();
    method public long getZoomIn();
    method public long getZoomOut();
    property public long A;
    property public long AllApps;
    property public long AltLeft;
    property public long AltRight;
    property public long Apostrophe;
    property public long AppSwitch;
    property public long Assist;
    property public long At;
    property public long AvReceiverInput;
    property public long AvReceiverPower;
    property public long B;
    property public long Back;
    property public long Backslash;
    property public long Backspace;
    property public long Bookmark;
    property public long Break;
    property public long BrightnessDown;
    property public long BrightnessUp;
    property public long Browser;
    property public long Button1;
    property public long Button10;
    property public long Button11;
    property public long Button12;
    property public long Button13;
    property public long Button14;
    property public long Button15;
    property public long Button16;
    property public long Button2;
    property public long Button3;
    property public long Button4;
    property public long Button5;
    property public long Button6;
    property public long Button7;
    property public long Button8;
    property public long Button9;
    property public long ButtonA;
    property public long ButtonB;
    property public long ButtonC;
    property public long ButtonL1;
    property public long ButtonL2;
    property public long ButtonMode;
    property public long ButtonR1;
    property public long ButtonR2;
    property public long ButtonSelect;
    property public long ButtonStart;
    property public long ButtonThumbLeft;
    property public long ButtonThumbRight;
    property public long ButtonX;
    property public long ButtonY;
    property public long ButtonZ;
    property public long C;
    property public long Calculator;
    property public long Calendar;
    property public long Call;
    property public long Camera;
    property public long CapsLock;
    property public long Captions;
    property public long ChannelDown;
    property public long ChannelUp;
    property public long Clear;
    property public long Comma;
    property public long Contacts;
    property public long Copy;
    property public long CtrlLeft;
    property public long CtrlRight;
    property public long Cut;
    property public long D;
    property public long Delete;
    property public long DirectionCenter;
    property public long DirectionDown;
    property public long DirectionDownLeft;
    property public long DirectionDownRight;
    property public long DirectionLeft;
    property public long DirectionRight;
    property public long DirectionUp;
    property public long DirectionUpLeft;
    property public long DirectionUpRight;
    property public long Dvr;
    property public long E;
    property public long Eight;
    property public long Eisu;
    property public long EndCall;
    property public long Enter;
    property public long Envelope;
    property public long Equals;
    property public long Escape;
    property public long F;
    property public long F1;
    property public long F10;
    property public long F11;
    property public long F12;
    property public long F2;
    property public long F3;
    property public long F4;
    property public long F5;
    property public long F6;
    property public long F7;
    property public long F8;
    property public long F9;
    property public long Five;
    property public long Focus;
    property public long Forward;
    property public long Four;
    property public long Function;
    property public long G;
    property public long Grave;
    property public long Guide;
    property public long H;
    property public long HeadsetHook;
    property public long Help;
    property public long Henkan;
    property public long Home;
    property public long I;
    property public long Info;
    property public long Insert;
    property public long J;
    property public long K;
    property public long Kana;
    property public long KatakanaHiragana;
    property public long L;
    property public long LanguageSwitch;
    property public long LastChannel;
    property public long LeftBracket;
    property public long M;
    property public long MannerMode;
    property public long MediaAudioTrack;
    property public long MediaClose;
    property public long MediaEject;
    property public long MediaFastForward;
    property public long MediaNext;
    property public long MediaPause;
    property public long MediaPlay;
    property public long MediaPlayPause;
    property public long MediaPrevious;
    property public long MediaRecord;
    property public long MediaRewind;
    property public long MediaSkipBackward;
    property public long MediaSkipForward;
    property public long MediaStepBackward;
    property public long MediaStepForward;
    property public long MediaStop;
    property public long MediaTopMenu;
    property public long Menu;
    property public long MetaLeft;
    property public long MetaRight;
    property public long MicrophoneMute;
    property public long Minus;
    property public long MoveEnd;
    property public long MoveHome;
    property public long Muhenkan;
    property public long Multiply;
    property public long Music;
    property public long N;
    property public long NavigateIn;
    property public long NavigateNext;
    property public long NavigateOut;
    property public long NavigatePrevious;
    property public long Nine;
    property public long Notification;
    property public long NumLock;
    property public long NumPad0;
    property public long NumPad1;
    property public long NumPad2;
    property public long NumPad3;
    property public long NumPad4;
    property public long NumPad5;
    property public long NumPad6;
    property public long NumPad7;
    property public long NumPad8;
    property public long NumPad9;
    property public long NumPadAdd;
    property public long NumPadComma;
    property public long NumPadDivide;
    property public long NumPadDot;
    property public long NumPadEnter;
    property public long NumPadEquals;
    property public long NumPadLeftParenthesis;
    property public long NumPadMultiply;
    property public long NumPadRightParenthesis;
    property public long NumPadSubtract;
    property public long Number;
    property public long O;
    property public long One;
    property public long P;
    property public long PageDown;
    property public long PageUp;
    property public long Pairing;
    property public long Paste;
    property public long Period;
    property public long PictureSymbols;
    property public long Plus;
    property public long Pound;
    property public long Power;
    property public long PrintScreen;
    property public long ProfileSwitch;
    property public long ProgramBlue;
    property public long ProgramGreen;
    property public long ProgramRed;
    property public long ProgramYellow;
    property public long Q;
    property public long R;
    property public long Refresh;
    property public long RightBracket;
    property public long Ro;
    property public long S;
    property public long ScrollLock;
    property public long Search;
    property public long Semicolon;
    property public long SetTopBoxInput;
    property public long SetTopBoxPower;
    property public long Settings;
    property public long Seven;
    property public long ShiftLeft;
    property public long ShiftRight;
    property public long Six;
    property public long Slash;
    property public long Sleep;
    property public long SoftLeft;
    property public long SoftRight;
    property public long SoftSleep;
    property public long Spacebar;
    property public long Stem1;
    property public long Stem2;
    property public long Stem3;
    property public long StemPrimary;
    property public long SwitchCharset;
    property public long Symbol;
    property public long SystemNavigationDown;
    property public long SystemNavigationLeft;
    property public long SystemNavigationRight;
    property public long SystemNavigationUp;
    property public long T;
    property public long Tab;
    property public long Three;
    property public long ThumbsDown;
    property public long ThumbsUp;
    property public long Toggle2D3D;
    property public long Tv;
    property public long TvAntennaCable;
    property public long TvAudioDescription;
    property public long TvAudioDescriptionMixingVolumeDown;
    property public long TvAudioDescriptionMixingVolumeUp;
    property public long TvContentsMenu;
    property public long TvDataService;
    property public long TvInput;
    property public long TvInputComponent1;
    property public long TvInputComponent2;
    property public long TvInputComposite1;
    property public long TvInputComposite2;
    property public long TvInputHdmi1;
    property public long TvInputHdmi2;
    property public long TvInputHdmi3;
    property public long TvInputHdmi4;
    property public long TvInputVga1;
    property public long TvMediaContextMenu;
    property public long TvNetwork;
    property public long TvNumberEntry;
    property public long TvPower;
    property public long TvRadioService;
    property public long TvSatellite;
    property public long TvSatelliteBs;
    property public long TvSatelliteCs;
    property public long TvSatelliteService;
    property public long TvTeletext;
    property public long TvTerrestrialAnalog;
    property public long TvTerrestrialDigital;
    property public long TvTimerProgramming;
    property public long TvZoomMode;
    property public long Two;
    property public long U;
    property public long Unknown;
    property public long V;
    property public long VoiceAssist;
    property public long VolumeDown;
    property public long VolumeMute;
    property public long VolumeUp;
    property public long W;
    property public long WakeUp;
    property public long Window;
    property public long X;
    property public long Y;
    property public long Yen;
    property public long Z;
    property public long ZenkakuHankaru;
    property public long Zero;
    property public long ZoomIn;
    property public long ZoomOut;
  }

  @kotlin.jvm.JvmInline public final value class KeyEvent {
    ctor public KeyEvent(android.view.KeyEvent nativeKeyEvent);
    method public android.view.KeyEvent getNativeKeyEvent();
    property public android.view.KeyEvent nativeKeyEvent;
  }

  @kotlin.jvm.JvmInline public final value class KeyEventType {
    field public static final androidx.compose.ui.input.key.KeyEventType.Companion Companion;
  }

  public static final class KeyEventType.Companion {
    method public int getKeyDown();
    method public int getKeyUp();
    method public int getUnknown();
    property public int KeyDown;
    property public int KeyUp;
    property public int Unknown;
  }

  public final class KeyEvent_androidKt {
    method public static long getKey(android.view.KeyEvent);
    method public static int getType(android.view.KeyEvent);
    method public static int getUtf16CodePoint(android.view.KeyEvent);
    method public static boolean isAltPressed(android.view.KeyEvent);
    method public static boolean isCtrlPressed(android.view.KeyEvent);
    method public static boolean isMetaPressed(android.view.KeyEvent);
    method public static boolean isShiftPressed(android.view.KeyEvent);
    property public static boolean android.view.KeyEvent.isAltPressed;
    property public static boolean android.view.KeyEvent.isCtrlPressed;
    property public static boolean android.view.KeyEvent.isMetaPressed;
    property public static boolean android.view.KeyEvent.isShiftPressed;
    property public static long android.view.KeyEvent.key;
    property public static int android.view.KeyEvent.type;
    property public static int android.view.KeyEvent.utf16CodePoint;
  }

  public final class KeyInputModifierKt {
    method public static androidx.compose.ui.Modifier onKeyEvent(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.input.key.KeyEvent,java.lang.Boolean> onKeyEvent);
    method public static androidx.compose.ui.Modifier onPreviewKeyEvent(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.input.key.KeyEvent,java.lang.Boolean> onPreviewKeyEvent);
  }

  public interface KeyInputModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public boolean onKeyEvent(android.view.KeyEvent event);
    method public boolean onPreKeyEvent(android.view.KeyEvent event);
  }

  public final class Key_androidKt {
    method public static long Key(int nativeKeyCode);
    method public static int getNativeKeyCode(long);
    property public static int long.nativeKeyCode;
  }

  public interface SoftKeyboardInterceptionModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public boolean onInterceptKeyBeforeSoftKeyboard(android.view.KeyEvent event);
    method public boolean onPreInterceptKeyBeforeSoftKeyboard(android.view.KeyEvent event);
  }

  public final class SoftwareKeyboardInterceptionModifierKt {
    method public static androidx.compose.ui.Modifier onInterceptKeyBeforeSoftKeyboard(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.input.key.KeyEvent,java.lang.Boolean> onInterceptKeyBeforeSoftKeyboard);
    method public static androidx.compose.ui.Modifier onPreInterceptKeyBeforeSoftKeyboard(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.input.key.KeyEvent,java.lang.Boolean> onPreInterceptKeyBeforeSoftKeyboard);
  }

}

package androidx.compose.ui.input.nestedscroll {

  @kotlin.jvm.JvmDefaultWithCompatibility public interface NestedScrollConnection {
    method public default suspend Object? onPostFling(long consumed, long available, kotlin.coroutines.Continuation<? super androidx.compose.ui.unit.Velocity>);
    method public default long onPostScroll(long consumed, long available, int source);
    method public default suspend Object? onPreFling(long available, kotlin.coroutines.Continuation<? super androidx.compose.ui.unit.Velocity>);
    method public default long onPreScroll(long available, int source);
  }

  public final class NestedScrollDispatcher {
    ctor public NestedScrollDispatcher();
    method public suspend Object? dispatchPostFling(long consumed, long available, kotlin.coroutines.Continuation<? super androidx.compose.ui.unit.Velocity>);
    method public long dispatchPostScroll(long consumed, long available, int source);
    method public suspend Object? dispatchPreFling(long available, kotlin.coroutines.Continuation<? super androidx.compose.ui.unit.Velocity>);
    method public long dispatchPreScroll(long available, int source);
    method public kotlinx.coroutines.CoroutineScope getCoroutineScope();
    property public kotlinx.coroutines.CoroutineScope coroutineScope;
  }

  public final class NestedScrollModifierKt {
    method public static androidx.compose.ui.Modifier nestedScroll(androidx.compose.ui.Modifier, androidx.compose.ui.input.nestedscroll.NestedScrollConnection connection, optional androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher? dispatcher);
  }

  public final class NestedScrollNodeKt {
    method public static androidx.compose.ui.node.DelegatableNode nestedScrollModifierNode(androidx.compose.ui.input.nestedscroll.NestedScrollConnection connection, androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher? dispatcher);
  }

  @kotlin.jvm.JvmInline public final value class NestedScrollSource {
    field public static final androidx.compose.ui.input.nestedscroll.NestedScrollSource.Companion Companion;
  }

  public static final class NestedScrollSource.Companion {
    method @Deprecated public int getDrag();
    method @Deprecated public int getFling();
    method @Deprecated public int getRelocate();
    method public int getSideEffect();
    method public int getUserInput();
    method @Deprecated public int getWheel();
    property @Deprecated public int Drag;
    property @Deprecated public int Fling;
    property @Deprecated public int Relocate;
    property public int SideEffect;
    property public int UserInput;
    property @Deprecated public int Wheel;
  }

}

package androidx.compose.ui.input.pointer {

  @kotlin.coroutines.RestrictsSuspension @kotlin.jvm.JvmDefaultWithCompatibility public interface AwaitPointerEventScope extends androidx.compose.ui.unit.Density {
    method public suspend Object? awaitPointerEvent(optional androidx.compose.ui.input.pointer.PointerEventPass pass, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerEvent>);
    method public androidx.compose.ui.input.pointer.PointerEvent getCurrentEvent();
    method public default long getExtendedTouchPadding();
    method public long getSize();
    method public androidx.compose.ui.platform.ViewConfiguration getViewConfiguration();
    method public default suspend <T> Object? withTimeout(long timeMillis, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.AwaitPointerEventScope,? super kotlin.coroutines.Continuation<? super T>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super T>);
    method public default suspend <T> Object? withTimeoutOrNull(long timeMillis, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.AwaitPointerEventScope,? super kotlin.coroutines.Continuation<? super T>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super T?>);
    property public abstract androidx.compose.ui.input.pointer.PointerEvent currentEvent;
    property public default long extendedTouchPadding;
    property public abstract long size;
    property public abstract androidx.compose.ui.platform.ViewConfiguration viewConfiguration;
  }

  @Deprecated public final class ConsumedData {
    ctor @Deprecated public ConsumedData();
    ctor @Deprecated public ConsumedData(optional boolean positionChange, optional boolean downChange);
    method @Deprecated public boolean getDownChange();
    method @Deprecated public boolean getPositionChange();
    method @Deprecated public void setDownChange(boolean);
    method @Deprecated public void setPositionChange(boolean);
    property @Deprecated public boolean downChange;
    property @Deprecated public boolean positionChange;
  }

  @androidx.compose.runtime.Immutable public final class HistoricalChange {
    ctor public HistoricalChange(long uptimeMillis, long position);
    method public long getPosition();
    method public long getUptimeMillis();
    property public long position;
    property public long uptimeMillis;
  }

  @kotlin.jvm.JvmInline public final value class PointerButtons {
    ctor public PointerButtons(int packedValue);
  }

  public final class PointerEvent {
    ctor public PointerEvent(java.util.List<androidx.compose.ui.input.pointer.PointerInputChange> changes);
    method public java.util.List<androidx.compose.ui.input.pointer.PointerInputChange> component1();
    method public androidx.compose.ui.input.pointer.PointerEvent copy(java.util.List<androidx.compose.ui.input.pointer.PointerInputChange> changes, android.view.MotionEvent? motionEvent);
    method public int getButtons();
    method public java.util.List<androidx.compose.ui.input.pointer.PointerInputChange> getChanges();
    method public int getClassification();
    method public int getKeyboardModifiers();
    method public android.view.MotionEvent? getMotionEvent();
    method public int getType();
    property public int buttons;
    property public java.util.List<androidx.compose.ui.input.pointer.PointerInputChange> changes;
    property public int classification;
    property public int keyboardModifiers;
    property public android.view.MotionEvent? motionEvent;
    property public int type;
  }

  public final class PointerEventKt {
    method @Deprecated public static boolean anyChangeConsumed(androidx.compose.ui.input.pointer.PointerInputChange);
    method public static boolean changedToDown(androidx.compose.ui.input.pointer.PointerInputChange);
    method public static boolean changedToDownIgnoreConsumed(androidx.compose.ui.input.pointer.PointerInputChange);
    method public static boolean changedToUp(androidx.compose.ui.input.pointer.PointerInputChange);
    method public static boolean changedToUpIgnoreConsumed(androidx.compose.ui.input.pointer.PointerInputChange);
    method @Deprecated public static void consumeAllChanges(androidx.compose.ui.input.pointer.PointerInputChange);
    method @Deprecated public static void consumeDownChange(androidx.compose.ui.input.pointer.PointerInputChange);
    method @Deprecated public static void consumePositionChange(androidx.compose.ui.input.pointer.PointerInputChange);
    method @Deprecated public static boolean isOutOfBounds(androidx.compose.ui.input.pointer.PointerInputChange, long size);
    method public static boolean isOutOfBounds(androidx.compose.ui.input.pointer.PointerInputChange, long size, long extendedTouchPadding);
    method public static long positionChange(androidx.compose.ui.input.pointer.PointerInputChange);
    method @Deprecated public static boolean positionChangeConsumed(androidx.compose.ui.input.pointer.PointerInputChange);
    method public static long positionChangeIgnoreConsumed(androidx.compose.ui.input.pointer.PointerInputChange);
    method public static boolean positionChanged(androidx.compose.ui.input.pointer.PointerInputChange);
    method public static boolean positionChangedIgnoreConsumed(androidx.compose.ui.input.pointer.PointerInputChange);
  }

  public enum PointerEventPass {
    enum_constant public static final androidx.compose.ui.input.pointer.PointerEventPass Final;
    enum_constant public static final androidx.compose.ui.input.pointer.PointerEventPass Initial;
    enum_constant public static final androidx.compose.ui.input.pointer.PointerEventPass Main;
  }

  public final class PointerEventTimeoutCancellationException extends java.util.concurrent.CancellationException {
    ctor public PointerEventTimeoutCancellationException(long time);
  }

  @kotlin.jvm.JvmInline public final value class PointerEventType {
    field public static final androidx.compose.ui.input.pointer.PointerEventType.Companion Companion;
  }

  public static final class PointerEventType.Companion {
    method public int getEnter();
    method public int getExit();
    method public int getMove();
    method public int getPress();
    method public int getRelease();
    method public int getScroll();
    method public int getUnknown();
    property public int Enter;
    property public int Exit;
    property public int Move;
    property public int Press;
    property public int Release;
    property public int Scroll;
    property public int Unknown;
  }

  public final class PointerEvent_androidKt {
    method public static boolean getAreAnyPressed(int);
    method public static int indexOfFirstPressed(int);
    method public static int indexOfLastPressed(int);
    method public static boolean isAltGraphPressed(int);
    method public static boolean isAltPressed(int);
    method public static boolean isBackPressed(int);
    method public static boolean isCapsLockOn(int);
    method public static boolean isCtrlPressed(int);
    method public static boolean isForwardPressed(int);
    method public static boolean isFunctionPressed(int);
    method public static boolean isMetaPressed(int);
    method public static boolean isNumLockOn(int);
    method public static boolean isPressed(int, int buttonIndex);
    method public static boolean isPrimaryPressed(int);
    method public static boolean isScrollLockOn(int);
    method public static boolean isSecondaryPressed(int);
    method public static boolean isShiftPressed(int);
    method public static boolean isSymPressed(int);
    method public static boolean isTertiaryPressed(int);
    property public static boolean int.areAnyPressed;
    property public static boolean int.isAltGraphPressed;
    property public static boolean int.isAltPressed;
    property public static boolean int.isBackPressed;
    property public static boolean int.isCapsLockOn;
    property public static boolean int.isCtrlPressed;
    property public static boolean int.isForwardPressed;
    property public static boolean int.isFunctionPressed;
    property public static boolean int.isMetaPressed;
    property public static boolean int.isNumLockOn;
    property public static boolean int.isPrimaryPressed;
    property public static boolean int.isScrollLockOn;
    property public static boolean int.isSecondaryPressed;
    property public static boolean int.isShiftPressed;
    property public static boolean int.isSymPressed;
    property public static boolean int.isTertiaryPressed;
  }

  @androidx.compose.runtime.Stable public interface PointerIcon {
    field public static final androidx.compose.ui.input.pointer.PointerIcon.Companion Companion;
  }

  public static final class PointerIcon.Companion {
    method public androidx.compose.ui.input.pointer.PointerIcon getCrosshair();
    method public androidx.compose.ui.input.pointer.PointerIcon getDefault();
    method public androidx.compose.ui.input.pointer.PointerIcon getHand();
    method public androidx.compose.ui.input.pointer.PointerIcon getText();
    property public androidx.compose.ui.input.pointer.PointerIcon Crosshair;
    property public androidx.compose.ui.input.pointer.PointerIcon Default;
    property public androidx.compose.ui.input.pointer.PointerIcon Hand;
    property public androidx.compose.ui.input.pointer.PointerIcon Text;
  }

  public final class PointerIconKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier pointerHoverIcon(androidx.compose.ui.Modifier, androidx.compose.ui.input.pointer.PointerIcon icon, optional boolean overrideDescendants);
    method public static androidx.compose.ui.Modifier stylusHoverIcon(androidx.compose.ui.Modifier, androidx.compose.ui.input.pointer.PointerIcon icon, optional boolean overrideDescendants, optional androidx.compose.ui.node.DpTouchBoundsExpansion? touchBoundsExpansion);
  }

  public final class PointerIcon_androidKt {
    method public static androidx.compose.ui.input.pointer.PointerIcon PointerIcon(android.view.PointerIcon pointerIcon);
    method public static androidx.compose.ui.input.pointer.PointerIcon PointerIcon(int pointerIconType);
  }

  @kotlin.jvm.JvmInline public final value class PointerId {
    ctor public PointerId(long value);
    method public long getValue();
    property public long value;
  }

  @androidx.compose.runtime.Immutable public final class PointerInputChange {
    ctor public PointerInputChange(long id, long uptimeMillis, long position, boolean pressed, float pressure, long previousUptimeMillis, long previousPosition, boolean previousPressed, boolean isInitiallyConsumed, optional int type, optional long scrollDelta);
    ctor @Deprecated public PointerInputChange(long id, long uptimeMillis, long position, boolean pressed, long previousUptimeMillis, long previousPosition, boolean previousPressed, androidx.compose.ui.input.pointer.ConsumedData consumed, optional int type);
    ctor public PointerInputChange(long id, long uptimeMillis, long position, boolean pressed, long previousUptimeMillis, long previousPosition, boolean previousPressed, boolean isInitiallyConsumed, optional int type, optional long scrollDelta);
    method public void consume();
    method public androidx.compose.ui.input.pointer.PointerInputChange copy(optional long id, optional long currentTime, optional long currentPosition, optional boolean currentPressed, optional float pressure, optional long previousTime, optional long previousPosition, optional boolean previousPressed, optional int type, optional java.util.List<androidx.compose.ui.input.pointer.HistoricalChange> historical, optional long scrollDelta);
    method public androidx.compose.ui.input.pointer.PointerInputChange copy(optional long id, optional long currentTime, optional long currentPosition, optional boolean currentPressed, optional float pressure, optional long previousTime, optional long previousPosition, optional boolean previousPressed, optional int type, optional long scrollDelta);
    method @Deprecated public androidx.compose.ui.input.pointer.PointerInputChange copy(optional long id, optional long currentTime, optional long currentPosition, optional boolean currentPressed, optional long previousTime, optional long previousPosition, optional boolean previousPressed, optional androidx.compose.ui.input.pointer.ConsumedData consumed, optional int type);
    method @Deprecated public androidx.compose.ui.input.pointer.PointerInputChange copy(optional long id, optional long currentTime, optional long currentPosition, optional boolean currentPressed, optional long previousTime, optional long previousPosition, optional boolean previousPressed, androidx.compose.ui.input.pointer.ConsumedData consumed, optional int type, optional long scrollDelta);
    method @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public androidx.compose.ui.input.pointer.PointerInputChange copy(optional long id, optional long currentTime, optional long currentPosition, optional boolean currentPressed, optional long previousTime, optional long previousPosition, optional boolean previousPressed, optional int type, java.util.List<androidx.compose.ui.input.pointer.HistoricalChange> historical, optional long scrollDelta);
    method public androidx.compose.ui.input.pointer.PointerInputChange copy(optional long id, optional long currentTime, optional long currentPosition, optional boolean currentPressed, optional long previousTime, optional long previousPosition, optional boolean previousPressed, optional int type, optional long scrollDelta);
    method @Deprecated public androidx.compose.ui.input.pointer.ConsumedData getConsumed();
    method public java.util.List<androidx.compose.ui.input.pointer.HistoricalChange> getHistorical();
    method public long getId();
    method public long getPosition();
    method public boolean getPressed();
    method public float getPressure();
    method public long getPreviousPosition();
    method public boolean getPreviousPressed();
    method public long getPreviousUptimeMillis();
    method public long getScrollDelta();
    method public int getType();
    method public long getUptimeMillis();
    method public boolean isConsumed();
    property @Deprecated public androidx.compose.ui.input.pointer.ConsumedData consumed;
    property public java.util.List<androidx.compose.ui.input.pointer.HistoricalChange> historical;
    property public long id;
    property public boolean isConsumed;
    property public long position;
    property public boolean pressed;
    property public float pressure;
    property public long previousPosition;
    property public boolean previousPressed;
    property public long previousUptimeMillis;
    property public long scrollDelta;
    property public int type;
    property public long uptimeMillis;
  }

  public fun interface PointerInputEventHandler {
    method public suspend operator Object? invoke(androidx.compose.ui.input.pointer.PointerInputScope, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public abstract class PointerInputFilter {
    ctor public PointerInputFilter();
    method public boolean getInterceptOutOfBoundsChildEvents();
    method public boolean getShareWithSiblings();
    method public final long getSize();
    method public abstract void onCancel();
    method public abstract void onPointerEvent(androidx.compose.ui.input.pointer.PointerEvent pointerEvent, androidx.compose.ui.input.pointer.PointerEventPass pass, long bounds);
    property public boolean interceptOutOfBoundsChildEvents;
    property public boolean shareWithSiblings;
    property public final long size;
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface PointerInputModifier extends androidx.compose.ui.Modifier.Element {
    method public androidx.compose.ui.input.pointer.PointerInputFilter getPointerInputFilter();
    property public abstract androidx.compose.ui.input.pointer.PointerInputFilter pointerInputFilter;
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface PointerInputScope extends androidx.compose.ui.unit.Density {
    method public suspend <R> Object? awaitPointerEventScope(kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.AwaitPointerEventScope,? super kotlin.coroutines.Continuation<? super R>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super R>);
    method public default long getExtendedTouchPadding();
    method public default boolean getInterceptOutOfBoundsChildEvents();
    method public long getSize();
    method public androidx.compose.ui.platform.ViewConfiguration getViewConfiguration();
    method public default void setInterceptOutOfBoundsChildEvents(boolean);
    property public default long extendedTouchPadding;
    property public default boolean interceptOutOfBoundsChildEvents;
    property public abstract long size;
    property public abstract androidx.compose.ui.platform.ViewConfiguration viewConfiguration;
  }

  public final class PointerInteropFilter_androidKt {
    method public static androidx.compose.ui.Modifier motionEventSpy(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super android.view.MotionEvent,kotlin.Unit> watcher);
    method public static androidx.compose.ui.Modifier pointerInteropFilter(androidx.compose.ui.Modifier, optional androidx.compose.ui.input.pointer.RequestDisallowInterceptTouchEvent? requestDisallowInterceptTouchEvent, kotlin.jvm.functions.Function1<? super android.view.MotionEvent,java.lang.Boolean> onTouchEvent);
  }

  @kotlin.jvm.JvmInline public final value class PointerKeyboardModifiers {
    ctor public PointerKeyboardModifiers(int packedValue);
  }

  @kotlin.jvm.JvmInline public final value class PointerType {
    field public static final androidx.compose.ui.input.pointer.PointerType.Companion Companion;
  }

  public static final class PointerType.Companion {
    method public int getEraser();
    method public int getMouse();
    method public int getStylus();
    method public int getTouch();
    method public int getUnknown();
    property public int Eraser;
    property public int Mouse;
    property public int Stylus;
    property public int Touch;
    property public int Unknown;
  }

  public final class RequestDisallowInterceptTouchEvent implements kotlin.jvm.functions.Function1<java.lang.Boolean,kotlin.Unit> {
    ctor public RequestDisallowInterceptTouchEvent();
    method public void invoke(boolean disallowIntercept);
  }

  public final class SuspendingPointerInputFilterKt {
    method public static androidx.compose.ui.input.pointer.SuspendingPointerInputModifierNode SuspendingPointerInputModifierNode(androidx.compose.ui.input.pointer.PointerInputEventHandler pointerInputEventHandler);
    method @Deprecated public static androidx.compose.ui.input.pointer.SuspendingPointerInputModifierNode SuspendingPointerInputModifierNode(kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> pointerInputHandler);
    method public static androidx.compose.ui.Modifier pointerInput(androidx.compose.ui.Modifier, Object? key1, androidx.compose.ui.input.pointer.PointerInputEventHandler block);
    method public static androidx.compose.ui.Modifier pointerInput(androidx.compose.ui.Modifier, Object? key1, Object? key2, androidx.compose.ui.input.pointer.PointerInputEventHandler block);
    method @Deprecated public static androidx.compose.ui.Modifier pointerInput(androidx.compose.ui.Modifier, Object? key1, Object? key2, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block);
    method @Deprecated public static androidx.compose.ui.Modifier pointerInput(androidx.compose.ui.Modifier, Object? key1, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block);
    method public static androidx.compose.ui.Modifier pointerInput(androidx.compose.ui.Modifier, Object?[] keys, androidx.compose.ui.input.pointer.PointerInputEventHandler block);
    method @Deprecated public static androidx.compose.ui.Modifier pointerInput(androidx.compose.ui.Modifier, Object?[] keys, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block);
    method @Deprecated public static androidx.compose.ui.Modifier pointerInput(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block);
  }

  public sealed interface SuspendingPointerInputModifierNode extends androidx.compose.ui.node.PointerInputModifierNode {
    method public default androidx.compose.ui.input.pointer.PointerInputEventHandler getPointerInputEventHandler();
    method @Deprecated public kotlin.jvm.functions.Function2<androidx.compose.ui.input.pointer.PointerInputScope,kotlin.coroutines.Continuation<? super kotlin.Unit>,java.lang.Object?> getPointerInputHandler();
    method public void resetPointerInputHandler();
    method public default void setPointerInputEventHandler(androidx.compose.ui.input.pointer.PointerInputEventHandler);
    method @Deprecated public void setPointerInputHandler(kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?>);
    property public default androidx.compose.ui.input.pointer.PointerInputEventHandler pointerInputEventHandler;
    property @Deprecated public abstract kotlin.jvm.functions.Function2<androidx.compose.ui.input.pointer.PointerInputScope,kotlin.coroutines.Continuation<? super kotlin.Unit>,java.lang.Object?> pointerInputHandler;
  }

}

package androidx.compose.ui.input.pointer.util {

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This an opt-in flag to test the Velocity Tracker strategy algorithm used " + "for calculating gesture velocities in Compose.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalVelocityTrackerApi {
  }

  public final class VelocityTracker {
    ctor public VelocityTracker();
    method public void addPosition(long timeMillis, long position);
    method public long calculateVelocity();
    method public long calculateVelocity(long maximumVelocity);
    method public void resetTracking();
  }

  public final class VelocityTracker1D {
    ctor public VelocityTracker1D(boolean isDataDifferential);
    method public void addDataPoint(long timeMillis, float dataPoint);
    method public float calculateVelocity();
    method public float calculateVelocity(float maximumVelocity);
    method public boolean isDataDifferential();
    method public void resetTracking();
    property public boolean isDataDifferential;
  }

  public final class VelocityTrackerKt {
    method public static void addPointerInputChange(androidx.compose.ui.input.pointer.util.VelocityTracker, androidx.compose.ui.input.pointer.PointerInputChange event);
    method @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public static boolean getVelocityTrackerAddPointsFix();
    method @SuppressCompatibility @androidx.compose.ui.input.pointer.util.ExperimentalVelocityTrackerApi public static boolean getVelocityTrackerStrategyUseImpulse();
    method @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public static void setVelocityTrackerAddPointsFix(boolean);
    method @SuppressCompatibility @androidx.compose.ui.input.pointer.util.ExperimentalVelocityTrackerApi public static void setVelocityTrackerStrategyUseImpulse(boolean);
    property @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public static boolean VelocityTrackerAddPointsFix;
    property @SuppressCompatibility @androidx.compose.ui.input.pointer.util.ExperimentalVelocityTrackerApi public static boolean VelocityTrackerStrategyUseImpulse;
  }

}

package androidx.compose.ui.input.rotary {

  public final class RotaryInputModifierKt {
    method public static androidx.compose.ui.Modifier onPreRotaryScrollEvent(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.input.rotary.RotaryScrollEvent,java.lang.Boolean> onPreRotaryScrollEvent);
    method public static androidx.compose.ui.Modifier onRotaryScrollEvent(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.input.rotary.RotaryScrollEvent,java.lang.Boolean> onRotaryScrollEvent);
  }

  public interface RotaryInputModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public boolean onPreRotaryScrollEvent(androidx.compose.ui.input.rotary.RotaryScrollEvent event);
    method public boolean onRotaryScrollEvent(androidx.compose.ui.input.rotary.RotaryScrollEvent event);
  }

  public final class RotaryScrollEvent {
    method public float getHorizontalScrollPixels();
    method public int getInputDeviceId();
    method public long getUptimeMillis();
    method public float getVerticalScrollPixels();
    property public float horizontalScrollPixels;
    property public int inputDeviceId;
    property public long uptimeMillis;
    property public float verticalScrollPixels;
  }

}

package androidx.compose.ui.layout {

  @androidx.compose.runtime.Immutable public abstract sealed class AlignmentLine {
    field public static final androidx.compose.ui.layout.AlignmentLine.Companion Companion;
    field public static final int Unspecified = -2147483648; // 0x80000000
  }

  public static final class AlignmentLine.Companion {
    property public static int Unspecified;
  }

  public final class AlignmentLineKt {
    method public static androidx.compose.ui.layout.HorizontalAlignmentLine getFirstBaseline();
    method public static androidx.compose.ui.layout.HorizontalAlignmentLine getLastBaseline();
    property public static androidx.compose.ui.layout.HorizontalAlignmentLine FirstBaseline;
    property public static androidx.compose.ui.layout.HorizontalAlignmentLine LastBaseline;
  }

  public final class AnimatableInsetsRulers implements androidx.compose.ui.layout.BasicAnimatableInsetsRulers {
    method public float alpha(androidx.compose.ui.layout.Placeable.PlacementScope placementScope);
    method public float alpha(androidx.compose.ui.node.DelegatableNode node);
    method public long durationMillis(androidx.compose.ui.layout.Placeable.PlacementScope placementScope);
    method public long durationMillis(androidx.compose.ui.node.DelegatableNode node);
    method public float fraction(androidx.compose.ui.layout.Placeable.PlacementScope placementScope);
    method public float fraction(androidx.compose.ui.node.DelegatableNode node);
    method public androidx.compose.ui.layout.HorizontalRuler getBottom();
    method public androidx.compose.ui.layout.VerticalRuler getLeft();
    method public androidx.compose.ui.layout.VerticalRuler getRight();
    method public androidx.compose.ui.layout.RectRulers getRulersIgnoringVisibility();
    method public androidx.compose.ui.layout.RectRulers getSource();
    method public androidx.compose.ui.layout.RectRulers getTarget();
    method public androidx.compose.ui.layout.HorizontalRuler getTop();
    method public float interpolatedFraction(androidx.compose.ui.layout.Placeable.PlacementScope placementScope);
    method public float interpolatedFraction(androidx.compose.ui.node.DelegatableNode node);
    method public android.view.animation.Interpolator? interpolator(androidx.compose.ui.layout.Placeable.PlacementScope placementScope);
    method public android.view.animation.Interpolator? interpolator(androidx.compose.ui.node.DelegatableNode node);
    method public boolean isAnimating(androidx.compose.ui.layout.Placeable.PlacementScope placementScope);
    method public boolean isAnimating(androidx.compose.ui.node.DelegatableNode node);
    method public boolean isVisible(androidx.compose.ui.layout.Placeable.PlacementScope placementScope);
    method public boolean isVisible(androidx.compose.ui.node.DelegatableNode node);
    property public androidx.compose.ui.layout.HorizontalRuler bottom;
    property public androidx.compose.ui.layout.VerticalRuler left;
    property public androidx.compose.ui.layout.VerticalRuler right;
    property public androidx.compose.ui.layout.RectRulers rulersIgnoringVisibility;
    property public androidx.compose.ui.layout.RectRulers source;
    property public androidx.compose.ui.layout.RectRulers target;
    property public androidx.compose.ui.layout.HorizontalRuler top;
  }

  public sealed interface ApproachIntrinsicMeasureScope extends androidx.compose.ui.layout.IntrinsicMeasureScope {
    method public long getLookaheadConstraints();
    method public long getLookaheadSize();
    property public abstract long lookaheadConstraints;
    property public abstract long lookaheadSize;
  }

  public interface ApproachLayoutModifierNode extends androidx.compose.ui.node.LayoutModifierNode {
    method public androidx.compose.ui.layout.MeasureResult approachMeasure(androidx.compose.ui.layout.ApproachMeasureScope, androidx.compose.ui.layout.Measurable measurable, long constraints);
    method public boolean isMeasurementApproachInProgress(long lookaheadSize);
    method public default boolean isPlacementApproachInProgress(androidx.compose.ui.layout.Placeable.PlacementScope, androidx.compose.ui.layout.LayoutCoordinates lookaheadCoordinates);
    method public default int maxApproachIntrinsicHeight(androidx.compose.ui.layout.ApproachIntrinsicMeasureScope, androidx.compose.ui.layout.IntrinsicMeasurable measurable, int width);
    method public default int maxApproachIntrinsicWidth(androidx.compose.ui.layout.ApproachIntrinsicMeasureScope, androidx.compose.ui.layout.IntrinsicMeasurable measurable, int height);
    method public default androidx.compose.ui.layout.MeasureResult measure(androidx.compose.ui.layout.MeasureScope, androidx.compose.ui.layout.Measurable measurable, long constraints);
    method public default int minApproachIntrinsicHeight(androidx.compose.ui.layout.ApproachIntrinsicMeasureScope, androidx.compose.ui.layout.IntrinsicMeasurable measurable, int width);
    method public default int minApproachIntrinsicWidth(androidx.compose.ui.layout.ApproachIntrinsicMeasureScope, androidx.compose.ui.layout.IntrinsicMeasurable measurable, int height);
  }

  public sealed interface ApproachMeasureScope extends androidx.compose.ui.layout.ApproachIntrinsicMeasureScope androidx.compose.ui.layout.MeasureScope {
  }

  public sealed interface BasicAnimatableInsetsRulers extends androidx.compose.ui.layout.RectRulers {
    method public androidx.compose.ui.layout.RectRulers getSource();
    method public androidx.compose.ui.layout.RectRulers getTarget();
    method public boolean isAnimating(androidx.compose.ui.layout.Placeable.PlacementScope placementScope);
    method public boolean isAnimating(androidx.compose.ui.node.DelegatableNode node);
    property public abstract androidx.compose.ui.layout.RectRulers source;
    property public abstract androidx.compose.ui.layout.RectRulers target;
  }

  public interface BeyondBoundsLayout {
    method public <T> T? layout(int direction, kotlin.jvm.functions.Function1<? super androidx.compose.ui.layout.BeyondBoundsLayout.BeyondBoundsScope,? extends T?> block);
  }

  public static interface BeyondBoundsLayout.BeyondBoundsScope {
    method public boolean getHasMoreContent();
    property public abstract boolean hasMoreContent;
  }

  @kotlin.jvm.JvmInline public static final value class BeyondBoundsLayout.LayoutDirection {
    field public static final androidx.compose.ui.layout.BeyondBoundsLayout.LayoutDirection.Companion Companion;
  }

  public static final class BeyondBoundsLayout.LayoutDirection.Companion {
    method public int getAbove();
    method public int getAfter();
    method public int getBefore();
    method public int getBelow();
    method public int getLeft();
    method public int getRight();
    property public int Above;
    property public int After;
    property public int Before;
    property public int Below;
    property public int Left;
    property public int Right;
  }

  public final class BeyondBoundsLayoutKt {
    method public static androidx.compose.ui.modifier.ProvidableModifierLocal<androidx.compose.ui.layout.BeyondBoundsLayout?> getModifierLocalBeyondBoundsLayout();
    property public static androidx.compose.ui.modifier.ProvidableModifierLocal<androidx.compose.ui.layout.BeyondBoundsLayout?> ModifierLocalBeyondBoundsLayout;
  }

  @androidx.compose.runtime.Stable public interface ContentScale {
    method public long computeScaleFactor(long srcSize, long dstSize);
    field public static final androidx.compose.ui.layout.ContentScale.Companion Companion;
  }

  public static final class ContentScale.Companion {
    method public androidx.compose.ui.layout.ContentScale getCrop();
    method public androidx.compose.ui.layout.ContentScale getFillBounds();
    method public androidx.compose.ui.layout.ContentScale getFillHeight();
    method public androidx.compose.ui.layout.ContentScale getFillWidth();
    method public androidx.compose.ui.layout.ContentScale getFit();
    method public androidx.compose.ui.layout.ContentScale getInside();
    method public androidx.compose.ui.layout.FixedScale getNone();
    property @androidx.compose.runtime.Stable public androidx.compose.ui.layout.ContentScale Crop;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.layout.ContentScale FillBounds;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.layout.ContentScale FillHeight;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.layout.ContentScale FillWidth;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.layout.ContentScale Fit;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.layout.ContentScale Inside;
    property @androidx.compose.runtime.Stable public androidx.compose.ui.layout.FixedScale None;
  }

  public interface DerivedRuler {
    method public float calculate(androidx.compose.ui.layout.Placeable.PlacementScope, float defaultValue);
  }

  public final class DisplayCutoutInsetsRulers implements androidx.compose.ui.layout.RectRulers {
    method public java.util.List<androidx.compose.ui.layout.RectRulers> cutoutInsets(androidx.compose.ui.layout.Placeable.PlacementScope placementScope);
    method public java.util.List<androidx.compose.ui.layout.RectRulers> cutoutInsets(androidx.compose.ui.node.DelegatableNode node);
    method public androidx.compose.ui.layout.HorizontalRuler getBottom();
    method public androidx.compose.ui.layout.VerticalRuler getLeft();
    method public androidx.compose.ui.layout.VerticalRuler getRight();
    method public androidx.compose.ui.layout.HorizontalRuler getTop();
    property public androidx.compose.ui.layout.HorizontalRuler bottom;
    property public androidx.compose.ui.layout.VerticalRuler left;
    property public androidx.compose.ui.layout.VerticalRuler right;
    property public androidx.compose.ui.layout.HorizontalRuler top;
  }

  @androidx.compose.runtime.Immutable public final class FixedScale implements androidx.compose.ui.layout.ContentScale {
    ctor public FixedScale(float value);
    method public float component1();
    method public long computeScaleFactor(long srcSize, long dstSize);
    method public androidx.compose.ui.layout.FixedScale copy(float value);
    method public float getValue();
    property public float value;
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface GraphicLayerInfo {
    method public long getLayerId();
    method public default long getOwnerViewId();
    property public abstract long layerId;
    property public default long ownerViewId;
  }

  public final class HorizontalAlignmentLine extends androidx.compose.ui.layout.AlignmentLine {
    ctor public HorizontalAlignmentLine(kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.Integer,java.lang.Integer> merger);
  }

  public class HorizontalRuler extends androidx.compose.ui.layout.Ruler {
    ctor public HorizontalRuler();
  }

  public final class InnerInsetsRulers implements androidx.compose.ui.layout.BasicAnimatableInsetsRulers {
    ctor public InnerInsetsRulers(androidx.compose.ui.layout.RectRulers... rulers);
    method public androidx.compose.ui.layout.HorizontalRuler getBottom();
    method public androidx.compose.ui.layout.VerticalRuler getLeft();
    method public androidx.compose.ui.layout.VerticalRuler getRight();
    method public androidx.compose.ui.layout.RectRulers[] getRulers();
    method public androidx.compose.ui.layout.RectRulers getSource();
    method public androidx.compose.ui.layout.RectRulers getTarget();
    method public androidx.compose.ui.layout.HorizontalRuler getTop();
    method public boolean isAnimating(androidx.compose.ui.layout.Placeable.PlacementScope placementScope);
    method public boolean isAnimating(androidx.compose.ui.node.DelegatableNode node);
    property public androidx.compose.ui.layout.HorizontalRuler bottom;
    property public androidx.compose.ui.layout.VerticalRuler left;
    property public androidx.compose.ui.layout.VerticalRuler right;
    property public androidx.compose.ui.layout.RectRulers[] rulers;
    property public androidx.compose.ui.layout.RectRulers source;
    property public androidx.compose.ui.layout.RectRulers target;
    property public androidx.compose.ui.layout.HorizontalRuler top;
  }

  public final class InnerRectRulers implements androidx.compose.ui.layout.RectRulers {
    ctor public InnerRectRulers(androidx.compose.ui.layout.RectRulers... rulers);
    method public androidx.compose.ui.layout.HorizontalRuler getBottom();
    method public androidx.compose.ui.layout.VerticalRuler getLeft();
    method public androidx.compose.ui.layout.VerticalRuler getRight();
    method public androidx.compose.ui.layout.HorizontalRuler getTop();
    property public androidx.compose.ui.layout.HorizontalRuler bottom;
    property public androidx.compose.ui.layout.VerticalRuler left;
    property public androidx.compose.ui.layout.VerticalRuler right;
    property public androidx.compose.ui.layout.HorizontalRuler top;
  }

  public final class InsetsRulers {
    method public androidx.compose.ui.layout.AnimatableInsetsRulers getCaptionBar();
    method public androidx.compose.ui.layout.DisplayCutoutInsetsRulers getDisplayCutout();
    method public androidx.compose.ui.layout.AnimatableInsetsRulers getIme();
    method public androidx.compose.ui.layout.AnimatableInsetsRulers getMandatorySystemGestures();
    method public androidx.compose.ui.layout.AnimatableInsetsRulers getNavigationBars();
    method public androidx.compose.ui.layout.BasicAnimatableInsetsRulers getSafeContent();
    method public androidx.compose.ui.layout.BasicAnimatableInsetsRulers getSafeDrawing();
    method public androidx.compose.ui.layout.BasicAnimatableInsetsRulers getSafeGestures();
    method public androidx.compose.ui.layout.AnimatableInsetsRulers getStatusBars();
    method public androidx.compose.ui.layout.BasicAnimatableInsetsRulers getSystemBars();
    method public androidx.compose.ui.layout.AnimatableInsetsRulers getSystemGestures();
    method public androidx.compose.ui.layout.AnimatableInsetsRulers getTappableElement();
    method public androidx.compose.ui.layout.RectRulers getWaterfall();
    property public androidx.compose.ui.layout.AnimatableInsetsRulers CaptionBar;
    property public androidx.compose.ui.layout.DisplayCutoutInsetsRulers DisplayCutout;
    property public androidx.compose.ui.layout.AnimatableInsetsRulers Ime;
    property public androidx.compose.ui.layout.AnimatableInsetsRulers MandatorySystemGestures;
    property public androidx.compose.ui.layout.AnimatableInsetsRulers NavigationBars;
    property public androidx.compose.ui.layout.BasicAnimatableInsetsRulers SafeContent;
    property public androidx.compose.ui.layout.BasicAnimatableInsetsRulers SafeDrawing;
    property public androidx.compose.ui.layout.BasicAnimatableInsetsRulers SafeGestures;
    property public androidx.compose.ui.layout.AnimatableInsetsRulers StatusBars;
    property public androidx.compose.ui.layout.BasicAnimatableInsetsRulers SystemBars;
    property public androidx.compose.ui.layout.AnimatableInsetsRulers SystemGestures;
    property public androidx.compose.ui.layout.AnimatableInsetsRulers TappableElement;
    property public androidx.compose.ui.layout.RectRulers Waterfall;
    field public static final androidx.compose.ui.layout.InsetsRulers INSTANCE;
  }

  public interface IntrinsicMeasurable {
    method public Object? getParentData();
    method public int maxIntrinsicHeight(int width);
    method public int maxIntrinsicWidth(int height);
    method public int minIntrinsicHeight(int width);
    method public int minIntrinsicWidth(int height);
    property public abstract Object? parentData;
  }

  public interface IntrinsicMeasureScope extends androidx.compose.ui.unit.Density {
    method public androidx.compose.ui.unit.LayoutDirection getLayoutDirection();
    method public default boolean isLookingAhead();
    property public default boolean isLookingAhead;
    property public abstract androidx.compose.ui.unit.LayoutDirection layoutDirection;
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface LayoutCoordinates {
    method public operator int get(androidx.compose.ui.layout.AlignmentLine alignmentLine);
    method public default boolean getIntroducesMotionFrameOfReference();
    method public androidx.compose.ui.layout.LayoutCoordinates? getParentCoordinates();
    method public androidx.compose.ui.layout.LayoutCoordinates? getParentLayoutCoordinates();
    method public java.util.Set<androidx.compose.ui.layout.AlignmentLine> getProvidedAlignmentLines();
    method public long getSize();
    method public boolean isAttached();
    method public androidx.compose.ui.geometry.Rect localBoundingBoxOf(androidx.compose.ui.layout.LayoutCoordinates sourceCoordinates, optional boolean clipBounds);
    method public long localPositionOf(androidx.compose.ui.layout.LayoutCoordinates sourceCoordinates, long relativeToSource);
    method public default long localPositionOf(androidx.compose.ui.layout.LayoutCoordinates sourceCoordinates, optional long relativeToSource, optional boolean includeMotionFrameOfReference);
    method public long localToRoot(long relativeToLocal);
    method public default long localToScreen(long relativeToLocal);
    method public long localToWindow(long relativeToLocal);
    method public default long screenToLocal(long relativeToScreen);
    method public default void transformFrom(androidx.compose.ui.layout.LayoutCoordinates sourceCoordinates, float[] matrix);
    method public default void transformToScreen(float[] matrix);
    method public long windowToLocal(long relativeToWindow);
    property public default boolean introducesMotionFrameOfReference;
    property public abstract boolean isAttached;
    property public abstract androidx.compose.ui.layout.LayoutCoordinates? parentCoordinates;
    property public abstract androidx.compose.ui.layout.LayoutCoordinates? parentLayoutCoordinates;
    property public abstract java.util.Set<androidx.compose.ui.layout.AlignmentLine> providedAlignmentLines;
    property public abstract long size;
  }

  public final class LayoutCoordinatesKt {
    method public static androidx.compose.ui.geometry.Rect boundsInParent(androidx.compose.ui.layout.LayoutCoordinates);
    method public static androidx.compose.ui.geometry.Rect boundsInRoot(androidx.compose.ui.layout.LayoutCoordinates);
    method public static androidx.compose.ui.geometry.Rect boundsInWindow(androidx.compose.ui.layout.LayoutCoordinates);
    method public static androidx.compose.ui.layout.LayoutCoordinates findRootCoordinates(androidx.compose.ui.layout.LayoutCoordinates);
    method public static long positionInParent(androidx.compose.ui.layout.LayoutCoordinates);
    method public static long positionInRoot(androidx.compose.ui.layout.LayoutCoordinates);
    method public static long positionInWindow(androidx.compose.ui.layout.LayoutCoordinates);
    method public static long positionOnScreen(androidx.compose.ui.layout.LayoutCoordinates);
  }

  public final class LayoutIdKt {
    method public static Object? getLayoutId(androidx.compose.ui.layout.Measurable);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier layoutId(androidx.compose.ui.Modifier, Object layoutId);
    property public static Object? androidx.compose.ui.layout.Measurable.layoutId;
  }

  public interface LayoutIdParentData {
    method public Object getLayoutId();
    property public abstract Object layoutId;
  }

  public interface LayoutInfo {
    method public androidx.compose.ui.layout.LayoutCoordinates getCoordinates();
    method public androidx.compose.ui.unit.Density getDensity();
    method public int getHeight();
    method public androidx.compose.ui.unit.LayoutDirection getLayoutDirection();
    method public java.util.List<androidx.compose.ui.layout.ModifierInfo> getModifierInfo();
    method public androidx.compose.ui.layout.LayoutInfo? getParentInfo();
    method public int getSemanticsId();
    method public androidx.compose.ui.platform.ViewConfiguration getViewConfiguration();
    method public int getWidth();
    method public boolean isAttached();
    method public default boolean isDeactivated();
    method public boolean isPlaced();
    property public abstract androidx.compose.ui.layout.LayoutCoordinates coordinates;
    property public abstract androidx.compose.ui.unit.Density density;
    property public abstract int height;
    property public abstract boolean isAttached;
    property public default boolean isDeactivated;
    property public abstract boolean isPlaced;
    property public abstract androidx.compose.ui.unit.LayoutDirection layoutDirection;
    property public abstract androidx.compose.ui.layout.LayoutInfo? parentInfo;
    property public abstract int semanticsId;
    property public abstract androidx.compose.ui.platform.ViewConfiguration viewConfiguration;
    property public abstract int width;
  }

  public final class LayoutInfo_androidKt {
    method public static android.view.View? getView(androidx.compose.ui.layout.LayoutInfo);
    property public static android.view.View? androidx.compose.ui.layout.LayoutInfo.view;
  }

  public final class LayoutKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.UiComposable public static inline void Layout(optional androidx.compose.ui.Modifier modifier, androidx.compose.ui.layout.MeasurePolicy measurePolicy);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.UiComposable public static inline void Layout(java.util.List<? extends kotlin.jvm.functions.Function0<kotlin.Unit>> contents, optional androidx.compose.ui.Modifier modifier, androidx.compose.ui.layout.MultiContentMeasurePolicy measurePolicy);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.UiComposable public static inline void Layout(kotlin.jvm.functions.Function0<kotlin.Unit> content, optional androidx.compose.ui.Modifier modifier, androidx.compose.ui.layout.MeasurePolicy measurePolicy);
    method @Deprecated @androidx.compose.runtime.Composable @androidx.compose.ui.UiComposable public static void MultiMeasureLayout(optional androidx.compose.ui.Modifier modifier, kotlin.jvm.functions.Function0<kotlin.Unit> content, androidx.compose.ui.layout.MeasurePolicy measurePolicy);
    method @kotlin.PublishedApi internal static kotlin.jvm.functions.Function0<kotlin.Unit> combineAsVirtualLayouts(java.util.List<? extends kotlin.jvm.functions.Function0<kotlin.Unit>> contents);
    method @Deprecated @kotlin.PublishedApi internal static kotlin.jvm.functions.Function1<androidx.compose.runtime.SkippableUpdater<androidx.compose.ui.node.ComposeUiNode>,kotlin.Unit> materializerOf(androidx.compose.ui.Modifier modifier);
    method @kotlin.PublishedApi internal static kotlin.jvm.functions.Function1<androidx.compose.runtime.SkippableUpdater<androidx.compose.ui.node.ComposeUiNode>,kotlin.Unit> modifierMaterializerOf(androidx.compose.ui.Modifier modifier);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface LayoutModifier extends androidx.compose.ui.Modifier.Element {
    method public default int maxIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, androidx.compose.ui.layout.IntrinsicMeasurable measurable, int width);
    method public default int maxIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, androidx.compose.ui.layout.IntrinsicMeasurable measurable, int height);
    method public androidx.compose.ui.layout.MeasureResult measure(androidx.compose.ui.layout.MeasureScope, androidx.compose.ui.layout.Measurable measurable, long constraints);
    method public default int minIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, androidx.compose.ui.layout.IntrinsicMeasurable measurable, int width);
    method public default int minIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, androidx.compose.ui.layout.IntrinsicMeasurable measurable, int height);
  }

  public final class LayoutModifierKt {
    method public static androidx.compose.ui.Modifier layout(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function3<? super androidx.compose.ui.layout.MeasureScope,? super androidx.compose.ui.layout.Measurable,? super androidx.compose.ui.unit.Constraints,? extends androidx.compose.ui.layout.MeasureResult> measure);
  }

  public interface LookaheadScope {
    method public androidx.compose.ui.layout.LayoutCoordinates getLookaheadScopeCoordinates(androidx.compose.ui.layout.Placeable.PlacementScope);
    method public default long localLookaheadPositionOf(androidx.compose.ui.layout.LayoutCoordinates, androidx.compose.ui.layout.LayoutCoordinates sourceCoordinates, optional long relativeToSource, optional boolean includeMotionFrameOfReference);
    method public androidx.compose.ui.layout.LayoutCoordinates toLookaheadCoordinates(androidx.compose.ui.layout.LayoutCoordinates);
    property public abstract androidx.compose.ui.layout.LayoutCoordinates androidx.compose.ui.layout.Placeable.PlacementScope.lookaheadScopeCoordinates;
  }

  public final class LookaheadScopeKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.UiComposable public static void LookaheadScope(kotlin.jvm.functions.Function1<? super androidx.compose.ui.layout.LookaheadScope,kotlin.Unit> content);
    method public static androidx.compose.ui.Modifier approachLayout(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.unit.IntSize,java.lang.Boolean> isMeasurementApproachInProgress, optional kotlin.jvm.functions.Function2<? super androidx.compose.ui.layout.Placeable.PlacementScope,? super androidx.compose.ui.layout.LayoutCoordinates,java.lang.Boolean> isPlacementApproachInProgress, kotlin.jvm.functions.Function3<? super androidx.compose.ui.layout.ApproachMeasureScope,? super androidx.compose.ui.layout.Measurable,? super androidx.compose.ui.unit.Constraints,? extends androidx.compose.ui.layout.MeasureResult> approachMeasure);
  }

  public interface Measurable extends androidx.compose.ui.layout.IntrinsicMeasurable {
    method public androidx.compose.ui.layout.Placeable measure(long constraints);
  }

  @androidx.compose.runtime.Stable @kotlin.jvm.JvmDefaultWithCompatibility public fun interface MeasurePolicy {
    method public default int maxIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List<? extends androidx.compose.ui.layout.IntrinsicMeasurable> measurables, int width);
    method public default int maxIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List<? extends androidx.compose.ui.layout.IntrinsicMeasurable> measurables, int height);
    method public androidx.compose.ui.layout.MeasureResult measure(androidx.compose.ui.layout.MeasureScope, java.util.List<? extends androidx.compose.ui.layout.Measurable> measurables, long constraints);
    method public default int minIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List<? extends androidx.compose.ui.layout.IntrinsicMeasurable> measurables, int width);
    method public default int minIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List<? extends androidx.compose.ui.layout.IntrinsicMeasurable> measurables, int height);
  }

  public interface MeasureResult {
    method public java.util.Map<androidx.compose.ui.layout.AlignmentLine,java.lang.Integer> getAlignmentLines();
    method public int getHeight();
    method public default kotlin.jvm.functions.Function1<androidx.compose.ui.layout.RulerScope,kotlin.Unit>? getRulers();
    method public int getWidth();
    method public void placeChildren();
    property public abstract java.util.Map<androidx.compose.ui.layout.AlignmentLine,java.lang.Integer> alignmentLines;
    property public abstract int height;
    property public default kotlin.jvm.functions.Function1<androidx.compose.ui.layout.RulerScope,kotlin.Unit>? rulers;
    property public abstract int width;
  }

  @androidx.compose.ui.layout.MeasureScopeMarker @kotlin.jvm.JvmDefaultWithCompatibility public interface MeasureScope extends androidx.compose.ui.layout.IntrinsicMeasureScope {
    method public default androidx.compose.ui.layout.MeasureResult layout(int width, int height, optional java.util.Map<androidx.compose.ui.layout.AlignmentLine,java.lang.Integer> alignmentLines, kotlin.jvm.functions.Function1<? super androidx.compose.ui.layout.Placeable.PlacementScope,kotlin.Unit> placementBlock);
    method public default androidx.compose.ui.layout.MeasureResult layout(int width, int height, optional java.util.Map<androidx.compose.ui.layout.AlignmentLine,java.lang.Integer> alignmentLines, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.layout.RulerScope,kotlin.Unit>? rulers, kotlin.jvm.functions.Function1<? super androidx.compose.ui.layout.Placeable.PlacementScope,kotlin.Unit> placementBlock);
  }

  @kotlin.DslMarker public @interface MeasureScopeMarker {
  }

  public interface Measured {
    method public operator int get(androidx.compose.ui.layout.AlignmentLine alignmentLine);
    method public int getMeasuredHeight();
    method public int getMeasuredWidth();
    method public default Object? getParentData();
    property public abstract int measuredHeight;
    property public abstract int measuredWidth;
    property public default Object? parentData;
  }

  public final class MergedHorizontalRuler extends androidx.compose.ui.layout.HorizontalRuler implements androidx.compose.ui.layout.DerivedRuler {
    ctor public MergedHorizontalRuler(boolean shouldUseGreater, androidx.compose.ui.layout.HorizontalRuler... rulers);
    method public float calculate(androidx.compose.ui.layout.Placeable.PlacementScope, float defaultValue);
  }

  public final class MergedVerticalRuler extends androidx.compose.ui.layout.VerticalRuler implements androidx.compose.ui.layout.DerivedRuler {
    ctor public MergedVerticalRuler(boolean shouldUseGreater, androidx.compose.ui.layout.VerticalRuler... rulers);
    method public float calculate(androidx.compose.ui.layout.Placeable.PlacementScope, float defaultValue);
  }

  public final class ModifierInfo {
    ctor public ModifierInfo(androidx.compose.ui.Modifier modifier, androidx.compose.ui.layout.LayoutCoordinates coordinates, optional Object? extra);
    method public androidx.compose.ui.layout.LayoutCoordinates getCoordinates();
    method public Object? getExtra();
    method public androidx.compose.ui.Modifier getModifier();
    property public androidx.compose.ui.layout.LayoutCoordinates coordinates;
    property public Object? extra;
    property public androidx.compose.ui.Modifier modifier;
  }

  @androidx.compose.runtime.Stable public fun interface MultiContentMeasurePolicy {
    method public default int maxIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List<? extends java.util.List<? extends androidx.compose.ui.layout.IntrinsicMeasurable>> measurables, int width);
    method public default int maxIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List<? extends java.util.List<? extends androidx.compose.ui.layout.IntrinsicMeasurable>> measurables, int height);
    method public androidx.compose.ui.layout.MeasureResult measure(androidx.compose.ui.layout.MeasureScope, java.util.List<? extends java.util.List<? extends androidx.compose.ui.layout.Measurable>> measurables, long constraints);
    method public default int minIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List<? extends java.util.List<? extends androidx.compose.ui.layout.IntrinsicMeasurable>> measurables, int width);
    method public default int minIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List<? extends java.util.List<? extends androidx.compose.ui.layout.IntrinsicMeasurable>> measurables, int height);
  }

  public final class MultiContentMeasurePolicyKt {
    method @kotlin.PublishedApi internal static androidx.compose.ui.layout.MeasurePolicy createMeasurePolicy(androidx.compose.ui.layout.MultiContentMeasurePolicy measurePolicy);
  }

  public final class OnGlobalLayoutListenerKt {
    method public static androidx.compose.ui.node.DelegatableNode.RegistrationHandle registerOnGlobalLayoutListener(androidx.compose.ui.node.DelegatableNode, long throttleMillis, long debounceMillis, kotlin.jvm.functions.Function1<? super androidx.compose.ui.spatial.RelativeLayoutBounds,kotlin.Unit> callback);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface OnGloballyPositionedModifier extends androidx.compose.ui.Modifier.Element {
    method public void onGloballyPositioned(androidx.compose.ui.layout.LayoutCoordinates coordinates);
  }

  public final class OnGloballyPositionedModifierKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier onGloballyPositioned(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.layout.LayoutCoordinates,kotlin.Unit> onGloballyPositioned);
  }

  public final class OnLayoutRectChangedModifierKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier onLayoutRectChanged(androidx.compose.ui.Modifier, optional long throttleMillis, optional long debounceMillis, kotlin.jvm.functions.Function1<? super androidx.compose.ui.spatial.RelativeLayoutBounds,kotlin.Unit> callback);
    method public static androidx.compose.ui.node.DelegatableNode.RegistrationHandle registerOnLayoutRectChanged(androidx.compose.ui.node.DelegatableNode, long throttleMillis, long debounceMillis, kotlin.jvm.functions.Function1<? super androidx.compose.ui.spatial.RelativeLayoutBounds,kotlin.Unit> callback);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface OnPlacedModifier extends androidx.compose.ui.Modifier.Element {
    method public void onPlaced(androidx.compose.ui.layout.LayoutCoordinates coordinates);
  }

  public final class OnPlacedModifierKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier onPlaced(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.layout.LayoutCoordinates,kotlin.Unit> onPlaced);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface OnRemeasuredModifier extends androidx.compose.ui.Modifier.Element {
    method public void onRemeasured(long size);
  }

  public final class OnRemeasuredModifierKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier onSizeChanged(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.unit.IntSize,kotlin.Unit> onSizeChanged);
  }

  public final class OuterRectRulers implements androidx.compose.ui.layout.RectRulers {
    ctor public OuterRectRulers(androidx.compose.ui.layout.RectRulers... rulers);
    method public androidx.compose.ui.layout.HorizontalRuler getBottom();
    method public androidx.compose.ui.layout.VerticalRuler getLeft();
    method public androidx.compose.ui.layout.VerticalRuler getRight();
    method public androidx.compose.ui.layout.HorizontalRuler getTop();
    property public androidx.compose.ui.layout.HorizontalRuler bottom;
    property public androidx.compose.ui.layout.VerticalRuler left;
    property public androidx.compose.ui.layout.VerticalRuler right;
    property public androidx.compose.ui.layout.HorizontalRuler top;
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface ParentDataModifier extends androidx.compose.ui.Modifier.Element {
    method public Object? modifyParentData(androidx.compose.ui.unit.Density, Object? parentData);
  }

  @androidx.compose.runtime.Stable public interface PinnableContainer {
    method public androidx.compose.ui.layout.PinnableContainer.PinnedHandle pin();
  }

  public static fun interface PinnableContainer.PinnedHandle {
    method public void release();
  }

  public final class PinnableContainerKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.layout.PinnableContainer?> getLocalPinnableContainer();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.layout.PinnableContainer?> LocalPinnableContainer;
  }

  public abstract class Placeable implements androidx.compose.ui.layout.Measured {
    ctor public Placeable();
    method protected final long getApparentToRealOffset();
    method public final int getHeight();
    method public int getMeasuredHeight();
    method protected final long getMeasuredSize();
    method public int getMeasuredWidth();
    method protected final long getMeasurementConstraints();
    method public final int getWidth();
    method protected void placeAt(long position, float zIndex, androidx.compose.ui.graphics.layer.GraphicsLayer layer);
    method protected abstract void placeAt(long position, float zIndex, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.GraphicsLayerScope,kotlin.Unit>? layerBlock);
    method protected final void setMeasuredSize(long);
    method protected final void setMeasurementConstraints(long);
    property protected final long apparentToRealOffset;
    property public final int height;
    property public int measuredHeight;
    property protected final long measuredSize;
    property public int measuredWidth;
    property protected final long measurementConstraints;
    property public final int width;
  }

  @androidx.compose.ui.layout.PlacementScopeMarker public abstract static class Placeable.PlacementScope implements androidx.compose.ui.unit.Density {
    ctor public Placeable.PlacementScope();
    method public float current(androidx.compose.ui.layout.Ruler, float defaultValue);
    method public androidx.compose.ui.layout.LayoutCoordinates? getCoordinates();
    method public float getDensity();
    method public float getFontScale();
    method protected abstract androidx.compose.ui.unit.LayoutDirection getParentLayoutDirection();
    method protected abstract int getParentWidth();
    method public final void place(androidx.compose.ui.layout.Placeable, int x, int y, optional float zIndex);
    method public final void place(androidx.compose.ui.layout.Placeable, long position, optional float zIndex);
    method public final void placeRelative(androidx.compose.ui.layout.Placeable, int x, int y, optional float zIndex);
    method public final void placeRelative(androidx.compose.ui.layout.Placeable, long position, optional float zIndex);
    method public final void placeRelativeWithLayer(androidx.compose.ui.layout.Placeable, int x, int y, androidx.compose.ui.graphics.layer.GraphicsLayer layer, optional float zIndex);
    method public final void placeRelativeWithLayer(androidx.compose.ui.layout.Placeable, int x, int y, optional float zIndex, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.GraphicsLayerScope,kotlin.Unit> layerBlock);
    method public final void placeRelativeWithLayer(androidx.compose.ui.layout.Placeable, long position, androidx.compose.ui.graphics.layer.GraphicsLayer layer, optional float zIndex);
    method public final void placeRelativeWithLayer(androidx.compose.ui.layout.Placeable, long position, optional float zIndex, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.GraphicsLayerScope,kotlin.Unit> layerBlock);
    method public final void placeWithLayer(androidx.compose.ui.layout.Placeable, int x, int y, androidx.compose.ui.graphics.layer.GraphicsLayer layer, optional float zIndex);
    method public final void placeWithLayer(androidx.compose.ui.layout.Placeable, int x, int y, optional float zIndex, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.GraphicsLayerScope,kotlin.Unit> layerBlock);
    method public final void placeWithLayer(androidx.compose.ui.layout.Placeable, long position, androidx.compose.ui.graphics.layer.GraphicsLayer layer, optional float zIndex);
    method public final void placeWithLayer(androidx.compose.ui.layout.Placeable, long position, optional float zIndex, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.GraphicsLayerScope,kotlin.Unit> layerBlock);
    method public final void withMotionFrameOfReferencePlacement(kotlin.jvm.functions.Function1<? super androidx.compose.ui.layout.Placeable.PlacementScope,kotlin.Unit> block);
    property public androidx.compose.ui.layout.LayoutCoordinates? coordinates;
    property public float density;
    property public float fontScale;
    property protected abstract androidx.compose.ui.unit.LayoutDirection parentLayoutDirection;
    property protected abstract int parentWidth;
  }

  @kotlin.DslMarker public @interface PlacementScopeMarker {
  }

  public interface RectRulers {
    method public androidx.compose.ui.layout.HorizontalRuler getBottom();
    method public androidx.compose.ui.layout.VerticalRuler getLeft();
    method public androidx.compose.ui.layout.VerticalRuler getRight();
    method public androidx.compose.ui.layout.HorizontalRuler getTop();
    property public abstract androidx.compose.ui.layout.HorizontalRuler bottom;
    property public abstract androidx.compose.ui.layout.VerticalRuler left;
    property public abstract androidx.compose.ui.layout.VerticalRuler right;
    property public abstract androidx.compose.ui.layout.HorizontalRuler top;
  }

  public final class RectRulersKt {
    method public static androidx.compose.ui.layout.RectRulers RectRulers(optional String? name);
  }

  public interface Remeasurement {
    method public void forceRemeasure();
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface RemeasurementModifier extends androidx.compose.ui.Modifier.Element {
    method public void onRemeasurementAvailable(androidx.compose.ui.layout.Remeasurement remeasurement);
  }

  public abstract sealed class Ruler {
  }

  @androidx.compose.ui.layout.MeasureScopeMarker public interface RulerScope extends androidx.compose.ui.unit.Density {
    method public androidx.compose.ui.layout.LayoutCoordinates getCoordinates();
    method public infix void provides(androidx.compose.ui.layout.Ruler, float value);
    method public infix void providesRelative(androidx.compose.ui.layout.VerticalRuler, float value);
    property public abstract androidx.compose.ui.layout.LayoutCoordinates coordinates;
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class ScaleFactor {
    ctor public ScaleFactor(long packedValue);
    method @androidx.compose.runtime.Stable public inline operator float component1();
    method @androidx.compose.runtime.Stable public inline operator float component2();
    method public long copy(optional float scaleX, optional float scaleY);
    method @androidx.compose.runtime.Stable public operator long div(float operand);
    method public long getPackedValue();
    method @androidx.compose.runtime.Stable public operator long times(float operand);
    property public long packedValue;
    property @androidx.compose.runtime.Stable public inline float scaleX;
    property @androidx.compose.runtime.Stable public inline float scaleY;
    field public static final androidx.compose.ui.layout.ScaleFactor.Companion Companion;
  }

  public static final class ScaleFactor.Companion {
    method public long getUnspecified();
    property @androidx.compose.runtime.Stable public long Unspecified;
  }

  public final class ScaleFactorKt {
    method @androidx.compose.runtime.Stable public static inline long ScaleFactor(float scaleX, float scaleY);
    method @androidx.compose.runtime.Stable public static operator long div(long, long scaleFactor);
    method public static inline boolean isSpecified(long);
    method public static inline boolean isUnspecified(long);
    method @androidx.compose.runtime.Stable public static long lerp(long start, long stop, float fraction);
    method public static inline long takeOrElse(long, kotlin.jvm.functions.Function0<androidx.compose.ui.layout.ScaleFactor> block);
    method @androidx.compose.runtime.Stable public static operator long times(long, long scaleFactor);
    method @androidx.compose.runtime.Stable public static operator long times(long, long size);
    property @androidx.compose.runtime.Stable public static inline boolean long.isSpecified;
    property @androidx.compose.runtime.Stable public static inline boolean long.isUnspecified;
  }

  public final class SubcomposeLayoutKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.UiComposable public static void SubcomposeLayout(androidx.compose.ui.layout.SubcomposeLayoutState state, optional androidx.compose.ui.Modifier modifier, kotlin.jvm.functions.Function2<? super androidx.compose.ui.layout.SubcomposeMeasureScope,? super androidx.compose.ui.unit.Constraints,? extends androidx.compose.ui.layout.MeasureResult> measurePolicy);
    method @androidx.compose.runtime.Composable public static void SubcomposeLayout(optional androidx.compose.ui.Modifier modifier, kotlin.jvm.functions.Function2<? super androidx.compose.ui.layout.SubcomposeMeasureScope,? super androidx.compose.ui.unit.Constraints,? extends androidx.compose.ui.layout.MeasureResult> measurePolicy);
    method public static androidx.compose.ui.layout.SubcomposeSlotReusePolicy SubcomposeSlotReusePolicy(int maxSlotsToRetainForReuse);
  }

  public final class SubcomposeLayoutState {
    ctor public SubcomposeLayoutState();
    ctor public SubcomposeLayoutState(androidx.compose.ui.layout.SubcomposeSlotReusePolicy slotReusePolicy);
    ctor @Deprecated public SubcomposeLayoutState(int maxSlotsToRetainForReuse);
    method public androidx.compose.ui.layout.SubcomposeLayoutState.PausedPrecomposition createPausedPrecomposition(Object? slotId, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public androidx.compose.ui.layout.SubcomposeLayoutState.PrecomposedSlotHandle precompose(Object? slotId, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public static sealed interface SubcomposeLayoutState.PausedPrecomposition {
    method public androidx.compose.ui.layout.SubcomposeLayoutState.PrecomposedSlotHandle apply();
    method public void cancel();
    method public boolean isComplete();
    method public boolean resume(androidx.compose.runtime.ShouldPauseCallback shouldPause);
    property public abstract boolean isComplete;
  }

  public static interface SubcomposeLayoutState.PrecomposedSlotHandle {
    method public void dispose();
    method public default int getPlaceablesCount();
    method public default long getSize(int index);
    method public default void premeasure(int index, long constraints);
    method public default void traverseDescendants(Object? key, kotlin.jvm.functions.Function1<? super androidx.compose.ui.node.TraversableNode,? extends androidx.compose.ui.node.TraversableNode.Companion.TraverseDescendantsAction> block);
    property public default int placeablesCount;
  }

  public interface SubcomposeMeasureScope extends androidx.compose.ui.layout.MeasureScope {
    method public java.util.List<androidx.compose.ui.layout.Measurable> subcompose(Object? slotId, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public interface SubcomposeSlotReusePolicy {
    method public boolean areCompatible(Object? slotId, Object? reusableSlotId);
    method public void getSlotsToRetain(androidx.compose.ui.layout.SubcomposeSlotReusePolicy.SlotIdsSet slotIds);
  }

  public static final class SubcomposeSlotReusePolicy.SlotIdsSet implements java.util.Collection<java.lang.Object?> kotlin.jvm.internal.markers.KMappedMarker {
    method public void clear();
    method public boolean contains(Object? element);
    method public boolean containsAll(java.util.Collection<? extends java.lang.Object?> elements);
    method public inline void fastForEach(kotlin.jvm.functions.Function1<java.lang.Object?,kotlin.Unit> block);
    method public void forEach(kotlin.jvm.functions.Function1<java.lang.Object?,kotlin.Unit> block);
    method public int getSize();
    method public boolean isEmpty();
    method public java.util.Iterator<java.lang.Object?> iterator();
    method public boolean remove(Object? slotId);
    method public boolean removeAll(java.util.Collection<? extends java.lang.Object?> slotIds);
    method public boolean removeAll(kotlin.jvm.functions.Function1<java.lang.Object?,java.lang.Boolean> predicate);
    method public boolean retainAll(java.util.Collection<? extends java.lang.Object?> slotIds);
    method public boolean retainAll(kotlin.jvm.functions.Function1<java.lang.Object?,java.lang.Boolean> predicate);
    method public void trimToSize(int maxSlotsToRetainForReuse);
    property @kotlin.PublishedApi internal androidx.collection.MutableOrderedScatterSet<java.lang.Object?> set;
    property public int size;
  }

  public final class VerticalAlignmentLine extends androidx.compose.ui.layout.AlignmentLine {
    ctor public VerticalAlignmentLine(kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.Integer,java.lang.Integer> merger);
  }

  public class VerticalRuler extends androidx.compose.ui.layout.Ruler {
    ctor public VerticalRuler();
  }

}

package androidx.compose.ui.modifier {

  @androidx.compose.runtime.Stable public abstract sealed class ModifierLocal<T> {
  }

  @androidx.compose.runtime.Stable @kotlin.jvm.JvmDefaultWithCompatibility public interface ModifierLocalConsumer extends androidx.compose.ui.Modifier.Element {
    method public void onModifierLocalsUpdated(androidx.compose.ui.modifier.ModifierLocalReadScope scope);
  }

  public final class ModifierLocalConsumerKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier modifierLocalConsumer(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.modifier.ModifierLocalReadScope,kotlin.Unit> consumer);
  }

  public final class ModifierLocalKt {
    method public static <T> androidx.compose.ui.modifier.ProvidableModifierLocal<T> modifierLocalOf(kotlin.jvm.functions.Function0<? extends T> defaultFactory);
  }

  public abstract sealed class ModifierLocalMap {
  }

  public interface ModifierLocalModifierNode extends androidx.compose.ui.modifier.ModifierLocalReadScope androidx.compose.ui.node.DelegatableNode {
    method public default <T> T getCurrent(androidx.compose.ui.modifier.ModifierLocal<T>);
    method public default androidx.compose.ui.modifier.ModifierLocalMap getProvidedValues();
    method public default <T> void provide(androidx.compose.ui.modifier.ModifierLocal<T> key, T value);
    property public default <T> T androidx.compose.ui.modifier.ModifierLocal<T>.current;
    property public default androidx.compose.ui.modifier.ModifierLocalMap providedValues;
  }

  public final class ModifierLocalModifierNodeKt {
    method public static androidx.compose.ui.modifier.ModifierLocalMap modifierLocalMapOf();
    method public static androidx.compose.ui.modifier.ModifierLocalMap modifierLocalMapOf(androidx.compose.ui.modifier.ModifierLocal<? extends java.lang.Object?> key1, androidx.compose.ui.modifier.ModifierLocal<? extends java.lang.Object?> key2, androidx.compose.ui.modifier.ModifierLocal<? extends java.lang.Object?>... keys);
    method @Deprecated public static androidx.compose.ui.modifier.ModifierLocalMap modifierLocalMapOf(androidx.compose.ui.modifier.ModifierLocal<? extends java.lang.Object?>... keys);
    method public static <T> androidx.compose.ui.modifier.ModifierLocalMap modifierLocalMapOf(androidx.compose.ui.modifier.ModifierLocal<T> key);
    method public static androidx.compose.ui.modifier.ModifierLocalMap modifierLocalMapOf(kotlin.Pair<? extends androidx.compose.ui.modifier.ModifierLocal<? extends java.lang.Object?>,?> entry1, kotlin.Pair<? extends androidx.compose.ui.modifier.ModifierLocal<? extends java.lang.Object?>,?> entry2, kotlin.Pair<? extends androidx.compose.ui.modifier.ModifierLocal<? extends java.lang.Object?>,?>... entries);
    method @Deprecated public static androidx.compose.ui.modifier.ModifierLocalMap modifierLocalMapOf(kotlin.Pair<? extends androidx.compose.ui.modifier.ModifierLocal<? extends java.lang.Object?>,?>... entries);
    method public static <T> androidx.compose.ui.modifier.ModifierLocalMap modifierLocalMapOf(kotlin.Pair<? extends androidx.compose.ui.modifier.ModifierLocal<T>,? extends T> entry);
  }

  @androidx.compose.runtime.Stable @kotlin.jvm.JvmDefaultWithCompatibility public interface ModifierLocalProvider<T> extends androidx.compose.ui.Modifier.Element {
    method public androidx.compose.ui.modifier.ProvidableModifierLocal<T> getKey();
    method public T getValue();
    property public abstract androidx.compose.ui.modifier.ProvidableModifierLocal<T> key;
    property public abstract T value;
  }

  public final class ModifierLocalProviderKt {
    method public static <T> androidx.compose.ui.Modifier modifierLocalProvider(androidx.compose.ui.Modifier, androidx.compose.ui.modifier.ProvidableModifierLocal<T> key, kotlin.jvm.functions.Function0<? extends T> value);
  }

  public interface ModifierLocalReadScope {
    method public <T> T getCurrent(androidx.compose.ui.modifier.ModifierLocal<T>);
    property public abstract <T> T androidx.compose.ui.modifier.ModifierLocal<T>.current;
  }

  @androidx.compose.runtime.Stable public final class ProvidableModifierLocal<T> extends androidx.compose.ui.modifier.ModifierLocal<T> {
    ctor public ProvidableModifierLocal(kotlin.jvm.functions.Function0<? extends T> defaultFactory);
  }

}

package androidx.compose.ui.node {

  @kotlin.PublishedApi internal interface ComposeUiNode {
    method public int getCompositeKeyHash();
    method public androidx.compose.runtime.CompositionLocalMap getCompositionLocalMap();
    method public androidx.compose.ui.unit.Density getDensity();
    method public androidx.compose.ui.unit.LayoutDirection getLayoutDirection();
    method public androidx.compose.ui.layout.MeasurePolicy getMeasurePolicy();
    method public androidx.compose.ui.Modifier getModifier();
    method public androidx.compose.ui.platform.ViewConfiguration getViewConfiguration();
    method public void setCompositeKeyHash(int);
    method public void setCompositionLocalMap(androidx.compose.runtime.CompositionLocalMap);
    method public void setDensity(androidx.compose.ui.unit.Density);
    method public void setLayoutDirection(androidx.compose.ui.unit.LayoutDirection);
    method public void setMeasurePolicy(androidx.compose.ui.layout.MeasurePolicy);
    method public void setModifier(androidx.compose.ui.Modifier);
    method public void setViewConfiguration(androidx.compose.ui.platform.ViewConfiguration);
    property public abstract int compositeKeyHash;
    property public abstract androidx.compose.runtime.CompositionLocalMap compositionLocalMap;
    property public abstract androidx.compose.ui.unit.Density density;
    property public abstract androidx.compose.ui.unit.LayoutDirection layoutDirection;
    property public abstract androidx.compose.ui.layout.MeasurePolicy measurePolicy;
    property public abstract androidx.compose.ui.Modifier modifier;
    property public abstract androidx.compose.ui.platform.ViewConfiguration viewConfiguration;
    field public static final androidx.compose.ui.node.ComposeUiNode.Companion Companion;
  }

  public static final class ComposeUiNode.Companion {
    method public kotlin.jvm.functions.Function0<androidx.compose.ui.node.ComposeUiNode> getConstructor();
    method public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,java.lang.Integer,kotlin.Unit> getSetCompositeKeyHash();
    method public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,androidx.compose.ui.unit.Density,kotlin.Unit> getSetDensity();
    method public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,androidx.compose.ui.unit.LayoutDirection,kotlin.Unit> getSetLayoutDirection();
    method public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,androidx.compose.ui.layout.MeasurePolicy,kotlin.Unit> getSetMeasurePolicy();
    method public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,androidx.compose.ui.Modifier,kotlin.Unit> getSetModifier();
    method public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,androidx.compose.runtime.CompositionLocalMap,kotlin.Unit> getSetResolvedCompositionLocals();
    method public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,androidx.compose.ui.platform.ViewConfiguration,kotlin.Unit> getSetViewConfiguration();
    method public kotlin.jvm.functions.Function0<androidx.compose.ui.node.ComposeUiNode> getVirtualConstructor();
    property public kotlin.jvm.functions.Function0<androidx.compose.ui.node.ComposeUiNode> Constructor;
    property public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,java.lang.Integer,kotlin.Unit> SetCompositeKeyHash;
    property public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,androidx.compose.ui.unit.Density,kotlin.Unit> SetDensity;
    property public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,androidx.compose.ui.unit.LayoutDirection,kotlin.Unit> SetLayoutDirection;
    property public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,androidx.compose.ui.layout.MeasurePolicy,kotlin.Unit> SetMeasurePolicy;
    property public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,androidx.compose.ui.Modifier,kotlin.Unit> SetModifier;
    property public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,androidx.compose.runtime.CompositionLocalMap,kotlin.Unit> SetResolvedCompositionLocals;
    property public kotlin.jvm.functions.Function2<androidx.compose.ui.node.ComposeUiNode,androidx.compose.ui.platform.ViewConfiguration,kotlin.Unit> SetViewConfiguration;
    property public kotlin.jvm.functions.Function0<androidx.compose.ui.node.ComposeUiNode> VirtualConstructor;
  }

  public interface CompositionLocalConsumerModifierNode extends androidx.compose.ui.node.DelegatableNode {
  }

  public final class CompositionLocalConsumerModifierNodeKt {
    method public static <T> T currentValueOf(androidx.compose.ui.node.CompositionLocalConsumerModifierNode, androidx.compose.runtime.CompositionLocal<T> local);
  }

  public interface DelegatableNode {
    method public androidx.compose.ui.Modifier.Node getNode();
    method public default void onDensityChange();
    method public default void onLayoutDirectionChange();
    property public abstract androidx.compose.ui.Modifier.Node node;
  }

  public static fun interface DelegatableNode.RegistrationHandle {
    method public void unregister();
  }

  public final class DelegatableNodeKt {
    method public static void dispatchOnScrollChanged(androidx.compose.ui.node.DelegatableNode, long delta);
    method public static void invalidateSubtree(androidx.compose.ui.node.DelegatableNode);
    method public static void requestAutofill(androidx.compose.ui.node.DelegatableNode);
    method public static androidx.compose.ui.unit.Density requireDensity(androidx.compose.ui.node.DelegatableNode);
    method public static androidx.compose.ui.graphics.GraphicsContext requireGraphicsContext(androidx.compose.ui.node.DelegatableNode);
    method public static androidx.compose.ui.layout.LayoutCoordinates requireLayoutCoordinates(androidx.compose.ui.node.DelegatableNode);
    method public static androidx.compose.ui.unit.LayoutDirection requireLayoutDirection(androidx.compose.ui.node.DelegatableNode);
  }

  public final class DelegatableNode_androidKt {
    method public static android.view.View requireView(androidx.compose.ui.node.DelegatableNode);
  }

  public abstract class DelegatingNode extends androidx.compose.ui.Modifier.Node {
    ctor public DelegatingNode();
    method protected final <T extends androidx.compose.ui.node.DelegatableNode> T delegate(T delegatableNode);
    method protected final void undelegate(androidx.compose.ui.node.DelegatableNode instance);
  }

  public final class DpTouchBoundsExpansion {
    ctor public DpTouchBoundsExpansion(float start, float top, float end, float bottom, boolean isLayoutDirectionAware);
    method public float component1-D9Ej5fM();
    method public float component2-D9Ej5fM();
    method public float component3-D9Ej5fM();
    method public float component4-D9Ej5fM();
    method public boolean component5();
    method public androidx.compose.ui.node.DpTouchBoundsExpansion copy-lDy3nrA(float start, float top, float end, float bottom, boolean isLayoutDirectionAware);
    method public float getBottom();
    method public float getEnd();
    method public float getStart();
    method public float getTop();
    method public boolean isLayoutDirectionAware();
    method public long roundToTouchBoundsExpansion(androidx.compose.ui.unit.Density density);
    property public float bottom;
    property public float end;
    property public boolean isLayoutDirectionAware;
    property public float start;
    property public float top;
    field public static final androidx.compose.ui.node.DpTouchBoundsExpansion.Companion Companion;
  }

  public static final class DpTouchBoundsExpansion.Companion {
    method public androidx.compose.ui.node.DpTouchBoundsExpansion Absolute(optional float left, optional float top, optional float right, optional float bottom);
  }

  public interface DrawModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public void draw(androidx.compose.ui.graphics.drawscope.ContentDrawScope);
    method public default void onMeasureResultChanged();
  }

  public final class DrawModifierNodeKt {
    method public static void invalidateDraw(androidx.compose.ui.node.DrawModifierNode);
  }

  public interface GlobalPositionAwareModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public void onGloballyPositioned(androidx.compose.ui.layout.LayoutCoordinates coordinates);
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This API is internal to library.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.CLASS, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.PROPERTY_SETTER}) public @interface InternalCoreApi {
  }

  @SuppressCompatibility @androidx.compose.ui.InternalComposeUiApi public sealed interface InteroperableComposeUiNode {
    method public android.view.View? getInteropView();
  }

  public interface LayoutAwareModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public default void onPlaced(androidx.compose.ui.layout.LayoutCoordinates coordinates);
    method public default void onRemeasured(long size);
  }

  public interface LayoutModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public default int maxIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, androidx.compose.ui.layout.IntrinsicMeasurable measurable, int width);
    method public default int maxIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, androidx.compose.ui.layout.IntrinsicMeasurable measurable, int height);
    method public androidx.compose.ui.layout.MeasureResult measure(androidx.compose.ui.layout.MeasureScope, androidx.compose.ui.layout.Measurable measurable, long constraints);
    method public default int minIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, androidx.compose.ui.layout.IntrinsicMeasurable measurable, int width);
    method public default int minIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, androidx.compose.ui.layout.IntrinsicMeasurable measurable, int height);
  }

  public final class LayoutModifierNodeKt {
    method public static void invalidateLayer(androidx.compose.ui.node.LayoutModifierNode);
    method public static void invalidateMeasurement(androidx.compose.ui.node.LayoutModifierNode);
    method public static void invalidatePlacement(androidx.compose.ui.node.LayoutModifierNode);
    method public static void remeasureSync(androidx.compose.ui.node.LayoutModifierNode);
  }

  public abstract class ModifierNodeElement<N extends androidx.compose.ui.Modifier.Node> implements androidx.compose.ui.platform.InspectableValue androidx.compose.ui.Modifier.Element {
    ctor public ModifierNodeElement();
    method public abstract N create();
    method public abstract boolean equals(Object? other);
    method public final kotlin.sequences.Sequence<androidx.compose.ui.platform.ValueElement> getInspectableElements();
    method public final String? getNameFallback();
    method public final Object? getValueOverride();
    method public abstract int hashCode();
    method public void inspectableProperties(androidx.compose.ui.platform.InspectorInfo);
    method public abstract void update(N node);
    property public final kotlin.sequences.Sequence<androidx.compose.ui.platform.ValueElement> inspectableElements;
    property public final String? nameFallback;
    property public final Object? valueOverride;
  }

  public interface ObserverModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public void onObservedReadsChanged();
  }

  public final class ObserverModifierNodeKt {
    method public static <T extends androidx.compose.ui.Modifier.Node & androidx.compose.ui.node.ObserverModifierNode> void observeReads(T, kotlin.jvm.functions.Function0<kotlin.Unit> block);
  }

  public interface ParentDataModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public Object? modifyParentData(androidx.compose.ui.unit.Density, Object? parentData);
  }

  public final class ParentDataModifierNodeKt {
    method public static void invalidateParentData(androidx.compose.ui.node.ParentDataModifierNode);
  }

  public interface PointerInputModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public default long getTouchBoundsExpansion();
    method public default boolean interceptOutOfBoundsChildEvents();
    method public void onCancelPointerInput();
    method public void onPointerEvent(androidx.compose.ui.input.pointer.PointerEvent pointerEvent, androidx.compose.ui.input.pointer.PointerEventPass pass, long bounds);
    method public default void onViewConfigurationChange();
    method public default boolean sharePointerInputWithSiblings();
    property public default long touchBoundsExpansion;
  }

  public final class Ref<T> {
    ctor public Ref();
    method public T? getValue();
    method public void setValue(T?);
    property public T? value;
  }

  public interface RootForTest {
    method public default void forceAccessibilityForTesting(boolean enable);
    method public androidx.compose.ui.unit.Density getDensity();
    method public androidx.compose.ui.semantics.SemanticsOwner getSemanticsOwner();
    method @Deprecated public androidx.compose.ui.text.input.TextInputService getTextInputService();
    method public default void measureAndLayoutForTest();
    method @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public default boolean sendIndirectTouchEvent(androidx.compose.ui.input.indirect.IndirectTouchEvent indirectTouchEvent);
    method public boolean sendKeyEvent(android.view.KeyEvent keyEvent);
    method public default void setAccessibilityEventBatchIntervalMillis(long intervalMillis);
    method public default void setUncaughtExceptionHandler(androidx.compose.ui.node.RootForTest.UncaughtExceptionHandler? handler);
    property public abstract androidx.compose.ui.unit.Density density;
    property public abstract androidx.compose.ui.semantics.SemanticsOwner semanticsOwner;
    property @Deprecated public abstract androidx.compose.ui.text.input.TextInputService textInputService;
  }

  public static interface RootForTest.UncaughtExceptionHandler {
    method public void onUncaughtException(Throwable t);
  }

  public interface SemanticsModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public void applySemantics(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public default boolean getShouldClearDescendantSemantics();
    method public default boolean getShouldMergeDescendantSemantics();
    property public default boolean shouldClearDescendantSemantics;
    property public default boolean shouldMergeDescendantSemantics;
  }

  public final class SemanticsModifierNodeKt {
    method public static void invalidateSemantics(androidx.compose.ui.node.SemanticsModifierNode);
  }

  @kotlin.jvm.JvmInline public final value class TouchBoundsExpansion {
    property public int bottom;
    property public int end;
    property public boolean isLayoutDirectionAware;
    property public int start;
    property public int top;
    field public static final androidx.compose.ui.node.TouchBoundsExpansion.Companion Companion;
  }

  public static final class TouchBoundsExpansion.Companion {
    method public long Absolute(optional int left, optional int top, optional int right, optional int bottom);
    method public long getNone();
    property public long None;
  }

  public final class TouchBoundsExpansionKt {
    method public static androidx.compose.ui.node.DpTouchBoundsExpansion DpTouchBoundsExpansion(optional float start, optional float top, optional float end, optional float bottom);
    method public static long TouchBoundsExpansion(optional int start, optional int top, optional int end, optional int bottom);
  }

  public interface TraversableNode extends androidx.compose.ui.node.DelegatableNode {
    method public Object getTraverseKey();
    property public abstract Object traverseKey;
    field public static final androidx.compose.ui.node.TraversableNode.Companion Companion;
  }

  public static final class TraversableNode.Companion {
  }

  public enum TraversableNode.Companion.TraverseDescendantsAction {
    enum_constant public static final androidx.compose.ui.node.TraversableNode.Companion.TraverseDescendantsAction CancelTraversal;
    enum_constant public static final androidx.compose.ui.node.TraversableNode.Companion.TraverseDescendantsAction ContinueTraversal;
    enum_constant public static final androidx.compose.ui.node.TraversableNode.Companion.TraverseDescendantsAction SkipSubtreeAndContinueTraversal;
  }

  public final class TraversableNodeKt {
    method public static androidx.compose.ui.node.TraversableNode? findNearestAncestor(androidx.compose.ui.node.DelegatableNode, Object? key);
    method public static <T extends androidx.compose.ui.node.TraversableNode> T? findNearestAncestor(T);
    method public static void traverseAncestors(androidx.compose.ui.node.DelegatableNode, Object? key, kotlin.jvm.functions.Function1<? super androidx.compose.ui.node.TraversableNode,java.lang.Boolean> block);
    method public static <T extends androidx.compose.ui.node.TraversableNode> void traverseAncestors(T, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> block);
    method public static void traverseChildren(androidx.compose.ui.node.DelegatableNode, Object? key, kotlin.jvm.functions.Function1<? super androidx.compose.ui.node.TraversableNode,java.lang.Boolean> block);
    method public static <T extends androidx.compose.ui.node.TraversableNode> void traverseChildren(T, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> block);
    method public static void traverseDescendants(androidx.compose.ui.node.DelegatableNode, Object? key, kotlin.jvm.functions.Function1<? super androidx.compose.ui.node.TraversableNode,? extends androidx.compose.ui.node.TraversableNode.Companion.TraverseDescendantsAction> block);
    method public static <T extends androidx.compose.ui.node.TraversableNode> void traverseDescendants(T, kotlin.jvm.functions.Function1<? super T,? extends androidx.compose.ui.node.TraversableNode.Companion.TraverseDescendantsAction> block);
  }

}

package androidx.compose.ui.platform {

  public abstract class AbstractComposeView extends android.view.ViewGroup {
    ctor public AbstractComposeView(android.content.Context context);
    ctor public AbstractComposeView(android.content.Context context, optional android.util.AttributeSet? attrs);
    ctor public AbstractComposeView(android.content.Context context, optional android.util.AttributeSet? attrs, optional int defStyleAttr);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.UiComposable public abstract void Content();
    method public final void createComposition();
    method public final void disposeComposition();
    method public final boolean getHasComposition();
    method protected boolean getShouldCreateCompositionOnAttachedToWindow();
    method public final boolean getShowLayoutBounds();
    method protected final void onLayout(boolean changed, int left, int top, int right, int bottom);
    method protected final void onMeasure(int widthMeasureSpec, int heightMeasureSpec);
    method public final void setParentCompositionContext(androidx.compose.runtime.CompositionContext? parent);
    method public final void setShowLayoutBounds(boolean);
    method public final void setViewCompositionStrategy(androidx.compose.ui.platform.ViewCompositionStrategy strategy);
    property public final boolean hasComposition;
    property protected boolean shouldCreateCompositionOnAttachedToWindow;
    property @SuppressCompatibility @androidx.compose.ui.InternalComposeUiApi public final boolean showLayoutBounds;
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface AccessibilityManager {
    method public long calculateRecommendedTimeoutMillis(long originalTimeoutMillis, optional boolean containsIcons, optional boolean containsText, optional boolean containsControls);
  }

  public final class AndroidClipboardManager_androidKt {
    method public static androidx.compose.ui.platform.ClipEntry toClipEntry(android.content.ClipData);
    method public static androidx.compose.ui.platform.ClipMetadata toClipMetadata(android.content.ClipDescription);
  }

  public final class AndroidComposeViewAccessibilityDelegateCompat_androidKt {
    method @Deprecated @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public static boolean getDisableContentCapture();
    method @Deprecated @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public static void setDisableContentCapture(boolean);
    property @Deprecated @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public static boolean DisableContentCapture;
  }

  public final class AndroidCompositionLocals_androidKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<android.content.res.Configuration> getLocalConfiguration();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<android.content.Context> getLocalContext();
    method @Deprecated public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.lifecycle.LifecycleOwner> getLocalLifecycleOwner();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<android.content.res.Resources> getLocalResources();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.savedstate.SavedStateRegistryOwner> getLocalSavedStateRegistryOwner();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<android.view.View> getLocalView();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<android.content.res.Configuration> LocalConfiguration;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<android.content.Context> LocalContext;
    property @Deprecated public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.lifecycle.LifecycleOwner> LocalLifecycleOwner;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<android.content.res.Resources> LocalResources;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.savedstate.SavedStateRegistryOwner> LocalSavedStateRegistryOwner;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<android.view.View> LocalView;
  }

  public final class AndroidUiDispatcher extends kotlinx.coroutines.CoroutineDispatcher {
    method public void dispatch(kotlin.coroutines.CoroutineContext context, Runnable block);
    method public android.view.Choreographer getChoreographer();
    method public androidx.compose.runtime.MonotonicFrameClock getFrameClock();
    property public android.view.Choreographer choreographer;
    property public androidx.compose.runtime.MonotonicFrameClock frameClock;
    field public static final androidx.compose.ui.platform.AndroidUiDispatcher.Companion Companion;
  }

  public static final class AndroidUiDispatcher.Companion {
    method public kotlin.coroutines.CoroutineContext getCurrentThread();
    method public kotlin.coroutines.CoroutineContext getMain();
    property public kotlin.coroutines.CoroutineContext CurrentThread;
    property public kotlin.coroutines.CoroutineContext Main;
  }

  public final class AndroidUiFrameClock implements androidx.compose.runtime.MonotonicFrameClock {
    ctor public AndroidUiFrameClock(android.view.Choreographer choreographer);
    method public android.view.Choreographer getChoreographer();
    method public suspend <R> Object? withFrameNanos(kotlin.jvm.functions.Function1<? super java.lang.Long,? extends R> onFrame, kotlin.coroutines.Continuation<? super R>);
    property public android.view.Choreographer choreographer;
  }

  public final class AndroidUriHandler implements androidx.compose.ui.platform.UriHandler {
    ctor public AndroidUriHandler(android.content.Context context);
    method public void openUri(String uri);
  }

  public final class AndroidViewConfiguration implements androidx.compose.ui.platform.ViewConfiguration {
    ctor public AndroidViewConfiguration(android.view.ViewConfiguration viewConfiguration);
    method public long getDoubleTapMinTimeMillis();
    method public long getDoubleTapTimeoutMillis();
    method public long getLongPressTimeoutMillis();
    method public float getTouchSlop();
    property public long doubleTapMinTimeMillis;
    property public long doubleTapTimeoutMillis;
    property public float handwritingGestureLineMargin;
    property public float handwritingSlop;
    property public long longPressTimeoutMillis;
    property public float maximumFlingVelocity;
    property public float touchSlop;
  }

  public final class ClipEntry {
    ctor public ClipEntry(android.content.ClipData clipData);
    method public android.content.ClipData getClipData();
    method public androidx.compose.ui.platform.ClipMetadata getClipMetadata();
    property public android.content.ClipData clipData;
    property public androidx.compose.ui.platform.ClipMetadata clipMetadata;
  }

  public final class ClipMetadata {
    ctor public ClipMetadata(android.content.ClipDescription clipDescription);
    method public android.content.ClipDescription getClipDescription();
    property public android.content.ClipDescription clipDescription;
  }

  public interface Clipboard {
    method public suspend Object? getClipEntry(kotlin.coroutines.Continuation<? super androidx.compose.ui.platform.ClipEntry?>);
    method public android.content.ClipboardManager getNativeClipboard();
    method public suspend Object? setClipEntry(androidx.compose.ui.platform.ClipEntry? clipEntry, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public abstract android.content.ClipboardManager nativeClipboard;
  }

  public final class ClipboardExtensions_androidKt {
    method @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public static android.net.Uri? firstUriOrNull(androidx.compose.ui.platform.ClipEntry);
  }

  @Deprecated public interface ClipboardManager {
    method @Deprecated public default androidx.compose.ui.platform.ClipEntry? getClip();
    method @Deprecated public default android.content.ClipboardManager getNativeClipboard();
    method @Deprecated public androidx.compose.ui.text.AnnotatedString? getText();
    method @Deprecated public default boolean hasText();
    method @Deprecated public default void setClip(androidx.compose.ui.platform.ClipEntry? clipEntry);
    method @Deprecated public void setText(androidx.compose.ui.text.AnnotatedString annotatedString);
    property @Deprecated public default android.content.ClipboardManager nativeClipboard;
  }

  public final class ComposeView extends androidx.compose.ui.platform.AbstractComposeView {
    ctor public ComposeView(android.content.Context context);
    ctor public ComposeView(android.content.Context context, optional android.util.AttributeSet? attrs);
    ctor public ComposeView(android.content.Context context, optional android.util.AttributeSet? attrs, optional int defStyleAttr);
    method @androidx.compose.runtime.Composable public void Content();
    method public void setContent(kotlin.jvm.functions.Function0<kotlin.Unit> content);
    property protected boolean shouldCreateCompositionOnAttachedToWindow;
  }

  public final class CompositionLocalsKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.AccessibilityManager?> getLocalAccessibilityManager();
    method @Deprecated public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.autofill.Autofill?> getLocalAutofill();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.autofill.AutofillManager?> getLocalAutofillManager();
    method @Deprecated public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.autofill.AutofillTree> getLocalAutofillTree();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.Clipboard> getLocalClipboard();
    method @Deprecated public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.ClipboardManager> getLocalClipboardManager();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> getLocalCursorBlinkEnabled();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.unit.Density> getLocalDensity();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.focus.FocusManager> getLocalFocusManager();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.text.font.FontFamily.Resolver> getLocalFontFamilyResolver();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.GraphicsContext> getLocalGraphicsContext();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.hapticfeedback.HapticFeedback> getLocalHapticFeedback();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.input.InputModeManager> getLocalInputModeManager();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.unit.LayoutDirection> getLocalLayoutDirection();
    method public static androidx.compose.runtime.CompositionLocal<java.lang.Boolean> getLocalScrollCaptureInProgress();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.SoftwareKeyboardController?> getLocalSoftwareKeyboardController();
    method @Deprecated public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.text.input.TextInputService?> getLocalTextInputService();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.TextToolbar> getLocalTextToolbar();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.UriHandler> getLocalUriHandler();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.ViewConfiguration> getLocalViewConfiguration();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.WindowInfo> getLocalWindowInfo();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.AccessibilityManager?> LocalAccessibilityManager;
    property @Deprecated public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.autofill.Autofill?> LocalAutofill;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.autofill.AutofillManager?> LocalAutofillManager;
    property @Deprecated public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.autofill.AutofillTree> LocalAutofillTree;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.Clipboard> LocalClipboard;
    property @Deprecated public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.ClipboardManager> LocalClipboardManager;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> LocalCursorBlinkEnabled;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.unit.Density> LocalDensity;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.focus.FocusManager> LocalFocusManager;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.text.font.FontFamily.Resolver> LocalFontFamilyResolver;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.GraphicsContext> LocalGraphicsContext;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.hapticfeedback.HapticFeedback> LocalHapticFeedback;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.input.InputModeManager> LocalInputModeManager;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.unit.LayoutDirection> LocalLayoutDirection;
    property public static androidx.compose.runtime.CompositionLocal<java.lang.Boolean> LocalScrollCaptureInProgress;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.SoftwareKeyboardController?> LocalSoftwareKeyboardController;
    property @Deprecated public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.text.input.TextInputService?> LocalTextInputService;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.TextToolbar> LocalTextToolbar;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.UriHandler> LocalUriHandler;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.ViewConfiguration> LocalViewConfiguration;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.platform.WindowInfo> LocalWindowInfo;
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface InfiniteAnimationPolicy extends kotlin.coroutines.CoroutineContext.Element {
    method public default kotlin.coroutines.CoroutineContext.Key<? extends java.lang.Object?> getKey();
    method public suspend <R> Object? onInfiniteOperation(kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super R>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super R>);
    property public default kotlin.coroutines.CoroutineContext.Key<? extends java.lang.Object?> key;
    field public static final androidx.compose.ui.platform.InfiniteAnimationPolicy.Key Key;
  }

  public static final class InfiniteAnimationPolicy.Key implements kotlin.coroutines.CoroutineContext.Key<androidx.compose.ui.platform.InfiniteAnimationPolicy> {
  }

  @Deprecated public final class InspectableModifier extends androidx.compose.ui.platform.InspectorValueInfo implements androidx.compose.ui.Modifier.Element {
    ctor @Deprecated public InspectableModifier(kotlin.jvm.functions.Function1<? super androidx.compose.ui.platform.InspectorInfo,kotlin.Unit> inspectorInfo);
    method @Deprecated public androidx.compose.ui.platform.InspectableModifier.End getEnd();
    property @Deprecated public androidx.compose.ui.platform.InspectableModifier.End end;
  }

  @Deprecated public final class InspectableModifier.End implements androidx.compose.ui.Modifier.Element {
    ctor @Deprecated public InspectableModifier.End();
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface InspectableValue {
    method public default kotlin.sequences.Sequence<androidx.compose.ui.platform.ValueElement> getInspectableElements();
    method public default String? getNameFallback();
    method public default Object? getValueOverride();
    property public default kotlin.sequences.Sequence<androidx.compose.ui.platform.ValueElement> inspectableElements;
    property public default String? nameFallback;
    property public default Object? valueOverride;
  }

  public final class InspectableValueKt {
    method public static inline kotlin.jvm.functions.Function1<androidx.compose.ui.platform.InspectorInfo,kotlin.Unit> debugInspectorInfo(kotlin.jvm.functions.Function1<? super androidx.compose.ui.platform.InspectorInfo,kotlin.Unit> definitions);
    method public static kotlin.jvm.functions.Function1<androidx.compose.ui.platform.InspectorInfo,kotlin.Unit> getNoInspectorInfo();
    method @Deprecated public static inline androidx.compose.ui.Modifier inspectable(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.platform.InspectorInfo,kotlin.Unit> inspectorInfo, kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier,? extends androidx.compose.ui.Modifier> factory);
    method @kotlin.PublishedApi internal static androidx.compose.ui.Modifier inspectableWrapper(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.platform.InspectorInfo,kotlin.Unit> inspectorInfo, androidx.compose.ui.Modifier wrapped);
    method public static boolean isDebugInspectorInfoEnabled();
    method public static void setDebugInspectorInfoEnabled(boolean);
    property public static kotlin.jvm.functions.Function1<androidx.compose.ui.platform.InspectorInfo,kotlin.Unit> NoInspectorInfo;
    property public static boolean isDebugInspectorInfoEnabled;
  }

  public final class InspectionModeKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> getLocalInspectionMode();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> LocalInspectionMode;
  }

  public final class InspectorInfo {
    ctor public InspectorInfo();
    method public String? getName();
    method public androidx.compose.ui.platform.ValueElementSequence getProperties();
    method public Object? getValue();
    method public void setName(String?);
    method public void setValue(Object?);
    property public String? name;
    property public androidx.compose.ui.platform.ValueElementSequence properties;
    property public Object? value;
  }

  public abstract class InspectorValueInfo implements androidx.compose.ui.platform.InspectableValue {
    ctor public InspectorValueInfo(kotlin.jvm.functions.Function1<? super androidx.compose.ui.platform.InspectorInfo,kotlin.Unit> info);
    property public kotlin.sequences.Sequence<androidx.compose.ui.platform.ValueElement> inspectableElements;
    property public String? nameFallback;
    property public Object? valueOverride;
  }

  public final class JvmActuals_jvmKt {
    method @Deprecated @kotlin.PublishedApi internal static inline <R> R synchronized(Object lock, kotlin.jvm.functions.Function0<? extends R> block);
  }

  public final class NestedScrollInteropConnectionKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.input.nestedscroll.NestedScrollConnection rememberNestedScrollInteropConnection(optional android.view.View hostView);
  }

  @SuppressCompatibility @androidx.compose.ui.ExperimentalComposeUiApi public fun interface PlatformTextInputInterceptor {
    method public suspend Object? interceptStartInputMethod(androidx.compose.ui.platform.PlatformTextInputMethodRequest request, androidx.compose.ui.platform.PlatformTextInputSession nextHandler, kotlin.coroutines.Continuation<? extends java.lang.Object?>);
  }

  public fun interface PlatformTextInputMethodRequest {
    method public android.view.inputmethod.InputConnection createInputConnection(android.view.inputmethod.EditorInfo outAttributes);
  }

  public interface PlatformTextInputModifierNode extends androidx.compose.ui.node.DelegatableNode {
  }

  public final class PlatformTextInputModifierNodeKt {
    method @SuppressCompatibility @androidx.compose.runtime.Composable @androidx.compose.ui.ExperimentalComposeUiApi public static void InterceptPlatformTextInput(androidx.compose.ui.platform.PlatformTextInputInterceptor interceptor, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public static suspend Object? establishTextInputSession(androidx.compose.ui.platform.PlatformTextInputModifierNode, kotlin.jvm.functions.Function2<? super androidx.compose.ui.platform.PlatformTextInputSessionScope,? super kotlin.coroutines.Continuation<? extends java.lang.Object?>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? extends java.lang.Object?>);
  }

  public interface PlatformTextInputSession {
    method public android.view.View getView();
    method public suspend Object? startInputMethod(androidx.compose.ui.platform.PlatformTextInputMethodRequest request, kotlin.coroutines.Continuation<? extends java.lang.Object?>);
    property public abstract android.view.View view;
  }

  public interface PlatformTextInputSessionScope extends androidx.compose.ui.platform.PlatformTextInputSession kotlinx.coroutines.CoroutineScope {
  }

  @androidx.compose.runtime.Stable public interface SoftwareKeyboardController {
    method public void hide();
    method public void show();
  }

  public final class TestTagKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier testTag(androidx.compose.ui.Modifier, String tag);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface TextToolbar {
    method public androidx.compose.ui.platform.TextToolbarStatus getStatus();
    method public void hide();
    method public void showMenu(androidx.compose.ui.geometry.Rect rect, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onCopyRequested, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onPasteRequested, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onCutRequested, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onSelectAllRequested);
    method public default void showMenu(androidx.compose.ui.geometry.Rect rect, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onCopyRequested, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onPasteRequested, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onCutRequested, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onSelectAllRequested, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onAutofillRequested);
    property public abstract androidx.compose.ui.platform.TextToolbarStatus status;
  }

  public enum TextToolbarStatus {
    enum_constant public static final androidx.compose.ui.platform.TextToolbarStatus Hidden;
    enum_constant public static final androidx.compose.ui.platform.TextToolbarStatus Shown;
  }

  public interface UriHandler {
    method public void openUri(String uri);
  }

  public final class ValueElement {
    ctor public ValueElement(String name, Object? value);
    method public String component1();
    method public Object? component2();
    method public androidx.compose.ui.platform.ValueElement copy(String name, Object? value);
    method public String getName();
    method public Object? getValue();
    property public String name;
    property public Object? value;
  }

  public final class ValueElementSequence implements kotlin.sequences.Sequence<androidx.compose.ui.platform.ValueElement> {
    ctor public ValueElementSequence();
    method public java.util.Iterator<androidx.compose.ui.platform.ValueElement> iterator();
    method public operator void set(String name, Object? value);
  }

  public interface ViewCompositionStrategy {
    method public kotlin.jvm.functions.Function0<kotlin.Unit> installFor(androidx.compose.ui.platform.AbstractComposeView view);
    field public static final androidx.compose.ui.platform.ViewCompositionStrategy.Companion Companion;
  }

  public static final class ViewCompositionStrategy.Companion {
    method public androidx.compose.ui.platform.ViewCompositionStrategy getDefault();
    property public androidx.compose.ui.platform.ViewCompositionStrategy Default;
  }

  public static final class ViewCompositionStrategy.DisposeOnDetachedFromWindow implements androidx.compose.ui.platform.ViewCompositionStrategy {
    method public kotlin.jvm.functions.Function0<kotlin.Unit> installFor(androidx.compose.ui.platform.AbstractComposeView view);
    field public static final androidx.compose.ui.platform.ViewCompositionStrategy.DisposeOnDetachedFromWindow INSTANCE;
  }

  public static final class ViewCompositionStrategy.DisposeOnDetachedFromWindowOrReleasedFromPool implements androidx.compose.ui.platform.ViewCompositionStrategy {
    method public kotlin.jvm.functions.Function0<kotlin.Unit> installFor(androidx.compose.ui.platform.AbstractComposeView view);
    field public static final androidx.compose.ui.platform.ViewCompositionStrategy.DisposeOnDetachedFromWindowOrReleasedFromPool INSTANCE;
  }

  public static final class ViewCompositionStrategy.DisposeOnLifecycleDestroyed implements androidx.compose.ui.platform.ViewCompositionStrategy {
    ctor public ViewCompositionStrategy.DisposeOnLifecycleDestroyed(androidx.lifecycle.Lifecycle lifecycle);
    ctor public ViewCompositionStrategy.DisposeOnLifecycleDestroyed(androidx.lifecycle.LifecycleOwner lifecycleOwner);
    method public kotlin.jvm.functions.Function0<kotlin.Unit> installFor(androidx.compose.ui.platform.AbstractComposeView view);
  }

  public static final class ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed implements androidx.compose.ui.platform.ViewCompositionStrategy {
    method public kotlin.jvm.functions.Function0<kotlin.Unit> installFor(androidx.compose.ui.platform.AbstractComposeView view);
    field public static final androidx.compose.ui.platform.ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed INSTANCE;
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface ViewConfiguration {
    method public long getDoubleTapMinTimeMillis();
    method public long getDoubleTapTimeoutMillis();
    method public default float getHandwritingGestureLineMargin();
    method public default float getHandwritingSlop();
    method public long getLongPressTimeoutMillis();
    method public default float getMaximumFlingVelocity();
    method public default long getMinimumTouchTargetSize();
    method public float getTouchSlop();
    property public abstract long doubleTapMinTimeMillis;
    property public abstract long doubleTapTimeoutMillis;
    property public default float handwritingGestureLineMargin;
    property public default float handwritingSlop;
    property public abstract long longPressTimeoutMillis;
    property public default float maximumFlingVelocity;
    property public default long minimumTouchTargetSize;
    property public abstract float touchSlop;
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface ViewRootForInspector {
    method public default androidx.compose.ui.platform.AbstractComposeView? getSubCompositionView();
    method public default android.view.View? getViewRoot();
    property public default androidx.compose.ui.platform.AbstractComposeView? subCompositionView;
    property public default android.view.View? viewRoot;
  }

  @VisibleForTesting public interface ViewRootForTest extends androidx.compose.ui.node.RootForTest {
    method public boolean getHasPendingMeasureOrLayout();
    method public android.view.View getView();
    method public void invalidateDescendants();
    method public boolean isLifecycleInResumedState();
    property public abstract boolean hasPendingMeasureOrLayout;
    property public abstract boolean isLifecycleInResumedState;
    property public abstract android.view.View view;
    field public static final androidx.compose.ui.platform.ViewRootForTest.Companion Companion;
  }

  public static final class ViewRootForTest.Companion {
    method public kotlin.jvm.functions.Function1<androidx.compose.ui.platform.ViewRootForTest,kotlin.Unit>? getOnViewCreatedCallback();
    method public void setOnViewCreatedCallback(kotlin.jvm.functions.Function1<? super androidx.compose.ui.platform.ViewRootForTest,kotlin.Unit>?);
    property @VisibleForTesting public kotlin.jvm.functions.Function1<androidx.compose.ui.platform.ViewRootForTest,kotlin.Unit>? onViewCreatedCallback;
  }

  @androidx.compose.runtime.Stable public interface WindowInfo {
    method public default long getContainerSize();
    method public default int getKeyboardModifiers();
    method public boolean isWindowFocused();
    property public default long containerSize;
    property public abstract boolean isWindowFocused;
    property public default int keyboardModifiers;
  }

  @SuppressCompatibility @androidx.compose.ui.InternalComposeUiApi public fun interface WindowRecomposerFactory {
    method public androidx.compose.runtime.Recomposer createRecomposer(android.view.View windowRootView);
    field public static final androidx.compose.ui.platform.WindowRecomposerFactory.Companion Companion;
  }

  public static final class WindowRecomposerFactory.Companion {
    method public androidx.compose.ui.platform.WindowRecomposerFactory getLifecycleAware();
    property public androidx.compose.ui.platform.WindowRecomposerFactory LifecycleAware;
  }

  @SuppressCompatibility @androidx.compose.ui.InternalComposeUiApi public final class WindowRecomposerPolicy {
    method @kotlin.PublishedApi internal boolean compareAndSetFactory(androidx.compose.ui.platform.WindowRecomposerFactory expected, androidx.compose.ui.platform.WindowRecomposerFactory factory);
    method @kotlin.PublishedApi internal androidx.compose.ui.platform.WindowRecomposerFactory getAndSetFactory(androidx.compose.ui.platform.WindowRecomposerFactory factory);
    method public void setFactory(androidx.compose.ui.platform.WindowRecomposerFactory factory);
    method public inline <R> R withFactory(androidx.compose.ui.platform.WindowRecomposerFactory factory, kotlin.jvm.functions.Function0<? extends R> block);
    field public static final androidx.compose.ui.platform.WindowRecomposerPolicy INSTANCE;
  }

  public final class WindowRecomposer_androidKt {
    method public static androidx.compose.runtime.Recomposer createLifecycleAwareWindowRecomposer(android.view.View, optional kotlin.coroutines.CoroutineContext coroutineContext, optional androidx.lifecycle.Lifecycle? lifecycle);
    method public static androidx.compose.runtime.CompositionContext? findViewTreeCompositionContext(android.view.View);
    method public static androidx.compose.runtime.CompositionContext? getCompositionContext(android.view.View);
    method public static void setCompositionContext(android.view.View, androidx.compose.runtime.CompositionContext?);
    property public static androidx.compose.runtime.CompositionContext? android.view.View.compositionContext;
  }

}

package androidx.compose.ui.relocation {

  public interface BringIntoViewModifierNode extends androidx.compose.ui.node.DelegatableNode {
    method public suspend Object? bringIntoView(androidx.compose.ui.layout.LayoutCoordinates childCoordinates, kotlin.jvm.functions.Function0<androidx.compose.ui.geometry.Rect?> boundsProvider, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public final class BringIntoViewModifierNodeKt {
    method public static suspend Object? bringIntoView(androidx.compose.ui.node.DelegatableNode, optional kotlin.jvm.functions.Function0<androidx.compose.ui.geometry.Rect?>? bounds, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

}

package androidx.compose.ui.res {

  public final class ColorResources_androidKt {
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static long colorResource(@ColorRes int id);
  }

  public final class FontResources_androidKt {
    method @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static androidx.compose.ui.text.font.Typeface fontResource(androidx.compose.ui.text.font.FontFamily fontFamily);
  }

  public final class ImageResources_androidKt {
    method public static androidx.compose.ui.graphics.ImageBitmap imageResource(androidx.compose.ui.graphics.ImageBitmap.Companion, android.content.res.Resources res, @DrawableRes int id);
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.graphics.ImageBitmap imageResource(androidx.compose.ui.graphics.ImageBitmap.Companion, @DrawableRes int id);
  }

  public final class PainterResources_androidKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.graphics.painter.Painter painterResource(@DrawableRes int id);
  }

  public final class PrimitiveResources_androidKt {
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static boolean booleanResource(@BoolRes int id);
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static float dimensionResource(@DimenRes int id);
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static int[] integerArrayResource(@ArrayRes int id);
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static int integerResource(@IntegerRes int id);
  }

  public final class ResourceResolutionException extends java.lang.RuntimeException {
    ctor public ResourceResolutionException(String message, Throwable cause);
  }

  public final class StringResources_androidKt {
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static String pluralStringResource(@PluralsRes int id, int count);
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static String pluralStringResource(@PluralsRes int id, int count, java.lang.Object... formatArgs);
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static String[] stringArrayResource(@ArrayRes int id);
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static String stringResource(@StringRes int id);
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static String stringResource(@StringRes int id, java.lang.Object... formatArgs);
  }

  public final class VectorResources_androidKt {
    method @kotlin.jvm.Throws(exceptionClasses=XmlPullParserException::class) public static androidx.compose.ui.graphics.vector.ImageVector vectorResource(androidx.compose.ui.graphics.vector.ImageVector.Companion, optional android.content.res.Resources.Theme? theme, android.content.res.Resources res, int resId) throws org.xmlpull.v1.XmlPullParserException;
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.graphics.vector.ImageVector vectorResource(androidx.compose.ui.graphics.vector.ImageVector.Companion, @DrawableRes int id);
  }

}

package androidx.compose.ui.semantics {

  public final class AccessibilityAction<T extends kotlin.Function<? extends java.lang.Boolean>> {
    ctor public AccessibilityAction(String? label, T? action);
    method public T? getAction();
    method public String? getLabel();
    property public T? action;
    property public String? label;
  }

  public final class CollectionInfo {
    ctor public CollectionInfo(int rowCount, int columnCount);
    method public int getColumnCount();
    method public int getRowCount();
    property public int columnCount;
    property public int rowCount;
  }

  public final class CollectionItemInfo {
    ctor public CollectionItemInfo(int rowIndex, int rowSpan, int columnIndex, int columnSpan);
    method public int getColumnIndex();
    method public int getColumnSpan();
    method public int getRowIndex();
    method public int getRowSpan();
    property public int columnIndex;
    property public int columnSpan;
    property public int rowIndex;
    property public int rowSpan;
  }

  public final class CustomAccessibilityAction {
    ctor public CustomAccessibilityAction(String label, kotlin.jvm.functions.Function0<java.lang.Boolean> action);
    method public kotlin.jvm.functions.Function0<java.lang.Boolean> getAction();
    method public String getLabel();
    property public kotlin.jvm.functions.Function0<java.lang.Boolean> action;
    property public String label;
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class LiveRegionMode {
    field public static final androidx.compose.ui.semantics.LiveRegionMode.Companion Companion;
  }

  public static final class LiveRegionMode.Companion {
    method public int getAssertive();
    method public int getPolite();
    property public int Assertive;
    property public int Polite;
  }

  public final class ProgressBarRangeInfo {
    ctor public ProgressBarRangeInfo(float current, kotlin.ranges.ClosedFloatingPointRange<java.lang.Float> range, optional int steps);
    method public float getCurrent();
    method public kotlin.ranges.ClosedFloatingPointRange<java.lang.Float> getRange();
    method public int getSteps();
    property public float current;
    property public kotlin.ranges.ClosedFloatingPointRange<java.lang.Float> range;
    property public int steps;
    field public static final androidx.compose.ui.semantics.ProgressBarRangeInfo.Companion Companion;
  }

  public static final class ProgressBarRangeInfo.Companion {
    method public androidx.compose.ui.semantics.ProgressBarRangeInfo getIndeterminate();
    property public androidx.compose.ui.semantics.ProgressBarRangeInfo Indeterminate;
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class Role {
    field public static final androidx.compose.ui.semantics.Role.Companion Companion;
  }

  public static final class Role.Companion {
    method public int getButton();
    method public int getCarousel();
    method public int getCheckbox();
    method public int getDropdownList();
    method public int getImage();
    method public int getRadioButton();
    method public int getSwitch();
    method public int getTab();
    method public int getValuePicker();
    property public int Button;
    property public int Carousel;
    property public int Checkbox;
    property public int DropdownList;
    property public int Image;
    property public int RadioButton;
    property public int Switch;
    property public int Tab;
    property public int ValuePicker;
  }

  public final class ScrollAxisRange {
    ctor public ScrollAxisRange(kotlin.jvm.functions.Function0<java.lang.Float> value, kotlin.jvm.functions.Function0<java.lang.Float> maxValue, optional boolean reverseScrolling);
    method public kotlin.jvm.functions.Function0<java.lang.Float> getMaxValue();
    method public boolean getReverseScrolling();
    method public kotlin.jvm.functions.Function0<java.lang.Float> getValue();
    property public kotlin.jvm.functions.Function0<java.lang.Float> maxValue;
    property public boolean reverseScrolling;
    property public kotlin.jvm.functions.Function0<java.lang.Float> value;
  }

  public final class SemanticsActions {
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getClearTextSubstitution();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getCollapse();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getCopyText();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.util.List<androidx.compose.ui.semantics.CustomAccessibilityAction>> getCustomActions();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getCutText();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getDismiss();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getExpand();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<java.util.List<java.lang.Float>,java.lang.Boolean>>> getGetScrollViewportLength();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<java.util.List<androidx.compose.ui.text.TextLayoutResult>,java.lang.Boolean>>> getGetTextLayoutResult();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<androidx.compose.ui.text.AnnotatedString,java.lang.Boolean>>> getInsertTextAtCursor();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<androidx.compose.ui.text.AnnotatedString,java.lang.Boolean>>> getOnAutofillText();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getOnClick();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getOnImeAction();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getOnLongClick();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getPageDown();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getPageLeft();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getPageRight();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getPageUp();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getPasteText();
    method @Deprecated public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getPerformImeAction();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> getRequestFocus();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function2<java.lang.Float,java.lang.Float,java.lang.Boolean>>> getScrollBy();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.jvm.functions.Function2<androidx.compose.ui.geometry.Offset,kotlin.coroutines.Continuation<? super androidx.compose.ui.geometry.Offset>,java.lang.Object?>> getScrollByOffset();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<java.lang.Integer,java.lang.Boolean>>> getScrollToIndex();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<java.lang.Float,java.lang.Boolean>>> getSetProgress();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function3<java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean>>> getSetSelection();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<androidx.compose.ui.text.AnnotatedString,java.lang.Boolean>>> getSetText();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<androidx.compose.ui.text.AnnotatedString,java.lang.Boolean>>> getSetTextSubstitution();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<java.lang.Boolean,java.lang.Boolean>>> getShowTextSubstitution();
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> ClearTextSubstitution;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> Collapse;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> CopyText;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.util.List<androidx.compose.ui.semantics.CustomAccessibilityAction>> CustomActions;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> CutText;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> Dismiss;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> Expand;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<java.util.List<java.lang.Float>,java.lang.Boolean>>> GetScrollViewportLength;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<java.util.List<androidx.compose.ui.text.TextLayoutResult>,java.lang.Boolean>>> GetTextLayoutResult;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<androidx.compose.ui.text.AnnotatedString,java.lang.Boolean>>> InsertTextAtCursor;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<androidx.compose.ui.text.AnnotatedString,java.lang.Boolean>>> OnAutofillText;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> OnClick;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> OnImeAction;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> OnLongClick;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> PageDown;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> PageLeft;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> PageRight;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> PageUp;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> PasteText;
    property @Deprecated public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> PerformImeAction;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> RequestFocus;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function2<java.lang.Float,java.lang.Float,java.lang.Boolean>>> ScrollBy;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.jvm.functions.Function2<androidx.compose.ui.geometry.Offset,kotlin.coroutines.Continuation<? super androidx.compose.ui.geometry.Offset>,java.lang.Object?>> ScrollByOffset;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<java.lang.Integer,java.lang.Boolean>>> ScrollToIndex;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<java.lang.Float,java.lang.Boolean>>> SetProgress;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function3<java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean>>> SetSelection;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<androidx.compose.ui.text.AnnotatedString,java.lang.Boolean>>> SetText;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<androidx.compose.ui.text.AnnotatedString,java.lang.Boolean>>> SetTextSubstitution;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function1<java.lang.Boolean,java.lang.Boolean>>> ShowTextSubstitution;
    field public static final androidx.compose.ui.semantics.SemanticsActions INSTANCE;
  }

  public final class SemanticsConfiguration implements java.lang.Iterable<java.util.Map.Entry<? extends androidx.compose.ui.semantics.SemanticsPropertyKey<? extends java.lang.Object?>,? extends java.lang.Object?>> kotlin.jvm.internal.markers.KMappedMarker androidx.compose.ui.semantics.SemanticsPropertyReceiver {
    ctor public SemanticsConfiguration();
    method public operator <T> boolean contains(androidx.compose.ui.semantics.SemanticsPropertyKey<T> key);
    method public androidx.compose.ui.semantics.SemanticsConfiguration copy();
    method public operator <T> T get(androidx.compose.ui.semantics.SemanticsPropertyKey<T> key);
    method public <T> T getOrElse(androidx.compose.ui.semantics.SemanticsPropertyKey<T> key, kotlin.jvm.functions.Function0<? extends T> defaultValue);
    method public <T> T? getOrElseNullable(androidx.compose.ui.semantics.SemanticsPropertyKey<T> key, kotlin.jvm.functions.Function0<? extends T?> defaultValue);
    method public boolean isClearingSemantics();
    method public boolean isMergingSemanticsOfDescendants();
    method public java.util.Iterator<java.util.Map.Entry<androidx.compose.ui.semantics.SemanticsPropertyKey<? extends java.lang.Object?>,java.lang.Object?>> iterator();
    method public <T> void set(androidx.compose.ui.semantics.SemanticsPropertyKey<T> key, T value);
    method public void setClearingSemantics(boolean);
    method public void setMergingSemanticsOfDescendants(boolean);
    property public boolean isClearingSemantics;
    property public boolean isMergingSemanticsOfDescendants;
  }

  public final class SemanticsConfigurationKt {
    method public static <T> T? getOrNull(androidx.compose.ui.semantics.SemanticsConfiguration, androidx.compose.ui.semantics.SemanticsPropertyKey<T> key);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface SemanticsModifier extends androidx.compose.ui.Modifier.Element {
    method @Deprecated public default int getId();
    method public androidx.compose.ui.semantics.SemanticsConfiguration getSemanticsConfiguration();
    property @Deprecated public default int id;
    property public abstract androidx.compose.ui.semantics.SemanticsConfiguration semanticsConfiguration;
  }

  public final class SemanticsModifierKt {
    method public static androidx.compose.ui.Modifier clearAndSetSemantics(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.semantics.SemanticsPropertyReceiver,kotlin.Unit> properties);
    method public static androidx.compose.ui.Modifier semantics(androidx.compose.ui.Modifier, optional boolean mergeDescendants, kotlin.jvm.functions.Function1<? super androidx.compose.ui.semantics.SemanticsPropertyReceiver,kotlin.Unit> properties);
  }

  public final class SemanticsNode {
    method public int getAlignmentLinePosition(androidx.compose.ui.layout.AlignmentLine alignmentLine);
    method public androidx.compose.ui.geometry.Rect getBoundsInRoot();
    method public androidx.compose.ui.geometry.Rect getBoundsInWindow();
    method public java.util.List<androidx.compose.ui.semantics.SemanticsNode> getChildren();
    method public androidx.compose.ui.semantics.SemanticsConfiguration getConfig();
    method public int getId();
    method public androidx.compose.ui.layout.LayoutInfo getLayoutInfo();
    method public boolean getMergingEnabled();
    method public androidx.compose.ui.semantics.SemanticsNode? getParent();
    method public long getPositionInRoot();
    method public long getPositionInWindow();
    method public long getPositionOnScreen();
    method public androidx.compose.ui.node.RootForTest? getRoot();
    method public long getSize();
    method public androidx.compose.ui.geometry.Rect getTouchBoundsInRoot();
    method public boolean isRoot();
    property public androidx.compose.ui.geometry.Rect boundsInRoot;
    property public androidx.compose.ui.geometry.Rect boundsInWindow;
    property public java.util.List<androidx.compose.ui.semantics.SemanticsNode> children;
    property public androidx.compose.ui.semantics.SemanticsConfiguration config;
    property public int id;
    property public boolean isRoot;
    property public androidx.compose.ui.layout.LayoutInfo layoutInfo;
    property public boolean mergingEnabled;
    property public androidx.compose.ui.semantics.SemanticsNode? parent;
    property public long positionInRoot;
    property public long positionInWindow;
    property public long positionOnScreen;
    property public androidx.compose.ui.node.RootForTest? root;
    property public long size;
    property public androidx.compose.ui.geometry.Rect touchBoundsInRoot;
  }

  public final class SemanticsOwner {
    method public androidx.compose.ui.semantics.SemanticsNode getRootSemanticsNode();
    method public androidx.compose.ui.semantics.SemanticsNode getUnmergedRootSemanticsNode();
    property public androidx.compose.ui.semantics.SemanticsNode rootSemanticsNode;
    property public androidx.compose.ui.semantics.SemanticsNode unmergedRootSemanticsNode;
  }

  public final class SemanticsOwnerKt {
    method @Deprecated public static java.util.List<androidx.compose.ui.semantics.SemanticsNode> getAllSemanticsNodes(androidx.compose.ui.semantics.SemanticsOwner, boolean mergingEnabled);
    method public static java.util.List<androidx.compose.ui.semantics.SemanticsNode> getAllSemanticsNodes(androidx.compose.ui.semantics.SemanticsOwner, boolean mergingEnabled, optional boolean skipDeactivatedNodes);
  }

  public final class SemanticsProperties {
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.CollectionInfo> getCollectionInfo();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.CollectionItemInfo> getCollectionItemInfo();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.autofill.ContentDataType> getContentDataType();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.util.List<java.lang.String>> getContentDescription();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.autofill.ContentType> getContentType();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> getDisabled();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.text.AnnotatedString> getEditableText();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.String> getError();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> getFocused();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> getHeading();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> getHideFromAccessibility();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.ScrollAxisRange> getHorizontalScrollAxisRange();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.text.input.ImeAction> getImeAction();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.jvm.functions.Function1<java.lang.Object,java.lang.Integer>> getIndexForKey();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.text.AnnotatedString> getInputText();
    method @Deprecated public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> getInvisibleToUser();
    method @Deprecated public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> getIsContainer();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> getIsDialog();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> getIsEditable();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> getIsPopup();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> getIsShowingTextSubstitution();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> getIsTraversalGroup();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> getLinkTestMarker();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.LiveRegionMode> getLiveRegion();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Integer> getMaxTextLength();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.String> getPaneTitle();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> getPassword();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.ProgressBarRangeInfo> getProgressBarRangeInfo();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.Role> getRole();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> getSelectableGroup();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> getSelected();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.String> getStateDescription();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.String> getTestTag();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.util.List<androidx.compose.ui.text.AnnotatedString>> getText();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.text.TextRange> getTextSelectionRange();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.text.AnnotatedString> getTextSubstitution();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.state.ToggleableState> getToggleableState();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Float> getTraversalIndex();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.ScrollAxisRange> getVerticalScrollAxisRange();
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.CollectionInfo> CollectionInfo;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.CollectionItemInfo> CollectionItemInfo;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.autofill.ContentDataType> ContentDataType;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.util.List<java.lang.String>> ContentDescription;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.autofill.ContentType> ContentType;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> Disabled;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.text.AnnotatedString> EditableText;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.String> Error;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> Focused;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> Heading;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> HideFromAccessibility;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.ScrollAxisRange> HorizontalScrollAxisRange;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.text.input.ImeAction> ImeAction;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.jvm.functions.Function1<java.lang.Object,java.lang.Integer>> IndexForKey;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.text.AnnotatedString> InputText;
    property @Deprecated public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> InvisibleToUser;
    property @Deprecated public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> IsContainer;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> IsDialog;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> IsEditable;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> IsPopup;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> IsShowingTextSubstitution;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> IsTraversalGroup;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> LinkTestMarker;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.LiveRegionMode> LiveRegion;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Integer> MaxTextLength;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.String> PaneTitle;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> Password;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.ProgressBarRangeInfo> ProgressBarRangeInfo;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.Role> Role;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<kotlin.Unit> SelectableGroup;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> Selected;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.String> StateDescription;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.String> TestTag;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.util.List<androidx.compose.ui.text.AnnotatedString>> Text;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.text.TextRange> TextSelectionRange;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.text.AnnotatedString> TextSubstitution;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.state.ToggleableState> ToggleableState;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Float> TraversalIndex;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.ScrollAxisRange> VerticalScrollAxisRange;
    field public static final androidx.compose.ui.semantics.SemanticsProperties INSTANCE;
  }

  public final class SemanticsPropertiesAndroid {
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.String> getAccessibilityClassName();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> getTestTagsAsResourceId();
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.String> AccessibilityClassName;
    property public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> TestTagsAsResourceId;
    field public static final androidx.compose.ui.semantics.SemanticsPropertiesAndroid INSTANCE;
  }

  public final class SemanticsPropertiesKt {
    method public static void clearTextSubstitution(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void collapse(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void copyText(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void cutText(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void dialog(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static void disabled(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static void dismiss(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void error(androidx.compose.ui.semantics.SemanticsPropertyReceiver, String description);
    method public static void expand(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static androidx.compose.ui.semantics.CollectionInfo getCollectionInfo(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static androidx.compose.ui.semantics.CollectionItemInfo getCollectionItemInfo(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static androidx.compose.ui.autofill.ContentDataType getContentDataType(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static String getContentDescription(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static androidx.compose.ui.autofill.ContentType getContentType(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static java.util.List<androidx.compose.ui.semantics.CustomAccessibilityAction> getCustomActions(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static androidx.compose.ui.text.AnnotatedString getEditableText(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static boolean getFocused(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static androidx.compose.ui.semantics.ScrollAxisRange getHorizontalScrollAxisRange(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method @Deprecated public static int getImeAction(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static androidx.compose.ui.text.AnnotatedString getInputText(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static int getLiveRegion(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static int getMaxTextLength(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static String getPaneTitle(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static androidx.compose.ui.semantics.ProgressBarRangeInfo getProgressBarRangeInfo(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static int getRole(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static void getScrollViewportLength(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Float?> action);
    method public static boolean getSelected(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static String getStateDescription(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static String getTestTag(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static androidx.compose.ui.text.AnnotatedString getText(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static void getTextLayoutResult(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function1<? super java.util.List<androidx.compose.ui.text.TextLayoutResult>,java.lang.Boolean>? action);
    method public static long getTextSelectionRange(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static androidx.compose.ui.text.AnnotatedString getTextSubstitution(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static androidx.compose.ui.state.ToggleableState getToggleableState(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static float getTraversalIndex(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static androidx.compose.ui.semantics.ScrollAxisRange getVerticalScrollAxisRange(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static void heading(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static void hideFromAccessibility(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static void indexForKey(androidx.compose.ui.semantics.SemanticsPropertyReceiver, kotlin.jvm.functions.Function1<java.lang.Object,java.lang.Integer> mapping);
    method public static void insertTextAtCursor(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.AnnotatedString,java.lang.Boolean>? action);
    method @Deprecated public static void invisibleToUser(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method @Deprecated public static boolean isContainer(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static boolean isEditable(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static boolean isShowingTextSubstitution(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static boolean isTraversalGroup(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static void onAutofillText(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.AnnotatedString,java.lang.Boolean>? action);
    method public static void onClick(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void onImeAction(androidx.compose.ui.semantics.SemanticsPropertyReceiver, int imeActionType, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void onLongClick(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void pageDown(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void pageLeft(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void pageRight(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void pageUp(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void password(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static void pasteText(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method @Deprecated public static void performImeAction(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void popup(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static void requestFocus(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function0<java.lang.Boolean>? action);
    method public static void scrollBy(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function2<? super java.lang.Float,? super java.lang.Float,java.lang.Boolean>? action);
    method public static void scrollByOffset(androidx.compose.ui.semantics.SemanticsPropertyReceiver, kotlin.jvm.functions.Function2<? super androidx.compose.ui.geometry.Offset,? super kotlin.coroutines.Continuation<? super androidx.compose.ui.geometry.Offset>,? extends java.lang.Object?> action);
    method public static void scrollToIndex(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function1<? super java.lang.Integer,java.lang.Boolean> action);
    method public static void selectableGroup(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static void setCollectionInfo(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.semantics.CollectionInfo);
    method public static void setCollectionItemInfo(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.semantics.CollectionItemInfo);
    method @Deprecated public static void setContainer(androidx.compose.ui.semantics.SemanticsPropertyReceiver, boolean);
    method public static void setContentDataType(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.autofill.ContentDataType);
    method public static void setContentDescription(androidx.compose.ui.semantics.SemanticsPropertyReceiver, String);
    method public static void setContentType(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.autofill.ContentType);
    method public static void setCustomActions(androidx.compose.ui.semantics.SemanticsPropertyReceiver, java.util.List<androidx.compose.ui.semantics.CustomAccessibilityAction>);
    method public static void setEditable(androidx.compose.ui.semantics.SemanticsPropertyReceiver, boolean);
    method public static void setEditableText(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.text.AnnotatedString);
    method public static void setFocused(androidx.compose.ui.semantics.SemanticsPropertyReceiver, boolean);
    method public static void setHorizontalScrollAxisRange(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.semantics.ScrollAxisRange);
    method @Deprecated public static void setImeAction(androidx.compose.ui.semantics.SemanticsPropertyReceiver, int);
    method public static void setInputText(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.text.AnnotatedString);
    method public static void setLiveRegion(androidx.compose.ui.semantics.SemanticsPropertyReceiver, int);
    method public static void setMaxTextLength(androidx.compose.ui.semantics.SemanticsPropertyReceiver, int);
    method public static void setPaneTitle(androidx.compose.ui.semantics.SemanticsPropertyReceiver, String);
    method public static void setProgress(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function1<? super java.lang.Float,java.lang.Boolean>? action);
    method public static void setProgressBarRangeInfo(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.semantics.ProgressBarRangeInfo);
    method public static void setRole(androidx.compose.ui.semantics.SemanticsPropertyReceiver, int);
    method public static void setSelected(androidx.compose.ui.semantics.SemanticsPropertyReceiver, boolean);
    method public static void setSelection(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function3<? super java.lang.Integer,? super java.lang.Integer,? super java.lang.Boolean,java.lang.Boolean>? action);
    method public static void setShowingTextSubstitution(androidx.compose.ui.semantics.SemanticsPropertyReceiver, boolean);
    method public static void setStateDescription(androidx.compose.ui.semantics.SemanticsPropertyReceiver, String);
    method public static void setTestTag(androidx.compose.ui.semantics.SemanticsPropertyReceiver, String);
    method public static void setText(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.text.AnnotatedString);
    method public static void setText(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.AnnotatedString,java.lang.Boolean>? action);
    method public static void setTextSelectionRange(androidx.compose.ui.semantics.SemanticsPropertyReceiver, long);
    method public static void setTextSubstitution(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.text.AnnotatedString);
    method public static void setTextSubstitution(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.AnnotatedString,java.lang.Boolean>? action);
    method public static void setToggleableState(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.state.ToggleableState);
    method public static void setTraversalGroup(androidx.compose.ui.semantics.SemanticsPropertyReceiver, boolean);
    method public static void setTraversalIndex(androidx.compose.ui.semantics.SemanticsPropertyReceiver, float);
    method public static void setVerticalScrollAxisRange(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.semantics.ScrollAxisRange);
    method public static void showTextSubstitution(androidx.compose.ui.semantics.SemanticsPropertyReceiver, optional String? label, kotlin.jvm.functions.Function1<? super java.lang.Boolean,java.lang.Boolean>? action);
    property public static androidx.compose.ui.semantics.CollectionInfo androidx.compose.ui.semantics.SemanticsPropertyReceiver.collectionInfo;
    property public static androidx.compose.ui.semantics.CollectionItemInfo androidx.compose.ui.semantics.SemanticsPropertyReceiver.collectionItemInfo;
    property public static androidx.compose.ui.autofill.ContentDataType androidx.compose.ui.semantics.SemanticsPropertyReceiver.contentDataType;
    property public static String androidx.compose.ui.semantics.SemanticsPropertyReceiver.contentDescription;
    property public static androidx.compose.ui.autofill.ContentType androidx.compose.ui.semantics.SemanticsPropertyReceiver.contentType;
    property public static java.util.List<androidx.compose.ui.semantics.CustomAccessibilityAction> androidx.compose.ui.semantics.SemanticsPropertyReceiver.customActions;
    property public static androidx.compose.ui.text.AnnotatedString androidx.compose.ui.semantics.SemanticsPropertyReceiver.editableText;
    property public static boolean androidx.compose.ui.semantics.SemanticsPropertyReceiver.focused;
    property public static androidx.compose.ui.semantics.ScrollAxisRange androidx.compose.ui.semantics.SemanticsPropertyReceiver.horizontalScrollAxisRange;
    property @Deprecated public static int androidx.compose.ui.semantics.SemanticsPropertyReceiver.imeAction;
    property public static androidx.compose.ui.text.AnnotatedString androidx.compose.ui.semantics.SemanticsPropertyReceiver.inputText;
    property @Deprecated public static boolean androidx.compose.ui.semantics.SemanticsPropertyReceiver.isContainer;
    property public static boolean androidx.compose.ui.semantics.SemanticsPropertyReceiver.isEditable;
    property public static boolean androidx.compose.ui.semantics.SemanticsPropertyReceiver.isShowingTextSubstitution;
    property public static boolean androidx.compose.ui.semantics.SemanticsPropertyReceiver.isTraversalGroup;
    property public static int androidx.compose.ui.semantics.SemanticsPropertyReceiver.liveRegion;
    property public static int androidx.compose.ui.semantics.SemanticsPropertyReceiver.maxTextLength;
    property public static String androidx.compose.ui.semantics.SemanticsPropertyReceiver.paneTitle;
    property public static androidx.compose.ui.semantics.ProgressBarRangeInfo androidx.compose.ui.semantics.SemanticsPropertyReceiver.progressBarRangeInfo;
    property public static int androidx.compose.ui.semantics.SemanticsPropertyReceiver.role;
    property public static boolean androidx.compose.ui.semantics.SemanticsPropertyReceiver.selected;
    property public static String androidx.compose.ui.semantics.SemanticsPropertyReceiver.stateDescription;
    property public static String androidx.compose.ui.semantics.SemanticsPropertyReceiver.testTag;
    property public static androidx.compose.ui.text.AnnotatedString androidx.compose.ui.semantics.SemanticsPropertyReceiver.text;
    property public static long androidx.compose.ui.semantics.SemanticsPropertyReceiver.textSelectionRange;
    property public static androidx.compose.ui.text.AnnotatedString androidx.compose.ui.semantics.SemanticsPropertyReceiver.textSubstitution;
    property public static androidx.compose.ui.state.ToggleableState androidx.compose.ui.semantics.SemanticsPropertyReceiver.toggleableState;
    property public static float androidx.compose.ui.semantics.SemanticsPropertyReceiver.traversalIndex;
    property public static androidx.compose.ui.semantics.ScrollAxisRange androidx.compose.ui.semantics.SemanticsPropertyReceiver.verticalScrollAxisRange;
  }

  public final class SemanticsProperties_androidKt {
    method public static String getAccessibilityClassName(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static boolean getTestTagsAsResourceId(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static void setAccessibilityClassName(androidx.compose.ui.semantics.SemanticsPropertyReceiver, String);
    method public static void setTestTagsAsResourceId(androidx.compose.ui.semantics.SemanticsPropertyReceiver, boolean);
    property public static String androidx.compose.ui.semantics.SemanticsPropertyReceiver.accessibilityClassName;
    property public static boolean androidx.compose.ui.semantics.SemanticsPropertyReceiver.testTagsAsResourceId;
  }

  public final class SemanticsPropertyKey<T> {
    ctor public SemanticsPropertyKey(String name, optional kotlin.jvm.functions.Function2<? super T?,? super T,? extends T?> mergePolicy);
    method public String getName();
    method public operator T getValue(androidx.compose.ui.semantics.SemanticsPropertyReceiver thisRef, kotlin.reflect.KProperty<? extends java.lang.Object?> property);
    method public T? merge(T? parentValue, T childValue);
    method public operator void setValue(androidx.compose.ui.semantics.SemanticsPropertyReceiver thisRef, kotlin.reflect.KProperty<? extends java.lang.Object?> property, T value);
    property public String name;
  }

  public interface SemanticsPropertyReceiver {
    method public operator <T> void set(androidx.compose.ui.semantics.SemanticsPropertyKey<T> key, T value);
  }

}

package androidx.compose.ui.spatial {

  public final class RelativeLayoutBounds {
    method public java.util.List<androidx.compose.ui.unit.IntRect> calculateOcclusions();
    method public androidx.compose.ui.unit.IntRect getBoundsInRoot();
    method public androidx.compose.ui.unit.IntRect getBoundsInScreen();
    method public androidx.compose.ui.unit.IntRect getBoundsInWindow();
    method public int getHeight();
    method public long getPositionInRoot();
    method public long getPositionInScreen();
    method public long getPositionInWindow();
    method public int getWidth();
    property public androidx.compose.ui.unit.IntRect boundsInRoot;
    property public androidx.compose.ui.unit.IntRect boundsInScreen;
    property public androidx.compose.ui.unit.IntRect boundsInWindow;
    property public int height;
    property public long positionInRoot;
    property public long positionInScreen;
    property public long positionInWindow;
    property public int width;
  }

}

package androidx.compose.ui.state {

  public enum ToggleableState {
    enum_constant public static final androidx.compose.ui.state.ToggleableState Indeterminate;
    enum_constant public static final androidx.compose.ui.state.ToggleableState Off;
    enum_constant public static final androidx.compose.ui.state.ToggleableState On;
  }

  public final class ToggleableStateKt {
    method public static androidx.compose.ui.state.ToggleableState ToggleableState(boolean value);
  }

}

package androidx.compose.ui.text {

  public final class TextMeasurerHelperKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.text.TextMeasurer rememberTextMeasurer(optional int cacheSize);
  }

}

package androidx.compose.ui.ui {

  @kotlin.jvm.JvmInline public final value class FrameRateCategory {
    method public float getValue();
    property public float value;
    field public static final androidx.compose.ui.ui.FrameRateCategory.Companion Companion;
  }

  public static final class FrameRateCategory.Companion {
    method public float getDefault();
    method public float getHigh();
    method public float getNoPreference();
    method public float getNormal();
    property public float Default;
    property public float High;
    property public float NoPreference;
    property public float Normal;
  }

  public final class FrameRateKt {
    method public static androidx.compose.ui.Modifier requestedFrameRate(androidx.compose.ui.Modifier, float frameRate);
    method public static androidx.compose.ui.Modifier requestedFrameRate(androidx.compose.ui.Modifier, float frameRateCategory);
  }

}

package androidx.compose.ui.viewinterop {

  public final class AndroidView_androidKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.UiComposable public static <T extends android.view.View> void AndroidView(kotlin.jvm.functions.Function1<? super android.content.Context,? extends T> factory, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super T,kotlin.Unit> update);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.UiComposable public static <T extends android.view.View> void AndroidView(kotlin.jvm.functions.Function1<? super android.content.Context,? extends T> factory, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super T,kotlin.Unit>? onReset, optional kotlin.jvm.functions.Function1<? super T,kotlin.Unit> onRelease, optional kotlin.jvm.functions.Function1<? super T,kotlin.Unit> update);
    method public static kotlin.jvm.functions.Function1<android.view.View,kotlin.Unit> getNoOpUpdate();
    property public static kotlin.jvm.functions.Function1<android.view.View,kotlin.Unit> NoOpUpdate;
  }

}

package androidx.compose.ui.window {

  public final class AndroidDialog_androidKt {
    method @androidx.compose.runtime.Composable public static void Dialog(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, optional androidx.compose.ui.window.DialogProperties properties, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class AndroidPopup_androidKt {
    method @androidx.compose.runtime.Composable public static void Popup(optional androidx.compose.ui.Alignment alignment, optional long offset, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onDismissRequest, optional androidx.compose.ui.window.PopupProperties properties, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void Popup(androidx.compose.ui.window.PopupPositionProvider popupPositionProvider, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onDismissRequest, optional androidx.compose.ui.window.PopupProperties properties, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @org.jetbrains.annotations.TestOnly public static boolean isPopupLayout(android.view.View view, optional String? testTag);
  }

  @androidx.compose.runtime.Immutable public final class DialogProperties {
    ctor public DialogProperties();
    ctor @Deprecated public DialogProperties(optional boolean dismissOnBackPress, optional boolean dismissOnClickOutside, optional androidx.compose.ui.window.SecureFlagPolicy securePolicy);
    ctor public DialogProperties(optional boolean dismissOnBackPress, optional boolean dismissOnClickOutside, optional androidx.compose.ui.window.SecureFlagPolicy securePolicy, optional boolean usePlatformDefaultWidth, optional boolean decorFitsSystemWindows);
    ctor public DialogProperties(optional boolean dismissOnBackPress, optional boolean dismissOnClickOutside, optional boolean usePlatformDefaultWidth);
    method public boolean getDecorFitsSystemWindows();
    method public boolean getDismissOnBackPress();
    method public boolean getDismissOnClickOutside();
    method public androidx.compose.ui.window.SecureFlagPolicy getSecurePolicy();
    method public boolean getUsePlatformDefaultWidth();
    property public boolean decorFitsSystemWindows;
    property public boolean dismissOnBackPress;
    property public boolean dismissOnClickOutside;
    property public androidx.compose.ui.window.SecureFlagPolicy securePolicy;
    property public boolean usePlatformDefaultWidth;
  }

  public interface DialogWindowProvider {
    method public android.view.Window getWindow();
    property public abstract android.view.Window window;
  }

  @androidx.compose.runtime.Immutable public interface PopupPositionProvider {
    method public long calculatePosition(androidx.compose.ui.unit.IntRect anchorBounds, long windowSize, androidx.compose.ui.unit.LayoutDirection layoutDirection, long popupContentSize);
  }

  @androidx.compose.runtime.Immutable public final class PopupProperties {
    ctor public PopupProperties(optional boolean focusable, optional boolean dismissOnBackPress, optional boolean dismissOnClickOutside, optional androidx.compose.ui.window.SecureFlagPolicy securePolicy, optional boolean excludeFromSystemGesture, optional boolean clippingEnabled);
    ctor public PopupProperties(optional boolean focusable, optional boolean dismissOnBackPress, optional boolean dismissOnClickOutside, optional androidx.compose.ui.window.SecureFlagPolicy securePolicy, optional boolean excludeFromSystemGesture, optional boolean clippingEnabled, optional boolean usePlatformDefaultWidth);
    ctor public PopupProperties(optional boolean focusable, optional boolean dismissOnBackPress, optional boolean dismissOnClickOutside, optional boolean clippingEnabled);
    ctor public PopupProperties(int flags, optional boolean inheritSecurePolicy, optional boolean dismissOnBackPress, optional boolean dismissOnClickOutside, optional boolean excludeFromSystemGesture, optional boolean usePlatformDefaultWidth);
    method public boolean getClippingEnabled();
    method public boolean getDismissOnBackPress();
    method public boolean getDismissOnClickOutside();
    method public boolean getExcludeFromSystemGesture();
    method public boolean getFocusable();
    method public androidx.compose.ui.window.SecureFlagPolicy getSecurePolicy();
    method public boolean getUsePlatformDefaultWidth();
    property public boolean clippingEnabled;
    property public boolean dismissOnBackPress;
    property public boolean dismissOnClickOutside;
    property public boolean excludeFromSystemGesture;
    property public boolean focusable;
    property public androidx.compose.ui.window.SecureFlagPolicy securePolicy;
    property public boolean usePlatformDefaultWidth;
  }

  public enum SecureFlagPolicy {
    enum_constant public static final androidx.compose.ui.window.SecureFlagPolicy Inherit;
    enum_constant public static final androidx.compose.ui.window.SecureFlagPolicy SecureOff;
    enum_constant public static final androidx.compose.ui.window.SecureFlagPolicy SecureOn;
  }

}

