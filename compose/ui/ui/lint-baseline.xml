<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.11.0-alpha10" type="baseline" client="gradle" dependencies="false" name="AGP (8.11.0-alpha10)" variant="all" version="8.11.0-alpha10">

    <issue
        id="CheckResult"
        message="The result of `assertThat` is not used"
        errorLine1="        Truth.assertThat(abs(iteratorStep - nodeHeight) &lt; lineHeight)"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/AccessibilityIteratorsTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `assertThat` is not used"
        errorLine1="        Truth.assertThat(abs(iteratorStep - nodeHeight) &lt; lineHeight)"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/AccessibilityIteratorsTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `assertThat` is not used"
        errorLine1="        assertThat(activity.stopLatch.await(5, TimeUnit.SECONDS))"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/layout/ShowLayoutBoundsTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `assertThat` is not used"
        errorLine1="                assertThat(current.isAttached)"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/layout/SubcomposeLayoutTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `assertThat` is not used"
        errorLine1="        assertThat(menu.menuItems.isEmpty())"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidUnitTest/kotlin/androidx/compose/ui/text/TextActionModeCallbackTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            rule.runOnUiThread { Thread.sleep(sleepTime) }"
        errorLine2="                                        ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/AndroidPointerInputTest.kt"/>
    </issue>

    <issue
        id="LambdaStructuralEquality"
        message="Checking lambdas for structural equality, instead of checking for referential equality"
        errorLine1="        if (callback != other.callback) return false"
        errorLine2="                     ~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/layout/OnGlobalLayoutListenerTest.kt"/>
    </issue>

    <issue
        id="LambdaStructuralEquality"
        message="Checking lambdas for structural equality, instead of checking for referential equality"
        errorLine1="                if (onRemeasured != other.onRemeasured) return false"
        errorLine2="                                 ~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/layout/OnSizeChangedTest.kt"/>
    </issue>

    <issue
        id="LambdaStructuralEquality"
        message="Checking lambdas for structural equality, instead of checking for referential equality"
        errorLine1="                if (onPlaced != other.onPlaced) return false"
        errorLine2="                             ~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/layout/OnSizeChangedTest.kt"/>
    </issue>

    <issue
        id="ComposableLambdaParameterNaming"
        message="Composable lambda parameter should be named `content`"
        errorLine1="internal fun ReverseMeasureLayout(modifier: Modifier, vararg contents: @Composable () -> Unit) ="
        errorLine2="                                                             ~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeUtils.kt"/>
    </issue>

    <issue
        id="ComposableLambdaParameterNaming"
        message="Composable lambda parameter should be named `content`"
        errorLine1="        detachedFromParentLookaheadPlacmeentItemContent: @Composable () -> Unit"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/layout/SubcomposeLayoutTest.kt"/>
    </issue>

    <issue
        id="ComposableLambdaParameterNaming"
        message="Composable lambda parameter should be named `content`"
        errorLine1="private fun Wrapper(body: @Composable () -> Unit) {"
        errorLine2="                    ~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/platform/WrapperTest.kt"/>
    </issue>

    <issue
        id="ComposableLambdaParameterPosition"
        message="Composable lambda parameter should be the last parameter so it can be used as a trailing lambda"
        errorLine1="    content: @Composable @UiComposable () -> Unit,"
        errorLine2="    ~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/modifier/CompositionLocalMapInjectionTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun createUi() {"
        errorLine2="                ~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/TraversableModifierNodeTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions with a return type should start with a lowercase letter"
        errorLine1="    private fun VectorMirror(size: Int): VectorPainter {"
        errorLine2="                ~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/graphics/vector/VectorTest.kt"/>
    </issue>

    <issue
        id="CompositionLocalNaming"
        message="CompositionLocal properties should be prefixed with `Local`"
        errorLine1="        private val staticLocalInt = staticCompositionLocalOf { 0 }"
        errorLine2="                    ~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/CompositionLocalConsumerModifierNodeTest.kt"/>
    </issue>

    <issue
        id="CompositionLocalNaming"
        message="CompositionLocal properties should be prefixed with `Local`"
        errorLine1="val SomeLocal = compositionLocalOf&lt;Int> { error(&quot;unprovided value&quot;) }"
        errorLine2="    ~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/modifier/CompositionLocalMapInjectionTest.kt"/>
    </issue>

    <issue
        id="CoroutineCreationDuringComposition"
        message="Calls to launch should happen inside a LaunchedEffect and not composition"
        errorLine1="            rememberCoroutineScope().launch(start = CoroutineStart.UNDISPATCHED) {"
        errorLine2="                                     ~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/AndroidComposeViewAccessibilityDelegateCompatTest.kt"/>
    </issue>

    <issue
        id="CoroutineCreationDuringComposition"
        message="Calls to launch should happen inside a LaunchedEffect and not composition"
        errorLine1="            rememberCoroutineScope().launch(start = CoroutineStart.UNDISPATCHED) {"
        errorLine2="                                     ~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/AndroidComposeViewAccessibilityDelegateCompatTest.kt"/>
    </issue>

    <issue
        id="CoroutineCreationDuringComposition"
        message="Calls to launch should happen inside a LaunchedEffect and not composition"
        errorLine1="            rememberCoroutineScope().launch(start = CoroutineStart.UNDISPATCHED) {"
        errorLine2="                                     ~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/AndroidComposeViewAccessibilityDelegateCompatTest.kt"/>
    </issue>

    <issue
        id="InvalidLanguageTagDelimiter"
        message="A hyphen (-), not an underscore (_) delimiter should be used in a language tag"
        errorLine1="        val locale = LocaleList(&quot;en_US&quot;)"
        errorLine2="                                ~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/AndroidAccessibilityTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="    private inline fun &lt;reified T : Modifier.Node> elementOf("
        errorLine2="                                                   ~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/CompositionLocalConsumerModifierNodeTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="inline fun &lt;reified T : Modifier.Node> modifierOf(crossinline fn: () -> T) ="
        errorLine2="                                       ~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/modifier/CompositionLocalMapInjectionTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="internal fun FakePointerInputModifierNode.toModifier(): Modifier {"
        errorLine2="                                          ~~~~~~~~~~">
        <location
            file="src/androidUnitTest/kotlin/androidx/compose/ui/node/HitTestTouchBoundsExpansionTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="fun DelegatableNode.toModifier(): Modifier.Element {"
        errorLine2="                    ~~~~~~~~~~">
        <location
            file="src/androidUnitTest/kotlin/androidx/compose/ui/node/LayoutNodeTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="private fun createModifier("
        errorLine2="            ~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/modifier/ModifierNodeReuseAndDeactivationTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="fun modifierOf(vararg modifiers: Modifier): Modifier {"
        errorLine2="    ~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="fun modifierOf(vararg nodes: Modifier.Node): Modifier {"
        errorLine2="    ~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="fun reusableModifier(name: String): Modifier.Element ="
        errorLine2="    ~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="fun modifierA(params: Any? = null): Modifier.Element {"
        errorLine2="    ~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="fun modifierB(params: Any? = null): Modifier.Element {"
        errorLine2="    ~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="fun modifierC(params: Any? = null): Modifier.Element {"
        errorLine2="    ~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="fun modifierD(params: Any? = null): Modifier.Element {"
        errorLine2="    ~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="fun managedModifier(name: String, params: Any? = null): ModifierNodeElement&lt;*> ="
        errorLine2="    ~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="internal fun elementFor(key1: Any? = null, instance: Modifier.Node) ="
        errorLine2="             ~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/TestUtils.kt"/>
    </issue>

    <issue
        id="ModifierFactoryReturnType"
        message="Modifier factory functions should have a return type of Modifier"
        errorLine1="    private inline fun &lt;reified T : Modifier.Node> elementOf("
        errorLine2="                                                   ~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/CompositionLocalConsumerModifierNodeTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryReturnType"
        message="Modifier factory functions should have a return type of Modifier"
        errorLine1="inline fun &lt;reified T : Modifier.Node> modifierOf(crossinline fn: () -> T) ="
        errorLine2="                                       ~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/modifier/CompositionLocalMapInjectionTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryReturnType"
        message="Modifier factory functions should have a return type of Modifier"
        errorLine1="fun DelegatableNode.toModifier(): Modifier.Element {"
        errorLine2="                    ~~~~~~~~~~">
        <location
            file="src/androidUnitTest/kotlin/androidx/compose/ui/node/LayoutNodeTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryReturnType"
        message="Modifier factory functions should have a return type of Modifier"
        errorLine1="fun reusableModifier(name: String): Modifier.Element ="
        errorLine2="    ~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryReturnType"
        message="Modifier factory functions should have a return type of Modifier"
        errorLine1="fun modifierA(params: Any? = null): Modifier.Element {"
        errorLine2="    ~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryReturnType"
        message="Modifier factory functions should have a return type of Modifier"
        errorLine1="fun modifierB(params: Any? = null): Modifier.Element {"
        errorLine2="    ~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryReturnType"
        message="Modifier factory functions should have a return type of Modifier"
        errorLine1="fun modifierC(params: Any? = null): Modifier.Element {"
        errorLine2="    ~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryReturnType"
        message="Modifier factory functions should have a return type of Modifier"
        errorLine1="fun modifierD(params: Any? = null): Modifier.Element {"
        errorLine2="    ~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryReturnType"
        message="Modifier factory functions should have a return type of Modifier"
        errorLine1="fun managedModifier(name: String, params: Any? = null): ModifierNodeElement&lt;*> ="
        errorLine2="    ~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/node/NodeChainTester.kt"/>
    </issue>

    <issue
        id="ModifierFactoryReturnType"
        message="Modifier factory functions should have a return type of Modifier"
        errorLine1="internal fun elementFor(key1: Any? = null, instance: Modifier.Node) ="
        errorLine2="             ~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/TestUtils.kt"/>
    </issue>

    <issue
        id="ModifierFactoryUnreferencedReceiver"
        message="Modifier factory functions must use the receiver Modifier instance"
        errorLine1="    private fun Modifier.trackMainPassPlacement(block: () -> Unit) ="
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/layout/LookaheadScopeTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="    modifier: Modifier = Modifier,"
        errorLine2="    ~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/focus/FocusTestUtils.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="fun FocusableComponent(tag: String? = null, modifier: Modifier = Modifier) {"
        errorLine2="                                            ~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/focus/FocusTestUtils.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="        modifier: Modifier = Modifier,"
        errorLine2="        ~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/layout/ResizingComposeViewTest.kt"/>
    </issue>

    <issue
        id="ReturnFromAwaitPointerEventScope"
        message="Returning from awaitPointerEventScope may cause some input events to be dropped"
        errorLine1="                            awaitPointerEventScope {"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/PointerInputDensityTest.kt"/>
    </issue>

    <issue
        id="ReturnFromAwaitPointerEventScope"
        message="Returning from awaitPointerEventScope may cause some input events to be dropped"
        errorLine1="                            awaitPointerEventScope {"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/PointerInputViewConfigurationTest.kt"/>
    </issue>

    <issue
        id="ReturnFromAwaitPointerEventScope"
        message="Returning from awaitPointerEventScope may cause some input events to be dropped"
        errorLine1="            awaitPointerEventScope {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/SuspendingPointerInputFilterTest.kt"/>
    </issue>

    <issue
        id="ReturnFromAwaitPointerEventScope"
        message="Returning from awaitPointerEventScope may cause some input events to be dropped"
        errorLine1="            awaitPointerEventScope {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/SuspendingPointerInputFilterTest.kt"/>
    </issue>

    <issue
        id="ReturnFromAwaitPointerEventScope"
        message="Returning from awaitPointerEventScope may cause some input events to be dropped"
        errorLine1="            awaitPointerEventScope {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/SuspendingPointerInputFilterTest.kt"/>
    </issue>

    <issue
        id="ReturnFromAwaitPointerEventScope"
        message="Returning from awaitPointerEventScope may cause some input events to be dropped"
        errorLine1="            awaitPointerEventScope {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/SuspendingPointerInputFilterTest.kt"/>
    </issue>

    <issue
        id="ReturnFromAwaitPointerEventScope"
        message="Returning from awaitPointerEventScope may cause some input events to be dropped"
        errorLine1="            awaitPointerEventScope {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/SuspendingPointerInputFilterTest.kt"/>
    </issue>

    <issue
        id="ReturnFromAwaitPointerEventScope"
        message="Returning from awaitPointerEventScope may cause some input events to be dropped"
        errorLine1="            awaitPointerEventScope {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/SuspendingPointerInputFilterTest.kt"/>
    </issue>

    <issue
        id="ReturnFromAwaitPointerEventScope"
        message="Returning from awaitPointerEventScope may cause some input events to be dropped"
        errorLine1="            awaitPointerEventScope {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/SuspendingPointerInputFilterTest.kt"/>
    </issue>

    <issue
        id="ReturnFromAwaitPointerEventScope"
        message="Returning from awaitPointerEventScope may cause some input events to be dropped"
        errorLine1="            awaitPointerEventScope {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/SuspendingPointerInputFilterTest.kt"/>
    </issue>

    <issue
        id="ReturnFromAwaitPointerEventScope"
        message="Returning from awaitPointerEventScope may cause some input events to be dropped"
        errorLine1="                            awaitPointerEventScope { events += awaitPointerEvent() }"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/SuspendingPointerInputFilterTest.kt"/>
    </issue>

    <issue
        id="ReturnFromAwaitPointerEventScope"
        message="Returning from awaitPointerEventScope may cause some input events to be dropped"
        errorLine1="                            awaitPointerEventScope { events += awaitPointerEvent() }"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/SuspendingPointerInputFilterTest.kt"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        message="Unnecessary; `Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.S` is never true here"
        errorLine1="            if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.S) {"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/contentcapture/AndroidContentCaptureManager.android.kt"/>
    </issue>

    <issue
        id="AutoboxingStateValueProperty"
        message="Reading `value` will cause an autoboxing operation. Use `intValue` to avoid unnecessary allocations."
        errorLine1="            state.value"
        errorLine2="                  ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/graphics/vector/VectorTest.kt"/>
    </issue>

    <issue
        id="AutoboxingStateValueProperty"
        message="Assigning `value` will cause an autoboxing operation. Use `intValue` to avoid unnecessary allocations."
        errorLine1="        state.value = 1"
        errorLine2="              ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/graphics/vector/VectorTest.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field children with type Map&lt;Integer, AutofillNode>: replace with IntObjectMap"
        errorLine1="    val children: MutableMap&lt;Int, @Suppress(&quot;Deprecation&quot;) AutofillNode> = mutableMapOf()"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/autofill/AutofillTree.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;Integer, AutofillNode> of getChildren: replace with IntObjectMap"
        errorLine1="    val children: MutableMap&lt;Int, @Suppress(&quot;Deprecation&quot;) AutofillNode> = mutableMapOf()"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/autofill/AutofillTree.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable deltas with type List&lt;? extends Offset>: replace with LongList"
        errorLine1="    val deltas ="
        errorLine2="    ^">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/accessibility/CollectionInfo.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;HapticFeedbackType> of values: replace with IntList"
        errorLine1="        fun values(): List&lt;HapticFeedbackType> ="
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/hapticfeedback/HapticFeedbackType.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field alignmentLineMap with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="    private val alignmentLineMap: MutableMap&lt;AlignmentLine, Int> = hashMapOf()"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LayoutNodeAlignmentLines.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;AlignmentLine, Integer> of getLastCalculation: replace with ObjectIntMap"
        errorLine1="    fun getLastCalculation(): Map&lt;AlignmentLine, Int> = alignmentLineMap"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LayoutNodeAlignmentLines.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;AlignmentLine, Integer> of getAlignmentLinesMap: replace with ObjectIntMap"
        errorLine1="    protected abstract val NodeCoordinator.alignmentLinesMap: Map&lt;AlignmentLine, Int>"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LayoutNodeAlignmentLines.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;AlignmentLine, Integer> of calculateAlignmentLines: replace with ObjectIntMap"
        errorLine1="    fun calculateAlignmentLines(): Map&lt;AlignmentLine, Int>"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LayoutNodeLayoutDelegate.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field oldAlignmentLines with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="    private var oldAlignmentLines: MutableMap&lt;AlignmentLine, Int>? = null"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LookaheadDelegate.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;AlignmentLine, Integer> of getAlignmentLines: replace with ObjectIntMap"
        errorLine1="    val alignmentLines: Map&lt;AlignmentLine, Int>"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/MeasureResult.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method layout has parameter alignmentLines with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="        alignmentLines: Map&lt;AlignmentLine, Int> = emptyMap(),"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/MeasureScope.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable alignmentLines with type Map&lt;AlignmentLine, ? extends Integer>: replace with ObjectIntMap"
        errorLine1="                val alignmentLines = coordinator._measureResult?.alignmentLines"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/NodeCoordinator.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;Integer, SemanticsNode> of getAllSemanticsNodesToMap: replace with IntObjectMap"
        errorLine1="): Map&lt;Int, SemanticsNode> {"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsOwner.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable nodes with type Map&lt;Integer, SemanticsNode>: replace with IntObjectMap"
        errorLine1="    val nodes = mutableMapOf&lt;Int, SemanticsNode>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsOwner.kt"/>
    </issue>

</issues>
