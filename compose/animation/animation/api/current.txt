// Signature format: 4.0
package androidx.compose.animation {

  public final class AndroidActualDefaultDecayAnimationSpec_androidKt {
    method @Deprecated @androidx.compose.runtime.Composable public static androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> defaultDecayAnimationSpec();
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public static androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float!> defaultDecayAnimationSpec(androidx.compose.runtime.Composer?, int);
  }

  public final class AnimateBoundsModifierKt {
    method @SuppressCompatibility @androidx.compose.animation.ExperimentalSharedTransitionApi public static androidx.compose.ui.Modifier animateBounds(androidx.compose.ui.Modifier, androidx.compose.ui.layout.LookaheadScope lookaheadScope, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.animation.BoundsTransform boundsTransform, optional boolean animateMotionFrameOfReference);
  }

  public final class AnimatedContentKt {
    method @androidx.compose.runtime.Composable public static <S> void AnimatedContent(androidx.compose.animation.core.Transition<S>, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super androidx.compose.animation.AnimatedContentTransitionScope<S>,androidx.compose.animation.ContentTransform> transitionSpec, optional androidx.compose.ui.Alignment contentAlignment, optional kotlin.jvm.functions.Function1<? super S,? extends java.lang.Object?> contentKey, kotlin.jvm.functions.Function2<? super androidx.compose.animation.AnimatedContentScope,? super S,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static <S> void AnimatedContent(androidx.compose.animation.core.Transition<S!>, androidx.compose.ui.Modifier?, kotlin.jvm.functions.Function1<? super androidx.compose.animation.AnimatedContentTransitionScope<S!>!,androidx.compose.animation.ContentTransform!>?, androidx.compose.ui.Alignment?, kotlin.jvm.functions.Function1<? super S!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function4<? super androidx.compose.animation.AnimatedContentScope!,? super S!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable public static <S> void AnimatedContent(S targetState, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super androidx.compose.animation.AnimatedContentTransitionScope<S>,androidx.compose.animation.ContentTransform> transitionSpec, optional androidx.compose.ui.Alignment contentAlignment, optional String label, optional kotlin.jvm.functions.Function1<? super S,? extends java.lang.Object?> contentKey, kotlin.jvm.functions.Function2<? super androidx.compose.animation.AnimatedContentScope,? super S,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static <S> void AnimatedContent(S!, androidx.compose.ui.Modifier?, kotlin.jvm.functions.Function1<? super androidx.compose.animation.AnimatedContentTransitionScope<S!>!,androidx.compose.animation.ContentTransform!>?, androidx.compose.ui.Alignment?, String?, kotlin.jvm.functions.Function1<? super S!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function4<? super androidx.compose.animation.AnimatedContentScope!,? super S!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method public static androidx.compose.animation.SizeTransform SizeTransform(optional boolean clip, optional kotlin.jvm.functions.Function2<? super androidx.compose.ui.unit.IntSize,? super androidx.compose.ui.unit.IntSize,? extends androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntSize>> sizeAnimationSpec);
    method public static infix androidx.compose.animation.ContentTransform togetherWith(androidx.compose.animation.EnterTransition, androidx.compose.animation.ExitTransition exit);
    method @Deprecated @SuppressCompatibility @androidx.compose.animation.ExperimentalAnimationApi public static infix androidx.compose.animation.ContentTransform with(androidx.compose.animation.EnterTransition, androidx.compose.animation.ExitTransition exit);
  }

  public sealed interface AnimatedContentScope extends androidx.compose.animation.AnimatedVisibilityScope {
  }

  public sealed interface AnimatedContentTransitionScope<S> extends androidx.compose.animation.core.Transition.Segment<S> {
    method public androidx.compose.ui.Alignment getContentAlignment();
    method public default androidx.compose.animation.ExitTransition getKeepUntilTransitionsFinished(androidx.compose.animation.ExitTransition.Companion);
    method public androidx.compose.animation.EnterTransition slideIntoContainer(int towards, optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset> animationSpec, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,java.lang.Integer> initialOffset);
    method @BytecodeOnly public androidx.compose.animation.EnterTransition slideIntoContainer-mOhB8PU(int, androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset!>, kotlin.jvm.functions.Function1<? super java.lang.Integer!,java.lang.Integer!>);
    method public androidx.compose.animation.ExitTransition slideOutOfContainer(int towards, optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset> animationSpec, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,java.lang.Integer> targetOffset);
    method @BytecodeOnly public androidx.compose.animation.ExitTransition slideOutOfContainer-mOhB8PU(int, androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset!>, kotlin.jvm.functions.Function1<? super java.lang.Integer!,java.lang.Integer!>);
    method public infix androidx.compose.animation.ContentTransform using(androidx.compose.animation.ContentTransform, androidx.compose.animation.SizeTransform? sizeTransform);
    property public default androidx.compose.animation.ExitTransition androidx.compose.animation.ExitTransition.Companion.KeepUntilTransitionsFinished;
    property public abstract androidx.compose.ui.Alignment contentAlignment;
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public static final value class AnimatedContentTransitionScope.SlideDirection {
    method @BytecodeOnly public static androidx.compose.animation.AnimatedContentTransitionScope.SlideDirection! box-impl(int);
    method @BytecodeOnly public int unbox-impl();
    field public static final androidx.compose.animation.AnimatedContentTransitionScope.SlideDirection.Companion Companion;
  }

  public static final class AnimatedContentTransitionScope.SlideDirection.Companion {
    method @BytecodeOnly public int getDown-DKzdypw();
    method @BytecodeOnly public int getEnd-DKzdypw();
    method @BytecodeOnly public int getLeft-DKzdypw();
    method @BytecodeOnly public int getRight-DKzdypw();
    method @BytecodeOnly public int getStart-DKzdypw();
    method @BytecodeOnly public int getUp-DKzdypw();
    property public androidx.compose.animation.AnimatedContentTransitionScope.SlideDirection Down;
    property public androidx.compose.animation.AnimatedContentTransitionScope.SlideDirection End;
    property public androidx.compose.animation.AnimatedContentTransitionScope.SlideDirection Left;
    property public androidx.compose.animation.AnimatedContentTransitionScope.SlideDirection Right;
    property public androidx.compose.animation.AnimatedContentTransitionScope.SlideDirection Start;
    property public androidx.compose.animation.AnimatedContentTransitionScope.SlideDirection Up;
  }

  public final class AnimatedVisibilityKt {
    method @androidx.compose.runtime.Composable public static void AnimatedVisibility(androidx.compose.animation.core.MutableTransitionState<java.lang.Boolean> visibleState, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.animation.EnterTransition enter, optional androidx.compose.animation.ExitTransition exit, optional String label, kotlin.jvm.functions.Function1<? super androidx.compose.animation.AnimatedVisibilityScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void AnimatedVisibility(androidx.compose.animation.core.MutableTransitionState<java.lang.Boolean!>, androidx.compose.ui.Modifier?, androidx.compose.animation.EnterTransition?, androidx.compose.animation.ExitTransition?, String?, kotlin.jvm.functions.Function3<? super androidx.compose.animation.AnimatedVisibilityScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable public static <T> void AnimatedVisibility(androidx.compose.animation.core.Transition<T>, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> visible, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.animation.EnterTransition enter, optional androidx.compose.animation.ExitTransition exit, kotlin.jvm.functions.Function1<? super androidx.compose.animation.AnimatedVisibilityScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static <T> void AnimatedVisibility(androidx.compose.animation.core.Transition<T!>, kotlin.jvm.functions.Function1<? super T!,java.lang.Boolean!>, androidx.compose.ui.Modifier?, androidx.compose.animation.EnterTransition?, androidx.compose.animation.ExitTransition?, kotlin.jvm.functions.Function3<? super androidx.compose.animation.AnimatedVisibilityScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable public static void AnimatedVisibility(androidx.compose.foundation.layout.ColumnScope, androidx.compose.animation.core.MutableTransitionState<java.lang.Boolean> visibleState, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.animation.EnterTransition enter, optional androidx.compose.animation.ExitTransition exit, optional String label, kotlin.jvm.functions.Function1<? super androidx.compose.animation.AnimatedVisibilityScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void AnimatedVisibility(androidx.compose.foundation.layout.ColumnScope, androidx.compose.animation.core.MutableTransitionState<java.lang.Boolean!>, androidx.compose.ui.Modifier?, androidx.compose.animation.EnterTransition?, androidx.compose.animation.ExitTransition?, String?, kotlin.jvm.functions.Function3<? super androidx.compose.animation.AnimatedVisibilityScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable public static void AnimatedVisibility(androidx.compose.foundation.layout.ColumnScope, boolean visible, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.animation.EnterTransition enter, optional androidx.compose.animation.ExitTransition exit, optional String label, kotlin.jvm.functions.Function1<? super androidx.compose.animation.AnimatedVisibilityScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void AnimatedVisibility(androidx.compose.foundation.layout.ColumnScope, boolean, androidx.compose.ui.Modifier?, androidx.compose.animation.EnterTransition?, androidx.compose.animation.ExitTransition?, String?, kotlin.jvm.functions.Function3<? super androidx.compose.animation.AnimatedVisibilityScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable public static void AnimatedVisibility(androidx.compose.foundation.layout.RowScope, androidx.compose.animation.core.MutableTransitionState<java.lang.Boolean> visibleState, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.animation.EnterTransition enter, optional androidx.compose.animation.ExitTransition exit, optional String label, kotlin.jvm.functions.Function1<? super androidx.compose.animation.AnimatedVisibilityScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void AnimatedVisibility(androidx.compose.foundation.layout.RowScope, androidx.compose.animation.core.MutableTransitionState<java.lang.Boolean!>, androidx.compose.ui.Modifier?, androidx.compose.animation.EnterTransition?, androidx.compose.animation.ExitTransition?, String?, kotlin.jvm.functions.Function3<? super androidx.compose.animation.AnimatedVisibilityScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable public static void AnimatedVisibility(androidx.compose.foundation.layout.RowScope, boolean visible, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.animation.EnterTransition enter, optional androidx.compose.animation.ExitTransition exit, optional String label, kotlin.jvm.functions.Function1<? super androidx.compose.animation.AnimatedVisibilityScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void AnimatedVisibility(androidx.compose.foundation.layout.RowScope, boolean, androidx.compose.ui.Modifier?, androidx.compose.animation.EnterTransition?, androidx.compose.animation.ExitTransition?, String?, kotlin.jvm.functions.Function3<? super androidx.compose.animation.AnimatedVisibilityScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable public static void AnimatedVisibility(boolean visible, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.animation.EnterTransition enter, optional androidx.compose.animation.ExitTransition exit, optional String label, kotlin.jvm.functions.Function1<? super androidx.compose.animation.AnimatedVisibilityScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void AnimatedVisibility(boolean, androidx.compose.ui.Modifier?, androidx.compose.animation.EnterTransition?, androidx.compose.animation.ExitTransition?, String?, kotlin.jvm.functions.Function3<? super androidx.compose.animation.AnimatedVisibilityScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface AnimatedVisibilityScope {
    method public default androidx.compose.ui.Modifier animateEnterExit(androidx.compose.ui.Modifier, optional androidx.compose.animation.EnterTransition enter, optional androidx.compose.animation.ExitTransition exit, optional String label);
    method public androidx.compose.animation.core.Transition<androidx.compose.animation.EnterExitState> getTransition();
    property public abstract androidx.compose.animation.core.Transition<androidx.compose.animation.EnterExitState> transition;
  }

  public final class AnimationModifierKt {
    method public static androidx.compose.ui.Modifier animateContentSize(androidx.compose.ui.Modifier, optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntSize> animationSpec, optional androidx.compose.ui.Alignment alignment, optional kotlin.jvm.functions.Function2<? super androidx.compose.ui.unit.IntSize,? super androidx.compose.ui.unit.IntSize,kotlin.Unit>? finishedListener);
    method public static androidx.compose.ui.Modifier animateContentSize(androidx.compose.ui.Modifier, optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntSize> animationSpec, optional kotlin.jvm.functions.Function2<? super androidx.compose.ui.unit.IntSize,? super androidx.compose.ui.unit.IntSize,kotlin.Unit>? finishedListener);
  }

  @SuppressCompatibility @androidx.compose.animation.ExperimentalSharedTransitionApi public fun interface BoundsTransform {
    method public androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.geometry.Rect> transform(androidx.compose.ui.geometry.Rect initialBounds, androidx.compose.ui.geometry.Rect targetBounds);
  }

  public final class ColorVectorConverterKt {
    method public static kotlin.jvm.functions.Function1<androidx.compose.ui.graphics.colorspace.ColorSpace,androidx.compose.animation.core.TwoWayConverter<androidx.compose.ui.graphics.Color,androidx.compose.animation.core.AnimationVector4D>> getVectorConverter(androidx.compose.ui.graphics.Color.Companion);
    property public static kotlin.jvm.functions.Function1<androidx.compose.ui.graphics.colorspace.ColorSpace,androidx.compose.animation.core.TwoWayConverter<androidx.compose.ui.graphics.Color,androidx.compose.animation.core.AnimationVector4D>> androidx.compose.ui.graphics.Color.Companion.VectorConverter;
  }

  public final class ContentTransform {
    ctor public ContentTransform(androidx.compose.animation.EnterTransition targetContentEnter, androidx.compose.animation.ExitTransition initialContentExit, optional float targetContentZIndex, optional androidx.compose.animation.SizeTransform? sizeTransform);
    method public androidx.compose.animation.ExitTransition getInitialContentExit();
    method public androidx.compose.animation.SizeTransform? getSizeTransform();
    method public androidx.compose.animation.EnterTransition getTargetContentEnter();
    method public float getTargetContentZIndex();
    method public void setTargetContentZIndex(float);
    property public androidx.compose.animation.ExitTransition initialContentExit;
    property public androidx.compose.animation.SizeTransform? sizeTransform;
    property public androidx.compose.animation.EnterTransition targetContentEnter;
    property public float targetContentZIndex;
  }

  public final class CrossfadeKt {
    method @SuppressCompatibility @androidx.compose.animation.ExperimentalAnimationApi @androidx.compose.runtime.Composable public static <T> void Crossfade(androidx.compose.animation.core.Transition<T>, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> animationSpec, optional kotlin.jvm.functions.Function1<? super T,? extends java.lang.Object?> contentKey, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> content);
    method @BytecodeOnly @SuppressCompatibility @androidx.compose.animation.ExperimentalAnimationApi @androidx.compose.runtime.Composable public static <T> void Crossfade(androidx.compose.animation.core.Transition<T!>, androidx.compose.ui.Modifier?, androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float!>?, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function3<? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public static void Crossfade(Object!, androidx.compose.ui.Modifier!, androidx.compose.animation.core.FiniteAnimationSpec!, kotlin.jvm.functions.Function3!, androidx.compose.runtime.Composer!, int, int);
    method @androidx.compose.runtime.Composable public static <T> void Crossfade(T targetState, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> animationSpec, optional String label, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static <T> void Crossfade(T!, androidx.compose.ui.Modifier?, androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float!>?, String?, kotlin.jvm.functions.Function3<? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @Deprecated @androidx.compose.runtime.Composable public static <T> void Crossfade(T targetState, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> animationSpec, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> content);
  }

  public enum EnterExitState {
    enum_constant public static final androidx.compose.animation.EnterExitState PostExit;
    enum_constant public static final androidx.compose.animation.EnterExitState PreEnter;
    enum_constant public static final androidx.compose.animation.EnterExitState Visible;
  }

  public final class EnterExitTransitionKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.EnterTransition expandHorizontally(optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntSize> animationSpec, optional androidx.compose.ui.Alignment.Horizontal expandFrom, optional boolean clip, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,java.lang.Integer> initialWidth);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.EnterTransition expandIn(optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntSize> animationSpec, optional androidx.compose.ui.Alignment expandFrom, optional boolean clip, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.unit.IntSize,androidx.compose.ui.unit.IntSize> initialSize);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.EnterTransition expandVertically(optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntSize> animationSpec, optional androidx.compose.ui.Alignment.Vertical expandFrom, optional boolean clip, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,java.lang.Integer> initialHeight);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.EnterTransition fadeIn(optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> animationSpec, optional float initialAlpha);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.ExitTransition fadeOut(optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> animationSpec, optional float targetAlpha);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.EnterTransition scaleIn(optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> animationSpec, optional float initialScale, optional long transformOrigin);
    method @BytecodeOnly @androidx.compose.runtime.Stable public static androidx.compose.animation.EnterTransition scaleIn-L8ZKh-E(androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float!>, float, long);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.ExitTransition scaleOut(optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> animationSpec, optional float targetScale, optional long transformOrigin);
    method @BytecodeOnly @androidx.compose.runtime.Stable public static androidx.compose.animation.ExitTransition scaleOut-L8ZKh-E(androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float!>, float, long);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.ExitTransition shrinkHorizontally(optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntSize> animationSpec, optional androidx.compose.ui.Alignment.Horizontal shrinkTowards, optional boolean clip, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,java.lang.Integer> targetWidth);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.ExitTransition shrinkOut(optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntSize> animationSpec, optional androidx.compose.ui.Alignment shrinkTowards, optional boolean clip, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.unit.IntSize,androidx.compose.ui.unit.IntSize> targetSize);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.ExitTransition shrinkVertically(optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntSize> animationSpec, optional androidx.compose.ui.Alignment.Vertical shrinkTowards, optional boolean clip, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,java.lang.Integer> targetHeight);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.EnterTransition slideIn(optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset> animationSpec, kotlin.jvm.functions.Function1<? super androidx.compose.ui.unit.IntSize,androidx.compose.ui.unit.IntOffset> initialOffset);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.EnterTransition slideInHorizontally(optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset> animationSpec, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,java.lang.Integer> initialOffsetX);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.EnterTransition slideInVertically(optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset> animationSpec, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,java.lang.Integer> initialOffsetY);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.ExitTransition slideOut(optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset> animationSpec, kotlin.jvm.functions.Function1<? super androidx.compose.ui.unit.IntSize,androidx.compose.ui.unit.IntOffset> targetOffset);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.ExitTransition slideOutHorizontally(optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset> animationSpec, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,java.lang.Integer> targetOffsetX);
    method @androidx.compose.runtime.Stable public static androidx.compose.animation.ExitTransition slideOutVertically(optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset> animationSpec, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,java.lang.Integer> targetOffsetY);
  }

  @androidx.compose.runtime.Immutable public abstract sealed class EnterTransition {
    method @androidx.compose.runtime.Stable public final operator androidx.compose.animation.EnterTransition plus(androidx.compose.animation.EnterTransition enter);
    field public static final androidx.compose.animation.EnterTransition.Companion Companion;
  }

  public static final class EnterTransition.Companion {
    method public androidx.compose.animation.EnterTransition getNone();
    property public androidx.compose.animation.EnterTransition None;
  }

  @androidx.compose.runtime.Immutable public abstract sealed class ExitTransition {
    method @androidx.compose.runtime.Stable public final operator androidx.compose.animation.ExitTransition plus(androidx.compose.animation.ExitTransition exit);
    field public static final androidx.compose.animation.ExitTransition.Companion Companion;
  }

  public static final class ExitTransition.Companion {
    method public androidx.compose.animation.ExitTransition getNone();
    property public androidx.compose.animation.ExitTransition None;
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This is an experimental animation API.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.CLASS, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY, kotlin.annotation.AnnotationTarget.FIELD, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER}) public @interface ExperimentalAnimationApi {
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This is an experimental shared transition API.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.CLASS, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY, kotlin.annotation.AnnotationTarget.FIELD, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER}) public @interface ExperimentalSharedTransitionApi {
  }

  @SuppressCompatibility @androidx.compose.animation.ExperimentalSharedTransitionApi public final class SharedTransitionDefaults {
    method public androidx.compose.animation.BoundsTransform getBoundsTransform();
    method public kotlin.jvm.functions.Function1<androidx.compose.animation.SharedTransitionScope,java.lang.Boolean> getRenderInOverlay();
    property public androidx.compose.animation.BoundsTransform BoundsTransform;
    property public kotlin.jvm.functions.Function1<androidx.compose.animation.SharedTransitionScope,java.lang.Boolean> RenderInOverlay;
    field public static final androidx.compose.animation.SharedTransitionDefaults INSTANCE;
  }

  public static final class SharedTransitionDefaults.SharedContentConfig implements androidx.compose.animation.SharedTransitionScope.SharedContentConfig {
    field public static final androidx.compose.animation.SharedTransitionDefaults.SharedContentConfig INSTANCE;
  }

  @SuppressCompatibility @androidx.compose.animation.ExperimentalSharedTransitionApi @androidx.compose.runtime.Stable public interface SharedTransitionScope extends androidx.compose.ui.layout.LookaheadScope {
    method public androidx.compose.animation.SharedTransitionScope.OverlayClip OverlayClip(androidx.compose.ui.graphics.Shape clipShape);
    method public default androidx.compose.animation.SharedTransitionScope.SharedContentConfig SharedContentConfig();
    method public default androidx.compose.animation.SharedTransitionScope.SharedContentConfig SharedContentConfig(kotlin.jvm.functions.Function1<? super androidx.compose.animation.SharedTransitionScope.SharedContentState,java.lang.Boolean> isEnabled);
    method public boolean isTransitionActive();
    method @androidx.compose.runtime.Composable public default androidx.compose.animation.SharedTransitionScope.SharedContentState rememberSharedContentState(Object key, optional androidx.compose.animation.SharedTransitionScope.SharedContentConfig config);
    method @BytecodeOnly @androidx.compose.runtime.Composable public default androidx.compose.animation.SharedTransitionScope.SharedContentState rememberSharedContentState(Object, androidx.compose.animation.SharedTransitionScope.SharedContentConfig, androidx.compose.runtime.Composer?, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public default androidx.compose.animation.SharedTransitionScope.SharedContentState! rememberSharedContentState(Object!, androidx.compose.animation.SharedTransitionScope.SharedContentConfig!, androidx.compose.runtime.Composer!, int, int);
    method public androidx.compose.ui.Modifier renderInSharedTransitionScopeOverlay(androidx.compose.ui.Modifier, optional float zIndexInOverlay, optional kotlin.jvm.functions.Function1<? super androidx.compose.animation.SharedTransitionScope,java.lang.Boolean> renderInOverlay);
    method public androidx.compose.ui.Modifier sharedBounds(androidx.compose.ui.Modifier, androidx.compose.animation.SharedTransitionScope.SharedContentState sharedContentState, androidx.compose.animation.AnimatedVisibilityScope animatedVisibilityScope, optional androidx.compose.animation.EnterTransition enter, optional androidx.compose.animation.ExitTransition exit, optional androidx.compose.animation.BoundsTransform boundsTransform, optional androidx.compose.animation.SharedTransitionScope.ResizeMode resizeMode, optional androidx.compose.animation.SharedTransitionScope.PlaceHolderSize placeHolderSize, optional boolean renderInOverlayDuringTransition, optional float zIndexInOverlay, optional androidx.compose.animation.SharedTransitionScope.OverlayClip clipInOverlayDuringTransition);
    method public androidx.compose.ui.Modifier sharedElement(androidx.compose.ui.Modifier, androidx.compose.animation.SharedTransitionScope.SharedContentState sharedContentState, androidx.compose.animation.AnimatedVisibilityScope animatedVisibilityScope, optional androidx.compose.animation.BoundsTransform boundsTransform, optional androidx.compose.animation.SharedTransitionScope.PlaceHolderSize placeHolderSize, optional boolean renderInOverlayDuringTransition, optional float zIndexInOverlay, optional androidx.compose.animation.SharedTransitionScope.OverlayClip clipInOverlayDuringTransition);
    method public androidx.compose.ui.Modifier sharedElementWithCallerManagedVisibility(androidx.compose.ui.Modifier, androidx.compose.animation.SharedTransitionScope.SharedContentState sharedContentState, boolean visible, optional androidx.compose.animation.BoundsTransform boundsTransform, optional androidx.compose.animation.SharedTransitionScope.PlaceHolderSize placeHolderSize, optional boolean renderInOverlayDuringTransition, optional float zIndexInOverlay, optional androidx.compose.animation.SharedTransitionScope.OverlayClip clipInOverlayDuringTransition);
    method public default androidx.compose.ui.Modifier skipToLookaheadPosition(androidx.compose.ui.Modifier, optional kotlin.jvm.functions.Function0<java.lang.Boolean> isEnabled);
    method public androidx.compose.ui.Modifier skipToLookaheadSize(androidx.compose.ui.Modifier);
    property public abstract boolean isTransitionActive;
  }

  public static interface SharedTransitionScope.OverlayClip {
    method public androidx.compose.ui.graphics.Path? getClipPath(androidx.compose.animation.SharedTransitionScope.SharedContentState sharedContentState, androidx.compose.ui.geometry.Rect bounds, androidx.compose.ui.unit.LayoutDirection layoutDirection, androidx.compose.ui.unit.Density density);
  }

  public static fun interface SharedTransitionScope.PlaceHolderSize {
    method public long calculateSize(long contentSize, long animatedSize);
    method @BytecodeOnly public long calculateSize-JyjRU_E(long, long);
    field public static final androidx.compose.animation.SharedTransitionScope.PlaceHolderSize.Companion Companion;
  }

  public static final class SharedTransitionScope.PlaceHolderSize.Companion {
    method public androidx.compose.animation.SharedTransitionScope.PlaceHolderSize getAnimatedSize();
    method public androidx.compose.animation.SharedTransitionScope.PlaceHolderSize getContentSize();
    property public androidx.compose.animation.SharedTransitionScope.PlaceHolderSize animatedSize;
    property public androidx.compose.animation.SharedTransitionScope.PlaceHolderSize contentSize;
  }

  public static sealed interface SharedTransitionScope.ResizeMode {
    field public static final androidx.compose.animation.SharedTransitionScope.ResizeMode.Companion Companion;
  }

  public static final class SharedTransitionScope.ResizeMode.Companion {
    method @Deprecated public androidx.compose.animation.SharedTransitionScope.ResizeMode ScaleToBounds(optional androidx.compose.ui.layout.ContentScale contentScale, optional androidx.compose.ui.Alignment alignment);
    method public androidx.compose.animation.SharedTransitionScope.ResizeMode getRemeasureToBounds();
    method public androidx.compose.animation.SharedTransitionScope.ResizeMode scaleToBounds(optional androidx.compose.ui.layout.ContentScale contentScale, optional androidx.compose.ui.Alignment alignment);
    property public androidx.compose.animation.SharedTransitionScope.ResizeMode RemeasureToBounds;
  }

  public static interface SharedTransitionScope.SharedContentConfig {
    method public default androidx.compose.ui.geometry.Rect? alternativeTargetBoundsInTransitionScopeAfterRemoval(androidx.compose.animation.SharedTransitionScope.SharedContentState, androidx.compose.ui.geometry.Rect targetBoundsBeforeRemoval, long sharedTransitionLayoutSize);
    method @BytecodeOnly public default androidx.compose.ui.geometry.Rect? alternativeTargetBoundsInTransitionScopeAfterRemoval-cSwnlzA(androidx.compose.animation.SharedTransitionScope.SharedContentState, androidx.compose.ui.geometry.Rect, long);
    method public default boolean getShouldKeepEnabledForOngoingAnimation();
    method public default boolean isEnabled(androidx.compose.animation.SharedTransitionScope.SharedContentState);
    property public default boolean androidx.compose.animation.SharedTransitionScope.SharedContentState.isEnabled;
    property public default boolean shouldKeepEnabledForOngoingAnimation;
  }

  public static final class SharedTransitionScope.SharedContentState {
    method public androidx.compose.ui.graphics.Path? getClipPathInOverlay();
    method public Object getKey();
    method public androidx.compose.animation.SharedTransitionScope.SharedContentState? getParentSharedContentState();
    method public boolean isMatchFound();
    property public androidx.compose.ui.graphics.Path? clipPathInOverlay;
    property public boolean isMatchFound;
    property public Object key;
    property public androidx.compose.animation.SharedTransitionScope.SharedContentState? parentSharedContentState;
  }

  public final class SharedTransitionScopeKt {
    method @SuppressCompatibility @androidx.compose.animation.ExperimentalSharedTransitionApi @androidx.compose.runtime.Composable public static void SharedTransitionLayout(optional androidx.compose.ui.Modifier modifier, kotlin.jvm.functions.Function1<? super androidx.compose.animation.SharedTransitionScope,kotlin.Unit> content);
    method @BytecodeOnly @SuppressCompatibility @androidx.compose.animation.ExperimentalSharedTransitionApi @androidx.compose.runtime.Composable public static void SharedTransitionLayout(androidx.compose.ui.Modifier?, kotlin.jvm.functions.Function3<? super androidx.compose.animation.SharedTransitionScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @SuppressCompatibility @androidx.compose.animation.ExperimentalSharedTransitionApi @androidx.compose.runtime.Composable public static void SharedTransitionScope(kotlin.jvm.functions.Function2<? super androidx.compose.animation.SharedTransitionScope,? super androidx.compose.ui.Modifier,kotlin.Unit> content);
    method @BytecodeOnly @SuppressCompatibility @androidx.compose.animation.ExperimentalSharedTransitionApi @androidx.compose.runtime.Composable public static void SharedTransitionScope(kotlin.jvm.functions.Function4<? super androidx.compose.animation.SharedTransitionScope!,? super androidx.compose.ui.Modifier!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int);
  }

  public final class SingleValueAnimationKt {
    method @androidx.compose.runtime.annotation.RememberInComposition public static androidx.compose.animation.core.Animatable<androidx.compose.ui.graphics.Color,androidx.compose.animation.core.AnimationVector4D> Animatable(long initialValue);
    method @BytecodeOnly @androidx.compose.runtime.annotation.RememberInComposition public static androidx.compose.animation.core.Animatable<androidx.compose.ui.graphics.Color!,androidx.compose.animation.core.AnimationVector4D!> Animatable-8_81llA(long);
    method @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<androidx.compose.ui.graphics.Color> animateColorAsState(long targetValue, optional androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.graphics.Color> animationSpec, optional String label, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.Color,kotlin.Unit>? finishedListener);
    method @Deprecated @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<androidx.compose.ui.graphics.Color> animateColorAsState(long targetValue, optional androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.graphics.Color> animationSpec, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.Color,kotlin.Unit>? finishedListener);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public static androidx.compose.runtime.State! animateColorAsState-KTwxG1Y(long, androidx.compose.animation.core.AnimationSpec!, kotlin.jvm.functions.Function1!, androidx.compose.runtime.Composer!, int, int);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<androidx.compose.ui.graphics.Color!> animateColorAsState-euL9pac(long, androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.graphics.Color!>?, String?, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.Color!,kotlin.Unit!>?, androidx.compose.runtime.Composer?, int, int);
  }

  public interface SizeTransform {
    method public androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntSize> createAnimationSpec(long initialSize, long targetSize);
    method @BytecodeOnly public androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntSize!> createAnimationSpec-TemP2vQ(long, long);
    method public boolean getClip();
    property public abstract boolean clip;
  }

  public final class SplineBasedDecayKt {
    method public static <T> androidx.compose.animation.core.DecayAnimationSpec<T> splineBasedDecay(androidx.compose.ui.unit.Density density);
  }

  public final class SplineBasedFloatDecayAnimationSpec implements androidx.compose.animation.core.FloatDecayAnimationSpec {
    ctor public SplineBasedFloatDecayAnimationSpec(androidx.compose.ui.unit.Density density);
    method public float getAbsVelocityThreshold();
    method public long getDurationNanos(float initialValue, float initialVelocity);
    method public float getTargetValue(float initialValue, float initialVelocity);
    method public float getValueFromNanos(long playTimeNanos, float initialValue, float initialVelocity);
    method public float getVelocityFromNanos(long playTimeNanos, float initialValue, float initialVelocity);
    property public float absVelocityThreshold;
  }

  public final class SplineBasedFloatDecayAnimationSpec_androidKt {
    method @androidx.compose.runtime.Composable public static <T> androidx.compose.animation.core.DecayAnimationSpec<T> rememberSplineBasedDecay();
    method @BytecodeOnly @androidx.compose.runtime.Composable public static <T> androidx.compose.animation.core.DecayAnimationSpec<T!> rememberSplineBasedDecay(androidx.compose.runtime.Composer?, int);
    method @Deprecated public static <T> androidx.compose.animation.core.DecayAnimationSpec<T> splineBasedDecay(androidx.compose.ui.unit.Density density);
  }

  public final class TransitionKt {
    method @Deprecated @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<androidx.compose.ui.graphics.Color> animateColor(androidx.compose.animation.core.InfiniteTransition, long initialValue, long targetValue, androidx.compose.animation.core.InfiniteRepeatableSpec<androidx.compose.ui.graphics.Color> animationSpec);
    method @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<androidx.compose.ui.graphics.Color> animateColor(androidx.compose.animation.core.InfiniteTransition, long initialValue, long targetValue, androidx.compose.animation.core.InfiniteRepeatableSpec<androidx.compose.ui.graphics.Color> animationSpec, optional String label);
    method @androidx.compose.runtime.Composable public static inline <S> androidx.compose.runtime.State<androidx.compose.ui.graphics.Color> animateColor(androidx.compose.animation.core.Transition<S>, optional kotlin.jvm.functions.Function1<? super androidx.compose.animation.core.Transition.Segment<S>,? extends androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.graphics.Color>> transitionSpec, optional String label, kotlin.jvm.functions.Function1<? super S,androidx.compose.ui.graphics.Color> targetValueByState);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static <S> androidx.compose.runtime.State<androidx.compose.ui.graphics.Color!> animateColor(androidx.compose.animation.core.Transition<S!>, kotlin.jvm.functions.Function3<? super androidx.compose.animation.core.Transition.Segment<S!>!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,? extends androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.graphics.Color!>!>?, String?, kotlin.jvm.functions.Function3<? super S!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,androidx.compose.ui.graphics.Color!>, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<androidx.compose.ui.graphics.Color!> animateColor-DTcfvLk(androidx.compose.animation.core.InfiniteTransition, long, long, androidx.compose.animation.core.InfiniteRepeatableSpec<androidx.compose.ui.graphics.Color!>, String?, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public static androidx.compose.runtime.State! animateColor-RIQooxk(androidx.compose.animation.core.InfiniteTransition!, long, long, androidx.compose.animation.core.InfiniteRepeatableSpec!, androidx.compose.runtime.Composer!, int);
  }

}

