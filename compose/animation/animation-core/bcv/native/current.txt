// Klib ABI Dump
// Targets: [linuxX64.linuxx64Stubs]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <androidx.compose.animation:animation-core>
open annotation class androidx.compose.animation.core/ExperimentalAnimatableApi : kotlin/Annotation { // androidx.compose.animation.core/ExperimentalAnimatableApi|null[0]
    constructor <init>() // androidx.compose.animation.core/ExperimentalAnimatableApi.<init>|<init>(){}[0]
}

open annotation class androidx.compose.animation.core/ExperimentalAnimationSpecApi : kotlin/Annotation { // androidx.compose.animation.core/ExperimentalAnimationSpecApi|null[0]
    constructor <init>() // androidx.compose.animation.core/ExperimentalAnimationSpecApi.<init>|<init>(){}[0]
}

open annotation class androidx.compose.animation.core/ExperimentalTransitionApi : kotlin/Annotation { // androidx.compose.animation.core/ExperimentalTransitionApi|null[0]
    constructor <init>() // androidx.compose.animation.core/ExperimentalTransitionApi.<init>|<init>(){}[0]
}

open annotation class androidx.compose.animation.core/InternalAnimationApi : kotlin/Annotation { // androidx.compose.animation.core/InternalAnimationApi|null[0]
    constructor <init>() // androidx.compose.animation.core/InternalAnimationApi.<init>|<init>(){}[0]
}

final enum class androidx.compose.animation.core/AnimationEndReason : kotlin/Enum<androidx.compose.animation.core/AnimationEndReason> { // androidx.compose.animation.core/AnimationEndReason|null[0]
    enum entry BoundReached // androidx.compose.animation.core/AnimationEndReason.BoundReached|null[0]
    enum entry Finished // androidx.compose.animation.core/AnimationEndReason.Finished|null[0]

    final val entries // androidx.compose.animation.core/AnimationEndReason.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<androidx.compose.animation.core/AnimationEndReason> // androidx.compose.animation.core/AnimationEndReason.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): androidx.compose.animation.core/AnimationEndReason // androidx.compose.animation.core/AnimationEndReason.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<androidx.compose.animation.core/AnimationEndReason> // androidx.compose.animation.core/AnimationEndReason.values|values#static(){}[0]
}

final enum class androidx.compose.animation.core/RepeatMode : kotlin/Enum<androidx.compose.animation.core/RepeatMode> { // androidx.compose.animation.core/RepeatMode|null[0]
    enum entry Restart // androidx.compose.animation.core/RepeatMode.Restart|null[0]
    enum entry Reverse // androidx.compose.animation.core/RepeatMode.Reverse|null[0]

    final val entries // androidx.compose.animation.core/RepeatMode.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<androidx.compose.animation.core/RepeatMode> // androidx.compose.animation.core/RepeatMode.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): androidx.compose.animation.core/RepeatMode // androidx.compose.animation.core/RepeatMode.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<androidx.compose.animation.core/RepeatMode> // androidx.compose.animation.core/RepeatMode.values|values#static(){}[0]
}

abstract fun interface androidx.compose.animation.core/Easing { // androidx.compose.animation.core/Easing|null[0]
    abstract fun transform(kotlin/Float): kotlin/Float // androidx.compose.animation.core/Easing.transform|transform(kotlin.Float){}[0]
}

abstract interface <#A: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/VectorizedAnimationSpec { // androidx.compose.animation.core/VectorizedAnimationSpec|null[0]
    abstract val isInfinite // androidx.compose.animation.core/VectorizedAnimationSpec.isInfinite|{}isInfinite[0]
        abstract fun <get-isInfinite>(): kotlin/Boolean // androidx.compose.animation.core/VectorizedAnimationSpec.isInfinite.<get-isInfinite>|<get-isInfinite>(){}[0]

    abstract fun getDurationNanos(#A, #A, #A): kotlin/Long // androidx.compose.animation.core/VectorizedAnimationSpec.getDurationNanos|getDurationNanos(1:0;1:0;1:0){}[0]
    abstract fun getValueFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedAnimationSpec.getValueFromNanos|getValueFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
    abstract fun getVelocityFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedAnimationSpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
    open fun getEndVelocity(#A, #A, #A): #A // androidx.compose.animation.core/VectorizedAnimationSpec.getEndVelocity|getEndVelocity(1:0;1:0;1:0){}[0]
}

abstract interface <#A: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/VectorizedDecayAnimationSpec { // androidx.compose.animation.core/VectorizedDecayAnimationSpec|null[0]
    abstract val absVelocityThreshold // androidx.compose.animation.core/VectorizedDecayAnimationSpec.absVelocityThreshold|{}absVelocityThreshold[0]
        abstract fun <get-absVelocityThreshold>(): kotlin/Float // androidx.compose.animation.core/VectorizedDecayAnimationSpec.absVelocityThreshold.<get-absVelocityThreshold>|<get-absVelocityThreshold>(){}[0]

    abstract fun getDurationNanos(#A, #A): kotlin/Long // androidx.compose.animation.core/VectorizedDecayAnimationSpec.getDurationNanos|getDurationNanos(1:0;1:0){}[0]
    abstract fun getTargetValue(#A, #A): #A // androidx.compose.animation.core/VectorizedDecayAnimationSpec.getTargetValue|getTargetValue(1:0;1:0){}[0]
    abstract fun getValueFromNanos(kotlin/Long, #A, #A): #A // androidx.compose.animation.core/VectorizedDecayAnimationSpec.getValueFromNanos|getValueFromNanos(kotlin.Long;1:0;1:0){}[0]
    abstract fun getVelocityFromNanos(kotlin/Long, #A, #A): #A // androidx.compose.animation.core/VectorizedDecayAnimationSpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;1:0;1:0){}[0]
}

abstract interface <#A: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec : androidx.compose.animation.core/VectorizedFiniteAnimationSpec<#A> { // androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec|null[0]
    abstract val delayMillis // androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec.delayMillis|{}delayMillis[0]
        abstract fun <get-delayMillis>(): kotlin/Int // androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec.delayMillis.<get-delayMillis>|<get-delayMillis>(){}[0]
    abstract val durationMillis // androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec.durationMillis|{}durationMillis[0]
        abstract fun <get-durationMillis>(): kotlin/Int // androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec.durationMillis.<get-durationMillis>|<get-durationMillis>(){}[0]

    open fun getDurationNanos(#A, #A, #A): kotlin/Long // androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec.getDurationNanos|getDurationNanos(1:0;1:0;1:0){}[0]
}

abstract interface <#A: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/VectorizedFiniteAnimationSpec : androidx.compose.animation.core/VectorizedAnimationSpec<#A> { // androidx.compose.animation.core/VectorizedFiniteAnimationSpec|null[0]
    open val isInfinite // androidx.compose.animation.core/VectorizedFiniteAnimationSpec.isInfinite|{}isInfinite[0]
        open fun <get-isInfinite>(): kotlin/Boolean // androidx.compose.animation.core/VectorizedFiniteAnimationSpec.isInfinite.<get-isInfinite>|<get-isInfinite>(){}[0]
}

abstract interface <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/Animation { // androidx.compose.animation.core/Animation|null[0]
    abstract val durationNanos // androidx.compose.animation.core/Animation.durationNanos|{}durationNanos[0]
        abstract fun <get-durationNanos>(): kotlin/Long // androidx.compose.animation.core/Animation.durationNanos.<get-durationNanos>|<get-durationNanos>(){}[0]
    abstract val isInfinite // androidx.compose.animation.core/Animation.isInfinite|{}isInfinite[0]
        abstract fun <get-isInfinite>(): kotlin/Boolean // androidx.compose.animation.core/Animation.isInfinite.<get-isInfinite>|<get-isInfinite>(){}[0]
    abstract val targetValue // androidx.compose.animation.core/Animation.targetValue|{}targetValue[0]
        abstract fun <get-targetValue>(): #A // androidx.compose.animation.core/Animation.targetValue.<get-targetValue>|<get-targetValue>(){}[0]
    abstract val typeConverter // androidx.compose.animation.core/Animation.typeConverter|{}typeConverter[0]
        abstract fun <get-typeConverter>(): androidx.compose.animation.core/TwoWayConverter<#A, #B> // androidx.compose.animation.core/Animation.typeConverter.<get-typeConverter>|<get-typeConverter>(){}[0]

    abstract fun getValueFromNanos(kotlin/Long): #A // androidx.compose.animation.core/Animation.getValueFromNanos|getValueFromNanos(kotlin.Long){}[0]
    abstract fun getVelocityVectorFromNanos(kotlin/Long): #B // androidx.compose.animation.core/Animation.getVelocityVectorFromNanos|getVelocityVectorFromNanos(kotlin.Long){}[0]
    open fun isFinishedFromNanos(kotlin/Long): kotlin/Boolean // androidx.compose.animation.core/Animation.isFinishedFromNanos|isFinishedFromNanos(kotlin.Long){}[0]
}

abstract interface <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/TwoWayConverter { // androidx.compose.animation.core/TwoWayConverter|null[0]
    abstract val convertFromVector // androidx.compose.animation.core/TwoWayConverter.convertFromVector|{}convertFromVector[0]
        abstract fun <get-convertFromVector>(): kotlin/Function1<#B, #A> // androidx.compose.animation.core/TwoWayConverter.convertFromVector.<get-convertFromVector>|<get-convertFromVector>(){}[0]
    abstract val convertToVector // androidx.compose.animation.core/TwoWayConverter.convertToVector|{}convertToVector[0]
        abstract fun <get-convertToVector>(): kotlin/Function1<#A, #B> // androidx.compose.animation.core/TwoWayConverter.convertToVector.<get-convertToVector>|<get-convertToVector>(){}[0]
}

abstract interface <#A: kotlin/Any?> androidx.compose.animation.core/AnimationSpec { // androidx.compose.animation.core/AnimationSpec|null[0]
    abstract fun <#A1: androidx.compose.animation.core/AnimationVector> vectorize(androidx.compose.animation.core/TwoWayConverter<#A, #A1>): androidx.compose.animation.core/VectorizedAnimationSpec<#A1> // androidx.compose.animation.core/AnimationSpec.vectorize|vectorize(androidx.compose.animation.core.TwoWayConverter<1:0,0:0>){0§<androidx.compose.animation.core.AnimationVector>}[0]
}

abstract interface <#A: kotlin/Any?> androidx.compose.animation.core/DecayAnimationSpec { // androidx.compose.animation.core/DecayAnimationSpec|null[0]
    abstract fun <#A1: androidx.compose.animation.core/AnimationVector> vectorize(androidx.compose.animation.core/TwoWayConverter<#A, #A1>): androidx.compose.animation.core/VectorizedDecayAnimationSpec<#A1> // androidx.compose.animation.core/DecayAnimationSpec.vectorize|vectorize(androidx.compose.animation.core.TwoWayConverter<1:0,0:0>){0§<androidx.compose.animation.core.AnimationVector>}[0]
}

abstract interface <#A: kotlin/Any?> androidx.compose.animation.core/DurationBasedAnimationSpec : androidx.compose.animation.core/FiniteAnimationSpec<#A> { // androidx.compose.animation.core/DurationBasedAnimationSpec|null[0]
    abstract fun <#A1: androidx.compose.animation.core/AnimationVector> vectorize(androidx.compose.animation.core/TwoWayConverter<#A, #A1>): androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec<#A1> // androidx.compose.animation.core/DurationBasedAnimationSpec.vectorize|vectorize(androidx.compose.animation.core.TwoWayConverter<1:0,0:0>){0§<androidx.compose.animation.core.AnimationVector>}[0]
}

abstract interface <#A: kotlin/Any?> androidx.compose.animation.core/FiniteAnimationSpec : androidx.compose.animation.core/AnimationSpec<#A> { // androidx.compose.animation.core/FiniteAnimationSpec|null[0]
    abstract fun <#A1: androidx.compose.animation.core/AnimationVector> vectorize(androidx.compose.animation.core/TwoWayConverter<#A, #A1>): androidx.compose.animation.core/VectorizedFiniteAnimationSpec<#A1> // androidx.compose.animation.core/FiniteAnimationSpec.vectorize|vectorize(androidx.compose.animation.core.TwoWayConverter<1:0,0:0>){0§<androidx.compose.animation.core.AnimationVector>}[0]
}

abstract interface androidx.compose.animation.core/FloatAnimationSpec : androidx.compose.animation.core/AnimationSpec<kotlin/Float> { // androidx.compose.animation.core/FloatAnimationSpec|null[0]
    abstract fun getDurationNanos(kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Long // androidx.compose.animation.core/FloatAnimationSpec.getDurationNanos|getDurationNanos(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    abstract fun getValueFromNanos(kotlin/Long, kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatAnimationSpec.getValueFromNanos|getValueFromNanos(kotlin.Long;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    abstract fun getVelocityFromNanos(kotlin/Long, kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatAnimationSpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    open fun <#A1: androidx.compose.animation.core/AnimationVector> vectorize(androidx.compose.animation.core/TwoWayConverter<kotlin/Float, #A1>): androidx.compose.animation.core/VectorizedFloatAnimationSpec<#A1> // androidx.compose.animation.core/FloatAnimationSpec.vectorize|vectorize(androidx.compose.animation.core.TwoWayConverter<kotlin.Float,0:0>){0§<androidx.compose.animation.core.AnimationVector>}[0]
    open fun getEndVelocity(kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatAnimationSpec.getEndVelocity|getEndVelocity(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
}

abstract interface androidx.compose.animation.core/FloatDecayAnimationSpec { // androidx.compose.animation.core/FloatDecayAnimationSpec|null[0]
    abstract val absVelocityThreshold // androidx.compose.animation.core/FloatDecayAnimationSpec.absVelocityThreshold|{}absVelocityThreshold[0]
        abstract fun <get-absVelocityThreshold>(): kotlin/Float // androidx.compose.animation.core/FloatDecayAnimationSpec.absVelocityThreshold.<get-absVelocityThreshold>|<get-absVelocityThreshold>(){}[0]

    abstract fun getDurationNanos(kotlin/Float, kotlin/Float): kotlin/Long // androidx.compose.animation.core/FloatDecayAnimationSpec.getDurationNanos|getDurationNanos(kotlin.Float;kotlin.Float){}[0]
    abstract fun getTargetValue(kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatDecayAnimationSpec.getTargetValue|getTargetValue(kotlin.Float;kotlin.Float){}[0]
    abstract fun getValueFromNanos(kotlin/Long, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatDecayAnimationSpec.getValueFromNanos|getValueFromNanos(kotlin.Long;kotlin.Float;kotlin.Float){}[0]
    abstract fun getVelocityFromNanos(kotlin/Long, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatDecayAnimationSpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;kotlin.Float;kotlin.Float){}[0]
}

final class <#A: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/VectorizedFloatAnimationSpec : androidx.compose.animation.core/VectorizedFiniteAnimationSpec<#A> { // androidx.compose.animation.core/VectorizedFloatAnimationSpec|null[0]
    constructor <init>(androidx.compose.animation.core/FloatAnimationSpec) // androidx.compose.animation.core/VectorizedFloatAnimationSpec.<init>|<init>(androidx.compose.animation.core.FloatAnimationSpec){}[0]

    final fun getDurationNanos(#A, #A, #A): kotlin/Long // androidx.compose.animation.core/VectorizedFloatAnimationSpec.getDurationNanos|getDurationNanos(1:0;1:0;1:0){}[0]
    final fun getEndVelocity(#A, #A, #A): #A // androidx.compose.animation.core/VectorizedFloatAnimationSpec.getEndVelocity|getEndVelocity(1:0;1:0;1:0){}[0]
    final fun getValueFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedFloatAnimationSpec.getValueFromNanos|getValueFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
    final fun getVelocityFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedFloatAnimationSpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
}

final class <#A: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/VectorizedInfiniteRepeatableSpec : androidx.compose.animation.core/VectorizedAnimationSpec<#A> { // androidx.compose.animation.core/VectorizedInfiniteRepeatableSpec|null[0]
    constructor <init>(androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec<#A>, androidx.compose.animation.core/RepeatMode = ...) // androidx.compose.animation.core/VectorizedInfiniteRepeatableSpec.<init>|<init>(androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec<1:0>;androidx.compose.animation.core.RepeatMode){}[0]
    constructor <init>(androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec<#A>, androidx.compose.animation.core/RepeatMode = ..., androidx.compose.animation.core/StartOffset = ...) // androidx.compose.animation.core/VectorizedInfiniteRepeatableSpec.<init>|<init>(androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec<1:0>;androidx.compose.animation.core.RepeatMode;androidx.compose.animation.core.StartOffset){}[0]

    final val isInfinite // androidx.compose.animation.core/VectorizedInfiniteRepeatableSpec.isInfinite|{}isInfinite[0]
        final fun <get-isInfinite>(): kotlin/Boolean // androidx.compose.animation.core/VectorizedInfiniteRepeatableSpec.isInfinite.<get-isInfinite>|<get-isInfinite>(){}[0]

    final fun getDurationNanos(#A, #A, #A): kotlin/Long // androidx.compose.animation.core/VectorizedInfiniteRepeatableSpec.getDurationNanos|getDurationNanos(1:0;1:0;1:0){}[0]
    final fun getValueFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedInfiniteRepeatableSpec.getValueFromNanos|getValueFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
    final fun getVelocityFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedInfiniteRepeatableSpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
}

final class <#A: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/VectorizedKeyframesSpec : androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec<#A> { // androidx.compose.animation.core/VectorizedKeyframesSpec|null[0]
    constructor <init>(kotlin.collections/Map<kotlin/Int, kotlin/Pair<#A, androidx.compose.animation.core/Easing>>, kotlin/Int, kotlin/Int = ...) // androidx.compose.animation.core/VectorizedKeyframesSpec.<init>|<init>(kotlin.collections.Map<kotlin.Int,kotlin.Pair<1:0,androidx.compose.animation.core.Easing>>;kotlin.Int;kotlin.Int){}[0]

    final val delayMillis // androidx.compose.animation.core/VectorizedKeyframesSpec.delayMillis|{}delayMillis[0]
        final fun <get-delayMillis>(): kotlin/Int // androidx.compose.animation.core/VectorizedKeyframesSpec.delayMillis.<get-delayMillis>|<get-delayMillis>(){}[0]
    final val durationMillis // androidx.compose.animation.core/VectorizedKeyframesSpec.durationMillis|{}durationMillis[0]
        final fun <get-durationMillis>(): kotlin/Int // androidx.compose.animation.core/VectorizedKeyframesSpec.durationMillis.<get-durationMillis>|<get-durationMillis>(){}[0]

    final fun getValueFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedKeyframesSpec.getValueFromNanos|getValueFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
    final fun getVelocityFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedKeyframesSpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
}

final class <#A: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/VectorizedRepeatableSpec : androidx.compose.animation.core/VectorizedFiniteAnimationSpec<#A> { // androidx.compose.animation.core/VectorizedRepeatableSpec|null[0]
    constructor <init>(kotlin/Int, androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec<#A>, androidx.compose.animation.core/RepeatMode = ...) // androidx.compose.animation.core/VectorizedRepeatableSpec.<init>|<init>(kotlin.Int;androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec<1:0>;androidx.compose.animation.core.RepeatMode){}[0]
    constructor <init>(kotlin/Int, androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec<#A>, androidx.compose.animation.core/RepeatMode = ..., androidx.compose.animation.core/StartOffset = ...) // androidx.compose.animation.core/VectorizedRepeatableSpec.<init>|<init>(kotlin.Int;androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec<1:0>;androidx.compose.animation.core.RepeatMode;androidx.compose.animation.core.StartOffset){}[0]

    final fun getDurationNanos(#A, #A, #A): kotlin/Long // androidx.compose.animation.core/VectorizedRepeatableSpec.getDurationNanos|getDurationNanos(1:0;1:0;1:0){}[0]
    final fun getValueFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedRepeatableSpec.getValueFromNanos|getValueFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
    final fun getVelocityFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedRepeatableSpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
}

final class <#A: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/VectorizedSnapSpec : androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec<#A> { // androidx.compose.animation.core/VectorizedSnapSpec|null[0]
    constructor <init>(kotlin/Int = ...) // androidx.compose.animation.core/VectorizedSnapSpec.<init>|<init>(kotlin.Int){}[0]

    final val delayMillis // androidx.compose.animation.core/VectorizedSnapSpec.delayMillis|{}delayMillis[0]
        final fun <get-delayMillis>(): kotlin/Int // androidx.compose.animation.core/VectorizedSnapSpec.delayMillis.<get-delayMillis>|<get-delayMillis>(){}[0]
    final val durationMillis // androidx.compose.animation.core/VectorizedSnapSpec.durationMillis|{}durationMillis[0]
        final fun <get-durationMillis>(): kotlin/Int // androidx.compose.animation.core/VectorizedSnapSpec.durationMillis.<get-durationMillis>|<get-durationMillis>(){}[0]

    final fun getValueFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedSnapSpec.getValueFromNanos|getValueFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
    final fun getVelocityFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedSnapSpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
}

final class <#A: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/VectorizedSpringSpec : androidx.compose.animation.core/VectorizedFiniteAnimationSpec<#A> { // androidx.compose.animation.core/VectorizedSpringSpec|null[0]
    constructor <init>(kotlin/Float = ..., kotlin/Float = ..., #A? = ...) // androidx.compose.animation.core/VectorizedSpringSpec.<init>|<init>(kotlin.Float;kotlin.Float;1:0?){}[0]

    final val dampingRatio // androidx.compose.animation.core/VectorizedSpringSpec.dampingRatio|{}dampingRatio[0]
        final fun <get-dampingRatio>(): kotlin/Float // androidx.compose.animation.core/VectorizedSpringSpec.dampingRatio.<get-dampingRatio>|<get-dampingRatio>(){}[0]
    final val isInfinite // androidx.compose.animation.core/VectorizedSpringSpec.isInfinite|{}isInfinite[0]
        final fun <get-isInfinite>(): kotlin/Boolean // androidx.compose.animation.core/VectorizedSpringSpec.isInfinite.<get-isInfinite>|<get-isInfinite>(){}[0]
    final val stiffness // androidx.compose.animation.core/VectorizedSpringSpec.stiffness|{}stiffness[0]
        final fun <get-stiffness>(): kotlin/Float // androidx.compose.animation.core/VectorizedSpringSpec.stiffness.<get-stiffness>|<get-stiffness>(){}[0]

    final fun getDurationNanos(#A, #A, #A): kotlin/Long // androidx.compose.animation.core/VectorizedSpringSpec.getDurationNanos|getDurationNanos(1:0;1:0;1:0){}[0]
    final fun getEndVelocity(#A, #A, #A): #A // androidx.compose.animation.core/VectorizedSpringSpec.getEndVelocity|getEndVelocity(1:0;1:0;1:0){}[0]
    final fun getValueFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedSpringSpec.getValueFromNanos|getValueFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
    final fun getVelocityFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedSpringSpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
}

final class <#A: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/VectorizedTweenSpec : androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec<#A> { // androidx.compose.animation.core/VectorizedTweenSpec|null[0]
    constructor <init>(kotlin/Int = ..., kotlin/Int = ..., androidx.compose.animation.core/Easing = ...) // androidx.compose.animation.core/VectorizedTweenSpec.<init>|<init>(kotlin.Int;kotlin.Int;androidx.compose.animation.core.Easing){}[0]

    final val delayMillis // androidx.compose.animation.core/VectorizedTweenSpec.delayMillis|{}delayMillis[0]
        final fun <get-delayMillis>(): kotlin/Int // androidx.compose.animation.core/VectorizedTweenSpec.delayMillis.<get-delayMillis>|<get-delayMillis>(){}[0]
    final val durationMillis // androidx.compose.animation.core/VectorizedTweenSpec.durationMillis|{}durationMillis[0]
        final fun <get-durationMillis>(): kotlin/Int // androidx.compose.animation.core/VectorizedTweenSpec.durationMillis.<get-durationMillis>|<get-durationMillis>(){}[0]
    final val easing // androidx.compose.animation.core/VectorizedTweenSpec.easing|{}easing[0]
        final fun <get-easing>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/VectorizedTweenSpec.easing.<get-easing>|<get-easing>(){}[0]

    final fun getValueFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedTweenSpec.getValueFromNanos|getValueFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
    final fun getVelocityFromNanos(kotlin/Long, #A, #A, #A): #A // androidx.compose.animation.core/VectorizedTweenSpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;1:0;1:0;1:0){}[0]
}

final class <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/Animatable { // androidx.compose.animation.core/Animatable|null[0]
    constructor <init>(#A, androidx.compose.animation.core/TwoWayConverter<#A, #B>, #A? = ...) // androidx.compose.animation.core/Animatable.<init>|<init>(1:0;androidx.compose.animation.core.TwoWayConverter<1:0,1:1>;1:0?){}[0]
    constructor <init>(#A, androidx.compose.animation.core/TwoWayConverter<#A, #B>, #A? = ..., kotlin/String = ...) // androidx.compose.animation.core/Animatable.<init>|<init>(1:0;androidx.compose.animation.core.TwoWayConverter<1:0,1:1>;1:0?;kotlin.String){}[0]

    final val label // androidx.compose.animation.core/Animatable.label|{}label[0]
        final fun <get-label>(): kotlin/String // androidx.compose.animation.core/Animatable.label.<get-label>|<get-label>(){}[0]
    final val typeConverter // androidx.compose.animation.core/Animatable.typeConverter|{}typeConverter[0]
        final fun <get-typeConverter>(): androidx.compose.animation.core/TwoWayConverter<#A, #B> // androidx.compose.animation.core/Animatable.typeConverter.<get-typeConverter>|<get-typeConverter>(){}[0]
    final val value // androidx.compose.animation.core/Animatable.value|{}value[0]
        final fun <get-value>(): #A // androidx.compose.animation.core/Animatable.value.<get-value>|<get-value>(){}[0]
    final val velocity // androidx.compose.animation.core/Animatable.velocity|{}velocity[0]
        final fun <get-velocity>(): #A // androidx.compose.animation.core/Animatable.velocity.<get-velocity>|<get-velocity>(){}[0]
    final val velocityVector // androidx.compose.animation.core/Animatable.velocityVector|{}velocityVector[0]
        final fun <get-velocityVector>(): #B // androidx.compose.animation.core/Animatable.velocityVector.<get-velocityVector>|<get-velocityVector>(){}[0]

    final var isRunning // androidx.compose.animation.core/Animatable.isRunning|{}isRunning[0]
        final fun <get-isRunning>(): kotlin/Boolean // androidx.compose.animation.core/Animatable.isRunning.<get-isRunning>|<get-isRunning>(){}[0]
    final var lowerBound // androidx.compose.animation.core/Animatable.lowerBound|{}lowerBound[0]
        final fun <get-lowerBound>(): #A? // androidx.compose.animation.core/Animatable.lowerBound.<get-lowerBound>|<get-lowerBound>(){}[0]
    final var targetValue // androidx.compose.animation.core/Animatable.targetValue|{}targetValue[0]
        final fun <get-targetValue>(): #A // androidx.compose.animation.core/Animatable.targetValue.<get-targetValue>|<get-targetValue>(){}[0]
    final var upperBound // androidx.compose.animation.core/Animatable.upperBound|{}upperBound[0]
        final fun <get-upperBound>(): #A? // androidx.compose.animation.core/Animatable.upperBound.<get-upperBound>|<get-upperBound>(){}[0]

    final fun asState(): androidx.compose.runtime/State<#A> // androidx.compose.animation.core/Animatable.asState|asState(){}[0]
    final fun updateBounds(#A? = ..., #A? = ...) // androidx.compose.animation.core/Animatable.updateBounds|updateBounds(1:0?;1:0?){}[0]
    final suspend fun animateDecay(#A, androidx.compose.animation.core/DecayAnimationSpec<#A>, kotlin/Function1<androidx.compose.animation.core/Animatable<#A, #B>, kotlin/Unit>? = ...): androidx.compose.animation.core/AnimationResult<#A, #B> // androidx.compose.animation.core/Animatable.animateDecay|animateDecay(1:0;androidx.compose.animation.core.DecayAnimationSpec<1:0>;kotlin.Function1<androidx.compose.animation.core.Animatable<1:0,1:1>,kotlin.Unit>?){}[0]
    final suspend fun animateTo(#A, androidx.compose.animation.core/AnimationSpec<#A> = ..., #A = ..., kotlin/Function1<androidx.compose.animation.core/Animatable<#A, #B>, kotlin/Unit>? = ...): androidx.compose.animation.core/AnimationResult<#A, #B> // androidx.compose.animation.core/Animatable.animateTo|animateTo(1:0;androidx.compose.animation.core.AnimationSpec<1:0>;1:0;kotlin.Function1<androidx.compose.animation.core.Animatable<1:0,1:1>,kotlin.Unit>?){}[0]
    final suspend fun snapTo(#A) // androidx.compose.animation.core/Animatable.snapTo|snapTo(1:0){}[0]
    final suspend fun stop() // androidx.compose.animation.core/Animatable.stop|stop(){}[0]
}

final class <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/AnimationResult { // androidx.compose.animation.core/AnimationResult|null[0]
    constructor <init>(androidx.compose.animation.core/AnimationState<#A, #B>, androidx.compose.animation.core/AnimationEndReason) // androidx.compose.animation.core/AnimationResult.<init>|<init>(androidx.compose.animation.core.AnimationState<1:0,1:1>;androidx.compose.animation.core.AnimationEndReason){}[0]

    final val endReason // androidx.compose.animation.core/AnimationResult.endReason|{}endReason[0]
        final fun <get-endReason>(): androidx.compose.animation.core/AnimationEndReason // androidx.compose.animation.core/AnimationResult.endReason.<get-endReason>|<get-endReason>(){}[0]
    final val endState // androidx.compose.animation.core/AnimationResult.endState|{}endState[0]
        final fun <get-endState>(): androidx.compose.animation.core/AnimationState<#A, #B> // androidx.compose.animation.core/AnimationResult.endState.<get-endState>|<get-endState>(){}[0]

    final fun toString(): kotlin/String // androidx.compose.animation.core/AnimationResult.toString|toString(){}[0]
}

final class <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/AnimationScope { // androidx.compose.animation.core/AnimationScope|null[0]
    final val startTimeNanos // androidx.compose.animation.core/AnimationScope.startTimeNanos|{}startTimeNanos[0]
        final fun <get-startTimeNanos>(): kotlin/Long // androidx.compose.animation.core/AnimationScope.startTimeNanos.<get-startTimeNanos>|<get-startTimeNanos>(){}[0]
    final val targetValue // androidx.compose.animation.core/AnimationScope.targetValue|{}targetValue[0]
        final fun <get-targetValue>(): #A // androidx.compose.animation.core/AnimationScope.targetValue.<get-targetValue>|<get-targetValue>(){}[0]
    final val typeConverter // androidx.compose.animation.core/AnimationScope.typeConverter|{}typeConverter[0]
        final fun <get-typeConverter>(): androidx.compose.animation.core/TwoWayConverter<#A, #B> // androidx.compose.animation.core/AnimationScope.typeConverter.<get-typeConverter>|<get-typeConverter>(){}[0]
    final val velocity // androidx.compose.animation.core/AnimationScope.velocity|{}velocity[0]
        final fun <get-velocity>(): #A // androidx.compose.animation.core/AnimationScope.velocity.<get-velocity>|<get-velocity>(){}[0]

    final var finishedTimeNanos // androidx.compose.animation.core/AnimationScope.finishedTimeNanos|{}finishedTimeNanos[0]
        final fun <get-finishedTimeNanos>(): kotlin/Long // androidx.compose.animation.core/AnimationScope.finishedTimeNanos.<get-finishedTimeNanos>|<get-finishedTimeNanos>(){}[0]
    final var isRunning // androidx.compose.animation.core/AnimationScope.isRunning|{}isRunning[0]
        final fun <get-isRunning>(): kotlin/Boolean // androidx.compose.animation.core/AnimationScope.isRunning.<get-isRunning>|<get-isRunning>(){}[0]
    final var lastFrameTimeNanos // androidx.compose.animation.core/AnimationScope.lastFrameTimeNanos|{}lastFrameTimeNanos[0]
        final fun <get-lastFrameTimeNanos>(): kotlin/Long // androidx.compose.animation.core/AnimationScope.lastFrameTimeNanos.<get-lastFrameTimeNanos>|<get-lastFrameTimeNanos>(){}[0]
    final var value // androidx.compose.animation.core/AnimationScope.value|{}value[0]
        final fun <get-value>(): #A // androidx.compose.animation.core/AnimationScope.value.<get-value>|<get-value>(){}[0]
    final var velocityVector // androidx.compose.animation.core/AnimationScope.velocityVector|{}velocityVector[0]
        final fun <get-velocityVector>(): #B // androidx.compose.animation.core/AnimationScope.velocityVector.<get-velocityVector>|<get-velocityVector>(){}[0]

    final fun cancelAnimation() // androidx.compose.animation.core/AnimationScope.cancelAnimation|cancelAnimation(){}[0]
    final fun toAnimationState(): androidx.compose.animation.core/AnimationState<#A, #B> // androidx.compose.animation.core/AnimationScope.toAnimationState|toAnimationState(){}[0]
}

final class <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/AnimationState : androidx.compose.runtime/State<#A> { // androidx.compose.animation.core/AnimationState|null[0]
    constructor <init>(androidx.compose.animation.core/TwoWayConverter<#A, #B>, #A, #B? = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Boolean = ...) // androidx.compose.animation.core/AnimationState.<init>|<init>(androidx.compose.animation.core.TwoWayConverter<1:0,1:1>;1:0;1:1?;kotlin.Long;kotlin.Long;kotlin.Boolean){}[0]

    final val typeConverter // androidx.compose.animation.core/AnimationState.typeConverter|{}typeConverter[0]
        final fun <get-typeConverter>(): androidx.compose.animation.core/TwoWayConverter<#A, #B> // androidx.compose.animation.core/AnimationState.typeConverter.<get-typeConverter>|<get-typeConverter>(){}[0]
    final val velocity // androidx.compose.animation.core/AnimationState.velocity|{}velocity[0]
        final fun <get-velocity>(): #A // androidx.compose.animation.core/AnimationState.velocity.<get-velocity>|<get-velocity>(){}[0]

    final var finishedTimeNanos // androidx.compose.animation.core/AnimationState.finishedTimeNanos|{}finishedTimeNanos[0]
        final fun <get-finishedTimeNanos>(): kotlin/Long // androidx.compose.animation.core/AnimationState.finishedTimeNanos.<get-finishedTimeNanos>|<get-finishedTimeNanos>(){}[0]
    final var isRunning // androidx.compose.animation.core/AnimationState.isRunning|{}isRunning[0]
        final fun <get-isRunning>(): kotlin/Boolean // androidx.compose.animation.core/AnimationState.isRunning.<get-isRunning>|<get-isRunning>(){}[0]
    final var lastFrameTimeNanos // androidx.compose.animation.core/AnimationState.lastFrameTimeNanos|{}lastFrameTimeNanos[0]
        final fun <get-lastFrameTimeNanos>(): kotlin/Long // androidx.compose.animation.core/AnimationState.lastFrameTimeNanos.<get-lastFrameTimeNanos>|<get-lastFrameTimeNanos>(){}[0]
    final var value // androidx.compose.animation.core/AnimationState.value|{}value[0]
        final fun <get-value>(): #A // androidx.compose.animation.core/AnimationState.value.<get-value>|<get-value>(){}[0]
    final var velocityVector // androidx.compose.animation.core/AnimationState.velocityVector|{}velocityVector[0]
        final fun <get-velocityVector>(): #B // androidx.compose.animation.core/AnimationState.velocityVector.<get-velocityVector>|<get-velocityVector>(){}[0]

    final fun toString(): kotlin/String // androidx.compose.animation.core/AnimationState.toString|toString(){}[0]
}

final class <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/DecayAnimation : androidx.compose.animation.core/Animation<#A, #B> { // androidx.compose.animation.core/DecayAnimation|null[0]
    constructor <init>(androidx.compose.animation.core/DecayAnimationSpec<#A>, androidx.compose.animation.core/TwoWayConverter<#A, #B>, #A, #A) // androidx.compose.animation.core/DecayAnimation.<init>|<init>(androidx.compose.animation.core.DecayAnimationSpec<1:0>;androidx.compose.animation.core.TwoWayConverter<1:0,1:1>;1:0;1:0){}[0]
    constructor <init>(androidx.compose.animation.core/DecayAnimationSpec<#A>, androidx.compose.animation.core/TwoWayConverter<#A, #B>, #A, #B) // androidx.compose.animation.core/DecayAnimation.<init>|<init>(androidx.compose.animation.core.DecayAnimationSpec<1:0>;androidx.compose.animation.core.TwoWayConverter<1:0,1:1>;1:0;1:1){}[0]
    constructor <init>(androidx.compose.animation.core/VectorizedDecayAnimationSpec<#B>, androidx.compose.animation.core/TwoWayConverter<#A, #B>, #A, #B) // androidx.compose.animation.core/DecayAnimation.<init>|<init>(androidx.compose.animation.core.VectorizedDecayAnimationSpec<1:1>;androidx.compose.animation.core.TwoWayConverter<1:0,1:1>;1:0;1:1){}[0]

    final val durationNanos // androidx.compose.animation.core/DecayAnimation.durationNanos|{}durationNanos[0]
        final fun <get-durationNanos>(): kotlin/Long // androidx.compose.animation.core/DecayAnimation.durationNanos.<get-durationNanos>|<get-durationNanos>(){}[0]
    final val initialValue // androidx.compose.animation.core/DecayAnimation.initialValue|{}initialValue[0]
        final fun <get-initialValue>(): #A // androidx.compose.animation.core/DecayAnimation.initialValue.<get-initialValue>|<get-initialValue>(){}[0]
    final val initialVelocityVector // androidx.compose.animation.core/DecayAnimation.initialVelocityVector|{}initialVelocityVector[0]
        final fun <get-initialVelocityVector>(): #B // androidx.compose.animation.core/DecayAnimation.initialVelocityVector.<get-initialVelocityVector>|<get-initialVelocityVector>(){}[0]
    final val isInfinite // androidx.compose.animation.core/DecayAnimation.isInfinite|{}isInfinite[0]
        final fun <get-isInfinite>(): kotlin/Boolean // androidx.compose.animation.core/DecayAnimation.isInfinite.<get-isInfinite>|<get-isInfinite>(){}[0]
    final val targetValue // androidx.compose.animation.core/DecayAnimation.targetValue|{}targetValue[0]
        final fun <get-targetValue>(): #A // androidx.compose.animation.core/DecayAnimation.targetValue.<get-targetValue>|<get-targetValue>(){}[0]
    final val typeConverter // androidx.compose.animation.core/DecayAnimation.typeConverter|{}typeConverter[0]
        final fun <get-typeConverter>(): androidx.compose.animation.core/TwoWayConverter<#A, #B> // androidx.compose.animation.core/DecayAnimation.typeConverter.<get-typeConverter>|<get-typeConverter>(){}[0]

    final fun getValueFromNanos(kotlin/Long): #A // androidx.compose.animation.core/DecayAnimation.getValueFromNanos|getValueFromNanos(kotlin.Long){}[0]
    final fun getVelocityVectorFromNanos(kotlin/Long): #B // androidx.compose.animation.core/DecayAnimation.getVelocityVectorFromNanos|getVelocityVectorFromNanos(kotlin.Long){}[0]
}

final class <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/TargetBasedAnimation : androidx.compose.animation.core/Animation<#A, #B> { // androidx.compose.animation.core/TargetBasedAnimation|null[0]
    constructor <init>(androidx.compose.animation.core/AnimationSpec<#A>, androidx.compose.animation.core/TwoWayConverter<#A, #B>, #A, #A, #B? = ...) // androidx.compose.animation.core/TargetBasedAnimation.<init>|<init>(androidx.compose.animation.core.AnimationSpec<1:0>;androidx.compose.animation.core.TwoWayConverter<1:0,1:1>;1:0;1:0;1:1?){}[0]

    final val durationNanos // androidx.compose.animation.core/TargetBasedAnimation.durationNanos|{}durationNanos[0]
        final fun <get-durationNanos>(): kotlin/Long // androidx.compose.animation.core/TargetBasedAnimation.durationNanos.<get-durationNanos>|<get-durationNanos>(){}[0]
    final val initialValue // androidx.compose.animation.core/TargetBasedAnimation.initialValue|{}initialValue[0]
        final fun <get-initialValue>(): #A // androidx.compose.animation.core/TargetBasedAnimation.initialValue.<get-initialValue>|<get-initialValue>(){}[0]
    final val isInfinite // androidx.compose.animation.core/TargetBasedAnimation.isInfinite|{}isInfinite[0]
        final fun <get-isInfinite>(): kotlin/Boolean // androidx.compose.animation.core/TargetBasedAnimation.isInfinite.<get-isInfinite>|<get-isInfinite>(){}[0]
    final val targetValue // androidx.compose.animation.core/TargetBasedAnimation.targetValue|{}targetValue[0]
        final fun <get-targetValue>(): #A // androidx.compose.animation.core/TargetBasedAnimation.targetValue.<get-targetValue>|<get-targetValue>(){}[0]
    final val typeConverter // androidx.compose.animation.core/TargetBasedAnimation.typeConverter|{}typeConverter[0]
        final fun <get-typeConverter>(): androidx.compose.animation.core/TwoWayConverter<#A, #B> // androidx.compose.animation.core/TargetBasedAnimation.typeConverter.<get-typeConverter>|<get-typeConverter>(){}[0]

    final fun getValueFromNanos(kotlin/Long): #A // androidx.compose.animation.core/TargetBasedAnimation.getValueFromNanos|getValueFromNanos(kotlin.Long){}[0]
    final fun getVelocityVectorFromNanos(kotlin/Long): #B // androidx.compose.animation.core/TargetBasedAnimation.getVelocityVectorFromNanos|getVelocityVectorFromNanos(kotlin.Long){}[0]
    final fun toString(): kotlin/String // androidx.compose.animation.core/TargetBasedAnimation.toString|toString(){}[0]
}

final class <#A: kotlin/Any?> androidx.compose.animation.core/InfiniteRepeatableSpec : androidx.compose.animation.core/AnimationSpec<#A> { // androidx.compose.animation.core/InfiniteRepeatableSpec|null[0]
    constructor <init>(androidx.compose.animation.core/DurationBasedAnimationSpec<#A>, androidx.compose.animation.core/RepeatMode = ...) // androidx.compose.animation.core/InfiniteRepeatableSpec.<init>|<init>(androidx.compose.animation.core.DurationBasedAnimationSpec<1:0>;androidx.compose.animation.core.RepeatMode){}[0]
    constructor <init>(androidx.compose.animation.core/DurationBasedAnimationSpec<#A>, androidx.compose.animation.core/RepeatMode = ..., androidx.compose.animation.core/StartOffset = ...) // androidx.compose.animation.core/InfiniteRepeatableSpec.<init>|<init>(androidx.compose.animation.core.DurationBasedAnimationSpec<1:0>;androidx.compose.animation.core.RepeatMode;androidx.compose.animation.core.StartOffset){}[0]

    final val animation // androidx.compose.animation.core/InfiniteRepeatableSpec.animation|{}animation[0]
        final fun <get-animation>(): androidx.compose.animation.core/DurationBasedAnimationSpec<#A> // androidx.compose.animation.core/InfiniteRepeatableSpec.animation.<get-animation>|<get-animation>(){}[0]
    final val initialStartOffset // androidx.compose.animation.core/InfiniteRepeatableSpec.initialStartOffset|{}initialStartOffset[0]
        final fun <get-initialStartOffset>(): androidx.compose.animation.core/StartOffset // androidx.compose.animation.core/InfiniteRepeatableSpec.initialStartOffset.<get-initialStartOffset>|<get-initialStartOffset>(){}[0]
    final val repeatMode // androidx.compose.animation.core/InfiniteRepeatableSpec.repeatMode|{}repeatMode[0]
        final fun <get-repeatMode>(): androidx.compose.animation.core/RepeatMode // androidx.compose.animation.core/InfiniteRepeatableSpec.repeatMode.<get-repeatMode>|<get-repeatMode>(){}[0]

    final fun <#A1: androidx.compose.animation.core/AnimationVector> vectorize(androidx.compose.animation.core/TwoWayConverter<#A, #A1>): androidx.compose.animation.core/VectorizedAnimationSpec<#A1> // androidx.compose.animation.core/InfiniteRepeatableSpec.vectorize|vectorize(androidx.compose.animation.core.TwoWayConverter<1:0,0:0>){0§<androidx.compose.animation.core.AnimationVector>}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/InfiniteRepeatableSpec.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.animation.core/InfiniteRepeatableSpec.hashCode|hashCode(){}[0]
}

final class <#A: kotlin/Any?> androidx.compose.animation.core/KeyframesSpec : androidx.compose.animation.core/DurationBasedAnimationSpec<#A> { // androidx.compose.animation.core/KeyframesSpec|null[0]
    constructor <init>(androidx.compose.animation.core/KeyframesSpec.KeyframesSpecConfig<#A>) // androidx.compose.animation.core/KeyframesSpec.<init>|<init>(androidx.compose.animation.core.KeyframesSpec.KeyframesSpecConfig<1:0>){}[0]

    final val config // androidx.compose.animation.core/KeyframesSpec.config|{}config[0]
        final fun <get-config>(): androidx.compose.animation.core/KeyframesSpec.KeyframesSpecConfig<#A> // androidx.compose.animation.core/KeyframesSpec.config.<get-config>|<get-config>(){}[0]

    final fun <#A1: androidx.compose.animation.core/AnimationVector> vectorize(androidx.compose.animation.core/TwoWayConverter<#A, #A1>): androidx.compose.animation.core/VectorizedKeyframesSpec<#A1> // androidx.compose.animation.core/KeyframesSpec.vectorize|vectorize(androidx.compose.animation.core.TwoWayConverter<1:0,0:0>){0§<androidx.compose.animation.core.AnimationVector>}[0]

    final class <#A1: kotlin/Any?> KeyframeEntity : androidx.compose.animation.core/KeyframeBaseEntity<#A1> { // androidx.compose.animation.core/KeyframesSpec.KeyframeEntity|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/KeyframesSpec.KeyframeEntity.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.compose.animation.core/KeyframesSpec.KeyframeEntity.hashCode|hashCode(){}[0]
    }

    final class <#A1: kotlin/Any?> KeyframesSpecConfig : androidx.compose.animation.core/KeyframesSpecBaseConfig<#A1, androidx.compose.animation.core/KeyframesSpec.KeyframeEntity<#A1>> { // androidx.compose.animation.core/KeyframesSpec.KeyframesSpecConfig|null[0]
        constructor <init>() // androidx.compose.animation.core/KeyframesSpec.KeyframesSpecConfig.<init>|<init>(){}[0]

        final fun (#A1).at(kotlin/Int): androidx.compose.animation.core/KeyframesSpec.KeyframeEntity<#A1> // androidx.compose.animation.core/KeyframesSpec.KeyframesSpecConfig.at|at@1:0(kotlin.Int){}[0]
        final fun (#A1).atFraction(kotlin/Float): androidx.compose.animation.core/KeyframesSpec.KeyframeEntity<#A1> // androidx.compose.animation.core/KeyframesSpec.KeyframesSpecConfig.atFraction|atFraction@1:0(kotlin.Float){}[0]
        final fun (androidx.compose.animation.core/KeyframesSpec.KeyframeEntity<#A1>).using(androidx.compose.animation.core/ArcMode): androidx.compose.animation.core/KeyframesSpec.KeyframeEntity<#A1> // androidx.compose.animation.core/KeyframesSpec.KeyframesSpecConfig.using|using@androidx.compose.animation.core.KeyframesSpec.KeyframeEntity<1:0>(androidx.compose.animation.core.ArcMode){}[0]
        final fun (androidx.compose.animation.core/KeyframesSpec.KeyframeEntity<#A1>).with(androidx.compose.animation.core/Easing) // androidx.compose.animation.core/KeyframesSpec.KeyframesSpecConfig.with|with@androidx.compose.animation.core.KeyframesSpec.KeyframeEntity<1:0>(androidx.compose.animation.core.Easing){}[0]
    }
}

final class <#A: kotlin/Any?> androidx.compose.animation.core/KeyframesWithSplineSpec : androidx.compose.animation.core/DurationBasedAnimationSpec<#A> { // androidx.compose.animation.core/KeyframesWithSplineSpec|null[0]
    constructor <init>(androidx.compose.animation.core/KeyframesWithSplineSpec.KeyframesWithSplineSpecConfig<#A>) // androidx.compose.animation.core/KeyframesWithSplineSpec.<init>|<init>(androidx.compose.animation.core.KeyframesWithSplineSpec.KeyframesWithSplineSpecConfig<1:0>){}[0]
    constructor <init>(androidx.compose.animation.core/KeyframesWithSplineSpec.KeyframesWithSplineSpecConfig<#A>, kotlin/Float) // androidx.compose.animation.core/KeyframesWithSplineSpec.<init>|<init>(androidx.compose.animation.core.KeyframesWithSplineSpec.KeyframesWithSplineSpecConfig<1:0>;kotlin.Float){}[0]

    final val config // androidx.compose.animation.core/KeyframesWithSplineSpec.config|{}config[0]
        final fun <get-config>(): androidx.compose.animation.core/KeyframesWithSplineSpec.KeyframesWithSplineSpecConfig<#A> // androidx.compose.animation.core/KeyframesWithSplineSpec.config.<get-config>|<get-config>(){}[0]

    final fun <#A1: androidx.compose.animation.core/AnimationVector> vectorize(androidx.compose.animation.core/TwoWayConverter<#A, #A1>): androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec<#A1> // androidx.compose.animation.core/KeyframesWithSplineSpec.vectorize|vectorize(androidx.compose.animation.core.TwoWayConverter<1:0,0:0>){0§<androidx.compose.animation.core.AnimationVector>}[0]

    final class <#A1: kotlin/Any?> KeyframesWithSplineSpecConfig : androidx.compose.animation.core/KeyframesSpecBaseConfig<#A1, androidx.compose.animation.core/KeyframesSpec.KeyframeEntity<#A1>> { // androidx.compose.animation.core/KeyframesWithSplineSpec.KeyframesWithSplineSpecConfig|null[0]
        constructor <init>() // androidx.compose.animation.core/KeyframesWithSplineSpec.KeyframesWithSplineSpecConfig.<init>|<init>(){}[0]
    }
}

final class <#A: kotlin/Any?> androidx.compose.animation.core/MutableTransitionState : androidx.compose.animation.core/TransitionState<#A> { // androidx.compose.animation.core/MutableTransitionState|null[0]
    constructor <init>(#A) // androidx.compose.animation.core/MutableTransitionState.<init>|<init>(1:0){}[0]

    final val isIdle // androidx.compose.animation.core/MutableTransitionState.isIdle|{}isIdle[0]
        final fun <get-isIdle>(): kotlin/Boolean // androidx.compose.animation.core/MutableTransitionState.isIdle.<get-isIdle>|<get-isIdle>(){}[0]

    final var currentState // androidx.compose.animation.core/MutableTransitionState.currentState|{}currentState[0]
        final fun <get-currentState>(): #A // androidx.compose.animation.core/MutableTransitionState.currentState.<get-currentState>|<get-currentState>(){}[0]
    final var targetState // androidx.compose.animation.core/MutableTransitionState.targetState|{}targetState[0]
        final fun <get-targetState>(): #A // androidx.compose.animation.core/MutableTransitionState.targetState.<get-targetState>|<get-targetState>(){}[0]
        final fun <set-targetState>(#A) // androidx.compose.animation.core/MutableTransitionState.targetState.<set-targetState>|<set-targetState>(1:0){}[0]
}

final class <#A: kotlin/Any?> androidx.compose.animation.core/RepeatableSpec : androidx.compose.animation.core/FiniteAnimationSpec<#A> { // androidx.compose.animation.core/RepeatableSpec|null[0]
    constructor <init>(kotlin/Int, androidx.compose.animation.core/DurationBasedAnimationSpec<#A>, androidx.compose.animation.core/RepeatMode = ...) // androidx.compose.animation.core/RepeatableSpec.<init>|<init>(kotlin.Int;androidx.compose.animation.core.DurationBasedAnimationSpec<1:0>;androidx.compose.animation.core.RepeatMode){}[0]
    constructor <init>(kotlin/Int, androidx.compose.animation.core/DurationBasedAnimationSpec<#A>, androidx.compose.animation.core/RepeatMode = ..., androidx.compose.animation.core/StartOffset = ...) // androidx.compose.animation.core/RepeatableSpec.<init>|<init>(kotlin.Int;androidx.compose.animation.core.DurationBasedAnimationSpec<1:0>;androidx.compose.animation.core.RepeatMode;androidx.compose.animation.core.StartOffset){}[0]

    final val animation // androidx.compose.animation.core/RepeatableSpec.animation|{}animation[0]
        final fun <get-animation>(): androidx.compose.animation.core/DurationBasedAnimationSpec<#A> // androidx.compose.animation.core/RepeatableSpec.animation.<get-animation>|<get-animation>(){}[0]
    final val initialStartOffset // androidx.compose.animation.core/RepeatableSpec.initialStartOffset|{}initialStartOffset[0]
        final fun <get-initialStartOffset>(): androidx.compose.animation.core/StartOffset // androidx.compose.animation.core/RepeatableSpec.initialStartOffset.<get-initialStartOffset>|<get-initialStartOffset>(){}[0]
    final val iterations // androidx.compose.animation.core/RepeatableSpec.iterations|{}iterations[0]
        final fun <get-iterations>(): kotlin/Int // androidx.compose.animation.core/RepeatableSpec.iterations.<get-iterations>|<get-iterations>(){}[0]
    final val repeatMode // androidx.compose.animation.core/RepeatableSpec.repeatMode|{}repeatMode[0]
        final fun <get-repeatMode>(): androidx.compose.animation.core/RepeatMode // androidx.compose.animation.core/RepeatableSpec.repeatMode.<get-repeatMode>|<get-repeatMode>(){}[0]

    final fun <#A1: androidx.compose.animation.core/AnimationVector> vectorize(androidx.compose.animation.core/TwoWayConverter<#A, #A1>): androidx.compose.animation.core/VectorizedFiniteAnimationSpec<#A1> // androidx.compose.animation.core/RepeatableSpec.vectorize|vectorize(androidx.compose.animation.core.TwoWayConverter<1:0,0:0>){0§<androidx.compose.animation.core.AnimationVector>}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/RepeatableSpec.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.animation.core/RepeatableSpec.hashCode|hashCode(){}[0]
}

final class <#A: kotlin/Any?> androidx.compose.animation.core/SeekableTransitionState : androidx.compose.animation.core/TransitionState<#A> { // androidx.compose.animation.core/SeekableTransitionState|null[0]
    constructor <init>(#A) // androidx.compose.animation.core/SeekableTransitionState.<init>|<init>(1:0){}[0]

    final var currentState // androidx.compose.animation.core/SeekableTransitionState.currentState|{}currentState[0]
        final fun <get-currentState>(): #A // androidx.compose.animation.core/SeekableTransitionState.currentState.<get-currentState>|<get-currentState>(){}[0]
    final var fraction // androidx.compose.animation.core/SeekableTransitionState.fraction|{}fraction[0]
        final fun <get-fraction>(): kotlin/Float // androidx.compose.animation.core/SeekableTransitionState.fraction.<get-fraction>|<get-fraction>(){}[0]
    final var targetState // androidx.compose.animation.core/SeekableTransitionState.targetState|{}targetState[0]
        final fun <get-targetState>(): #A // androidx.compose.animation.core/SeekableTransitionState.targetState.<get-targetState>|<get-targetState>(){}[0]

    final suspend fun animateTo(#A = ..., androidx.compose.animation.core/FiniteAnimationSpec<kotlin/Float>? = ...) // androidx.compose.animation.core/SeekableTransitionState.animateTo|animateTo(1:0;androidx.compose.animation.core.FiniteAnimationSpec<kotlin.Float>?){}[0]
    final suspend fun seekTo(kotlin/Float, #A = ...) // androidx.compose.animation.core/SeekableTransitionState.seekTo|seekTo(kotlin.Float;1:0){}[0]
    final suspend fun snapTo(#A) // androidx.compose.animation.core/SeekableTransitionState.snapTo|snapTo(1:0){}[0]
}

final class <#A: kotlin/Any?> androidx.compose.animation.core/SnapSpec : androidx.compose.animation.core/DurationBasedAnimationSpec<#A> { // androidx.compose.animation.core/SnapSpec|null[0]
    constructor <init>(kotlin/Int = ...) // androidx.compose.animation.core/SnapSpec.<init>|<init>(kotlin.Int){}[0]

    final val delay // androidx.compose.animation.core/SnapSpec.delay|{}delay[0]
        final fun <get-delay>(): kotlin/Int // androidx.compose.animation.core/SnapSpec.delay.<get-delay>|<get-delay>(){}[0]

    final fun <#A1: androidx.compose.animation.core/AnimationVector> vectorize(androidx.compose.animation.core/TwoWayConverter<#A, #A1>): androidx.compose.animation.core/VectorizedDurationBasedAnimationSpec<#A1> // androidx.compose.animation.core/SnapSpec.vectorize|vectorize(androidx.compose.animation.core.TwoWayConverter<1:0,0:0>){0§<androidx.compose.animation.core.AnimationVector>}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/SnapSpec.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.animation.core/SnapSpec.hashCode|hashCode(){}[0]
}

final class <#A: kotlin/Any?> androidx.compose.animation.core/SpringSpec : androidx.compose.animation.core/FiniteAnimationSpec<#A> { // androidx.compose.animation.core/SpringSpec|null[0]
    constructor <init>(kotlin/Float = ..., kotlin/Float = ..., #A? = ...) // androidx.compose.animation.core/SpringSpec.<init>|<init>(kotlin.Float;kotlin.Float;1:0?){}[0]

    final val dampingRatio // androidx.compose.animation.core/SpringSpec.dampingRatio|{}dampingRatio[0]
        final fun <get-dampingRatio>(): kotlin/Float // androidx.compose.animation.core/SpringSpec.dampingRatio.<get-dampingRatio>|<get-dampingRatio>(){}[0]
    final val stiffness // androidx.compose.animation.core/SpringSpec.stiffness|{}stiffness[0]
        final fun <get-stiffness>(): kotlin/Float // androidx.compose.animation.core/SpringSpec.stiffness.<get-stiffness>|<get-stiffness>(){}[0]
    final val visibilityThreshold // androidx.compose.animation.core/SpringSpec.visibilityThreshold|{}visibilityThreshold[0]
        final fun <get-visibilityThreshold>(): #A? // androidx.compose.animation.core/SpringSpec.visibilityThreshold.<get-visibilityThreshold>|<get-visibilityThreshold>(){}[0]

    final fun <#A1: androidx.compose.animation.core/AnimationVector> vectorize(androidx.compose.animation.core/TwoWayConverter<#A, #A1>): androidx.compose.animation.core/VectorizedSpringSpec<#A1> // androidx.compose.animation.core/SpringSpec.vectorize|vectorize(androidx.compose.animation.core.TwoWayConverter<1:0,0:0>){0§<androidx.compose.animation.core.AnimationVector>}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/SpringSpec.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.animation.core/SpringSpec.hashCode|hashCode(){}[0]
}

final class <#A: kotlin/Any?> androidx.compose.animation.core/Transition { // androidx.compose.animation.core/Transition|null[0]
    constructor <init>(androidx.compose.animation.core/MutableTransitionState<#A>, kotlin/String? = ...) // androidx.compose.animation.core/Transition.<init>|<init>(androidx.compose.animation.core.MutableTransitionState<1:0>;kotlin.String?){}[0]
    constructor <init>(androidx.compose.animation.core/TransitionState<#A>, kotlin/String? = ...) // androidx.compose.animation.core/Transition.<init>|<init>(androidx.compose.animation.core.TransitionState<1:0>;kotlin.String?){}[0]

    final val animations // androidx.compose.animation.core/Transition.animations|{}animations[0]
        final fun <get-animations>(): kotlin.collections/List<androidx.compose.animation.core/Transition.TransitionAnimationState<*, *, #A>> // androidx.compose.animation.core/Transition.animations.<get-animations>|<get-animations>(){}[0]
    final val currentState // androidx.compose.animation.core/Transition.currentState|{}currentState[0]
        final fun <get-currentState>(): #A // androidx.compose.animation.core/Transition.currentState.<get-currentState>|<get-currentState>(){}[0]
    final val isRunning // androidx.compose.animation.core/Transition.isRunning|{}isRunning[0]
        final fun <get-isRunning>(): kotlin/Boolean // androidx.compose.animation.core/Transition.isRunning.<get-isRunning>|<get-isRunning>(){}[0]
    final val label // androidx.compose.animation.core/Transition.label|{}label[0]
        final fun <get-label>(): kotlin/String? // androidx.compose.animation.core/Transition.label.<get-label>|<get-label>(){}[0]
    final val parentTransition // androidx.compose.animation.core/Transition.parentTransition|{}parentTransition[0]
        final fun <get-parentTransition>(): androidx.compose.animation.core/Transition<*>? // androidx.compose.animation.core/Transition.parentTransition.<get-parentTransition>|<get-parentTransition>(){}[0]
    final val totalDurationNanos // androidx.compose.animation.core/Transition.totalDurationNanos|{}totalDurationNanos[0]
        final fun <get-totalDurationNanos>(): kotlin/Long // androidx.compose.animation.core/Transition.totalDurationNanos.<get-totalDurationNanos>|<get-totalDurationNanos>(){}[0]
    final val transitions // androidx.compose.animation.core/Transition.transitions|{}transitions[0]
        final fun <get-transitions>(): kotlin.collections/List<androidx.compose.animation.core/Transition<*>> // androidx.compose.animation.core/Transition.transitions.<get-transitions>|<get-transitions>(){}[0]

    final var isSeeking // androidx.compose.animation.core/Transition.isSeeking|{}isSeeking[0]
        final fun <get-isSeeking>(): kotlin/Boolean // androidx.compose.animation.core/Transition.isSeeking.<get-isSeeking>|<get-isSeeking>(){}[0]
    final var playTimeNanos // androidx.compose.animation.core/Transition.playTimeNanos|{}playTimeNanos[0]
        final fun <get-playTimeNanos>(): kotlin/Long // androidx.compose.animation.core/Transition.playTimeNanos.<get-playTimeNanos>|<get-playTimeNanos>(){}[0]
        final fun <set-playTimeNanos>(kotlin/Long) // androidx.compose.animation.core/Transition.playTimeNanos.<set-playTimeNanos>|<set-playTimeNanos>(kotlin.Long){}[0]
    final var segment // androidx.compose.animation.core/Transition.segment|{}segment[0]
        final fun <get-segment>(): androidx.compose.animation.core/Transition.Segment<#A> // androidx.compose.animation.core/Transition.segment.<get-segment>|<get-segment>(){}[0]
    final var targetState // androidx.compose.animation.core/Transition.targetState|{}targetState[0]
        final fun <get-targetState>(): #A // androidx.compose.animation.core/Transition.targetState.<get-targetState>|<get-targetState>(){}[0]

    final fun setPlaytimeAfterInitialAndTargetStateEstablished(#A, #A, kotlin/Long) // androidx.compose.animation.core/Transition.setPlaytimeAfterInitialAndTargetStateEstablished|setPlaytimeAfterInitialAndTargetStateEstablished(1:0;1:0;kotlin.Long){}[0]
    final fun toString(): kotlin/String // androidx.compose.animation.core/Transition.toString|toString(){}[0]

    abstract interface <#A1: kotlin/Any?> Segment { // androidx.compose.animation.core/Transition.Segment|null[0]
        abstract val initialState // androidx.compose.animation.core/Transition.Segment.initialState|{}initialState[0]
            abstract fun <get-initialState>(): #A1 // androidx.compose.animation.core/Transition.Segment.initialState.<get-initialState>|<get-initialState>(){}[0]
        abstract val targetState // androidx.compose.animation.core/Transition.Segment.targetState|{}targetState[0]
            abstract fun <get-targetState>(): #A1 // androidx.compose.animation.core/Transition.Segment.targetState.<get-targetState>|<get-targetState>(){}[0]

        open fun (#A1).isTransitioningTo(#A1): kotlin/Boolean // androidx.compose.animation.core/Transition.Segment.isTransitioningTo|isTransitioningTo@1:0(1:0){}[0]
    }

    final inner class <#A1: kotlin/Any?, #B1: androidx.compose.animation.core/AnimationVector> DeferredAnimation { // androidx.compose.animation.core/Transition.DeferredAnimation|null[0]
        final val label // androidx.compose.animation.core/Transition.DeferredAnimation.label|{}label[0]
            final fun <get-label>(): kotlin/String // androidx.compose.animation.core/Transition.DeferredAnimation.label.<get-label>|<get-label>(){}[0]
        final val typeConverter // androidx.compose.animation.core/Transition.DeferredAnimation.typeConverter|{}typeConverter[0]
            final fun <get-typeConverter>(): androidx.compose.animation.core/TwoWayConverter<#A1, #B1> // androidx.compose.animation.core/Transition.DeferredAnimation.typeConverter.<get-typeConverter>|<get-typeConverter>(){}[0]

        final fun animate(kotlin/Function1<androidx.compose.animation.core/Transition.Segment<#A>, androidx.compose.animation.core/FiniteAnimationSpec<#A1>>, kotlin/Function1<#A, #A1>): androidx.compose.runtime/State<#A1> // androidx.compose.animation.core/Transition.DeferredAnimation.animate|animate(kotlin.Function1<androidx.compose.animation.core.Transition.Segment<2:0>,androidx.compose.animation.core.FiniteAnimationSpec<1:0>>;kotlin.Function1<2:0,1:0>){}[0]
    }

    final inner class <#A1: kotlin/Any?, #B1: androidx.compose.animation.core/AnimationVector> TransitionAnimationState : androidx.compose.runtime/State<#A1> { // androidx.compose.animation.core/Transition.TransitionAnimationState|null[0]
        final val label // androidx.compose.animation.core/Transition.TransitionAnimationState.label|{}label[0]
            final fun <get-label>(): kotlin/String // androidx.compose.animation.core/Transition.TransitionAnimationState.label.<get-label>|<get-label>(){}[0]
        final val typeConverter // androidx.compose.animation.core/Transition.TransitionAnimationState.typeConverter|{}typeConverter[0]
            final fun <get-typeConverter>(): androidx.compose.animation.core/TwoWayConverter<#A1, #B1> // androidx.compose.animation.core/Transition.TransitionAnimationState.typeConverter.<get-typeConverter>|<get-typeConverter>(){}[0]

        final var animation // androidx.compose.animation.core/Transition.TransitionAnimationState.animation|{}animation[0]
            final fun <get-animation>(): androidx.compose.animation.core/TargetBasedAnimation<#A1, #B1> // androidx.compose.animation.core/Transition.TransitionAnimationState.animation.<get-animation>|<get-animation>(){}[0]
        final var animationSpec // androidx.compose.animation.core/Transition.TransitionAnimationState.animationSpec|{}animationSpec[0]
            final fun <get-animationSpec>(): androidx.compose.animation.core/FiniteAnimationSpec<#A1> // androidx.compose.animation.core/Transition.TransitionAnimationState.animationSpec.<get-animationSpec>|<get-animationSpec>(){}[0]
        final var value // androidx.compose.animation.core/Transition.TransitionAnimationState.value|{}value[0]
            final fun <get-value>(): #A1 // androidx.compose.animation.core/Transition.TransitionAnimationState.value.<get-value>|<get-value>(){}[0]

        final fun toString(): kotlin/String // androidx.compose.animation.core/Transition.TransitionAnimationState.toString|toString(){}[0]
    }
}

final class <#A: kotlin/Any?> androidx.compose.animation.core/TweenSpec : androidx.compose.animation.core/DurationBasedAnimationSpec<#A> { // androidx.compose.animation.core/TweenSpec|null[0]
    constructor <init>(kotlin/Int = ..., kotlin/Int = ..., androidx.compose.animation.core/Easing = ...) // androidx.compose.animation.core/TweenSpec.<init>|<init>(kotlin.Int;kotlin.Int;androidx.compose.animation.core.Easing){}[0]

    final val delay // androidx.compose.animation.core/TweenSpec.delay|{}delay[0]
        final fun <get-delay>(): kotlin/Int // androidx.compose.animation.core/TweenSpec.delay.<get-delay>|<get-delay>(){}[0]
    final val durationMillis // androidx.compose.animation.core/TweenSpec.durationMillis|{}durationMillis[0]
        final fun <get-durationMillis>(): kotlin/Int // androidx.compose.animation.core/TweenSpec.durationMillis.<get-durationMillis>|<get-durationMillis>(){}[0]
    final val easing // androidx.compose.animation.core/TweenSpec.easing|{}easing[0]
        final fun <get-easing>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/TweenSpec.easing.<get-easing>|<get-easing>(){}[0]

    final fun <#A1: androidx.compose.animation.core/AnimationVector> vectorize(androidx.compose.animation.core/TwoWayConverter<#A, #A1>): androidx.compose.animation.core/VectorizedTweenSpec<#A1> // androidx.compose.animation.core/TweenSpec.vectorize|vectorize(androidx.compose.animation.core.TwoWayConverter<1:0,0:0>){0§<androidx.compose.animation.core.AnimationVector>}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/TweenSpec.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.animation.core/TweenSpec.hashCode|hashCode(){}[0]
}

final class androidx.compose.animation.core/AnimationVector1D : androidx.compose.animation.core/AnimationVector { // androidx.compose.animation.core/AnimationVector1D|null[0]
    constructor <init>(kotlin/Float) // androidx.compose.animation.core/AnimationVector1D.<init>|<init>(kotlin.Float){}[0]

    final var value // androidx.compose.animation.core/AnimationVector1D.value|{}value[0]
        final fun <get-value>(): kotlin/Float // androidx.compose.animation.core/AnimationVector1D.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/AnimationVector1D.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.animation.core/AnimationVector1D.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.animation.core/AnimationVector1D.toString|toString(){}[0]
}

final class androidx.compose.animation.core/AnimationVector2D : androidx.compose.animation.core/AnimationVector { // androidx.compose.animation.core/AnimationVector2D|null[0]
    constructor <init>(kotlin/Float, kotlin/Float) // androidx.compose.animation.core/AnimationVector2D.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

    final var v1 // androidx.compose.animation.core/AnimationVector2D.v1|{}v1[0]
        final fun <get-v1>(): kotlin/Float // androidx.compose.animation.core/AnimationVector2D.v1.<get-v1>|<get-v1>(){}[0]
    final var v2 // androidx.compose.animation.core/AnimationVector2D.v2|{}v2[0]
        final fun <get-v2>(): kotlin/Float // androidx.compose.animation.core/AnimationVector2D.v2.<get-v2>|<get-v2>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/AnimationVector2D.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.animation.core/AnimationVector2D.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.animation.core/AnimationVector2D.toString|toString(){}[0]
}

final class androidx.compose.animation.core/AnimationVector3D : androidx.compose.animation.core/AnimationVector { // androidx.compose.animation.core/AnimationVector3D|null[0]
    constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.animation.core/AnimationVector3D.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float){}[0]

    final var v1 // androidx.compose.animation.core/AnimationVector3D.v1|{}v1[0]
        final fun <get-v1>(): kotlin/Float // androidx.compose.animation.core/AnimationVector3D.v1.<get-v1>|<get-v1>(){}[0]
    final var v2 // androidx.compose.animation.core/AnimationVector3D.v2|{}v2[0]
        final fun <get-v2>(): kotlin/Float // androidx.compose.animation.core/AnimationVector3D.v2.<get-v2>|<get-v2>(){}[0]
    final var v3 // androidx.compose.animation.core/AnimationVector3D.v3|{}v3[0]
        final fun <get-v3>(): kotlin/Float // androidx.compose.animation.core/AnimationVector3D.v3.<get-v3>|<get-v3>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/AnimationVector3D.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.animation.core/AnimationVector3D.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.animation.core/AnimationVector3D.toString|toString(){}[0]
}

final class androidx.compose.animation.core/AnimationVector4D : androidx.compose.animation.core/AnimationVector { // androidx.compose.animation.core/AnimationVector4D|null[0]
    constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.animation.core/AnimationVector4D.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

    final var v1 // androidx.compose.animation.core/AnimationVector4D.v1|{}v1[0]
        final fun <get-v1>(): kotlin/Float // androidx.compose.animation.core/AnimationVector4D.v1.<get-v1>|<get-v1>(){}[0]
    final var v2 // androidx.compose.animation.core/AnimationVector4D.v2|{}v2[0]
        final fun <get-v2>(): kotlin/Float // androidx.compose.animation.core/AnimationVector4D.v2.<get-v2>|<get-v2>(){}[0]
    final var v3 // androidx.compose.animation.core/AnimationVector4D.v3|{}v3[0]
        final fun <get-v3>(): kotlin/Float // androidx.compose.animation.core/AnimationVector4D.v3.<get-v3>|<get-v3>(){}[0]
    final var v4 // androidx.compose.animation.core/AnimationVector4D.v4|{}v4[0]
        final fun <get-v4>(): kotlin/Float // androidx.compose.animation.core/AnimationVector4D.v4.<get-v4>|<get-v4>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/AnimationVector4D.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.animation.core/AnimationVector4D.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.animation.core/AnimationVector4D.toString|toString(){}[0]
}

final class androidx.compose.animation.core/CubicBezierEasing : androidx.compose.animation.core/Easing { // androidx.compose.animation.core/CubicBezierEasing|null[0]
    constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // androidx.compose.animation.core/CubicBezierEasing.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/CubicBezierEasing.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.animation.core/CubicBezierEasing.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.animation.core/CubicBezierEasing.toString|toString(){}[0]
    final fun transform(kotlin/Float): kotlin/Float // androidx.compose.animation.core/CubicBezierEasing.transform|transform(kotlin.Float){}[0]
}

final class androidx.compose.animation.core/FloatExponentialDecaySpec : androidx.compose.animation.core/FloatDecayAnimationSpec { // androidx.compose.animation.core/FloatExponentialDecaySpec|null[0]
    constructor <init>(kotlin/Float = ..., kotlin/Float = ...) // androidx.compose.animation.core/FloatExponentialDecaySpec.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

    final val absVelocityThreshold // androidx.compose.animation.core/FloatExponentialDecaySpec.absVelocityThreshold|{}absVelocityThreshold[0]
        final fun <get-absVelocityThreshold>(): kotlin/Float // androidx.compose.animation.core/FloatExponentialDecaySpec.absVelocityThreshold.<get-absVelocityThreshold>|<get-absVelocityThreshold>(){}[0]

    final fun getDurationNanos(kotlin/Float, kotlin/Float): kotlin/Long // androidx.compose.animation.core/FloatExponentialDecaySpec.getDurationNanos|getDurationNanos(kotlin.Float;kotlin.Float){}[0]
    final fun getTargetValue(kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatExponentialDecaySpec.getTargetValue|getTargetValue(kotlin.Float;kotlin.Float){}[0]
    final fun getValueFromNanos(kotlin/Long, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatExponentialDecaySpec.getValueFromNanos|getValueFromNanos(kotlin.Long;kotlin.Float;kotlin.Float){}[0]
    final fun getVelocityFromNanos(kotlin/Long, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatExponentialDecaySpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;kotlin.Float;kotlin.Float){}[0]
}

final class androidx.compose.animation.core/FloatSpringSpec : androidx.compose.animation.core/FloatAnimationSpec { // androidx.compose.animation.core/FloatSpringSpec|null[0]
    constructor <init>(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...) // androidx.compose.animation.core/FloatSpringSpec.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float){}[0]

    final val dampingRatio // androidx.compose.animation.core/FloatSpringSpec.dampingRatio|{}dampingRatio[0]
        final fun <get-dampingRatio>(): kotlin/Float // androidx.compose.animation.core/FloatSpringSpec.dampingRatio.<get-dampingRatio>|<get-dampingRatio>(){}[0]
    final val stiffness // androidx.compose.animation.core/FloatSpringSpec.stiffness|{}stiffness[0]
        final fun <get-stiffness>(): kotlin/Float // androidx.compose.animation.core/FloatSpringSpec.stiffness.<get-stiffness>|<get-stiffness>(){}[0]

    final fun getDurationNanos(kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Long // androidx.compose.animation.core/FloatSpringSpec.getDurationNanos|getDurationNanos(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun getEndVelocity(kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatSpringSpec.getEndVelocity|getEndVelocity(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun getValueFromNanos(kotlin/Long, kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatSpringSpec.getValueFromNanos|getValueFromNanos(kotlin.Long;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun getVelocityFromNanos(kotlin/Long, kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatSpringSpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
}

final class androidx.compose.animation.core/FloatTweenSpec : androidx.compose.animation.core/FloatAnimationSpec { // androidx.compose.animation.core/FloatTweenSpec|null[0]
    constructor <init>(kotlin/Int = ..., kotlin/Int = ..., androidx.compose.animation.core/Easing = ...) // androidx.compose.animation.core/FloatTweenSpec.<init>|<init>(kotlin.Int;kotlin.Int;androidx.compose.animation.core.Easing){}[0]

    final val delay // androidx.compose.animation.core/FloatTweenSpec.delay|{}delay[0]
        final fun <get-delay>(): kotlin/Int // androidx.compose.animation.core/FloatTweenSpec.delay.<get-delay>|<get-delay>(){}[0]
    final val duration // androidx.compose.animation.core/FloatTweenSpec.duration|{}duration[0]
        final fun <get-duration>(): kotlin/Int // androidx.compose.animation.core/FloatTweenSpec.duration.<get-duration>|<get-duration>(){}[0]

    final fun getDurationNanos(kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Long // androidx.compose.animation.core/FloatTweenSpec.getDurationNanos|getDurationNanos(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun getValueFromNanos(kotlin/Long, kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatTweenSpec.getValueFromNanos|getValueFromNanos(kotlin.Long;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
    final fun getVelocityFromNanos(kotlin/Long, kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/FloatTweenSpec.getVelocityFromNanos|getVelocityFromNanos(kotlin.Long;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
}

final class androidx.compose.animation.core/InfiniteTransition { // androidx.compose.animation.core/InfiniteTransition|null[0]
    final val animations // androidx.compose.animation.core/InfiniteTransition.animations|{}animations[0]
        final fun <get-animations>(): kotlin.collections/List<androidx.compose.animation.core/InfiniteTransition.TransitionAnimationState<*, *>> // androidx.compose.animation.core/InfiniteTransition.animations.<get-animations>|<get-animations>(){}[0]
    final val label // androidx.compose.animation.core/InfiniteTransition.label|{}label[0]
        final fun <get-label>(): kotlin/String // androidx.compose.animation.core/InfiniteTransition.label.<get-label>|<get-label>(){}[0]

    final inner class <#A1: kotlin/Any?, #B1: androidx.compose.animation.core/AnimationVector> TransitionAnimationState : androidx.compose.runtime/State<#A1> { // androidx.compose.animation.core/InfiniteTransition.TransitionAnimationState|null[0]
        final val label // androidx.compose.animation.core/InfiniteTransition.TransitionAnimationState.label|{}label[0]
            final fun <get-label>(): kotlin/String // androidx.compose.animation.core/InfiniteTransition.TransitionAnimationState.label.<get-label>|<get-label>(){}[0]
        final val typeConverter // androidx.compose.animation.core/InfiniteTransition.TransitionAnimationState.typeConverter|{}typeConverter[0]
            final fun <get-typeConverter>(): androidx.compose.animation.core/TwoWayConverter<#A1, #B1> // androidx.compose.animation.core/InfiniteTransition.TransitionAnimationState.typeConverter.<get-typeConverter>|<get-typeConverter>(){}[0]

        final var animation // androidx.compose.animation.core/InfiniteTransition.TransitionAnimationState.animation|{}animation[0]
            final fun <get-animation>(): androidx.compose.animation.core/TargetBasedAnimation<#A1, #B1> // androidx.compose.animation.core/InfiniteTransition.TransitionAnimationState.animation.<get-animation>|<get-animation>(){}[0]
        final var animationSpec // androidx.compose.animation.core/InfiniteTransition.TransitionAnimationState.animationSpec|{}animationSpec[0]
            final fun <get-animationSpec>(): androidx.compose.animation.core/AnimationSpec<#A1> // androidx.compose.animation.core/InfiniteTransition.TransitionAnimationState.animationSpec.<get-animationSpec>|<get-animationSpec>(){}[0]
        final var value // androidx.compose.animation.core/InfiniteTransition.TransitionAnimationState.value|{}value[0]
            final fun <get-value>(): #A1 // androidx.compose.animation.core/InfiniteTransition.TransitionAnimationState.value.<get-value>|<get-value>(){}[0]
    }
}

final class androidx.compose.animation.core/PathEasing : androidx.compose.animation.core/Easing { // androidx.compose.animation.core/PathEasing|null[0]
    constructor <init>(androidx.compose.ui.graphics/Path) // androidx.compose.animation.core/PathEasing.<init>|<init>(androidx.compose.ui.graphics.Path){}[0]

    final fun transform(kotlin/Float): kotlin/Float // androidx.compose.animation.core/PathEasing.transform|transform(kotlin.Float){}[0]
}

final value class androidx.compose.animation.core/ArcMode { // androidx.compose.animation.core/ArcMode|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/ArcMode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.animation.core/ArcMode.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.animation.core/ArcMode.toString|toString(){}[0]

    final object Companion { // androidx.compose.animation.core/ArcMode.Companion|null[0]
        final val ArcAbove // androidx.compose.animation.core/ArcMode.Companion.ArcAbove|{}ArcAbove[0]
            final fun <get-ArcAbove>(): androidx.compose.animation.core/ArcMode // androidx.compose.animation.core/ArcMode.Companion.ArcAbove.<get-ArcAbove>|<get-ArcAbove>(){}[0]
        final val ArcBelow // androidx.compose.animation.core/ArcMode.Companion.ArcBelow|{}ArcBelow[0]
            final fun <get-ArcBelow>(): androidx.compose.animation.core/ArcMode // androidx.compose.animation.core/ArcMode.Companion.ArcBelow.<get-ArcBelow>|<get-ArcBelow>(){}[0]
        final val ArcLinear // androidx.compose.animation.core/ArcMode.Companion.ArcLinear|{}ArcLinear[0]
            final fun <get-ArcLinear>(): androidx.compose.animation.core/ArcMode // androidx.compose.animation.core/ArcMode.Companion.ArcLinear.<get-ArcLinear>|<get-ArcLinear>(){}[0]
    }
}

final value class androidx.compose.animation.core/StartOffset { // androidx.compose.animation.core/StartOffset|null[0]
    constructor <init>(kotlin/Int, androidx.compose.animation.core/StartOffsetType = ...) // androidx.compose.animation.core/StartOffset.<init>|<init>(kotlin.Int;androidx.compose.animation.core.StartOffsetType){}[0]

    final val offsetMillis // androidx.compose.animation.core/StartOffset.offsetMillis|{}offsetMillis[0]
        final fun <get-offsetMillis>(): kotlin/Int // androidx.compose.animation.core/StartOffset.offsetMillis.<get-offsetMillis>|<get-offsetMillis>(){}[0]
    final val offsetType // androidx.compose.animation.core/StartOffset.offsetType|{}offsetType[0]
        final fun <get-offsetType>(): androidx.compose.animation.core/StartOffsetType // androidx.compose.animation.core/StartOffset.offsetType.<get-offsetType>|<get-offsetType>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/StartOffset.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.animation.core/StartOffset.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.animation.core/StartOffset.toString|toString(){}[0]
}

final value class androidx.compose.animation.core/StartOffsetType { // androidx.compose.animation.core/StartOffsetType|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.compose.animation.core/StartOffsetType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.compose.animation.core/StartOffsetType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.compose.animation.core/StartOffsetType.toString|toString(){}[0]

    final object Companion { // androidx.compose.animation.core/StartOffsetType.Companion|null[0]
        final val Delay // androidx.compose.animation.core/StartOffsetType.Companion.Delay|{}Delay[0]
            final fun <get-Delay>(): androidx.compose.animation.core/StartOffsetType // androidx.compose.animation.core/StartOffsetType.Companion.Delay.<get-Delay>|<get-Delay>(){}[0]
        final val FastForward // androidx.compose.animation.core/StartOffsetType.Companion.FastForward|{}FastForward[0]
            final fun <get-FastForward>(): androidx.compose.animation.core/StartOffsetType // androidx.compose.animation.core/StartOffsetType.Companion.FastForward.<get-FastForward>|<get-FastForward>(){}[0]
    }
}

sealed class <#A: kotlin/Any?, #B: androidx.compose.animation.core/KeyframeBaseEntity<#A>> androidx.compose.animation.core/KeyframesSpecBaseConfig { // androidx.compose.animation.core/KeyframesSpecBaseConfig|null[0]
    final var delayMillis // androidx.compose.animation.core/KeyframesSpecBaseConfig.delayMillis|{}delayMillis[0]
        final fun <get-delayMillis>(): kotlin/Int // androidx.compose.animation.core/KeyframesSpecBaseConfig.delayMillis.<get-delayMillis>|<get-delayMillis>(){}[0]
        final fun <set-delayMillis>(kotlin/Int) // androidx.compose.animation.core/KeyframesSpecBaseConfig.delayMillis.<set-delayMillis>|<set-delayMillis>(kotlin.Int){}[0]
    final var durationMillis // androidx.compose.animation.core/KeyframesSpecBaseConfig.durationMillis|{}durationMillis[0]
        final fun <get-durationMillis>(): kotlin/Int // androidx.compose.animation.core/KeyframesSpecBaseConfig.durationMillis.<get-durationMillis>|<get-durationMillis>(){}[0]
        final fun <set-durationMillis>(kotlin/Int) // androidx.compose.animation.core/KeyframesSpecBaseConfig.durationMillis.<set-durationMillis>|<set-durationMillis>(kotlin.Int){}[0]

    final fun (#B).using(androidx.compose.animation.core/Easing): #B // androidx.compose.animation.core/KeyframesSpecBaseConfig.using|using@1:1(androidx.compose.animation.core.Easing){}[0]
    open fun (#A).at(kotlin/Int): #B // androidx.compose.animation.core/KeyframesSpecBaseConfig.at|at@1:0(kotlin.Int){}[0]
    open fun (#A).atFraction(kotlin/Float): #B // androidx.compose.animation.core/KeyframesSpecBaseConfig.atFraction|atFraction@1:0(kotlin.Float){}[0]
}

sealed class <#A: kotlin/Any?> androidx.compose.animation.core/KeyframeBaseEntity // androidx.compose.animation.core/KeyframeBaseEntity|null[0]

sealed class <#A: kotlin/Any?> androidx.compose.animation.core/TransitionState { // androidx.compose.animation.core/TransitionState|null[0]
    abstract var currentState // androidx.compose.animation.core/TransitionState.currentState|{}currentState[0]
        abstract fun <get-currentState>(): #A // androidx.compose.animation.core/TransitionState.currentState.<get-currentState>|<get-currentState>(){}[0]
    abstract var targetState // androidx.compose.animation.core/TransitionState.targetState|{}targetState[0]
        abstract fun <get-targetState>(): #A // androidx.compose.animation.core/TransitionState.targetState.<get-targetState>|<get-targetState>(){}[0]
}

sealed class androidx.compose.animation.core/AnimationVector // androidx.compose.animation.core/AnimationVector|null[0]

final object androidx.compose.animation.core/AnimationConstants { // androidx.compose.animation.core/AnimationConstants|null[0]
    final const val DefaultDurationMillis // androidx.compose.animation.core/AnimationConstants.DefaultDurationMillis|{}DefaultDurationMillis[0]
        final fun <get-DefaultDurationMillis>(): kotlin/Int // androidx.compose.animation.core/AnimationConstants.DefaultDurationMillis.<get-DefaultDurationMillis>|<get-DefaultDurationMillis>(){}[0]
    final const val UnspecifiedTime // androidx.compose.animation.core/AnimationConstants.UnspecifiedTime|{}UnspecifiedTime[0]
        final fun <get-UnspecifiedTime>(): kotlin/Long // androidx.compose.animation.core/AnimationConstants.UnspecifiedTime.<get-UnspecifiedTime>|<get-UnspecifiedTime>(){}[0]
}

final object androidx.compose.animation.core/Spring { // androidx.compose.animation.core/Spring|null[0]
    final const val DampingRatioHighBouncy // androidx.compose.animation.core/Spring.DampingRatioHighBouncy|{}DampingRatioHighBouncy[0]
        final fun <get-DampingRatioHighBouncy>(): kotlin/Float // androidx.compose.animation.core/Spring.DampingRatioHighBouncy.<get-DampingRatioHighBouncy>|<get-DampingRatioHighBouncy>(){}[0]
    final const val DampingRatioLowBouncy // androidx.compose.animation.core/Spring.DampingRatioLowBouncy|{}DampingRatioLowBouncy[0]
        final fun <get-DampingRatioLowBouncy>(): kotlin/Float // androidx.compose.animation.core/Spring.DampingRatioLowBouncy.<get-DampingRatioLowBouncy>|<get-DampingRatioLowBouncy>(){}[0]
    final const val DampingRatioMediumBouncy // androidx.compose.animation.core/Spring.DampingRatioMediumBouncy|{}DampingRatioMediumBouncy[0]
        final fun <get-DampingRatioMediumBouncy>(): kotlin/Float // androidx.compose.animation.core/Spring.DampingRatioMediumBouncy.<get-DampingRatioMediumBouncy>|<get-DampingRatioMediumBouncy>(){}[0]
    final const val DampingRatioNoBouncy // androidx.compose.animation.core/Spring.DampingRatioNoBouncy|{}DampingRatioNoBouncy[0]
        final fun <get-DampingRatioNoBouncy>(): kotlin/Float // androidx.compose.animation.core/Spring.DampingRatioNoBouncy.<get-DampingRatioNoBouncy>|<get-DampingRatioNoBouncy>(){}[0]
    final const val DefaultDisplacementThreshold // androidx.compose.animation.core/Spring.DefaultDisplacementThreshold|{}DefaultDisplacementThreshold[0]
        final fun <get-DefaultDisplacementThreshold>(): kotlin/Float // androidx.compose.animation.core/Spring.DefaultDisplacementThreshold.<get-DefaultDisplacementThreshold>|<get-DefaultDisplacementThreshold>(){}[0]
    final const val StiffnessHigh // androidx.compose.animation.core/Spring.StiffnessHigh|{}StiffnessHigh[0]
        final fun <get-StiffnessHigh>(): kotlin/Float // androidx.compose.animation.core/Spring.StiffnessHigh.<get-StiffnessHigh>|<get-StiffnessHigh>(){}[0]
    final const val StiffnessLow // androidx.compose.animation.core/Spring.StiffnessLow|{}StiffnessLow[0]
        final fun <get-StiffnessLow>(): kotlin/Float // androidx.compose.animation.core/Spring.StiffnessLow.<get-StiffnessLow>|<get-StiffnessLow>(){}[0]
    final const val StiffnessMedium // androidx.compose.animation.core/Spring.StiffnessMedium|{}StiffnessMedium[0]
        final fun <get-StiffnessMedium>(): kotlin/Float // androidx.compose.animation.core/Spring.StiffnessMedium.<get-StiffnessMedium>|<get-StiffnessMedium>(){}[0]
    final const val StiffnessMediumLow // androidx.compose.animation.core/Spring.StiffnessMediumLow|{}StiffnessMediumLow[0]
        final fun <get-StiffnessMediumLow>(): kotlin/Float // androidx.compose.animation.core/Spring.StiffnessMediumLow.<get-StiffnessMediumLow>|<get-StiffnessMediumLow>(){}[0]
    final const val StiffnessVeryLow // androidx.compose.animation.core/Spring.StiffnessVeryLow|{}StiffnessVeryLow[0]
        final fun <get-StiffnessVeryLow>(): kotlin/Float // androidx.compose.animation.core/Spring.StiffnessVeryLow.<get-StiffnessVeryLow>|<get-StiffnessVeryLow>(){}[0]
}

final val androidx.compose.animation.core.internal/androidx_compose_animation_core_internal_PlatformOptimizedCancellationException$stableprop // androidx.compose.animation.core.internal/androidx_compose_animation_core_internal_PlatformOptimizedCancellationException$stableprop|#static{}androidx_compose_animation_core_internal_PlatformOptimizedCancellationException$stableprop[0]
final val androidx.compose.animation.core/Ease // androidx.compose.animation.core/Ease|{}Ease[0]
    final fun <get-Ease>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/Ease.<get-Ease>|<get-Ease>(){}[0]
final val androidx.compose.animation.core/EaseIn // androidx.compose.animation.core/EaseIn|{}EaseIn[0]
    final fun <get-EaseIn>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseIn.<get-EaseIn>|<get-EaseIn>(){}[0]
final val androidx.compose.animation.core/EaseInBack // androidx.compose.animation.core/EaseInBack|{}EaseInBack[0]
    final fun <get-EaseInBack>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInBack.<get-EaseInBack>|<get-EaseInBack>(){}[0]
final val androidx.compose.animation.core/EaseInBounce // androidx.compose.animation.core/EaseInBounce|{}EaseInBounce[0]
    final fun <get-EaseInBounce>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInBounce.<get-EaseInBounce>|<get-EaseInBounce>(){}[0]
final val androidx.compose.animation.core/EaseInCirc // androidx.compose.animation.core/EaseInCirc|{}EaseInCirc[0]
    final fun <get-EaseInCirc>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInCirc.<get-EaseInCirc>|<get-EaseInCirc>(){}[0]
final val androidx.compose.animation.core/EaseInCubic // androidx.compose.animation.core/EaseInCubic|{}EaseInCubic[0]
    final fun <get-EaseInCubic>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInCubic.<get-EaseInCubic>|<get-EaseInCubic>(){}[0]
final val androidx.compose.animation.core/EaseInElastic // androidx.compose.animation.core/EaseInElastic|{}EaseInElastic[0]
    final fun <get-EaseInElastic>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInElastic.<get-EaseInElastic>|<get-EaseInElastic>(){}[0]
final val androidx.compose.animation.core/EaseInExpo // androidx.compose.animation.core/EaseInExpo|{}EaseInExpo[0]
    final fun <get-EaseInExpo>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInExpo.<get-EaseInExpo>|<get-EaseInExpo>(){}[0]
final val androidx.compose.animation.core/EaseInOut // androidx.compose.animation.core/EaseInOut|{}EaseInOut[0]
    final fun <get-EaseInOut>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInOut.<get-EaseInOut>|<get-EaseInOut>(){}[0]
final val androidx.compose.animation.core/EaseInOutBack // androidx.compose.animation.core/EaseInOutBack|{}EaseInOutBack[0]
    final fun <get-EaseInOutBack>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInOutBack.<get-EaseInOutBack>|<get-EaseInOutBack>(){}[0]
final val androidx.compose.animation.core/EaseInOutBounce // androidx.compose.animation.core/EaseInOutBounce|{}EaseInOutBounce[0]
    final fun <get-EaseInOutBounce>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInOutBounce.<get-EaseInOutBounce>|<get-EaseInOutBounce>(){}[0]
final val androidx.compose.animation.core/EaseInOutCirc // androidx.compose.animation.core/EaseInOutCirc|{}EaseInOutCirc[0]
    final fun <get-EaseInOutCirc>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInOutCirc.<get-EaseInOutCirc>|<get-EaseInOutCirc>(){}[0]
final val androidx.compose.animation.core/EaseInOutCubic // androidx.compose.animation.core/EaseInOutCubic|{}EaseInOutCubic[0]
    final fun <get-EaseInOutCubic>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInOutCubic.<get-EaseInOutCubic>|<get-EaseInOutCubic>(){}[0]
final val androidx.compose.animation.core/EaseInOutElastic // androidx.compose.animation.core/EaseInOutElastic|{}EaseInOutElastic[0]
    final fun <get-EaseInOutElastic>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInOutElastic.<get-EaseInOutElastic>|<get-EaseInOutElastic>(){}[0]
final val androidx.compose.animation.core/EaseInOutExpo // androidx.compose.animation.core/EaseInOutExpo|{}EaseInOutExpo[0]
    final fun <get-EaseInOutExpo>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInOutExpo.<get-EaseInOutExpo>|<get-EaseInOutExpo>(){}[0]
final val androidx.compose.animation.core/EaseInOutQuad // androidx.compose.animation.core/EaseInOutQuad|{}EaseInOutQuad[0]
    final fun <get-EaseInOutQuad>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInOutQuad.<get-EaseInOutQuad>|<get-EaseInOutQuad>(){}[0]
final val androidx.compose.animation.core/EaseInOutQuart // androidx.compose.animation.core/EaseInOutQuart|{}EaseInOutQuart[0]
    final fun <get-EaseInOutQuart>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInOutQuart.<get-EaseInOutQuart>|<get-EaseInOutQuart>(){}[0]
final val androidx.compose.animation.core/EaseInOutQuint // androidx.compose.animation.core/EaseInOutQuint|{}EaseInOutQuint[0]
    final fun <get-EaseInOutQuint>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInOutQuint.<get-EaseInOutQuint>|<get-EaseInOutQuint>(){}[0]
final val androidx.compose.animation.core/EaseInOutSine // androidx.compose.animation.core/EaseInOutSine|{}EaseInOutSine[0]
    final fun <get-EaseInOutSine>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInOutSine.<get-EaseInOutSine>|<get-EaseInOutSine>(){}[0]
final val androidx.compose.animation.core/EaseInQuad // androidx.compose.animation.core/EaseInQuad|{}EaseInQuad[0]
    final fun <get-EaseInQuad>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInQuad.<get-EaseInQuad>|<get-EaseInQuad>(){}[0]
final val androidx.compose.animation.core/EaseInQuart // androidx.compose.animation.core/EaseInQuart|{}EaseInQuart[0]
    final fun <get-EaseInQuart>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInQuart.<get-EaseInQuart>|<get-EaseInQuart>(){}[0]
final val androidx.compose.animation.core/EaseInQuint // androidx.compose.animation.core/EaseInQuint|{}EaseInQuint[0]
    final fun <get-EaseInQuint>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInQuint.<get-EaseInQuint>|<get-EaseInQuint>(){}[0]
final val androidx.compose.animation.core/EaseInSine // androidx.compose.animation.core/EaseInSine|{}EaseInSine[0]
    final fun <get-EaseInSine>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseInSine.<get-EaseInSine>|<get-EaseInSine>(){}[0]
final val androidx.compose.animation.core/EaseOut // androidx.compose.animation.core/EaseOut|{}EaseOut[0]
    final fun <get-EaseOut>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseOut.<get-EaseOut>|<get-EaseOut>(){}[0]
final val androidx.compose.animation.core/EaseOutBack // androidx.compose.animation.core/EaseOutBack|{}EaseOutBack[0]
    final fun <get-EaseOutBack>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseOutBack.<get-EaseOutBack>|<get-EaseOutBack>(){}[0]
final val androidx.compose.animation.core/EaseOutBounce // androidx.compose.animation.core/EaseOutBounce|{}EaseOutBounce[0]
    final fun <get-EaseOutBounce>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseOutBounce.<get-EaseOutBounce>|<get-EaseOutBounce>(){}[0]
final val androidx.compose.animation.core/EaseOutCirc // androidx.compose.animation.core/EaseOutCirc|{}EaseOutCirc[0]
    final fun <get-EaseOutCirc>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseOutCirc.<get-EaseOutCirc>|<get-EaseOutCirc>(){}[0]
final val androidx.compose.animation.core/EaseOutCubic // androidx.compose.animation.core/EaseOutCubic|{}EaseOutCubic[0]
    final fun <get-EaseOutCubic>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseOutCubic.<get-EaseOutCubic>|<get-EaseOutCubic>(){}[0]
final val androidx.compose.animation.core/EaseOutElastic // androidx.compose.animation.core/EaseOutElastic|{}EaseOutElastic[0]
    final fun <get-EaseOutElastic>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseOutElastic.<get-EaseOutElastic>|<get-EaseOutElastic>(){}[0]
final val androidx.compose.animation.core/EaseOutExpo // androidx.compose.animation.core/EaseOutExpo|{}EaseOutExpo[0]
    final fun <get-EaseOutExpo>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseOutExpo.<get-EaseOutExpo>|<get-EaseOutExpo>(){}[0]
final val androidx.compose.animation.core/EaseOutQuad // androidx.compose.animation.core/EaseOutQuad|{}EaseOutQuad[0]
    final fun <get-EaseOutQuad>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseOutQuad.<get-EaseOutQuad>|<get-EaseOutQuad>(){}[0]
final val androidx.compose.animation.core/EaseOutQuart // androidx.compose.animation.core/EaseOutQuart|{}EaseOutQuart[0]
    final fun <get-EaseOutQuart>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseOutQuart.<get-EaseOutQuart>|<get-EaseOutQuart>(){}[0]
final val androidx.compose.animation.core/EaseOutQuint // androidx.compose.animation.core/EaseOutQuint|{}EaseOutQuint[0]
    final fun <get-EaseOutQuint>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseOutQuint.<get-EaseOutQuint>|<get-EaseOutQuint>(){}[0]
final val androidx.compose.animation.core/EaseOutSine // androidx.compose.animation.core/EaseOutSine|{}EaseOutSine[0]
    final fun <get-EaseOutSine>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/EaseOutSine.<get-EaseOutSine>|<get-EaseOutSine>(){}[0]
final val androidx.compose.animation.core/FastOutLinearInEasing // androidx.compose.animation.core/FastOutLinearInEasing|{}FastOutLinearInEasing[0]
    final fun <get-FastOutLinearInEasing>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/FastOutLinearInEasing.<get-FastOutLinearInEasing>|<get-FastOutLinearInEasing>(){}[0]
final val androidx.compose.animation.core/FastOutSlowInEasing // androidx.compose.animation.core/FastOutSlowInEasing|{}FastOutSlowInEasing[0]
    final fun <get-FastOutSlowInEasing>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/FastOutSlowInEasing.<get-FastOutSlowInEasing>|<get-FastOutSlowInEasing>(){}[0]
final val androidx.compose.animation.core/LinearEasing // androidx.compose.animation.core/LinearEasing|{}LinearEasing[0]
    final fun <get-LinearEasing>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/LinearEasing.<get-LinearEasing>|<get-LinearEasing>(){}[0]
final val androidx.compose.animation.core/LinearOutSlowInEasing // androidx.compose.animation.core/LinearOutSlowInEasing|{}LinearOutSlowInEasing[0]
    final fun <get-LinearOutSlowInEasing>(): androidx.compose.animation.core/Easing // androidx.compose.animation.core/LinearOutSlowInEasing.<get-LinearOutSlowInEasing>|<get-LinearOutSlowInEasing>(){}[0]
final val androidx.compose.animation.core/VectorConverter // androidx.compose.animation.core/VectorConverter|@androidx.compose.ui.geometry.Offset.Companion{}VectorConverter[0]
    final fun (androidx.compose.ui.geometry/Offset.Companion).<get-VectorConverter>(): androidx.compose.animation.core/TwoWayConverter<androidx.compose.ui.geometry/Offset, androidx.compose.animation.core/AnimationVector2D> // androidx.compose.animation.core/VectorConverter.<get-VectorConverter>|<get-VectorConverter>@androidx.compose.ui.geometry.Offset.Companion(){}[0]
final val androidx.compose.animation.core/VectorConverter // androidx.compose.animation.core/VectorConverter|@androidx.compose.ui.geometry.Rect.Companion{}VectorConverter[0]
    final fun (androidx.compose.ui.geometry/Rect.Companion).<get-VectorConverter>(): androidx.compose.animation.core/TwoWayConverter<androidx.compose.ui.geometry/Rect, androidx.compose.animation.core/AnimationVector4D> // androidx.compose.animation.core/VectorConverter.<get-VectorConverter>|<get-VectorConverter>@androidx.compose.ui.geometry.Rect.Companion(){}[0]
final val androidx.compose.animation.core/VectorConverter // androidx.compose.animation.core/VectorConverter|@androidx.compose.ui.geometry.Size.Companion{}VectorConverter[0]
    final fun (androidx.compose.ui.geometry/Size.Companion).<get-VectorConverter>(): androidx.compose.animation.core/TwoWayConverter<androidx.compose.ui.geometry/Size, androidx.compose.animation.core/AnimationVector2D> // androidx.compose.animation.core/VectorConverter.<get-VectorConverter>|<get-VectorConverter>@androidx.compose.ui.geometry.Size.Companion(){}[0]
final val androidx.compose.animation.core/VectorConverter // androidx.compose.animation.core/VectorConverter|@androidx.compose.ui.unit.Dp.Companion{}VectorConverter[0]
    final fun (androidx.compose.ui.unit/Dp.Companion).<get-VectorConverter>(): androidx.compose.animation.core/TwoWayConverter<androidx.compose.ui.unit/Dp, androidx.compose.animation.core/AnimationVector1D> // androidx.compose.animation.core/VectorConverter.<get-VectorConverter>|<get-VectorConverter>@androidx.compose.ui.unit.Dp.Companion(){}[0]
final val androidx.compose.animation.core/VectorConverter // androidx.compose.animation.core/VectorConverter|@androidx.compose.ui.unit.DpOffset.Companion{}VectorConverter[0]
    final fun (androidx.compose.ui.unit/DpOffset.Companion).<get-VectorConverter>(): androidx.compose.animation.core/TwoWayConverter<androidx.compose.ui.unit/DpOffset, androidx.compose.animation.core/AnimationVector2D> // androidx.compose.animation.core/VectorConverter.<get-VectorConverter>|<get-VectorConverter>@androidx.compose.ui.unit.DpOffset.Companion(){}[0]
final val androidx.compose.animation.core/VectorConverter // androidx.compose.animation.core/VectorConverter|@androidx.compose.ui.unit.IntOffset.Companion{}VectorConverter[0]
    final fun (androidx.compose.ui.unit/IntOffset.Companion).<get-VectorConverter>(): androidx.compose.animation.core/TwoWayConverter<androidx.compose.ui.unit/IntOffset, androidx.compose.animation.core/AnimationVector2D> // androidx.compose.animation.core/VectorConverter.<get-VectorConverter>|<get-VectorConverter>@androidx.compose.ui.unit.IntOffset.Companion(){}[0]
final val androidx.compose.animation.core/VectorConverter // androidx.compose.animation.core/VectorConverter|@androidx.compose.ui.unit.IntSize.Companion{}VectorConverter[0]
    final fun (androidx.compose.ui.unit/IntSize.Companion).<get-VectorConverter>(): androidx.compose.animation.core/TwoWayConverter<androidx.compose.ui.unit/IntSize, androidx.compose.animation.core/AnimationVector2D> // androidx.compose.animation.core/VectorConverter.<get-VectorConverter>|<get-VectorConverter>@androidx.compose.ui.unit.IntSize.Companion(){}[0]
final val androidx.compose.animation.core/VectorConverter // androidx.compose.animation.core/VectorConverter|@kotlin.Float.Companion{}VectorConverter[0]
    final fun (kotlin/Float.Companion).<get-VectorConverter>(): androidx.compose.animation.core/TwoWayConverter<kotlin/Float, androidx.compose.animation.core/AnimationVector1D> // androidx.compose.animation.core/VectorConverter.<get-VectorConverter>|<get-VectorConverter>@kotlin.Float.Companion(){}[0]
final val androidx.compose.animation.core/VectorConverter // androidx.compose.animation.core/VectorConverter|@kotlin.Int.Companion{}VectorConverter[0]
    final fun (kotlin/Int.Companion).<get-VectorConverter>(): androidx.compose.animation.core/TwoWayConverter<kotlin/Int, androidx.compose.animation.core/AnimationVector1D> // androidx.compose.animation.core/VectorConverter.<get-VectorConverter>|<get-VectorConverter>@kotlin.Int.Companion(){}[0]
final val androidx.compose.animation.core/VisibilityThreshold // androidx.compose.animation.core/VisibilityThreshold|@androidx.compose.ui.geometry.Offset.Companion{}VisibilityThreshold[0]
    final fun (androidx.compose.ui.geometry/Offset.Companion).<get-VisibilityThreshold>(): androidx.compose.ui.geometry/Offset // androidx.compose.animation.core/VisibilityThreshold.<get-VisibilityThreshold>|<get-VisibilityThreshold>@androidx.compose.ui.geometry.Offset.Companion(){}[0]
final val androidx.compose.animation.core/VisibilityThreshold // androidx.compose.animation.core/VisibilityThreshold|@androidx.compose.ui.geometry.Rect.Companion{}VisibilityThreshold[0]
    final fun (androidx.compose.ui.geometry/Rect.Companion).<get-VisibilityThreshold>(): androidx.compose.ui.geometry/Rect // androidx.compose.animation.core/VisibilityThreshold.<get-VisibilityThreshold>|<get-VisibilityThreshold>@androidx.compose.ui.geometry.Rect.Companion(){}[0]
final val androidx.compose.animation.core/VisibilityThreshold // androidx.compose.animation.core/VisibilityThreshold|@androidx.compose.ui.geometry.Size.Companion{}VisibilityThreshold[0]
    final fun (androidx.compose.ui.geometry/Size.Companion).<get-VisibilityThreshold>(): androidx.compose.ui.geometry/Size // androidx.compose.animation.core/VisibilityThreshold.<get-VisibilityThreshold>|<get-VisibilityThreshold>@androidx.compose.ui.geometry.Size.Companion(){}[0]
final val androidx.compose.animation.core/VisibilityThreshold // androidx.compose.animation.core/VisibilityThreshold|@androidx.compose.ui.unit.Dp.Companion{}VisibilityThreshold[0]
    final fun (androidx.compose.ui.unit/Dp.Companion).<get-VisibilityThreshold>(): androidx.compose.ui.unit/Dp // androidx.compose.animation.core/VisibilityThreshold.<get-VisibilityThreshold>|<get-VisibilityThreshold>@androidx.compose.ui.unit.Dp.Companion(){}[0]
final val androidx.compose.animation.core/VisibilityThreshold // androidx.compose.animation.core/VisibilityThreshold|@androidx.compose.ui.unit.DpOffset.Companion{}VisibilityThreshold[0]
    final fun (androidx.compose.ui.unit/DpOffset.Companion).<get-VisibilityThreshold>(): androidx.compose.ui.unit/DpOffset // androidx.compose.animation.core/VisibilityThreshold.<get-VisibilityThreshold>|<get-VisibilityThreshold>@androidx.compose.ui.unit.DpOffset.Companion(){}[0]
final val androidx.compose.animation.core/VisibilityThreshold // androidx.compose.animation.core/VisibilityThreshold|@androidx.compose.ui.unit.IntOffset.Companion{}VisibilityThreshold[0]
    final fun (androidx.compose.ui.unit/IntOffset.Companion).<get-VisibilityThreshold>(): androidx.compose.ui.unit/IntOffset // androidx.compose.animation.core/VisibilityThreshold.<get-VisibilityThreshold>|<get-VisibilityThreshold>@androidx.compose.ui.unit.IntOffset.Companion(){}[0]
final val androidx.compose.animation.core/VisibilityThreshold // androidx.compose.animation.core/VisibilityThreshold|@androidx.compose.ui.unit.IntSize.Companion{}VisibilityThreshold[0]
    final fun (androidx.compose.ui.unit/IntSize.Companion).<get-VisibilityThreshold>(): androidx.compose.ui.unit/IntSize // androidx.compose.animation.core/VisibilityThreshold.<get-VisibilityThreshold>|<get-VisibilityThreshold>@androidx.compose.ui.unit.IntSize.Companion(){}[0]
final val androidx.compose.animation.core/VisibilityThreshold // androidx.compose.animation.core/VisibilityThreshold|@kotlin.Int.Companion{}VisibilityThreshold[0]
    final fun (kotlin/Int.Companion).<get-VisibilityThreshold>(): kotlin/Int // androidx.compose.animation.core/VisibilityThreshold.<get-VisibilityThreshold>|<get-VisibilityThreshold>@kotlin.Int.Companion(){}[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_Animatable$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_Animatable$stableprop|#static{}androidx_compose_animation_core_Animatable$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_AnimationConstants$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_AnimationConstants$stableprop|#static{}androidx_compose_animation_core_AnimationConstants$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_AnimationResult$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_AnimationResult$stableprop|#static{}androidx_compose_animation_core_AnimationResult$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_AnimationScope$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_AnimationScope$stableprop|#static{}androidx_compose_animation_core_AnimationScope$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_AnimationState$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_AnimationState$stableprop|#static{}androidx_compose_animation_core_AnimationState$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector$stableprop|#static{}androidx_compose_animation_core_AnimationVector$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector1D$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector1D$stableprop|#static{}androidx_compose_animation_core_AnimationVector1D$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector2D$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector2D$stableprop|#static{}androidx_compose_animation_core_AnimationVector2D$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector3D$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector3D$stableprop|#static{}androidx_compose_animation_core_AnimationVector3D$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector4D$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector4D$stableprop|#static{}androidx_compose_animation_core_AnimationVector4D$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_ArcAnimationSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_ArcAnimationSpec$stableprop|#static{}androidx_compose_animation_core_ArcAnimationSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_ArcSpline$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_ArcSpline$stableprop|#static{}androidx_compose_animation_core_ArcSpline$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_ArcSpline_Arc$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_ArcSpline_Arc$stableprop|#static{}androidx_compose_animation_core_ArcSpline_Arc$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_AtomicReference$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_AtomicReference$stableprop|#static{}androidx_compose_animation_core_AtomicReference$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_CubicBezierEasing$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_CubicBezierEasing$stableprop|#static{}androidx_compose_animation_core_CubicBezierEasing$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_DecayAnimation$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_DecayAnimation$stableprop|#static{}androidx_compose_animation_core_DecayAnimation$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_DeferredTargetAnimation$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_DeferredTargetAnimation$stableprop|#static{}androidx_compose_animation_core_DeferredTargetAnimation$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_FloatExponentialDecaySpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_FloatExponentialDecaySpec$stableprop|#static{}androidx_compose_animation_core_FloatExponentialDecaySpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_FloatSpringSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_FloatSpringSpec$stableprop|#static{}androidx_compose_animation_core_FloatSpringSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_FloatTweenSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_FloatTweenSpec$stableprop|#static{}androidx_compose_animation_core_FloatTweenSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_InfiniteRepeatableSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_InfiniteRepeatableSpec$stableprop|#static{}androidx_compose_animation_core_InfiniteRepeatableSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_InfiniteTransition$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_InfiniteTransition$stableprop|#static{}androidx_compose_animation_core_InfiniteTransition$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_KeyframeBaseEntity$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_KeyframeBaseEntity$stableprop|#static{}androidx_compose_animation_core_KeyframeBaseEntity$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpec$stableprop|#static{}androidx_compose_animation_core_KeyframesSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpecBaseConfig$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpecBaseConfig$stableprop|#static{}androidx_compose_animation_core_KeyframesSpecBaseConfig$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpec_KeyframeEntity$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpec_KeyframeEntity$stableprop|#static{}androidx_compose_animation_core_KeyframesSpec_KeyframeEntity$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpec_KeyframesSpecConfig$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpec_KeyframesSpecConfig$stableprop|#static{}androidx_compose_animation_core_KeyframesSpec_KeyframesSpecConfig$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_KeyframesWithSplineSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_KeyframesWithSplineSpec$stableprop|#static{}androidx_compose_animation_core_KeyframesWithSplineSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_KeyframesWithSplineSpec_KeyframesWithSplineSpecConfig$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_KeyframesWithSplineSpec_KeyframesWithSplineSpecConfig$stableprop|#static{}androidx_compose_animation_core_KeyframesWithSplineSpec_KeyframesWithSplineSpecConfig$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_MonoSpline$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_MonoSpline$stableprop|#static{}androidx_compose_animation_core_MonoSpline$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_MutableTransitionState$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_MutableTransitionState$stableprop|#static{}androidx_compose_animation_core_MutableTransitionState$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_MutationInterruptedException$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_MutationInterruptedException$stableprop|#static{}androidx_compose_animation_core_MutationInterruptedException$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_MutatorMutex$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_MutatorMutex$stableprop|#static{}androidx_compose_animation_core_MutatorMutex$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_PathEasing$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_PathEasing$stableprop|#static{}androidx_compose_animation_core_PathEasing$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_RepeatableSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_RepeatableSpec$stableprop|#static{}androidx_compose_animation_core_RepeatableSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_SeekableTransitionState$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_SeekableTransitionState$stableprop|#static{}androidx_compose_animation_core_SeekableTransitionState$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_SeekableTransitionState_SeekingAnimationState$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_SeekableTransitionState_SeekingAnimationState$stableprop|#static{}androidx_compose_animation_core_SeekableTransitionState_SeekingAnimationState$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_SnapSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_SnapSpec$stableprop|#static{}androidx_compose_animation_core_SnapSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_Spring$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_Spring$stableprop|#static{}androidx_compose_animation_core_Spring$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_SpringSimulation$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_SpringSimulation$stableprop|#static{}androidx_compose_animation_core_SpringSimulation$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_SpringSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_SpringSpec$stableprop|#static{}androidx_compose_animation_core_SpringSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_TargetBasedAnimation$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_TargetBasedAnimation$stableprop|#static{}androidx_compose_animation_core_TargetBasedAnimation$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_Transition$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_Transition$stableprop|#static{}androidx_compose_animation_core_Transition$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_TransitionState$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_TransitionState$stableprop|#static{}androidx_compose_animation_core_TransitionState$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_TweenSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_TweenSpec$stableprop|#static{}androidx_compose_animation_core_TweenSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_VectorizedFloatAnimationSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedFloatAnimationSpec$stableprop|#static{}androidx_compose_animation_core_VectorizedFloatAnimationSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_VectorizedInfiniteRepeatableSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedInfiniteRepeatableSpec$stableprop|#static{}androidx_compose_animation_core_VectorizedInfiniteRepeatableSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_VectorizedKeyframeSpecElementInfo$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedKeyframeSpecElementInfo$stableprop|#static{}androidx_compose_animation_core_VectorizedKeyframeSpecElementInfo$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_VectorizedKeyframesSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedKeyframesSpec$stableprop|#static{}androidx_compose_animation_core_VectorizedKeyframesSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_VectorizedMonoSplineKeyframesSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedMonoSplineKeyframesSpec$stableprop|#static{}androidx_compose_animation_core_VectorizedMonoSplineKeyframesSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_VectorizedRepeatableSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedRepeatableSpec$stableprop|#static{}androidx_compose_animation_core_VectorizedRepeatableSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_VectorizedSnapSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedSnapSpec$stableprop|#static{}androidx_compose_animation_core_VectorizedSnapSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_VectorizedSpringSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedSpringSpec$stableprop|#static{}androidx_compose_animation_core_VectorizedSpringSpec$stableprop[0]
final val androidx.compose.animation.core/androidx_compose_animation_core_VectorizedTweenSpec$stableprop // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedTweenSpec$stableprop|#static{}androidx_compose_animation_core_VectorizedTweenSpec$stableprop[0]
final val androidx.compose.animation.core/isFinished // androidx.compose.animation.core/isFinished|@androidx.compose.animation.core.AnimationState<*,*>{}isFinished[0]
    final fun (androidx.compose.animation.core/AnimationState<*, *>).<get-isFinished>(): kotlin/Boolean // androidx.compose.animation.core/isFinished.<get-isFinished>|<get-isFinished>@androidx.compose.animation.core.AnimationState<*,*>(){}[0]

final fun (androidx.compose.animation.core/AnimationState<kotlin/Float, androidx.compose.animation.core/AnimationVector1D>).androidx.compose.animation.core/copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Boolean = ...): androidx.compose.animation.core/AnimationState<kotlin/Float, androidx.compose.animation.core/AnimationVector1D> // androidx.compose.animation.core/copy|copy@androidx.compose.animation.core.AnimationState<kotlin.Float,androidx.compose.animation.core.AnimationVector1D>(kotlin.Float;kotlin.Float;kotlin.Long;kotlin.Long;kotlin.Boolean){}[0]
final fun (androidx.compose.animation.core/DecayAnimationSpec<kotlin/Float>).androidx.compose.animation.core/calculateTargetValue(kotlin/Float, kotlin/Float): kotlin/Float // androidx.compose.animation.core/calculateTargetValue|calculateTargetValue@androidx.compose.animation.core.DecayAnimationSpec<kotlin.Float>(kotlin.Float;kotlin.Float){}[0]
final fun (androidx.compose.animation.core/InfiniteTransition).androidx.compose.animation.core/animateFloat(kotlin/Float, kotlin/Float, androidx.compose.animation.core/InfiniteRepeatableSpec<kotlin/Float>, androidx.compose.runtime/Composer?, kotlin/Int): androidx.compose.runtime/State<kotlin/Float> // androidx.compose.animation.core/animateFloat|animateFloat@androidx.compose.animation.core.InfiniteTransition(kotlin.Float;kotlin.Float;androidx.compose.animation.core.InfiniteRepeatableSpec<kotlin.Float>;androidx.compose.runtime.Composer?;kotlin.Int){}[0]
final fun (androidx.compose.animation.core/InfiniteTransition).androidx.compose.animation.core/animateFloat(kotlin/Float, kotlin/Float, androidx.compose.animation.core/InfiniteRepeatableSpec<kotlin/Float>, kotlin/String?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<kotlin/Float> // androidx.compose.animation.core/animateFloat|animateFloat@androidx.compose.animation.core.InfiniteTransition(kotlin.Float;kotlin.Float;androidx.compose.animation.core.InfiniteRepeatableSpec<kotlin.Float>;kotlin.String?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun <#A: androidx.compose.animation.core/AnimationVector> (androidx.compose.animation.core/VectorizedAnimationSpec<#A>).androidx.compose.animation.core/createAnimation(#A, #A, #A): androidx.compose.animation.core/TargetBasedAnimation<#A, #A> // androidx.compose.animation.core/createAnimation|createAnimation@androidx.compose.animation.core.VectorizedAnimationSpec<0:0>(0:0;0:0;0:0){0§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> (androidx.compose.animation.core/Animation<#A, #B>).androidx.compose.animation.core/getVelocityFromNanos(kotlin/Long): #A // androidx.compose.animation.core/getVelocityFromNanos|getVelocityFromNanos@androidx.compose.animation.core.Animation<0:0,0:1>(kotlin.Long){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> (androidx.compose.animation.core/AnimationState<#A, #B>).androidx.compose.animation.core/copy(#A = ..., #B? = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Boolean = ...): androidx.compose.animation.core/AnimationState<#A, #B> // androidx.compose.animation.core/copy|copy@androidx.compose.animation.core.AnimationState<0:0,0:1>(0:0;0:1?;kotlin.Long;kotlin.Long;kotlin.Boolean){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> (androidx.compose.animation.core/DecayAnimationSpec<#A>).androidx.compose.animation.core/calculateTargetValue(androidx.compose.animation.core/TwoWayConverter<#A, #B>, #A, #A): #A // androidx.compose.animation.core/calculateTargetValue|calculateTargetValue@androidx.compose.animation.core.DecayAnimationSpec<0:0>(androidx.compose.animation.core.TwoWayConverter<0:0,0:1>;0:0;0:0){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> (androidx.compose.animation.core/InfiniteTransition).androidx.compose.animation.core/animateValue(#A, #A, androidx.compose.animation.core/TwoWayConverter<#A, #B>, androidx.compose.animation.core/InfiniteRepeatableSpec<#A>, androidx.compose.runtime/Composer?, kotlin/Int): androidx.compose.runtime/State<#A> // androidx.compose.animation.core/animateValue|animateValue@androidx.compose.animation.core.InfiniteTransition(0:0;0:0;androidx.compose.animation.core.TwoWayConverter<0:0,0:1>;androidx.compose.animation.core.InfiniteRepeatableSpec<0:0>;androidx.compose.runtime.Composer?;kotlin.Int){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> (androidx.compose.animation.core/InfiniteTransition).androidx.compose.animation.core/animateValue(#A, #A, androidx.compose.animation.core/TwoWayConverter<#A, #B>, androidx.compose.animation.core/InfiniteRepeatableSpec<#A>, kotlin/String?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<#A> // androidx.compose.animation.core/animateValue|animateValue@androidx.compose.animation.core.InfiniteTransition(0:0;0:0;androidx.compose.animation.core.TwoWayConverter<0:0,0:1>;androidx.compose.animation.core.InfiniteRepeatableSpec<0:0>;kotlin.String?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> (androidx.compose.animation.core/TwoWayConverter<#A, #B>).androidx.compose.animation.core/createZeroVectorFrom(#A): #B // androidx.compose.animation.core/createZeroVectorFrom|createZeroVectorFrom@androidx.compose.animation.core.TwoWayConverter<0:0,0:1>(0:0){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/AnimationState(androidx.compose.animation.core/TwoWayConverter<#A, #B>, #A, #A, kotlin/Long = ..., kotlin/Long = ..., kotlin/Boolean = ...): androidx.compose.animation.core/AnimationState<#A, #B> // androidx.compose.animation.core/AnimationState|AnimationState(androidx.compose.animation.core.TwoWayConverter<0:0,0:1>;0:0;0:0;kotlin.Long;kotlin.Long;kotlin.Boolean){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/TargetBasedAnimation(androidx.compose.animation.core/AnimationSpec<#A>, androidx.compose.animation.core/TwoWayConverter<#A, #B>, #A, #A, #A): androidx.compose.animation.core/TargetBasedAnimation<#A, #B> // androidx.compose.animation.core/TargetBasedAnimation|TargetBasedAnimation(androidx.compose.animation.core.AnimationSpec<0:0>;androidx.compose.animation.core.TwoWayConverter<0:0,0:1>;0:0;0:0;0:0){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/TwoWayConverter(kotlin/Function1<#A, #B>, kotlin/Function1<#B, #A>): androidx.compose.animation.core/TwoWayConverter<#A, #B> // androidx.compose.animation.core/TwoWayConverter|TwoWayConverter(kotlin.Function1<0:0,0:1>;kotlin.Function1<0:1,0:0>){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/animateValueAsState(#A, androidx.compose.animation.core/TwoWayConverter<#A, #B>, androidx.compose.animation.core/AnimationSpec<#A>?, #A?, kotlin/Function1<#A, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<#A> // androidx.compose.animation.core/animateValueAsState|animateValueAsState(0:0;androidx.compose.animation.core.TwoWayConverter<0:0,0:1>;androidx.compose.animation.core.AnimationSpec<0:0>?;0:0?;kotlin.Function1<0:0,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/animateValueAsState(#A, androidx.compose.animation.core/TwoWayConverter<#A, #B>, androidx.compose.animation.core/AnimationSpec<#A>?, #A?, kotlin/String?, kotlin/Function1<#A, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<#A> // androidx.compose.animation.core/animateValueAsState|animateValueAsState(0:0;androidx.compose.animation.core.TwoWayConverter<0:0,0:1>;androidx.compose.animation.core.AnimationSpec<0:0>?;0:0?;kotlin.String?;kotlin.Function1<0:0,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: androidx.compose.animation.core/AnimationVector> (androidx.compose.animation.core/Transition<#A>).androidx.compose.animation.core/createDeferredAnimation(androidx.compose.animation.core/TwoWayConverter<#B, #C>, kotlin/String?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.animation.core/Transition.DeferredAnimation<#B, #C, #A> // androidx.compose.animation.core/createDeferredAnimation|createDeferredAnimation@androidx.compose.animation.core.Transition<0:0>(androidx.compose.animation.core.TwoWayConverter<0:1,0:2>;kotlin.String?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: androidx.compose.animation.core/AnimationVector> (androidx.compose.animation.core/Transition<#A>).androidx.compose.animation.core/createTransitionAnimation(#B, #B, androidx.compose.animation.core/FiniteAnimationSpec<#B>, androidx.compose.animation.core/TwoWayConverter<#B, #C>, kotlin/String, androidx.compose.runtime/Composer?, kotlin/Int): androidx.compose.runtime/State<#B> // androidx.compose.animation.core/createTransitionAnimation|createTransitionAnimation@androidx.compose.animation.core.Transition<0:0>(0:1;0:1;androidx.compose.animation.core.FiniteAnimationSpec<0:1>;androidx.compose.animation.core.TwoWayConverter<0:1,0:2>;kotlin.String;androidx.compose.runtime.Composer?;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<androidx.compose.animation.core.AnimationVector>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (androidx.compose.animation.core/Transition<#A>).androidx.compose.animation.core/createChildTransitionInternal(#B, #B, kotlin/String, androidx.compose.runtime/Composer?, kotlin/Int): androidx.compose.animation.core/Transition<#B> // androidx.compose.animation.core/createChildTransitionInternal|createChildTransitionInternal@androidx.compose.animation.core.Transition<0:0>(0:1;0:1;kotlin.String;androidx.compose.runtime.Composer?;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (androidx.compose.animation.core/FloatDecayAnimationSpec).androidx.compose.animation.core/generateDecayAnimationSpec(): androidx.compose.animation.core/DecayAnimationSpec<#A> // androidx.compose.animation.core/generateDecayAnimationSpec|generateDecayAnimationSpec@androidx.compose.animation.core.FloatDecayAnimationSpec(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/exponentialDecay(kotlin/Float = ..., kotlin/Float = ...): androidx.compose.animation.core/DecayAnimationSpec<#A> // androidx.compose.animation.core/exponentialDecay|exponentialDecay(kotlin.Float;kotlin.Float){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/infiniteRepeatable(androidx.compose.animation.core/DurationBasedAnimationSpec<#A>, androidx.compose.animation.core/RepeatMode = ...): androidx.compose.animation.core/InfiniteRepeatableSpec<#A> // androidx.compose.animation.core/infiniteRepeatable|infiniteRepeatable(androidx.compose.animation.core.DurationBasedAnimationSpec<0:0>;androidx.compose.animation.core.RepeatMode){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/infiniteRepeatable(androidx.compose.animation.core/DurationBasedAnimationSpec<#A>, androidx.compose.animation.core/RepeatMode = ..., androidx.compose.animation.core/StartOffset = ...): androidx.compose.animation.core/InfiniteRepeatableSpec<#A> // androidx.compose.animation.core/infiniteRepeatable|infiniteRepeatable(androidx.compose.animation.core.DurationBasedAnimationSpec<0:0>;androidx.compose.animation.core.RepeatMode;androidx.compose.animation.core.StartOffset){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/keyframes(kotlin/Function1<androidx.compose.animation.core/KeyframesSpec.KeyframesSpecConfig<#A>, kotlin/Unit>): androidx.compose.animation.core/KeyframesSpec<#A> // androidx.compose.animation.core/keyframes|keyframes(kotlin.Function1<androidx.compose.animation.core.KeyframesSpec.KeyframesSpecConfig<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/keyframesWithSpline(kotlin/Float, kotlin/Function1<androidx.compose.animation.core/KeyframesWithSplineSpec.KeyframesWithSplineSpecConfig<#A>, kotlin/Unit>): androidx.compose.animation.core/KeyframesWithSplineSpec<#A> // androidx.compose.animation.core/keyframesWithSpline|keyframesWithSpline(kotlin.Float;kotlin.Function1<androidx.compose.animation.core.KeyframesWithSplineSpec.KeyframesWithSplineSpecConfig<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/keyframesWithSpline(kotlin/Function1<androidx.compose.animation.core/KeyframesWithSplineSpec.KeyframesWithSplineSpecConfig<#A>, kotlin/Unit>): androidx.compose.animation.core/KeyframesWithSplineSpec<#A> // androidx.compose.animation.core/keyframesWithSpline|keyframesWithSpline(kotlin.Function1<androidx.compose.animation.core.KeyframesWithSplineSpec.KeyframesWithSplineSpecConfig<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/rememberTransition(androidx.compose.animation.core/TransitionState<#A>, kotlin/String?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.animation.core/Transition<#A> // androidx.compose.animation.core/rememberTransition|rememberTransition(androidx.compose.animation.core.TransitionState<0:0>;kotlin.String?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/repeatable(kotlin/Int, androidx.compose.animation.core/DurationBasedAnimationSpec<#A>, androidx.compose.animation.core/RepeatMode = ...): androidx.compose.animation.core/RepeatableSpec<#A> // androidx.compose.animation.core/repeatable|repeatable(kotlin.Int;androidx.compose.animation.core.DurationBasedAnimationSpec<0:0>;androidx.compose.animation.core.RepeatMode){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/repeatable(kotlin/Int, androidx.compose.animation.core/DurationBasedAnimationSpec<#A>, androidx.compose.animation.core/RepeatMode = ..., androidx.compose.animation.core/StartOffset = ...): androidx.compose.animation.core/RepeatableSpec<#A> // androidx.compose.animation.core/repeatable|repeatable(kotlin.Int;androidx.compose.animation.core.DurationBasedAnimationSpec<0:0>;androidx.compose.animation.core.RepeatMode;androidx.compose.animation.core.StartOffset){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/snap(kotlin/Int = ...): androidx.compose.animation.core/SnapSpec<#A> // androidx.compose.animation.core/snap|snap(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/spring(kotlin/Float = ..., kotlin/Float = ..., #A? = ...): androidx.compose.animation.core/SpringSpec<#A> // androidx.compose.animation.core/spring|spring(kotlin.Float;kotlin.Float;0:0?){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/tween(kotlin/Int = ..., kotlin/Int = ..., androidx.compose.animation.core/Easing = ...): androidx.compose.animation.core/TweenSpec<#A> // androidx.compose.animation.core/tween|tween(kotlin.Int;kotlin.Int;androidx.compose.animation.core.Easing){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/updateTransition(#A, kotlin/String?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.animation.core/Transition<#A> // androidx.compose.animation.core/updateTransition|updateTransition(0:0;kotlin.String?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.compose.animation.core/updateTransition(androidx.compose.animation.core/MutableTransitionState<#A>, kotlin/String?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.animation.core/Transition<#A> // androidx.compose.animation.core/updateTransition|updateTransition(androidx.compose.animation.core.MutableTransitionState<0:0>;kotlin.String?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final fun androidx.compose.animation.core.internal/androidx_compose_animation_core_internal_PlatformOptimizedCancellationException$stableprop_getter(): kotlin/Int // androidx.compose.animation.core.internal/androidx_compose_animation_core_internal_PlatformOptimizedCancellationException$stableprop_getter|androidx_compose_animation_core_internal_PlatformOptimizedCancellationException$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/Animatable(kotlin/Float, kotlin/Float = ...): androidx.compose.animation.core/Animatable<kotlin/Float, androidx.compose.animation.core/AnimationVector1D> // androidx.compose.animation.core/Animatable|Animatable(kotlin.Float;kotlin.Float){}[0]
final fun androidx.compose.animation.core/AnimationState(kotlin/Float, kotlin/Float = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Boolean = ...): androidx.compose.animation.core/AnimationState<kotlin/Float, androidx.compose.animation.core/AnimationVector1D> // androidx.compose.animation.core/AnimationState|AnimationState(kotlin.Float;kotlin.Float;kotlin.Long;kotlin.Long;kotlin.Boolean){}[0]
final fun androidx.compose.animation.core/AnimationVector(kotlin/Float): androidx.compose.animation.core/AnimationVector1D // androidx.compose.animation.core/AnimationVector|AnimationVector(kotlin.Float){}[0]
final fun androidx.compose.animation.core/AnimationVector(kotlin/Float, kotlin/Float): androidx.compose.animation.core/AnimationVector2D // androidx.compose.animation.core/AnimationVector|AnimationVector(kotlin.Float;kotlin.Float){}[0]
final fun androidx.compose.animation.core/AnimationVector(kotlin/Float, kotlin/Float, kotlin/Float): androidx.compose.animation.core/AnimationVector3D // androidx.compose.animation.core/AnimationVector|AnimationVector(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
final fun androidx.compose.animation.core/AnimationVector(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float): androidx.compose.animation.core/AnimationVector4D // androidx.compose.animation.core/AnimationVector|AnimationVector(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
final fun androidx.compose.animation.core/DecayAnimation(androidx.compose.animation.core/FloatDecayAnimationSpec, kotlin/Float, kotlin/Float = ...): androidx.compose.animation.core/DecayAnimation<kotlin/Float, androidx.compose.animation.core/AnimationVector1D> // androidx.compose.animation.core/DecayAnimation|DecayAnimation(androidx.compose.animation.core.FloatDecayAnimationSpec;kotlin.Float;kotlin.Float){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_Animatable$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_Animatable$stableprop_getter|androidx_compose_animation_core_Animatable$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_AnimationConstants$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_AnimationConstants$stableprop_getter|androidx_compose_animation_core_AnimationConstants$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_AnimationResult$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_AnimationResult$stableprop_getter|androidx_compose_animation_core_AnimationResult$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_AnimationScope$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_AnimationScope$stableprop_getter|androidx_compose_animation_core_AnimationScope$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_AnimationState$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_AnimationState$stableprop_getter|androidx_compose_animation_core_AnimationState$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector$stableprop_getter|androidx_compose_animation_core_AnimationVector$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector1D$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector1D$stableprop_getter|androidx_compose_animation_core_AnimationVector1D$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector2D$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector2D$stableprop_getter|androidx_compose_animation_core_AnimationVector2D$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector3D$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector3D$stableprop_getter|androidx_compose_animation_core_AnimationVector3D$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector4D$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_AnimationVector4D$stableprop_getter|androidx_compose_animation_core_AnimationVector4D$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_ArcAnimationSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_ArcAnimationSpec$stableprop_getter|androidx_compose_animation_core_ArcAnimationSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_ArcSpline$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_ArcSpline$stableprop_getter|androidx_compose_animation_core_ArcSpline$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_ArcSpline_Arc$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_ArcSpline_Arc$stableprop_getter|androidx_compose_animation_core_ArcSpline_Arc$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_AtomicReference$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_AtomicReference$stableprop_getter|androidx_compose_animation_core_AtomicReference$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_CubicBezierEasing$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_CubicBezierEasing$stableprop_getter|androidx_compose_animation_core_CubicBezierEasing$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_DecayAnimation$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_DecayAnimation$stableprop_getter|androidx_compose_animation_core_DecayAnimation$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_DeferredTargetAnimation$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_DeferredTargetAnimation$stableprop_getter|androidx_compose_animation_core_DeferredTargetAnimation$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_FloatExponentialDecaySpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_FloatExponentialDecaySpec$stableprop_getter|androidx_compose_animation_core_FloatExponentialDecaySpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_FloatSpringSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_FloatSpringSpec$stableprop_getter|androidx_compose_animation_core_FloatSpringSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_FloatTweenSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_FloatTweenSpec$stableprop_getter|androidx_compose_animation_core_FloatTweenSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_InfiniteRepeatableSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_InfiniteRepeatableSpec$stableprop_getter|androidx_compose_animation_core_InfiniteRepeatableSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_InfiniteTransition$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_InfiniteTransition$stableprop_getter|androidx_compose_animation_core_InfiniteTransition$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_KeyframeBaseEntity$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_KeyframeBaseEntity$stableprop_getter|androidx_compose_animation_core_KeyframeBaseEntity$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpec$stableprop_getter|androidx_compose_animation_core_KeyframesSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpecBaseConfig$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpecBaseConfig$stableprop_getter|androidx_compose_animation_core_KeyframesSpecBaseConfig$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpec_KeyframeEntity$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpec_KeyframeEntity$stableprop_getter|androidx_compose_animation_core_KeyframesSpec_KeyframeEntity$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpec_KeyframesSpecConfig$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_KeyframesSpec_KeyframesSpecConfig$stableprop_getter|androidx_compose_animation_core_KeyframesSpec_KeyframesSpecConfig$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_KeyframesWithSplineSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_KeyframesWithSplineSpec$stableprop_getter|androidx_compose_animation_core_KeyframesWithSplineSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_KeyframesWithSplineSpec_KeyframesWithSplineSpecConfig$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_KeyframesWithSplineSpec_KeyframesWithSplineSpecConfig$stableprop_getter|androidx_compose_animation_core_KeyframesWithSplineSpec_KeyframesWithSplineSpecConfig$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_MonoSpline$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_MonoSpline$stableprop_getter|androidx_compose_animation_core_MonoSpline$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_MutableTransitionState$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_MutableTransitionState$stableprop_getter|androidx_compose_animation_core_MutableTransitionState$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_MutationInterruptedException$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_MutationInterruptedException$stableprop_getter|androidx_compose_animation_core_MutationInterruptedException$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_MutatorMutex$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_MutatorMutex$stableprop_getter|androidx_compose_animation_core_MutatorMutex$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_PathEasing$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_PathEasing$stableprop_getter|androidx_compose_animation_core_PathEasing$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_RepeatableSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_RepeatableSpec$stableprop_getter|androidx_compose_animation_core_RepeatableSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_SeekableTransitionState$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_SeekableTransitionState$stableprop_getter|androidx_compose_animation_core_SeekableTransitionState$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_SeekableTransitionState_SeekingAnimationState$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_SeekableTransitionState_SeekingAnimationState$stableprop_getter|androidx_compose_animation_core_SeekableTransitionState_SeekingAnimationState$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_SnapSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_SnapSpec$stableprop_getter|androidx_compose_animation_core_SnapSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_Spring$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_Spring$stableprop_getter|androidx_compose_animation_core_Spring$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_SpringSimulation$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_SpringSimulation$stableprop_getter|androidx_compose_animation_core_SpringSimulation$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_SpringSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_SpringSpec$stableprop_getter|androidx_compose_animation_core_SpringSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_TargetBasedAnimation$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_TargetBasedAnimation$stableprop_getter|androidx_compose_animation_core_TargetBasedAnimation$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_Transition$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_Transition$stableprop_getter|androidx_compose_animation_core_Transition$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_TransitionState$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_TransitionState$stableprop_getter|androidx_compose_animation_core_TransitionState$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_TweenSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_TweenSpec$stableprop_getter|androidx_compose_animation_core_TweenSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_VectorizedFloatAnimationSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedFloatAnimationSpec$stableprop_getter|androidx_compose_animation_core_VectorizedFloatAnimationSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_VectorizedInfiniteRepeatableSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedInfiniteRepeatableSpec$stableprop_getter|androidx_compose_animation_core_VectorizedInfiniteRepeatableSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_VectorizedKeyframeSpecElementInfo$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedKeyframeSpecElementInfo$stableprop_getter|androidx_compose_animation_core_VectorizedKeyframeSpecElementInfo$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_VectorizedKeyframesSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedKeyframesSpec$stableprop_getter|androidx_compose_animation_core_VectorizedKeyframesSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_VectorizedMonoSplineKeyframesSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedMonoSplineKeyframesSpec$stableprop_getter|androidx_compose_animation_core_VectorizedMonoSplineKeyframesSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_VectorizedRepeatableSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedRepeatableSpec$stableprop_getter|androidx_compose_animation_core_VectorizedRepeatableSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_VectorizedSnapSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedSnapSpec$stableprop_getter|androidx_compose_animation_core_VectorizedSnapSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_VectorizedSpringSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedSpringSpec$stableprop_getter|androidx_compose_animation_core_VectorizedSpringSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/androidx_compose_animation_core_VectorizedTweenSpec$stableprop_getter(): kotlin/Int // androidx.compose.animation.core/androidx_compose_animation_core_VectorizedTweenSpec$stableprop_getter|androidx_compose_animation_core_VectorizedTweenSpec$stableprop_getter(){}[0]
final fun androidx.compose.animation.core/animateDpAsState(androidx.compose.ui.unit/Dp, androidx.compose.animation.core/AnimationSpec<androidx.compose.ui.unit/Dp>?, kotlin/Function1<androidx.compose.ui.unit/Dp, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.unit/Dp> // androidx.compose.animation.core/animateDpAsState|animateDpAsState(androidx.compose.ui.unit.Dp;androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.unit.Dp>?;kotlin.Function1<androidx.compose.ui.unit.Dp,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateDpAsState(androidx.compose.ui.unit/Dp, androidx.compose.animation.core/AnimationSpec<androidx.compose.ui.unit/Dp>?, kotlin/String?, kotlin/Function1<androidx.compose.ui.unit/Dp, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.unit/Dp> // androidx.compose.animation.core/animateDpAsState|animateDpAsState(androidx.compose.ui.unit.Dp;androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.unit.Dp>?;kotlin.String?;kotlin.Function1<androidx.compose.ui.unit.Dp,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateFloatAsState(kotlin/Float, androidx.compose.animation.core/AnimationSpec<kotlin/Float>?, kotlin/Float, kotlin/Function1<kotlin/Float, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<kotlin/Float> // androidx.compose.animation.core/animateFloatAsState|animateFloatAsState(kotlin.Float;androidx.compose.animation.core.AnimationSpec<kotlin.Float>?;kotlin.Float;kotlin.Function1<kotlin.Float,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateFloatAsState(kotlin/Float, androidx.compose.animation.core/AnimationSpec<kotlin/Float>?, kotlin/Float, kotlin/String?, kotlin/Function1<kotlin/Float, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<kotlin/Float> // androidx.compose.animation.core/animateFloatAsState|animateFloatAsState(kotlin.Float;androidx.compose.animation.core.AnimationSpec<kotlin.Float>?;kotlin.Float;kotlin.String?;kotlin.Function1<kotlin.Float,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateIntAsState(kotlin/Int, androidx.compose.animation.core/AnimationSpec<kotlin/Int>?, kotlin/Function1<kotlin/Int, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<kotlin/Int> // androidx.compose.animation.core/animateIntAsState|animateIntAsState(kotlin.Int;androidx.compose.animation.core.AnimationSpec<kotlin.Int>?;kotlin.Function1<kotlin.Int,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateIntAsState(kotlin/Int, androidx.compose.animation.core/AnimationSpec<kotlin/Int>?, kotlin/String?, kotlin/Function1<kotlin/Int, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<kotlin/Int> // androidx.compose.animation.core/animateIntAsState|animateIntAsState(kotlin.Int;androidx.compose.animation.core.AnimationSpec<kotlin.Int>?;kotlin.String?;kotlin.Function1<kotlin.Int,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateIntOffsetAsState(androidx.compose.ui.unit/IntOffset, androidx.compose.animation.core/AnimationSpec<androidx.compose.ui.unit/IntOffset>?, kotlin/Function1<androidx.compose.ui.unit/IntOffset, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.unit/IntOffset> // androidx.compose.animation.core/animateIntOffsetAsState|animateIntOffsetAsState(androidx.compose.ui.unit.IntOffset;androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.unit.IntOffset>?;kotlin.Function1<androidx.compose.ui.unit.IntOffset,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateIntOffsetAsState(androidx.compose.ui.unit/IntOffset, androidx.compose.animation.core/AnimationSpec<androidx.compose.ui.unit/IntOffset>?, kotlin/String?, kotlin/Function1<androidx.compose.ui.unit/IntOffset, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.unit/IntOffset> // androidx.compose.animation.core/animateIntOffsetAsState|animateIntOffsetAsState(androidx.compose.ui.unit.IntOffset;androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.unit.IntOffset>?;kotlin.String?;kotlin.Function1<androidx.compose.ui.unit.IntOffset,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateIntSizeAsState(androidx.compose.ui.unit/IntSize, androidx.compose.animation.core/AnimationSpec<androidx.compose.ui.unit/IntSize>?, kotlin/Function1<androidx.compose.ui.unit/IntSize, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.unit/IntSize> // androidx.compose.animation.core/animateIntSizeAsState|animateIntSizeAsState(androidx.compose.ui.unit.IntSize;androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.unit.IntSize>?;kotlin.Function1<androidx.compose.ui.unit.IntSize,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateIntSizeAsState(androidx.compose.ui.unit/IntSize, androidx.compose.animation.core/AnimationSpec<androidx.compose.ui.unit/IntSize>?, kotlin/String?, kotlin/Function1<androidx.compose.ui.unit/IntSize, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.unit/IntSize> // androidx.compose.animation.core/animateIntSizeAsState|animateIntSizeAsState(androidx.compose.ui.unit.IntSize;androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.unit.IntSize>?;kotlin.String?;kotlin.Function1<androidx.compose.ui.unit.IntSize,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateOffsetAsState(androidx.compose.ui.geometry/Offset, androidx.compose.animation.core/AnimationSpec<androidx.compose.ui.geometry/Offset>?, kotlin/Function1<androidx.compose.ui.geometry/Offset, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.geometry/Offset> // androidx.compose.animation.core/animateOffsetAsState|animateOffsetAsState(androidx.compose.ui.geometry.Offset;androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Offset>?;kotlin.Function1<androidx.compose.ui.geometry.Offset,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateOffsetAsState(androidx.compose.ui.geometry/Offset, androidx.compose.animation.core/AnimationSpec<androidx.compose.ui.geometry/Offset>?, kotlin/String?, kotlin/Function1<androidx.compose.ui.geometry/Offset, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.geometry/Offset> // androidx.compose.animation.core/animateOffsetAsState|animateOffsetAsState(androidx.compose.ui.geometry.Offset;androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Offset>?;kotlin.String?;kotlin.Function1<androidx.compose.ui.geometry.Offset,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateRectAsState(androidx.compose.ui.geometry/Rect, androidx.compose.animation.core/AnimationSpec<androidx.compose.ui.geometry/Rect>?, kotlin/Function1<androidx.compose.ui.geometry/Rect, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.geometry/Rect> // androidx.compose.animation.core/animateRectAsState|animateRectAsState(androidx.compose.ui.geometry.Rect;androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Rect>?;kotlin.Function1<androidx.compose.ui.geometry.Rect,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateRectAsState(androidx.compose.ui.geometry/Rect, androidx.compose.animation.core/AnimationSpec<androidx.compose.ui.geometry/Rect>?, kotlin/String?, kotlin/Function1<androidx.compose.ui.geometry/Rect, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.geometry/Rect> // androidx.compose.animation.core/animateRectAsState|animateRectAsState(androidx.compose.ui.geometry.Rect;androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Rect>?;kotlin.String?;kotlin.Function1<androidx.compose.ui.geometry.Rect,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateSizeAsState(androidx.compose.ui.geometry/Size, androidx.compose.animation.core/AnimationSpec<androidx.compose.ui.geometry/Size>?, kotlin/Function1<androidx.compose.ui.geometry/Size, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.geometry/Size> // androidx.compose.animation.core/animateSizeAsState|animateSizeAsState(androidx.compose.ui.geometry.Size;androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Size>?;kotlin.Function1<androidx.compose.ui.geometry.Size,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/animateSizeAsState(androidx.compose.ui.geometry/Size, androidx.compose.animation.core/AnimationSpec<androidx.compose.ui.geometry/Size>?, kotlin/String?, kotlin/Function1<androidx.compose.ui.geometry/Size, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.geometry/Size> // androidx.compose.animation.core/animateSizeAsState|animateSizeAsState(androidx.compose.ui.geometry.Size;androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Size>?;kotlin.String?;kotlin.Function1<androidx.compose.ui.geometry.Size,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun androidx.compose.animation.core/estimateAnimationDurationMillis(kotlin/Double, kotlin/Double, kotlin/Double, kotlin/Double, kotlin/Double): kotlin/Long // androidx.compose.animation.core/estimateAnimationDurationMillis|estimateAnimationDurationMillis(kotlin.Double;kotlin.Double;kotlin.Double;kotlin.Double;kotlin.Double){}[0]
final fun androidx.compose.animation.core/estimateAnimationDurationMillis(kotlin/Double, kotlin/Double, kotlin/Double, kotlin/Double, kotlin/Double, kotlin/Double): kotlin/Long // androidx.compose.animation.core/estimateAnimationDurationMillis|estimateAnimationDurationMillis(kotlin.Double;kotlin.Double;kotlin.Double;kotlin.Double;kotlin.Double;kotlin.Double){}[0]
final fun androidx.compose.animation.core/estimateAnimationDurationMillis(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Long // androidx.compose.animation.core/estimateAnimationDurationMillis|estimateAnimationDurationMillis(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
final fun androidx.compose.animation.core/rememberInfiniteTransition(androidx.compose.runtime/Composer?, kotlin/Int): androidx.compose.animation.core/InfiniteTransition // androidx.compose.animation.core/rememberInfiniteTransition|rememberInfiniteTransition(androidx.compose.runtime.Composer?;kotlin.Int){}[0]
final fun androidx.compose.animation.core/rememberInfiniteTransition(kotlin/String?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.animation.core/InfiniteTransition // androidx.compose.animation.core/rememberInfiniteTransition|rememberInfiniteTransition(kotlin.String?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: androidx.compose.animation.core/AnimationVector> (androidx.compose.animation.core/Transition<#A>).androidx.compose.animation.core/animateValue(androidx.compose.animation.core/TwoWayConverter<#B, #C>, noinline kotlin/Function3<androidx.compose.animation.core/Transition.Segment<#A>, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.animation.core/FiniteAnimationSpec<#B>>?, kotlin/String?, kotlin/Function3<#A, androidx.compose.runtime/Composer, kotlin/Int, #B>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<#B> // androidx.compose.animation.core/animateValue|animateValue@androidx.compose.animation.core.Transition<0:0>(androidx.compose.animation.core.TwoWayConverter<0:1,0:2>;kotlin.Function3<androidx.compose.animation.core.Transition.Segment<0:0>,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.animation.core.FiniteAnimationSpec<0:1>>?;kotlin.String?;kotlin.Function3<0:0,androidx.compose.runtime.Composer,kotlin.Int,0:1>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<androidx.compose.animation.core.AnimationVector>}[0]
final inline fun <#A: kotlin/Any?> (androidx.compose.animation.core/Transition<#A>).androidx.compose.animation.core/animateDp(noinline kotlin/Function3<androidx.compose.animation.core/Transition.Segment<#A>, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.animation.core/FiniteAnimationSpec<androidx.compose.ui.unit/Dp>>?, kotlin/String?, kotlin/Function3<#A, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.ui.unit/Dp>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.unit/Dp> // androidx.compose.animation.core/animateDp|animateDp@androidx.compose.animation.core.Transition<0:0>(kotlin.Function3<androidx.compose.animation.core.Transition.Segment<0:0>,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.Dp>>?;kotlin.String?;kotlin.Function3<0:0,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.ui.unit.Dp>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (androidx.compose.animation.core/Transition<#A>).androidx.compose.animation.core/animateFloat(noinline kotlin/Function3<androidx.compose.animation.core/Transition.Segment<#A>, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.animation.core/FiniteAnimationSpec<kotlin/Float>>?, kotlin/String?, kotlin/Function3<#A, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Float>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<kotlin/Float> // androidx.compose.animation.core/animateFloat|animateFloat@androidx.compose.animation.core.Transition<0:0>(kotlin.Function3<androidx.compose.animation.core.Transition.Segment<0:0>,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.animation.core.FiniteAnimationSpec<kotlin.Float>>?;kotlin.String?;kotlin.Function3<0:0,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Float>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (androidx.compose.animation.core/Transition<#A>).androidx.compose.animation.core/animateInt(noinline kotlin/Function3<androidx.compose.animation.core/Transition.Segment<#A>, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.animation.core/FiniteAnimationSpec<kotlin/Int>>?, kotlin/String?, kotlin/Function3<#A, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Int>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<kotlin/Int> // androidx.compose.animation.core/animateInt|animateInt@androidx.compose.animation.core.Transition<0:0>(kotlin.Function3<androidx.compose.animation.core.Transition.Segment<0:0>,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.animation.core.FiniteAnimationSpec<kotlin.Int>>?;kotlin.String?;kotlin.Function3<0:0,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Int>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (androidx.compose.animation.core/Transition<#A>).androidx.compose.animation.core/animateIntOffset(noinline kotlin/Function3<androidx.compose.animation.core/Transition.Segment<#A>, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.animation.core/FiniteAnimationSpec<androidx.compose.ui.unit/IntOffset>>?, kotlin/String?, kotlin/Function3<#A, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.ui.unit/IntOffset>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.unit/IntOffset> // androidx.compose.animation.core/animateIntOffset|animateIntOffset@androidx.compose.animation.core.Transition<0:0>(kotlin.Function3<androidx.compose.animation.core.Transition.Segment<0:0>,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset>>?;kotlin.String?;kotlin.Function3<0:0,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.ui.unit.IntOffset>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (androidx.compose.animation.core/Transition<#A>).androidx.compose.animation.core/animateIntSize(noinline kotlin/Function3<androidx.compose.animation.core/Transition.Segment<#A>, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.animation.core/FiniteAnimationSpec<androidx.compose.ui.unit/IntSize>>?, kotlin/String?, kotlin/Function3<#A, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.ui.unit/IntSize>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.unit/IntSize> // androidx.compose.animation.core/animateIntSize|animateIntSize@androidx.compose.animation.core.Transition<0:0>(kotlin.Function3<androidx.compose.animation.core.Transition.Segment<0:0>,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntSize>>?;kotlin.String?;kotlin.Function3<0:0,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.ui.unit.IntSize>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (androidx.compose.animation.core/Transition<#A>).androidx.compose.animation.core/animateOffset(noinline kotlin/Function3<androidx.compose.animation.core/Transition.Segment<#A>, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.animation.core/FiniteAnimationSpec<androidx.compose.ui.geometry/Offset>>?, kotlin/String?, kotlin/Function3<#A, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.ui.geometry/Offset>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.geometry/Offset> // androidx.compose.animation.core/animateOffset|animateOffset@androidx.compose.animation.core.Transition<0:0>(kotlin.Function3<androidx.compose.animation.core.Transition.Segment<0:0>,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.geometry.Offset>>?;kotlin.String?;kotlin.Function3<0:0,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.ui.geometry.Offset>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (androidx.compose.animation.core/Transition<#A>).androidx.compose.animation.core/animateRect(noinline kotlin/Function3<androidx.compose.animation.core/Transition.Segment<#A>, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.animation.core/FiniteAnimationSpec<androidx.compose.ui.geometry/Rect>>?, kotlin/String?, kotlin/Function3<#A, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.ui.geometry/Rect>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.geometry/Rect> // androidx.compose.animation.core/animateRect|animateRect@androidx.compose.animation.core.Transition<0:0>(kotlin.Function3<androidx.compose.animation.core.Transition.Segment<0:0>,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.geometry.Rect>>?;kotlin.String?;kotlin.Function3<0:0,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.ui.geometry.Rect>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (androidx.compose.animation.core/Transition<#A>).androidx.compose.animation.core/animateSize(noinline kotlin/Function3<androidx.compose.animation.core/Transition.Segment<#A>, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.animation.core/FiniteAnimationSpec<androidx.compose.ui.geometry/Size>>?, kotlin/String?, kotlin/Function3<#A, androidx.compose.runtime/Composer, kotlin/Int, androidx.compose.ui.geometry/Size>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): androidx.compose.runtime/State<androidx.compose.ui.geometry/Size> // androidx.compose.animation.core/animateSize|animateSize@androidx.compose.animation.core.Transition<0:0>(kotlin.Function3<androidx.compose.animation.core.Transition.Segment<0:0>,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.geometry.Size>>?;kotlin.String?;kotlin.Function3<0:0,androidx.compose.runtime.Composer,kotlin.Int,androidx.compose.ui.geometry.Size>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> (androidx.compose.animation.core/AnimationState<#A, #B>).androidx.compose.animation.core/animateDecay(androidx.compose.animation.core/DecayAnimationSpec<#A>, kotlin/Boolean = ..., kotlin/Function1<androidx.compose.animation.core/AnimationScope<#A, #B>, kotlin/Unit> = ...) // androidx.compose.animation.core/animateDecay|animateDecay@androidx.compose.animation.core.AnimationState<0:0,0:1>(androidx.compose.animation.core.DecayAnimationSpec<0:0>;kotlin.Boolean;kotlin.Function1<androidx.compose.animation.core.AnimationScope<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final suspend fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> (androidx.compose.animation.core/AnimationState<#A, #B>).androidx.compose.animation.core/animateTo(#A, androidx.compose.animation.core/AnimationSpec<#A> = ..., kotlin/Boolean = ..., kotlin/Function1<androidx.compose.animation.core/AnimationScope<#A, #B>, kotlin/Unit> = ...) // androidx.compose.animation.core/animateTo|animateTo@androidx.compose.animation.core.AnimationState<0:0,0:1>(0:0;androidx.compose.animation.core.AnimationSpec<0:0>;kotlin.Boolean;kotlin.Function1<androidx.compose.animation.core.AnimationScope<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final suspend fun <#A: kotlin/Any?, #B: androidx.compose.animation.core/AnimationVector> androidx.compose.animation.core/animate(androidx.compose.animation.core/TwoWayConverter<#A, #B>, #A, #A, #A? = ..., androidx.compose.animation.core/AnimationSpec<#A> = ..., kotlin/Function2<#A, #A, kotlin/Unit>) // androidx.compose.animation.core/animate|animate(androidx.compose.animation.core.TwoWayConverter<0:0,0:1>;0:0;0:0;0:0?;androidx.compose.animation.core.AnimationSpec<0:0>;kotlin.Function2<0:0,0:0,kotlin.Unit>){0§<kotlin.Any?>;1§<androidx.compose.animation.core.AnimationVector>}[0]
final suspend fun <#A: kotlin/Any?> androidx.compose.animation.core/withInfiniteAnimationFrameNanos(kotlin/Function1<kotlin/Long, #A>): #A // androidx.compose.animation.core/withInfiniteAnimationFrameNanos|withInfiniteAnimationFrameNanos(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final suspend fun androidx.compose.animation.core/animate(kotlin/Float, kotlin/Float, kotlin/Float = ..., androidx.compose.animation.core/AnimationSpec<kotlin/Float> = ..., kotlin/Function2<kotlin/Float, kotlin/Float, kotlin/Unit>) // androidx.compose.animation.core/animate|animate(kotlin.Float;kotlin.Float;kotlin.Float;androidx.compose.animation.core.AnimationSpec<kotlin.Float>;kotlin.Function2<kotlin.Float,kotlin.Float,kotlin.Unit>){}[0]
final suspend fun androidx.compose.animation.core/animateDecay(kotlin/Float, kotlin/Float, androidx.compose.animation.core/FloatDecayAnimationSpec, kotlin/Function2<kotlin/Float, kotlin/Float, kotlin/Unit>) // androidx.compose.animation.core/animateDecay|animateDecay(kotlin.Float;kotlin.Float;androidx.compose.animation.core.FloatDecayAnimationSpec;kotlin.Function2<kotlin.Float,kotlin.Float,kotlin.Unit>){}[0]
final suspend inline fun <#A: kotlin/Any?> androidx.compose.animation.core/withInfiniteAnimationFrameMillis(crossinline kotlin/Function1<kotlin/Long, #A>): #A // androidx.compose.animation.core/withInfiniteAnimationFrameMillis|withInfiniteAnimationFrameMillis(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
