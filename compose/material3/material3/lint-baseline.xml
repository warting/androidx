<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.12.0-alpha08" type="baseline" client="gradle" dependencies="false" name="AGP (8.12.0-alpha08)" variant="all" version="8.12.0-alpha08">

    <issue
        id="CheckResult"
        message="The result of `assertThat` is not used"
        errorLine1="                assertThat(dateRangePickerState.getSelectedEndDate())"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/DateRangePickerTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `assertThat` is not used"
        errorLine1="            assertThat(sheetState.currentValue == SheetValue.Expanded)"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ModalBottomSheetTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `assertThat` is not used"
        errorLine1="        assertThat(keylines.firstFocal == keylines.firstNonAnchor)"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidUnitTest/kotlin/androidx/compose/material3/carousel/MultiBrowseTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `assertThat` is not used"
        errorLine1="        assertThat(keylines.lastFocal == keylines.lastNonAnchor)"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidUnitTest/kotlin/androidx/compose/material3/carousel/MultiBrowseTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `assertThat` is not used"
        errorLine1="        assertThat(rule.onNodeWithTag(&quot;ROW_TAG&quot;).assertWidthIsEqualTo(expectedWidth))"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/NavigationBarTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonGroupScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonGroupScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonGroupScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonGroupScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonGroupScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/CardScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/CheckboxScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/FloatingActionButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/IconButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/NavigationBarScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/NavigationDrawerItemScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/NavigationRailScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SplitButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SwitchScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SwitchScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SwitchScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/TabScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ToggleButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ToggleButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ToggleButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ToggleButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ToggleButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ToggleButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ToggleButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ToggleButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ToggleButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ToggleButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="RememberInComposition"
        message="Calling a @RememberInComposition annotated declaration inside composition without using `remember`"
        errorLine1="                startThumb = { SliderDefaults.Thumb(MutableInteractionSource()) },"
        errorLine2="                                                    ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="RememberInComposition"
        message="Calling a @RememberInComposition annotated declaration inside composition without using `remember`"
        errorLine1="                endThumb = { SliderDefaults.Thumb(MutableInteractionSource()) },"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="RememberInComposition"
        message="Calling a @RememberInComposition annotated declaration inside composition without using `remember`"
        errorLine1="                        interactionSource = MutableInteractionSource(),"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="RememberInComposition"
        message="Calling a @RememberInComposition annotated declaration inside composition without using `remember`"
        errorLine1="                        interactionSource = MutableInteractionSource(),"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="RememberInComposition"
        message="Calling a @RememberInComposition annotated declaration inside composition without using `remember`"
        errorLine1="                        interactionSource = MutableInteractionSource(),"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="RememberInComposition"
        message="Calling a @RememberInComposition annotated declaration inside composition without using `remember`"
        errorLine1="                        interactionSource = MutableInteractionSource(),"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="ComposableLambdaParameterNaming"
        message="Composable lambda parameter should be named `content`"
        errorLine1="        trailingIcon: (@Composable () -> Unit)? = null,"
        errorLine2="        ~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SearchBarTest.kt"/>
    </issue>

    <issue
        id="ComposableLambdaParameterNaming"
        message="Composable lambda parameter should be named `content`"
        errorLine1="        tooltipContent: @Composable () -> Unit = {},"
        errorLine2="        ~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/TooltipTest.kt"/>
    </issue>

    <issue
        id="ComposableLambdaParameterPosition"
        message="Composable lambda parameter should be the last parameter so it can be used as a trailing lambda"
        errorLine1="    overflowIndicator: @Composable (ButtonGroupMenuState) -> Unit,"
        errorLine2="    ~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/ButtonGroup.kt"/>
    </issue>

    <issue
        id="ComposableLambdaParameterPosition"
        message="Composable lambda parameter should be the last parameter so it can be used as a trailing lambda"
        errorLine1="        tooltipContent: @Composable () -> Unit = {},"
        errorLine2="        ~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/TooltipTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions with a return type should start with a lowercase letter"
        errorLine1="fun DropdownMenu("
        errorLine2="    ~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/material3/AndroidMenu.android.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions that return Unit should start with an uppercase letter"
        errorLine1="    private fun testContent("
        errorLine2="                ~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/FloatingActionButtonMenuScreenshotTest.kt"/>
    </issue>

    <issue
        id="ConfigurationScreenWidthHeight"
        message="Using Configuration.screenWidthDp instead of LocalWindowInfo.current.containerSize"
        errorLine1="            screenWidth = configuration.screenWidthDp.dp"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonGroupTest.kt"/>
    </issue>

    <issue
        id="ConfigurationScreenWidthHeight"
        message="Using Configuration.screenWidthDp instead of LocalWindowInfo.current.containerSize"
        errorLine1="            screenWidth = configuration.screenWidthDp.dp"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonGroupTest.kt"/>
    </issue>

    <issue
        id="ConfigurationScreenWidthHeight"
        message="Using Configuration.screenWidthDp instead of LocalWindowInfo.current.containerSize"
        errorLine1="            screenWidth = configuration.screenWidthDp.dp"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ButtonGroupTest.kt"/>
    </issue>

    <issue
        id="ConfigurationScreenWidthHeight"
        message="Using Configuration.screenHeightDp instead of LocalWindowInfo.current.containerSize"
        errorLine1="            val screenHeight = LocalContext.current.resources.configuration.screenHeightDp.dp"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ModalBottomSheetTest.kt"/>
    </issue>

    <issue
        id="ConfigurationScreenWidthHeight"
        message="Using Configuration.screenHeightDp instead of LocalWindowInfo.current.containerSize"
        errorLine1="            screenHeight = context.resources.configuration.screenHeightDp.dp"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ModalBottomSheetTest.kt"/>
    </issue>

    <issue
        id="ConfigurationScreenWidthHeight"
        message="Using Configuration.screenHeightDp instead of LocalWindowInfo.current.containerSize"
        errorLine1="    LocalConfiguration.current.screenHeightDp.dp"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/material3/SearchBar.android.kt"/>
    </issue>

    <issue
        id="ConfigurationScreenWidthHeight"
        message="Using Configuration.screenWidthDp instead of LocalWindowInfo.current.containerSize"
        errorLine1="                currentDensity.density * (currentConfiguration.screenWidthDp.dp / simulatedWidth)"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ShortNavigationBarScreenshotTest.kt"/>
    </issue>

    <issue
        id="ConfigurationScreenWidthHeight"
        message="Using Configuration.screenWidthDp instead of LocalWindowInfo.current.containerSize"
        errorLine1="                currentDensity.density * (currentConfiguration.screenWidthDp.dp / simulatedWidth)"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ShortNavigationBarTest.kt"/>
    </issue>

    <issue
        id="ConfigurationScreenWidthHeight"
        message="Using Configuration.screenHeightDp instead of LocalWindowInfo.current.containerSize"
        errorLine1="            newConfiguration.screenHeightDp = 800"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/TimePickerTest.kt"/>
    </issue>

    <issue
        id="ConfigurationScreenWidthHeight"
        message="Using Configuration.screenWidthDp instead of LocalWindowInfo.current.containerSize"
        errorLine1="            newConfiguration.screenWidthDp = 500"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/TimePickerTest.kt"/>
    </issue>

    <issue
        id="ConfigurationScreenWidthHeight"
        message="Using Configuration.screenHeightDp instead of LocalWindowInfo.current.containerSize"
        errorLine1="            newConfiguration.screenHeightDp = 500"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/TimePickerTest.kt"/>
    </issue>

    <issue
        id="ConfigurationScreenWidthHeight"
        message="Using Configuration.screenWidthDp instead of LocalWindowInfo.current.containerSize"
        errorLine1="            newConfiguration.screenWidthDp = 800"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/TimePickerTest.kt"/>
    </issue>

    <issue
        id="LocalContextConfigurationRead"
        message="Reading Configuration using LocalContext.current.resources.configuration"
        errorLine1="            val resScreenWidth = context.resources.configuration.screenWidthDp"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/AlertDialogTest.kt"/>
    </issue>

    <issue
        id="LocalContextConfigurationRead"
        message="Reading Configuration using LocalContext.current.resources.configuration"
        errorLine1="            val resScreenWidth = context.resources.configuration.screenWidthDp"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/AlertDialogTest.kt"/>
    </issue>

    <issue
        id="LocalContextConfigurationRead"
        message="Reading Configuration using LocalContext.current.resources.configuration"
        errorLine1="            val screenHeight = LocalContext.current.resources.configuration.screenHeightDp.dp"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ModalBottomSheetTest.kt"/>
    </issue>

    <issue
        id="LocalContextConfigurationRead"
        message="Reading Configuration using LocalContext.current.resources.configuration"
        errorLine1="            screenHeight = context.resources.configuration.screenHeightDp.dp"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ModalBottomSheetTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be named modifier"
        errorLine1="        textFieldModifier: Modifier = Modifier,"
        errorLine2="        ~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ExposedDropdownMenuTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="        textFieldModifier: Modifier = Modifier,"
        errorLine2="        ~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ExposedDropdownMenuTest.kt"/>
    </issue>

    <issue
        id="UnrememberedMutableInteractionSource"
        message="Creating a MutableInteractionSource during composition without using `remember`"
        errorLine1="                startThumb = { SliderDefaults.Thumb(MutableInteractionSource()) },"
        errorLine2="                                                    ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="UnrememberedMutableInteractionSource"
        message="Creating a MutableInteractionSource during composition without using `remember`"
        errorLine1="                endThumb = { SliderDefaults.Thumb(MutableInteractionSource()) },"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="UnrememberedMutableInteractionSource"
        message="Creating a MutableInteractionSource during composition without using `remember`"
        errorLine1="                        interactionSource = MutableInteractionSource(),"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="UnrememberedMutableInteractionSource"
        message="Creating a MutableInteractionSource during composition without using `remember`"
        errorLine1="                        interactionSource = MutableInteractionSource(),"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="UnrememberedMutableInteractionSource"
        message="Creating a MutableInteractionSource during composition without using `remember`"
        errorLine1="                        interactionSource = MutableInteractionSource(),"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="UnrememberedMutableInteractionSource"
        message="Creating a MutableInteractionSource during composition without using `remember`"
        errorLine1="                        interactionSource = MutableInteractionSource(),"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter it is not used"
        errorLine1="            ) {}"
        errorLine2="              ~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/AppBarTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter it is not used"
        errorLine1="            ) {}"
        errorLine2="              ~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/AppBarTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter it is not used"
        errorLine1="                Scaffold { Text(&quot;Scaffold body&quot;) }"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ScaffoldTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter it is not used"
        errorLine1="            Scaffold {"
        errorLine2="                     ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ScaffoldTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter it is not used"
        errorLine1="            ) {"
        errorLine2="              ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ScaffoldTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter it is not used"
        errorLine1="            ) {"
        errorLine2="              ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ScaffoldTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter it is not used"
        errorLine1="                ) {"
        errorLine2="                  ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ScaffoldTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter it is not used"
        errorLine1="                ) {"
        errorLine2="                  ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ScaffoldTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter it is not used"
        errorLine1="                ) {"
        errorLine2="                  ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ScaffoldTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter it is not used"
        errorLine1="                ) {"
        errorLine2="                  ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ScaffoldTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter it is not used"
        errorLine1="                ) {"
        errorLine2="                  ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ScaffoldTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter it is not used"
        errorLine1="                    ) {"
        errorLine2="                      ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ScaffoldTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter it is not used"
        errorLine1="                ) {"
        errorLine2="                  ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/ScaffoldTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter _ is not used"
        errorLine1="                content = { _ ->"
        errorLine2="                            ~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="UnusedMaterial3ScaffoldPaddingParameter"
        message="Content padding parameter _ is not used"
        errorLine1="                content = { _ ->"
        errorLine2="                            ~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SliderTest.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="    keylines.forEach {"
        errorLine2="             ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/carousel/Carousel.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                perVertexRounding = buildList { for (p in actualPoints) add(p.r) },"
        errorLine2="                                                       ~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/MaterialShapes.kt"/>
    </issue>

    <issue
        id="AutoboxingStateValueProperty"
        message="Assigning `value` will cause an autoboxing operation. Use `floatValue` to avoid unnecessary allocations."
        errorLine1="            LoadingIndicator(modifier = Modifier.testTag(TestTag), progress = { progress.value })"
        errorLine2="                                                                                         ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/LoadingIndicatorTest.kt"/>
    </issue>

    <issue
        id="AutoboxingStateValueProperty"
        message="Assigning `value` will cause an autoboxing operation. Use `floatValue` to avoid unnecessary allocations."
        errorLine1="                progress = { progress.value },"
        errorLine2="                                      ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/LoadingIndicatorTest.kt"/>
    </issue>

    <issue
        id="AutoboxingStateValueProperty"
        message="Assigning `value` will cause an autoboxing operation. Use `floatValue` to avoid unnecessary allocations."
        errorLine1="            LoadingIndicator(modifier = Modifier.testTag(TestTag), progress = { progress.value })"
        errorLine2="                                                                                         ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/LoadingIndicatorTest.kt"/>
    </issue>

    <issue
        id="AutoboxingStateValueProperty"
        message="Assigning `value` will cause an autoboxing operation. Use `floatValue` to avoid unnecessary allocations."
        errorLine1="        rule.runOnUiThread { progress.value = 0.5f }"
        errorLine2="                                      ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/LoadingIndicatorTest.kt"/>
    </issue>

    <issue
        id="AutoboxingStateValueProperty"
        message="Assigning `value` will cause an autoboxing operation. Use `floatValue` to avoid unnecessary allocations."
        errorLine1="                progress = { progress.value },"
        errorLine2="                                      ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/LoadingIndicatorTest.kt"/>
    </issue>

    <issue
        id="AutoboxingStateValueProperty"
        message="Assigning `value` will cause an autoboxing operation. Use `floatValue` to avoid unnecessary allocations."
        errorLine1="        rule.runOnUiThread { progress.value = 0.5f }"
        errorLine2="                                      ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/LoadingIndicatorTest.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable crossAxisSizes with type List&lt;Integer>: replace with IntList"
        errorLine1="        val crossAxisSizes = mutableListOf&lt;Int>()"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AlertDialog.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable crossAxisPositions with type List&lt;Integer>: replace with IntList"
        errorLine1="        val crossAxisPositions = mutableListOf&lt;Int>()"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AlertDialog.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable tabContentWidths with type List&lt;Dp>: replace with FloatList"
        errorLine1="            val tabContentWidths = mutableListOf&lt;Dp>()"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TabRow.kt"/>
    </issue>

</issues>
