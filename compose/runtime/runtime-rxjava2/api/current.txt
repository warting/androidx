// Signature format: 4.0
package androidx.compose.runtime.rxjava2 {

  public final class RxJava2AdapterKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<java.lang.Boolean> subscribeAsState(io.reactivex.Completable);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<java.lang.Boolean!> subscribeAsState(io.reactivex.Completable, androidx.compose.runtime.Composer?, int);
    method @androidx.compose.runtime.Composable public static <R, T extends R> androidx.compose.runtime.State<R> subscribeAsState(io.reactivex.Flowable<T>, R initial);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static <R, T extends R> androidx.compose.runtime.State<R!> subscribeAsState(io.reactivex.Flowable<T!>, R!, androidx.compose.runtime.Composer?, int);
    method @androidx.compose.runtime.Composable public static <R, T extends R> androidx.compose.runtime.State<R> subscribeAsState(io.reactivex.Maybe<T>, R initial);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static <R, T extends R> androidx.compose.runtime.State<R!> subscribeAsState(io.reactivex.Maybe<T!>, R!, androidx.compose.runtime.Composer?, int);
    method @androidx.compose.runtime.Composable public static <R, T extends R> androidx.compose.runtime.State<R> subscribeAsState(io.reactivex.Observable<T>, R initial);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static <R, T extends R> androidx.compose.runtime.State<R!> subscribeAsState(io.reactivex.Observable<T!>, R!, androidx.compose.runtime.Composer?, int);
    method @androidx.compose.runtime.Composable public static <R, T extends R> androidx.compose.runtime.State<R> subscribeAsState(io.reactivex.Single<T>, R initial);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static <R, T extends R> androidx.compose.runtime.State<R!> subscribeAsState(io.reactivex.Single<T!>, R!, androidx.compose.runtime.Composer?, int);
  }

}

