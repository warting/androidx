/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was created using the `create_project.py` script located in the
 * `<AndroidX root>/development/project-creator` directory.
 *
 * Please use that script when creating a new project, rather than copying an existing project and
 * modifying its settings.
 */

import androidx.build.SoftwareType
import androidx.build.PlatformIdentifier

plugins {
    id("AndroidXPlugin")
    id("AndroidXComposePlugin")
    alias(libs.plugins.kotlinSerialization)
}

androidXMultiplatform {
    androidLibrary {
        compileSdk = 35
        namespace = "androidx.compose.runtime.saveable"
        androidResources.enable = true
    }
    desktop()
    mingwX64()
    linux()
    mac()
    ios()
    tvos()
    watchos()
    js()
    wasmJs()

    defaultPlatform(PlatformIdentifier.ANDROID)

    sourceSets {
        commonMain {
            dependencies {
                implementation(libs.kotlinStdlib)
                implementation("androidx.collection:collection:1.5.0")
                implementation(project(":lifecycle:lifecycle-runtime-compose"))
                api(project(":compose:runtime:runtime"))
                api(project(":savedstate:savedstate-compose"))
            }
        }

        commonTest {
            dependencies {
                implementation(libs.kotlinTest)
                implementation(libs.kotlinCoroutinesTest)
            }
        }

        androidMain {
            dependsOn(commonMain)
            dependencies {
                api("androidx.annotation:annotation:1.8.1")
            }
        }

        androidInstrumentedTest {
            dependsOn(commonTest)
            dependencies {
                implementation(project(":compose:foundation:foundation"))
                implementation(project(":compose:ui:ui"))
                implementation(project(":compose:ui:ui-test-junit4"))
                implementation(project(":compose:test-utils"))
                implementation("androidx.fragment:fragment:1.3.0")
                implementation("androidx.activity:activity-compose:1.7.0")
                implementation(libs.testUiautomator)
                implementation(libs.testCore)
                implementation(libs.testRules)
                implementation(libs.testRunner)
                implementation(libs.espressoCore)
                implementation(libs.junit)
                implementation(libs.truth)
                implementation(libs.dexmakerMockito)
                implementation(libs.mockitoCore)
            }
        }

        androidUnitTest {
            dependsOn(commonTest)
            dependencies {
                implementation(libs.testRules)
                implementation(libs.testRunner)
                implementation(libs.junit)
                implementation(libs.truth)
            }
        }

        webMain {
            dependsOn(commonMain)
        }

        webTest {
            dependsOn(commonTest)
        }

        jsMain {
            dependsOn(webMain)
        }

        jsTest {
            dependsOn(webTest)
        }

        wasmJsMain {
            dependsOn(webMain)
        }

        wasmJsTest {
            dependsOn(webTest)
        }
    }
}

dependencies {
    lintPublish(project(":compose:runtime:runtime-saveable-lint"))
}

androidx {
    name = "Compose Saveable"
    type = SoftwareType.PUBLISHED_LIBRARY_ONLY_USED_BY_KOTLIN_CONSUMERS
    inceptionYear = "2020"
    description = "Compose components that allow saving and restoring the local ui state"
    samples(project(":compose:runtime:runtime-saveable:runtime-saveable-samples"))
}
