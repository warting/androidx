// Signature format: 4.0
package androidx.compose.remote.core {

  public interface CompanionOperation {
    method public void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
  }

  public class CoreDocument implements androidx.compose.remote.core.serialize.Serializable {
    ctor public CoreDocument();
    ctor public CoreDocument(java.time.Clock);
    method public void addActionCallback(androidx.compose.remote.core.CoreDocument.ActionCallback);
    method public void addClickArea(int, String?, float, float, float, float, String?);
    method public void addIdActionListener(androidx.compose.remote.core.CoreDocument.IdActionCallback);
    method public void addTouchListener(androidx.compose.remote.core.TouchListener);
    method public void appliedTouchOperation(androidx.compose.remote.core.operations.layout.Component);
    method public void applyUpdate(androidx.compose.remote.core.CoreDocument);
    method public int bitmapMemory();
    method public boolean canBeDisplayed(int, int, long);
    method public void checkShaders(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument.ShaderControl);
    method public void clearActionCallbacks();
    method public void computeScale(float, float, float[]);
    method public String displayHierarchy();
    method public void evaluateFloatExpression(int, int, androidx.compose.remote.core.RemoteContext);
    method public void evaluateIntExpression(long, int, androidx.compose.remote.core.RemoteContext);
    method public androidx.compose.remote.core.RemoteComposeBuffer getBuffer();
    method public java.util.Set<androidx.compose.remote.core.CoreDocument.ClickAreaRepresentation!> getClickAreas();
    method public java.time.Clock getClock();
    method public androidx.compose.remote.core.operations.layout.Component? getComponent(int);
    method public String? getContentDescription();
    method public int getContentMode();
    method public int getContentScroll();
    method public int getContentSizing();
    method public static int getDocumentApiLevel();
    method public int getHeight();
    method public int getHostExceptionID();
    method public java.util.HashSet<androidx.compose.remote.core.CoreDocument.IdActionCallback!> getIdActionListeners();
    method public String?[]? getNamedColors();
    method public String![] getNamedVariables(int);
    method public int getNumberOfOps();
    method public java.util.List<androidx.compose.remote.core.Operation!> getOperations();
    method public int getOpsPerFrame();
    method public Object? getProperty(short);
    method public androidx.compose.remote.core.RemoteComposeState getRemoteComposeState();
    method public long getRequiredCapabilities();
    method public androidx.compose.remote.core.operations.layout.RootLayoutComponent? getRootLayoutComponent();
    method public String[] getStats();
    method public int getWidth();
    method public void haptic(int);
    method public boolean hasTouchListener();
    method public void initFromBuffer(androidx.compose.remote.core.RemoteComposeBuffer);
    method public void initializeContext(androidx.compose.remote.core.RemoteContext);
    method public void invalidateMeasure();
    method public boolean isUpdateDoc();
    method public int needsRepaint();
    method public void notifyOfException(int, String?);
    method public void onClick(androidx.compose.remote.core.RemoteContext, float, float);
    method public void paint(androidx.compose.remote.core.RemoteContext, int);
    method public void performClick(androidx.compose.remote.core.RemoteContext, int, String);
    method public void runNamedAction(String, Object?);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void setBuffer(androidx.compose.remote.core.RemoteComposeBuffer);
    method public void setContentDescription(String?);
    method public void setHapticEngine(androidx.compose.remote.core.CoreDocument.HapticEngine);
    method public void setHeight(int);
    method public void setHostExceptionID(int);
    method public void setProperties(androidx.compose.remote.core.operations.utilities.IntMap<java.lang.Object!>?);
    method public void setRemoteComposeState(androidx.compose.remote.core.RemoteComposeState);
    method public void setRequiredCapabilities(long);
    method public void setRootContentBehavior(int, int, int, int);
    method public void setUpdateDoc(boolean);
    method public void setVersion(int, int, int);
    method public void setWidth(int);
    method public String toNestedString();
    method public void touchCancel(androidx.compose.remote.core.RemoteContext, float, float, float, float);
    method public void touchDown(androidx.compose.remote.core.RemoteContext, float, float);
    method public boolean touchDrag(androidx.compose.remote.core.RemoteContext, float, float);
    method public void touchUp(androidx.compose.remote.core.RemoteContext, float, float, float, float);
    field public static final int DOCUMENT_API_LEVEL = 7; // 0x7
    field public static final int MAJOR_VERSION = 1; // 0x1
    field public static final int MINOR_VERSION = 1; // 0x1
    field public static final int PATCH_VERSION = 0; // 0x0
    field @VisibleForTesting public androidx.compose.remote.core.TimeVariables mTimeVariables;
  }

  public static interface CoreDocument.ActionCallback {
    method public void onAction(String, Object?);
  }

  public static class CoreDocument.ClickAreaRepresentation {
    ctor public CoreDocument.ClickAreaRepresentation(int, String?, float, float, float, float, String?);
    method public boolean contains(float, float);
    method public String? getContentDescription();
    method public int getId();
    method public float getLeft();
    method public String? getMetadata();
    method public float getTop();
    method public float height();
    method public float width();
  }

  public static interface CoreDocument.HapticEngine {
    method public void haptic(int);
  }

  public static interface CoreDocument.IdActionCallback {
    method public void onAction(int, String?);
  }

  public static interface CoreDocument.ShaderControl {
    method public boolean isShaderValid(String);
  }

  public interface DocumentedCompanion extends androidx.compose.remote.core.CompanionOperation androidx.compose.remote.core.documentation.DocumentedCompanionOperation {
  }

  public interface MatrixAccess {
    method public static void dump(float[]);
    method public float[] get();
    method public static float[]? to3x3(float[]);
  }

  public abstract class Operation {
    ctor public Operation();
    method public abstract void apply(androidx.compose.remote.core.RemoteContext);
    method public abstract String deepToString(String);
    method public boolean isDirty();
    method public void markDirty();
    method public void markNotDirty();
    method public abstract void write(androidx.compose.remote.core.WireBuffer);
  }

  public interface OperationInterface {
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public String deepToString(String);
    method public boolean isDirty();
    method public void markNotDirty();
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class Operations {
    method public static androidx.compose.remote.core.Operations.UniqueIntMap<androidx.compose.remote.core.CompanionOperation!>? getOperations(int, int);
    method public static boolean valid(int, int, int);
    field public static final int ACCESSIBILITY_SEMANTICS = 250; // 0xfa
    field public static final int ANIMATED_FLOAT = 81; // 0x51
    field public static final int ANIMATION_SPEC = 14; // 0xe
    field public static final int ATTRIBUTE_COLOR = 180; // 0xb4
    field public static final int ATTRIBUTE_IMAGE = 171; // 0xab
    field public static final int ATTRIBUTE_TEXT = 170; // 0xaa
    field public static final int ATTRIBUTE_TIME = 172; // 0xac
    field public static final int BITMAP_TEXT_MEASURE = 183; // 0xb7
    field public static final int CANVAS_OPERATIONS = 173; // 0xad
    field public static final int CLICK_AREA = 64; // 0x40
    field public static final int CLIP_PATH = 38; // 0x26
    field public static final int CLIP_RECT = 39; // 0x27
    field public static final int COLOR_CONSTANT = 138; // 0x8a
    field public static final int COLOR_EXPRESSIONS = 134; // 0x86
    field public static final int COMPONENT_START = 2; // 0x2
    field public static final int COMPONENT_VALUE = 150; // 0x96
    field public static final int CONDITIONAL_OPERATIONS = 178; // 0xb2
    field public static final int CONTAINER_END = 214; // 0xd6
    field public static final int DATA_BITMAP = 101; // 0x65
    field public static final int DATA_BITMAP_FONT = 167; // 0xa7
    field public static final int DATA_BOOLEAN = 143; // 0x8f
    field public static final int DATA_FLOAT = 80; // 0x50
    field public static final int DATA_FONT = 189; // 0xbd
    field public static final int DATA_INT = 140; // 0x8c
    field public static final int DATA_LONG = 148; // 0x94
    field public static final int DATA_MAP_LOOKUP = 154; // 0x9a
    field public static final int DATA_PATH = 123; // 0x7b
    field public static final int DATA_SHADER = 45; // 0x2d
    field public static final int DATA_TEXT = 102; // 0x66
    field public static final int DEBUG_MESSAGE = 179; // 0xb3
    field public static final int DRAW_ARC = 152; // 0x98
    field public static final int DRAW_BITMAP = 44; // 0x2c
    field public static final int DRAW_BITMAP_FONT_TEXT_RUN = 48; // 0x30
    field public static final int DRAW_BITMAP_FONT_TEXT_RUN_ON_PATH = 49; // 0x31
    field public static final int DRAW_BITMAP_INT = 66; // 0x42
    field public static final int DRAW_BITMAP_SCALED = 149; // 0x95
    field public static final int DRAW_BITMAP_TEXT_ANCHORED = 184; // 0xb8
    field public static final int DRAW_CIRCLE = 46; // 0x2e
    field public static final int DRAW_CONTENT = 139; // 0x8b
    field public static final int DRAW_LINE = 47; // 0x2f
    field public static final int DRAW_OVAL = 56; // 0x38
    field public static final int DRAW_PATH = 124; // 0x7c
    field public static final int DRAW_RECT = 42; // 0x2a
    field public static final int DRAW_ROUND_RECT = 51; // 0x33
    field public static final int DRAW_SECTOR = 52; // 0x34
    field public static final int DRAW_TEXT_ANCHOR = 133; // 0x85
    field public static final int DRAW_TEXT_ON_PATH = 53; // 0x35
    field public static final int DRAW_TEXT_RUN = 43; // 0x2b
    field public static final int DRAW_TO_BITMAP = 190; // 0xbe
    field public static final int DRAW_TWEEN_PATH = 125; // 0x7d
    field public static final int EXTENDED_OPCODE = 255; // 0xff
    field public static final int EXTENSION_RANGE_RESERVED_1 = 254; // 0xfe
    field public static final int EXTENSION_RANGE_RESERVED_2 = 253; // 0xfd
    field public static final int EXTENSION_RANGE_RESERVED_3 = 252; // 0xfc
    field public static final int EXTENSION_RANGE_RESERVED_4 = 251; // 0xfb
    field public static final int FLOAT_LIST = 147; // 0x93
    field public static final int FUNCTION_CALL = 166; // 0xa6
    field public static final int FUNCTION_DEFINE = 168; // 0xa8
    field public static final int HAPTIC_FEEDBACK = 177; // 0xb1
    field public static final int HEADER = 0; // 0x0
    field public static final int HOST_ACTION = 209; // 0xd1
    field public static final int HOST_METADATA_ACTION = 216; // 0xd8
    field public static final int HOST_NAMED_ACTION = 210; // 0xd2
    field public static final int ID_LIST = 146; // 0x92
    field public static final int ID_LOOKUP = 192; // 0xc0
    field public static final int ID_MAP = 145; // 0x91
    field public static final int IMPULSE_PROCESS = 165; // 0xa5
    field public static final int IMPULSE_START = 164; // 0xa4
    field public static final int INTEGER_EXPRESSION = 144; // 0x90
    field public static final int LAYOUT_BOX = 202; // 0xca
    field public static final int LAYOUT_CANVAS = 205; // 0xcd
    field public static final int LAYOUT_CANVAS_CONTENT = 207; // 0xcf
    field public static final int LAYOUT_COLLAPSIBLE_COLUMN = 233; // 0xe9
    field public static final int LAYOUT_COLLAPSIBLE_ROW = 230; // 0xe6
    field public static final int LAYOUT_COLUMN = 204; // 0xcc
    field public static final int LAYOUT_CONTENT = 201; // 0xc9
    field public static final int LAYOUT_FIT_BOX = 176; // 0xb0
    field public static final int LAYOUT_IMAGE = 234; // 0xea
    field public static final int LAYOUT_ROOT = 200; // 0xc8
    field public static final int LAYOUT_ROW = 203; // 0xcb
    field public static final int LAYOUT_STATE = 217; // 0xd9
    field public static final int LAYOUT_TEXT = 208; // 0xd0
    field public static final int LOAD_BITMAP = 4; // 0x4
    field public static final int LOOP_START = 215; // 0xd7
    field public static final int MATRIX_CONSTANT = 186; // 0xba
    field public static final int MATRIX_EXPRESSION = 187; // 0xbb
    field public static final int MATRIX_FROM_PATH = 181; // 0xb5
    field public static final int MATRIX_RESTORE = 131; // 0x83
    field public static final int MATRIX_ROTATE = 129; // 0x81
    field public static final int MATRIX_SAVE = 130; // 0x82
    field public static final int MATRIX_SCALE = 126; // 0x7e
    field public static final int MATRIX_SET = 132; // 0x84
    field public static final int MATRIX_SKEW = 128; // 0x80
    field public static final int MATRIX_TRANSLATE = 127; // 0x7f
    field public static final int MATRIX_VECTOR_MATH = 188; // 0xbc
    field public static final int MODIFIER_BACKGROUND = 55; // 0x37
    field public static final int MODIFIER_BORDER = 107; // 0x6b
    field public static final int MODIFIER_CLICK = 59; // 0x3b
    field public static final int MODIFIER_CLIP_RECT = 108; // 0x6c
    field public static final int MODIFIER_COLLAPSIBLE_PRIORITY = 235; // 0xeb
    field public static final int MODIFIER_DRAW_CONTENT = 174; // 0xae
    field public static final int MODIFIER_GRAPHICS_LAYER = 224; // 0xe0
    field public static final int MODIFIER_HEIGHT = 67; // 0x43
    field public static final int MODIFIER_HEIGHT_IN = 232; // 0xe8
    field public static final int MODIFIER_MARQUEE = 228; // 0xe4
    field public static final int MODIFIER_OFFSET = 221; // 0xdd
    field public static final int MODIFIER_PADDING = 58; // 0x3a
    field public static final int MODIFIER_RIPPLE = 229; // 0xe5
    field public static final int MODIFIER_ROUNDED_CLIP_RECT = 54; // 0x36
    field public static final int MODIFIER_SCROLL = 226; // 0xe2
    field public static final int MODIFIER_TOUCH_CANCEL = 225; // 0xe1
    field public static final int MODIFIER_TOUCH_DOWN = 219; // 0xdb
    field public static final int MODIFIER_TOUCH_UP = 220; // 0xdc
    field public static final int MODIFIER_VISIBILITY = 211; // 0xd3
    field public static final int MODIFIER_WIDTH = 16; // 0x10
    field public static final int MODIFIER_WIDTH_IN = 231; // 0xe7
    field public static final int MODIFIER_ZINDEX = 223; // 0xdf
    field public static final int NAMED_VARIABLE = 137; // 0x89
    field public static final int PAINT_VALUES = 40; // 0x28
    field public static final int PARTICLE_DEFINE = 161; // 0xa1
    field public static final int PARTICLE_LOOP = 163; // 0xa3
    field public static final int PARTICLE_PROCESS = 162; // 0xa2
    field public static final int PATH_ADD = 160; // 0xa0
    field public static final int PATH_COMBINE = 175; // 0xaf
    field public static final int PATH_CREATE = 159; // 0x9f
    field public static final int PATH_TWEEN = 158; // 0x9e
    field public static final int PROFILE_ANDROIDX = 512; // 0x200
    field public static final int PROFILE_ANDROID_NATIVE = 1024; // 0x400
    field public static final int PROFILE_BASELINE = 0; // 0x0
    field public static final int PROFILE_DEPRECATED = 2; // 0x2
    field public static final int PROFILE_EXPERIMENTAL = 1; // 0x1
    field public static final int PROFILE_LOW_POWER = 8; // 0x8
    field public static final int PROFILE_OEM = 4; // 0x4
    field public static final int PROFILE_WIDGETS = 256; // 0x100
    field public static final int REM = 185; // 0xb9
    field public static final int ROOT_CONTENT_BEHAVIOR = 65; // 0x41
    field public static final int ROOT_CONTENT_DESCRIPTION = 103; // 0x67
    field public static final int RUN_ACTION = 236; // 0xec
    field public static final int TEXT_FROM_FLOAT = 135; // 0x87
    field public static final int TEXT_LENGTH = 156; // 0x9c
    field public static final int TEXT_LOOKUP = 151; // 0x97
    field public static final int TEXT_LOOKUP_INT = 153; // 0x99
    field public static final int TEXT_MEASURE = 155; // 0x9b
    field public static final int TEXT_MERGE = 136; // 0x88
    field public static final int TEXT_SUBTEXT = 182; // 0xb6
    field public static final int THEME = 63; // 0x3f
    field public static final int TOUCH_EXPRESSION = 157; // 0x9d
    field public static final int VALUE_FLOAT_CHANGE_ACTION = 222; // 0xde
    field public static final int VALUE_FLOAT_EXPRESSION_CHANGE_ACTION = 227; // 0xe3
    field public static final int VALUE_INTEGER_CHANGE_ACTION = 212; // 0xd4
    field public static final int VALUE_INTEGER_EXPRESSION_CHANGE_ACTION = 218; // 0xda
    field public static final int VALUE_STRING_CHANGE_ACTION = 213; // 0xd5
    field public static final int WAKE_IN = 191; // 0xbf
  }

  public static class Operations.UniqueIntMap<T> extends androidx.compose.remote.core.operations.utilities.IntMap<T!> {
    ctor public Operations.UniqueIntMap();
  }

  public abstract class PaintContext {
    ctor public PaintContext(androidx.compose.remote.core.RemoteContext);
    method public abstract void applyPaint(androidx.compose.remote.core.operations.paint.PaintBundle);
    method public void clearNeedsRepaint();
    method public abstract void clipPath(int, int);
    method public abstract void clipRect(float, float, float, float);
    method public abstract void combinePath(int, int, int, byte);
    method public boolean doesNeedsRepaint();
    method public abstract void drawArc(float, float, float, float, float, float);
    method public abstract void drawBitmap(int, float, float, float, float);
    method public abstract void drawBitmap(int, int, int, int, int, int, int, int, int, int);
    method public abstract void drawCircle(float, float, float);
    method public abstract void drawComplexText(androidx.compose.remote.core.Platform.ComputedTextLayout?);
    method public abstract void drawLine(float, float, float, float);
    method public abstract void drawOval(float, float, float, float);
    method public abstract void drawPath(int, float, float);
    method public abstract void drawRect(float, float, float, float);
    method public abstract void drawRoundRect(float, float, float, float, float, float);
    method public abstract void drawSector(float, float, float, float, float, float);
    method public abstract void drawTextOnPath(int, int, float, float);
    method public abstract void drawTextRun(int, int, int, int, int, float, float, boolean);
    method public abstract void drawToBitmap(int, int, int);
    method public abstract void drawTweenPath(int, int, float, float, float);
    method public abstract void endGraphicsLayer();
    method public java.time.Clock getClock();
    method public androidx.compose.remote.core.RemoteContext getContext();
    method public abstract String? getText(int);
    method public abstract void getTextBounds(int, int, int, int, float[]);
    method public boolean isAnimationEnabled();
    method public boolean isDebug();
    method public boolean isVisualDebug();
    method public abstract androidx.compose.remote.core.Platform.ComputedTextLayout? layoutComplexText(int, int, int, int, int, int, float, int);
    method public void log(String);
    method public abstract void matrixFromPath(int, float, float, int);
    method public abstract void matrixRestore();
    method public abstract void matrixRotate(float, float, float);
    method public abstract void matrixSave();
    method public abstract void matrixScale(float, float, float, float);
    method public abstract void matrixSkew(float, float);
    method public abstract void matrixTranslate(float, float);
    method public void needsRepaint();
    method public abstract void replacePaint(androidx.compose.remote.core.operations.paint.PaintBundle);
    method public abstract void reset();
    method public void restore();
    method public abstract void restorePaint();
    method public abstract void roundedClipRect(float, float, float, float, float, float);
    method public void save();
    method public void saveLayer(float, float, float, float);
    method public abstract void savePaint();
    method public abstract void scale(float, float);
    method public void setContext(androidx.compose.remote.core.RemoteContext);
    method public abstract void setGraphicsLayer(java.util.HashMap<java.lang.Integer!,java.lang.Object!>);
    method public abstract void startGraphicsLayer(int, int);
    method public boolean supportsVersion(int, int, int);
    method public abstract void translate(float, float);
    method public abstract void tweenPath(int, int, int, float);
    method public void wakeIn(float);
    field public static final int TEXT_COMPLEX = 8; // 0x8
    field public static final int TEXT_MEASURE_FONT_HEIGHT = 2; // 0x2
    field public static final int TEXT_MEASURE_MONOSPACE_WIDTH = 1; // 0x1
    field public static final int TEXT_MEASURE_SPACES = 4; // 0x4
    field protected androidx.compose.remote.core.RemoteContext mContext;
  }

  public abstract class PaintOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public PaintOperation();
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public String deepToString(String);
    method protected int getId(int, androidx.compose.remote.core.PaintContext);
    method public abstract void paint(androidx.compose.remote.core.PaintContext);
    method public boolean suitableForTransition(androidx.compose.remote.core.Operation);
    field public static final int PTR_DEREFERENCE = 1073741824; // 0x40000000
    field public static final int VALUE_MASK = 65535; // 0xffff
  }

  public interface Platform {
    method public int getImageHeight(Object);
    method public int getImageWidth(Object);
    method public byte[]? imageToByteArray(Object);
    method public boolean isAlpha8Image(Object);
    method public void log(androidx.compose.remote.core.Platform.LogCategory, String);
    method public float[]? pathToFloatArray(Object);
    field public static final androidx.compose.remote.core.Platform! None;
  }

  public static interface Platform.ComputedTextLayout {
    method public float getHeight();
    method public float getWidth();
  }

  public enum Platform.LogCategory {
    enum_constant public static final androidx.compose.remote.core.Platform.LogCategory DEBUG;
    enum_constant public static final androidx.compose.remote.core.Platform.LogCategory ERROR;
    enum_constant public static final androidx.compose.remote.core.Platform.LogCategory INFO;
    enum_constant public static final androidx.compose.remote.core.Platform.LogCategory TODO;
    enum_constant public static final androidx.compose.remote.core.Platform.LogCategory WARN;
  }

  public abstract class RemoteClock extends java.time.Clock {
    ctor public RemoteClock();
    method public abstract long nanoTime();
    method public static long nanoTime(java.time.Clock);
  }

  public class RemoteComposeBuffer {
    ctor public RemoteComposeBuffer();
    ctor public RemoteComposeBuffer(int);
    method public void addAnimatedFloat(int, float...);
    method public void addAnimatedFloat(int, float[], float[]?);
    method public int addBitmapFont(int, androidx.compose.remote.core.operations.BitmapFontData.Glyph![]);
    method public int addBitmapFont(int, androidx.compose.remote.core.operations.BitmapFontData.Glyph![], java.util.Map<java.lang.String!,java.lang.Short!>);
    method public void addBoolean(int, boolean);
    method public void addBoxStart(int, int, int, int);
    method public void addCanvasContentStart(int);
    method public void addCanvasOperationsStart();
    method public void addCanvasStart(int, int);
    method public void addClickArea(int, int, float, float, float, float, int);
    method public void addClipPath(int);
    method public void addClipRect(float, float, float, float);
    method public void addClipRectModifier();
    method public void addCollapsibleColumnStart(int, int, int, int, float);
    method public void addCollapsibleRowStart(int, int, int, int, float);
    method public void addColor(int, int);
    method public void addColorExpression(int, float, float, float);
    method public void addColorExpression(int, float, float, float, float);
    method public void addColorExpression(int, int, float, float, float);
    method public void addColorExpression(int, int, int, float);
    method public void addColorExpression(int, int, short, float);
    method public void addColorExpression(int, short, int, float);
    method public void addColorExpression(int, short, short, float);
    method public void addColumnStart(int, int, int, int, float);
    method public void addComponentHeightValue(int);
    method public void addComponentStart(int);
    method public void addComponentStart(int, int);
    method public void addComponentWidthValue(int);
    method public void addConditionalOperations(byte, float, float);
    method public void addContainerEnd();
    method public void addContentStart();
    method public void addDebugMessage(int, float, int);
    method public void addDrawArc(float, float, float, float, float, float);
    method public void addDrawBitmap(int, float, float, float, float, int);
    method public void addDrawBitmapFontTextRun(int, int, int, int, float, float);
    method public void addDrawBitmapFontTextRunOnPath(int, int, int, int, int, float);
    method public void addDrawCircle(float, float, float);
    method public void addDrawLine(float, float, float, float);
    method public void addDrawOval(float, float, float, float);
    method public void addDrawPath(int);
    method public void addDrawRect(float, float, float, float);
    method public void addDrawRoundRect(float, float, float, float, float, float);
    method public void addDrawSector(float, float, float, float, float, float);
    method public void addDrawTextOnPath(int, int, float, float);
    method public void addDrawTextRun(int, int, int, int, int, float, float, boolean);
    method public void addDrawTweenPath(int, int, float, float, float);
    method public void addEndFloatFunctionDef();
    method public void addFitBoxStart(int, int, int, int);
    method public float addFloat(int, float);
    method public void addFloatArray(int, float[]);
    method public void addFont(int, int, byte[]);
    method public void addHeader(short[], Object![]);
    method public void addImage(int, int, int, int, float);
    method public void addImpulse(float, float);
    method public void addImpulseEnd();
    method public void addImpulseProcess();
    method public void addInteger(int, int);
    method public void addIntegerExpression(int, int, int[]);
    method public void addList(int, int[]);
    method public void addLong(int, long);
    method public void addLoopEnd();
    method public void addLoopStart(int, float, float, float);
    method public void addMap(int, String[], byte[]?, int[]);
    method public void addMatrixConst(int, float[]);
    method public void addMatrixExpression(int, float[]);
    method public void addMatrixRestore();
    method public void addMatrixRotate(float, float, float);
    method public void addMatrixSave();
    method public void addMatrixScale(float, float);
    method public void addMatrixScale(float, float, float, float);
    method public void addMatrixSkew(float, float);
    method public void addMatrixTranslate(float, float);
    method public void addMatrixVectorMath(float, short, float[], int[]);
    method public void addModifierBackground(int, int);
    method public void addModifierBorder(float, float, int, int);
    method public void addModifierGraphicsLayer(java.util.HashMap<java.lang.Integer!,java.lang.Object!>);
    method public void addModifierMarquee(int, int, float, float, float, float);
    method public void addModifierOffset(float, float);
    method public void addModifierPadding(float, float, float, float);
    method public void addModifierRipple();
    method public void addModifierScroll(int, float);
    method public void addModifierZIndex(float);
    method public void addPaint(androidx.compose.remote.core.operations.paint.PaintBundle);
    method public void addParticleLoopEnd();
    method public void addParticles(int, int[], float[]![], int);
    method public void addParticlesLoop(int, float[]?, float[]![]);
    method public int addPathData(int, float[]);
    method public void addRootContentDescription(int);
    method public void addRootStart();
    method public void addRoundClipRectModifier(float, float, float, float);
    method public void addRowStart(int, int, int, int, float);
    method public void addRunActionsStart();
    method public void addStateLayout(int, int, int, int, int);
    method public void addText(int, String);
    method public void addTextComponentStart(int, int, int, int, float, int, float, int, int, int, int);
    method public void addTouchExpression(int, float, float, float, float, int, float[], int, float[]?, float[]?);
    method public float asFloatId(int);
    method public void bitmapAttribute(int, int, short);
    method public void bitmapTextMeasure(int, int, int, int);
    method public void callFloatFunction(int, float[]?);
    method public int createBitmap(int, short, short);
    method public int createTextFromFloat(int, float, short, short, int);
    method public void defineFloatFunction(int, int[]);
    method public void drawBitmap(int, int, int, int, int, int, int, int, int, int, int, int);
    method public void drawBitmapTextAnchored(int, int, float, float, float, float, float, float);
    method public void drawComponentContent();
    method public void drawOnBitmap(int, int, int);
    method public void drawScaledBitmap(int, float, float, float, float, float, float, float, float, int, float, int);
    method public void drawTextAnchored(int, float, float, float, float, int);
    method public androidx.compose.remote.core.RemoteComposeBuffer fromFile(java.io.File) throws java.io.IOException;
    method public static androidx.compose.remote.core.RemoteComposeBuffer fromFile(String) throws java.io.IOException;
    method public static androidx.compose.remote.core.RemoteComposeBuffer fromInputStream(java.io.InputStream);
    method public androidx.compose.remote.core.WireBuffer getBuffer();
    method public void getColorAttribute(int, int, short);
    method public int getLastComponentId();
    method public void header(int, int, float, long);
    method public void idLookup(int, float, float);
    method public void inflateFromBuffer(java.util.ArrayList<androidx.compose.remote.core.Operation!>);
    method public void mapLookup(int, int, int);
    method public static float[] packAnimation(float, int, float[]?, float, float);
    method public void pathAppend(int, float...);
    method public void pathCombine(int, int, int, byte);
    method public int pathCreate(int, float, float);
    method public int pathTween(int, int, int, float);
    method public void performHaptic(int);
    method public static void read(java.io.InputStream, androidx.compose.remote.core.RemoteComposeBuffer);
    method public void rem(String);
    method public void reset(int);
    method public void setBitmapName(int, String);
    method public void setBuffer(androidx.compose.remote.core.WireBuffer);
    method public void setMatrixFromPath(int, float, float, int);
    method public void setNamedVariable(int, String, int);
    method public void setRootContentBehavior(int, int, int, int);
    method public void setTheme(int);
    method public void setVersion(int, int);
    method public void setVersion(int, java.util.Set<java.lang.Integer!>);
    method public int storeBitmap(int, int, int, byte[]);
    method public int storeBitmapA8(int, int, int, byte[]);
    method public void textAttribute(int, int, short);
    method public void textLength(int, int);
    method public void textLookup(int, float, float);
    method public void textLookup(int, float, int);
    method public void textMeasure(int, int, int);
    method public int textMerge(int, int, int);
    method public void textSubtext(int, int, float, float);
    method public void timeAttribute(int, int, short, int...?);
    method public void wakeIn(float);
    method public void write(androidx.compose.remote.core.RemoteComposeBuffer, java.io.File);
    field public static final int EASING_CUBIC_ACCELERATE = 2; // 0x2
    field public static final int EASING_CUBIC_ANTICIPATE = 5; // 0x5
    field public static final int EASING_CUBIC_CUSTOM = 11; // 0xb
    field public static final int EASING_CUBIC_DECELERATE = 3; // 0x3
    field public static final int EASING_CUBIC_LINEAR = 4; // 0x4
    field public static final int EASING_CUBIC_OVERSHOOT = 6; // 0x6
    field public static final int EASING_CUBIC_STANDARD = 1; // 0x1
    field public static final int EASING_EASE_OUT_BOUNCE = 13; // 0xd
    field public static final int EASING_EASE_OUT_ELASTIC = 14; // 0xe
    field public static final int EASING_SPLINE_CUSTOM = 12; // 0xc
    field public static final int PAD_AFTER_NONE = 1; // 0x1
    field public static final int PAD_AFTER_SPACE = 0; // 0x0
    field public static final int PAD_AFTER_ZERO = 3; // 0x3
    field public static final int PAD_PRE_NONE = 4; // 0x4
    field public static final int PAD_PRE_SPACE = 0; // 0x0
    field public static final int PAD_PRE_ZERO = 12; // 0xc
  }

  public interface RemoteComposeOperation {
  }

  public class RemoteComposeState implements androidx.compose.remote.core.operations.utilities.CollectionsAccess {
    ctor public RemoteComposeState();
    method public void addCollection(int, androidx.compose.remote.core.operations.utilities.ArrayAccess);
    method public void cacheData(int, Object);
    method public int cacheData(Object);
    method public int cacheData(Object, int);
    method public int cacheFloat(float);
    method public void cacheFloat(int, float);
    method public int cacheInteger(int);
    method public void clearColorOverride();
    method public void clearDataOverride(int);
    method public void clearFloatOverride(int);
    method public void clearIntegerOverride(int);
    method public boolean containsId(int);
    method public int createNextAvailableId();
    method public int createNextAvailableId(int);
    method public int dataGetId(Object);
    method public int getColor(int);
    method public androidx.compose.remote.core.operations.utilities.DataMap? getDataMap(int);
    method public float getFloat(int);
    method public float getFloatValue(int, int);
    method public float[]? getFloats(int);
    method public Object? getFromId(int);
    method public int getId(int, int);
    method public int getInteger(int);
    method public int getListLength(int);
    method public java.util.ArrayList<androidx.compose.remote.core.VariableSupport!>? getListeners(int);
    method public Object? getObject(int);
    method public int getOpsToUpdate(androidx.compose.remote.core.RemoteContext, long);
    method public Object? getPath(int);
    method public float[]? getPathData(int);
    method public boolean hasListener(int);
    method public void listenToVar(int, androidx.compose.remote.core.VariableSupport);
    method public void markWritten(int);
    method public void overrideColor(int, int);
    method public void overrideData(int, Object);
    method public void overrideFloat(int, float);
    method public void overrideInteger(int, int);
    method public void putDataMap(int, androidx.compose.remote.core.operations.utilities.DataMap);
    method public void putPath(int, Object);
    method public void putPathData(int, float[]);
    method public void reset();
    method public void setContext(androidx.compose.remote.core.RemoteContext);
    method public void setNextId(int);
    method public void setWindowHeight(float);
    method public void setWindowWidth(float);
    method public void updateColor(int, int);
    method public void updateData(int, Object);
    method public void updateFloat(int, float);
    method public void updateInteger(int, int);
    method public void updateObject(int, Object);
    method public void wakeIn(float);
    method public boolean wasNotWritten(int);
    field public static final int BITMAP_TEXTURE_ID_OFFSET = 2000; // 0x7d0
    field public static final int START_ID = 42; // 0x2a
  }

  public abstract class RemoteContext {
    ctor public RemoteContext();
    ctor public RemoteContext(java.time.Clock);
    method public abstract void addClickArea(int, int, float, float, float, float, int);
    method public abstract void addCollection(int, androidx.compose.remote.core.operations.utilities.ArrayAccess);
    method public void addTouchListener(androidx.compose.remote.core.TouchListener);
    method public void clearLastOpCount();
    method public abstract void clearNamedDataOverride(String);
    method public abstract void clearNamedFloatOverride(String);
    method public abstract void clearNamedIntegerOverride(String);
    method public abstract void clearNamedStringOverride(String);
    method public float getAnimationTime();
    method public java.time.Clock getClock();
    method public androidx.compose.remote.core.operations.utilities.CollectionsAccess? getCollectionsAccess();
    method public abstract int getColor(int);
    method public abstract androidx.compose.remote.core.operations.utilities.DataMap? getDataMap(int);
    method public float getDensity();
    method public long getDocLoadTime();
    method public androidx.compose.remote.core.CoreDocument? getDocument();
    method public abstract float getFloat(int);
    method public abstract int getInteger(int);
    method public int getLastOpCount();
    method public java.util.ArrayList<androidx.compose.remote.core.VariableSupport!>? getListeners(int);
    method public abstract long getLong(int);
    method public androidx.compose.remote.core.RemoteContext.ContextMode getMode();
    method public abstract Object? getObject(int);
    method public androidx.compose.remote.core.PaintContext? getPaintContext();
    method public abstract float[]? getPathData(int);
    method public abstract androidx.compose.remote.core.operations.ShaderData? getShader(int);
    method public abstract String? getText(int);
    method public int getTheme();
    method public static float getTime(float);
    method public boolean getUseChoreographer();
    method public abstract void hapticEffect(int);
    method public void header(int, int, int, int, int, long, androidx.compose.remote.core.operations.utilities.IntMap<java.lang.Object!>?);
    method public void incrementOpCount();
    method public boolean isAnimationEnabled();
    method public boolean isBasicDebug();
    method public static boolean isTime(float);
    method public boolean isVisualDebug();
    method public abstract void listensTo(int, androidx.compose.remote.core.VariableSupport);
    method public abstract void loadAnimatedFloat(int, androidx.compose.remote.core.operations.FloatExpression);
    method public abstract void loadBitmap(int, short, short, int, int, byte[]);
    method public abstract void loadColor(int, int);
    method public abstract void loadFloat(int, float);
    method public void loadFont(int, byte[]);
    method public abstract void loadInteger(int, int);
    method public abstract void loadPathData(int, float[]);
    method public abstract void loadShader(int, androidx.compose.remote.core.operations.ShaderData);
    method public abstract void loadText(int, String);
    method public abstract void loadVariableName(String, int, int);
    method public void needsRepaint();
    method public abstract void overrideFloat(int, float);
    method public abstract void overrideInteger(int, int);
    method public abstract void overrideText(int, int);
    method public abstract void putDataMap(int, androidx.compose.remote.core.operations.utilities.DataMap);
    method public abstract void putObject(int, Object);
    method public abstract void runAction(int, String);
    method public abstract void runNamedAction(int, Object?);
    method public void setAnimationEnabled(boolean);
    method public void setAnimationTime(float);
    method public void setClock(java.time.Clock);
    method public void setDebug(int);
    method public void setDensity(float);
    method public void setDocLoadTime();
    method public void setDocument(androidx.compose.remote.core.CoreDocument);
    method public void setDocumentContentDescription(int);
    method public void setMode(androidx.compose.remote.core.RemoteContext.ContextMode);
    method public abstract void setNamedColorOverride(String, int);
    method public abstract void setNamedDataOverride(String, Object);
    method public abstract void setNamedFloatOverride(String, float);
    method public abstract void setNamedIntegerOverride(String, int);
    method public abstract void setNamedLong(String, long);
    method public abstract void setNamedStringOverride(String, String);
    method public void setPaintContext(androidx.compose.remote.core.PaintContext);
    method public void setRootContentBehavior(int, int, int, int);
    method public void setTheme(int);
    method public void setUseChoreographer(boolean);
    method public boolean supportsVersion(int, int, int);
    method public abstract int updateOps();
    field public static final float FLOAT_ACCELERATION_X;
    field public static final float FLOAT_ACCELERATION_Y;
    field public static final float FLOAT_ACCELERATION_Z;
    field public static final float FLOAT_ANIMATION_DELTA_TIME;
    field public static final float FLOAT_ANIMATION_TIME;
    field public static final float FLOAT_API_LEVEL;
    field public static final float FLOAT_CALENDAR_MONTH;
    field public static final float FLOAT_COMPONENT_HEIGHT;
    field public static final float FLOAT_COMPONENT_WIDTH;
    field public static final float FLOAT_CONTINUOUS_SEC;
    field public static final float FLOAT_DAY_OF_MONTH;
    field public static final float FLOAT_DAY_OF_YEAR;
    field public static final float FLOAT_DENSITY;
    field public static final float FLOAT_FONT_SIZE;
    field public static final float FLOAT_GYRO_ROT_X;
    field public static final float FLOAT_GYRO_ROT_Y;
    field public static final float FLOAT_GYRO_ROT_Z;
    field public static final float FLOAT_LIGHT;
    field public static final float FLOAT_MAGNETIC_X;
    field public static final float FLOAT_MAGNETIC_Y;
    field public static final float FLOAT_MAGNETIC_Z;
    field public static final float FLOAT_OFFSET_TO_UTC;
    field public static final float FLOAT_TIME_IN_HR;
    field public static final float FLOAT_TIME_IN_MIN;
    field public static final float FLOAT_TIME_IN_SEC;
    field public static final float FLOAT_TOUCH_EVENT_TIME;
    field public static final float FLOAT_TOUCH_POS_X;
    field public static final float FLOAT_TOUCH_POS_Y;
    field public static final float FLOAT_TOUCH_VEL_X;
    field public static final float FLOAT_TOUCH_VEL_Y;
    field public static final float FLOAT_WEEK_DAY;
    field public static final float FLOAT_WINDOW_HEIGHT;
    field public static final float FLOAT_WINDOW_WIDTH;
    field public static final float FLOAT_YEAR;
    field public static final int ID_ACCELERATION_X = 17; // 0x11
    field public static final int ID_ACCELERATION_Y = 18; // 0x12
    field public static final int ID_ACCELERATION_Z = 19; // 0x13
    field public static final int ID_ANIMATION_DELTA_TIME = 31; // 0x1f
    field public static final int ID_ANIMATION_TIME = 30; // 0x1e
    field public static final int ID_API_LEVEL = 28; // 0x1c
    field public static final int ID_CALENDAR_MONTH = 9; // 0x9
    field public static final int ID_COMPONENT_HEIGHT = 8; // 0x8
    field public static final int ID_COMPONENT_WIDTH = 7; // 0x7
    field public static final int ID_CONTINUOUS_SEC = 1; // 0x1
    field public static final int ID_DAY_OF_MONTH = 12; // 0xc
    field public static final int ID_DAY_OF_YEAR = 34; // 0x22
    field public static final int ID_DENSITY = 27; // 0x1b
    field public static final int ID_EPOCH_SECOND = 32; // 0x20
    field public static final int ID_FONT_SIZE = 33; // 0x21
    field public static final int ID_GYRO_ROT_X = 20; // 0x14
    field public static final int ID_GYRO_ROT_Y = 21; // 0x15
    field public static final int ID_GYRO_ROT_Z = 22; // 0x16
    field public static final int ID_LIGHT = 26; // 0x1a
    field public static final int ID_MAGNETIC_X = 23; // 0x17
    field public static final int ID_MAGNETIC_Y = 24; // 0x18
    field public static final int ID_MAGNETIC_Z = 25; // 0x19
    field public static final int ID_OFFSET_TO_UTC = 10; // 0xa
    field public static final int ID_TIME_IN_HR = 4; // 0x4
    field public static final int ID_TIME_IN_MIN = 3; // 0x3
    field public static final int ID_TIME_IN_SEC = 2; // 0x2
    field public static final int ID_TOUCH_EVENT_TIME = 29; // 0x1d
    field public static final int ID_TOUCH_POS_X = 13; // 0xd
    field public static final int ID_TOUCH_POS_Y = 14; // 0xe
    field public static final int ID_TOUCH_VEL_X = 15; // 0xf
    field public static final int ID_TOUCH_VEL_Y = 16; // 0x10
    field public static final int ID_WEEK_DAY = 11; // 0xb
    field public static final int ID_WINDOW_HEIGHT = 6; // 0x6
    field public static final int ID_WINDOW_WIDTH = 5; // 0x5
    field public static final int ID_YEAR = 35; // 0x23
    field public static final long INT_EPOCH_SECOND = 4294967328L; // 0x100000020L
    field public long currentTime;
    field protected float mDensity;
    field protected androidx.compose.remote.core.CoreDocument mDocument;
    field public float mHeight;
    field public androidx.compose.remote.core.operations.layout.Component? mLastComponent;
    field protected androidx.compose.remote.core.PaintContext? mPaintContext;
    field public androidx.compose.remote.core.RemoteComposeState mRemoteComposeState;
    field public float mWidth;
  }

  public enum RemoteContext.ContextMode {
    enum_constant public static final androidx.compose.remote.core.RemoteContext.ContextMode DATA;
    enum_constant public static final androidx.compose.remote.core.RemoteContext.ContextMode PAINT;
    enum_constant public static final androidx.compose.remote.core.RemoteContext.ContextMode UNSET;
  }

  public static class RemoteContext.FontInfo {
    field public Object? fontBuilder;
    field public final byte[]! mFontData;
    field public final int mFontId;
  }

  public interface RemoteContextActions {
    method public boolean performClick(androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, String);
    method public int scrollByOffset(androidx.compose.remote.core.operations.layout.Component, int);
    method public boolean scrollDirection(androidx.compose.remote.core.operations.layout.Component, androidx.compose.remote.core.semantics.ScrollableComponent.ScrollDirection);
    method public boolean showOnScreen(androidx.compose.remote.core.operations.layout.Component);
  }

  public interface SerializableToString {
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
  }

  public class SystemClock extends androidx.compose.remote.core.RemoteClock {
    ctor public SystemClock();
    method public java.time.ZoneId! getZone();
    method public java.time.Instant! instant();
    method public long nanoTime();
  }

  public class TimeVariables {
    ctor public TimeVariables();
    ctor public TimeVariables(java.time.Clock);
    method public java.time.Clock getClock();
    method public void updateTime(androidx.compose.remote.core.RemoteContext);
    method public void updateTime(androidx.compose.remote.core.RemoteContext, java.time.ZoneId, java.time.LocalDateTime);
  }

  public interface TouchListener {
    method public void setComponent(androidx.compose.remote.core.operations.layout.Component?);
    method public void touchDown(androidx.compose.remote.core.RemoteContext, float, float);
    method public void touchDrag(androidx.compose.remote.core.RemoteContext, float, float);
    method public void touchUp(androidx.compose.remote.core.RemoteContext, float, float, float, float);
  }

  public interface VariableSupport {
    method public void markDirty();
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
  }

  public class WireBuffer {
    ctor public WireBuffer();
    ctor public WireBuffer(int);
    method public boolean available();
    method public byte[] cloneBytes();
    method public void endWithSize();
    method public byte[] getBuffer();
    method public int getIndex();
    method public int getMax_size();
    method public int getSize();
    method public int peekInt();
    method public boolean readBoolean();
    method public byte[] readBuffer();
    method public byte[] readBuffer(int);
    method public int readByte();
    method public double readDouble();
    method public float readFloat();
    method public int readInt();
    method public long readLong();
    method public int readOperationType();
    method public int readShort();
    method public String readUTF8();
    method public String readUTF8(int);
    method public void reset(int);
    method public void setIndex(int);
    method public void setValidOperations(java.util.Set<java.lang.Integer!>);
    method public void setVersion(int, int);
    method public int size();
    method public void start(int);
    method public void startWithSize(int);
    method public void writeBoolean(boolean);
    method public void writeBuffer(byte[]);
    method public void writeByte(int);
    method public void writeDouble(double);
    method public void writeFloat(float);
    method public void writeInt(int);
    method public void writeLong(long);
    method public void writeShort(int);
    method public void writeUTF8(String);
  }

}

package androidx.compose.remote.core.documentation {

  public interface DocumentationBuilder {
    method public void add(String);
    method public androidx.compose.remote.core.documentation.DocumentedOperation operation(String, int, String);
    method public androidx.compose.remote.core.documentation.DocumentedOperation wipOperation(String, int, String);
  }

  public interface DocumentedCompanionOperation {
    method public void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
  }

  public class DocumentedOperation {
    ctor public DocumentedOperation(String, int, String);
    ctor public DocumentedOperation(String, int, String, boolean);
    method public androidx.compose.remote.core.documentation.DocumentedOperation description(String);
    method public androidx.compose.remote.core.documentation.DocumentedOperation exampleImage(String, String);
    method public androidx.compose.remote.core.documentation.DocumentedOperation examples(String);
    method public androidx.compose.remote.core.documentation.DocumentedOperation examplesDimension(int, int);
    method public androidx.compose.remote.core.documentation.DocumentedOperation field(int, String, String);
    method public androidx.compose.remote.core.documentation.DocumentedOperation field(int, String, String, String);
    method public String getCategory();
    method public String? getDescription();
    method public java.util.ArrayList<androidx.compose.remote.core.documentation.StringPair!> getExamples();
    method public int getExamplesHeight();
    method public int getExamplesWidth();
    method public java.util.ArrayList<androidx.compose.remote.core.documentation.OperationField!> getFields();
    method public int getId();
    method public String getName();
    method public int getSizeFields();
    method public String? getTextExamples();
    method public static String getType(int);
    method public String getVarSize();
    method public boolean isWIP();
    method public androidx.compose.remote.core.documentation.DocumentedOperation possibleValues(String, int);
    field public static final int BOOLEAN = 2; // 0x2
    field public static final int BUFFER = 4; // 0x4
    field public static final int BYTE = 6; // 0x6
    field public static final int BYTE_ARRAY = 12; // 0xc
    field public static final int FLOAT = 1; // 0x1
    field public static final int FLOAT_ARRAY = 10; // 0xa
    field public static final int INT = 0; // 0x0
    field public static final int INT_ARRAY = 11; // 0xb
    field public static final int LAYOUT = 0; // 0x0
    field public static final int LONG = 8; // 0x8
    field public static final int SHORT = 9; // 0x9
    field public static final int UTF8 = 5; // 0x5
    field public static final int VALUE = 7; // 0x7
  }

  public class OperationField {
    ctor public OperationField(int, String, String);
    ctor public OperationField(int, String, String?, String);
    method public String getDescription();
    method public String getName();
    method public java.util.ArrayList<androidx.compose.remote.core.documentation.StringPair!> getPossibleValues();
    method public int getSize();
    method public int getType();
    method public String? getVarSize();
    method public boolean hasEnumeratedValues();
    method public void possibleValue(String, String);
  }

  public class StringPair {
    method public String getName();
    method public String getValue();
  }

}

package androidx.compose.remote.core.operations {

  public class BitmapData extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.SerializableToString {
    ctor public BitmapData(int, int, int, byte[]);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, byte[]);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, short, short, short, short, byte[]);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public int getHeight();
    method public int getType();
    method public int getWidth();
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void update(androidx.compose.remote.core.operations.BitmapData);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final short ENCODING_EMPTY = 3; // 0x3
    field public static final short ENCODING_FILE = 2; // 0x2
    field public static final short ENCODING_INLINE = 0; // 0x0
    field public static final short ENCODING_URL = 1; // 0x1
    field public static final int MAX_IMAGE_DIMENSION = 8000; // 0x1f40
    field public static final short TYPE_PNG = 1; // 0x1
    field public static final short TYPE_PNG_8888 = 0; // 0x0
    field public static final short TYPE_PNG_ALPHA_8 = 4; // 0x4
    field public static final short TYPE_RAW8 = 2; // 0x2
    field public static final short TYPE_RAW8888 = 3; // 0x3
    field public final int mImageId;
  }

  public class BitmapFontData extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public BitmapFontData(int, androidx.compose.remote.core.operations.BitmapFontData.Glyph[]);
    ctor public BitmapFontData(int, androidx.compose.remote.core.operations.BitmapFontData.Glyph[], short, java.util.Map<java.lang.String!,java.lang.Short!>);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, androidx.compose.remote.core.operations.BitmapFontData.Glyph[], java.util.Map<java.lang.String!,java.lang.Short!>?);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public androidx.compose.remote.core.operations.BitmapFontData.Glyph? lookupGlyph(String, int);
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public static class BitmapFontData.Glyph {
    ctor public BitmapFontData.Glyph();
    ctor public BitmapFontData.Glyph(String, int, short, short, short, short, short, short);
    field public short mBitmapHeight;
    field public int mBitmapId;
    field public short mBitmapWidth;
    field public String? mChars;
    field public short mMarginBottom;
    field public short mMarginLeft;
    field public short mMarginRight;
    field public short mMarginTop;
  }

  public class BitmapTextMeasure extends androidx.compose.remote.core.PaintOperation {
    ctor public BitmapTextMeasure(int, int, int, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int MEASURE_BOTTOM = 5; // 0x5
    field public static final int MEASURE_HEIGHT = 1; // 0x1
    field public static final int MEASURE_LEFT = 2; // 0x2
    field public static final int MEASURE_MAX_HEIGHT_FLAG = 512; // 0x200
    field public static final int MEASURE_MONOSPACE_FLAG = 256; // 0x100
    field public static final int MEASURE_RIGHT = 3; // 0x3
    field public static final int MEASURE_TOP = 4; // 0x4
    field public static final int MEASURE_WIDTH = 0; // 0x0
    field public int mId;
    field public int mTextId;
    field public int mType;
  }

  public class ClickArea extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.semantics.AccessibleComponent androidx.compose.remote.core.RemoteComposeOperation androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public ClickArea(int, int, float, float, float, float, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, float, float, float, float, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class ClipPath extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public ClipPath(int, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int DIFFERENCE = 1; // 0x1
    field public static final int INTERSECT = 2; // 0x2
    field public static final int PATH_CLIP_DIFFERENCE = 1; // 0x1
    field public static final int PATH_CLIP_INTERSECT = 2; // 0x2
    field public static final int PATH_CLIP_REPLACE = 0; // 0x0
    field public static final int PATH_CLIP_REVERSE_DIFFERENCE = 5; // 0x5
    field public static final int PATH_CLIP_UNDEFINED = 6; // 0x6
    field public static final int PATH_CLIP_UNION = 3; // 0x3
    field public static final int PATH_CLIP_XOR = 4; // 0x4
    field public static final int REPLACE = 0; // 0x0
    field public static final int REVERSE_DIFFERENCE = 5; // 0x5
    field public static final int UNDEFINED = 6; // 0x6
    field public static final int UNION = 3; // 0x3
    field public static final int XOR = 4; // 0x4
  }

  public class ClipRect extends androidx.compose.remote.core.operations.DrawBase4 {
    ctor public ClipRect(float, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method protected void write(androidx.compose.remote.core.WireBuffer, float, float, float, float);
  }

  public class ColorAttribute extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public ColorAttribute(int, int, short);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, short);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final short COLOR_ALPHA = 6; // 0x6
    field public static final short COLOR_BLUE = 5; // 0x5
    field public static final short COLOR_BRIGHTNESS = 2; // 0x2
    field public static final short COLOR_GREEN = 4; // 0x4
    field public static final short COLOR_HUE = 0; // 0x0
    field public static final short COLOR_RED = 3; // 0x3
    field public static final short COLOR_SATURATION = 1; // 0x1
    field public int mColorId;
    field public int mId;
    field public short mType;
  }

  public class ColorConstant extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public ColorConstant(int, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public int mColor;
    field public int mColorId;
  }

  public class ColorExpression extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public ColorExpression(int, byte, float, float, float, float);
    ctor public ColorExpression(int, byte, int, float, float, float);
    ctor public ColorExpression(int, float, float, float);
    ctor public ColorExpression(int, int, int, int, float);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int, float);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final byte ARGB_MODE = 5; // 0x5
    field public static final byte COLOR_COLOR_INTERPOLATE = 0; // 0x0
    field public static final byte COLOR_ID_INTERPOLATE = 2; // 0x2
    field public static final byte HSV_MODE = 4; // 0x4
    field public static final byte IDARGB_MODE = 6; // 0x6
    field public static final byte ID_COLOR_INTERPOLATE = 1; // 0x1
    field public static final byte ID_ID_INTERPOLATE = 3; // 0x3
    field public int mAlpha;
    field public int mColor1;
    field public int mColor2;
    field public float mHue;
    field public int mId;
    field public int mOutColor1;
    field public int mOutColor2;
    field public float mOutHue;
    field public float mOutSat;
    field public float mOutTween;
    field public float mOutValue;
    field public float mSat;
    field public float mTween;
    field public float mValue;
  }

  public interface ComponentData {
  }

  public class ComponentValue extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.SerializableToString {
    ctor public ComponentValue(int, int, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public int getComponentId();
    method public int getType();
    method public int getValueId();
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int HEIGHT = 1; // 0x1
    field public static final int WIDTH = 0; // 0x0
  }

  public class ConditionalOperations extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.operations.layout.Container androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public ConditionalOperations(byte, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, byte, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public int estimateIterations();
    method public java.util.ArrayList<androidx.compose.remote.core.Operation!> getList();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final byte TYPE_EQ = 0; // 0x0
    field public static final byte TYPE_GT = 4; // 0x4
    field public static final byte TYPE_GTE = 5; // 0x5
    field public static final byte TYPE_LT = 2; // 0x2
    field public static final byte TYPE_LTE = 3; // 0x3
    field public static final byte TYPE_NEQ = 1; // 0x1
    field public java.util.ArrayList<androidx.compose.remote.core.Operation!> mList;
  }

  public class DataListFloat extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.utilities.ArrayAccess androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public DataListFloat(int, float[]);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float[]);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public float getFloatValue(int);
    method public float[]? getFloats();
    method public int getLength();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void update(androidx.compose.remote.core.operations.DataListFloat);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public final int mId;
  }

  public class DataListIds extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.utilities.ArrayAccess androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public DataListIds(int, int[]);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int[]);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public float getFloatValue(int);
    method public float[]? getFloats();
    method public int getLength();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class DataMapIds extends androidx.compose.remote.core.Operation {
    ctor public DataMapIds(int, String[], byte[], int[]);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, String[], byte[]?, int[]);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final byte TYPE_BOOLEAN = 4; // 0x4
    field public static final byte TYPE_FLOAT = 2; // 0x2
    field public static final byte TYPE_INT = 1; // 0x1
    field public static final byte TYPE_LONG = 3; // 0x3
    field public static final byte TYPE_STRING = 0; // 0x0
  }

  public class DataMapLookup extends androidx.compose.remote.core.Operation {
    ctor public DataMapLookup(int, int, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public int mDataMapId;
    field public int mId;
    field public int mStringId;
  }

  public class DebugMessage extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.VariableSupport {
    ctor public DebugMessage(int, float, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int SHOW_USAGE = 1; // 0x1
  }

  public class DrawArc extends androidx.compose.remote.core.operations.DrawBase6 {
    ctor public DrawArc(float, float, float, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method protected void write(androidx.compose.remote.core.WireBuffer, float, float, float, float, float, float);
  }

  public abstract class DrawBase2 extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public DrawBase2(float, float);
    method public androidx.compose.remote.core.Operation? construct(float, float);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>, androidx.compose.remote.core.operations.DrawBase2.Maker);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method protected androidx.compose.remote.core.serialize.MapSerializer serialize(androidx.compose.remote.core.serialize.MapSerializer, String, String);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    method protected abstract void write(androidx.compose.remote.core.WireBuffer, float, float);
    method protected static void write(androidx.compose.remote.core.WireBuffer, int, float, float);
    field protected String mName;
  }

  protected static interface DrawBase2.Maker {
    method public androidx.compose.remote.core.operations.DrawBase2! create(float, float);
  }

  public abstract class DrawBase3 extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public DrawBase3(float, float, float);
    method public androidx.compose.remote.core.Operation? construct(float, float, float);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>, androidx.compose.remote.core.operations.DrawBase3.Maker);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method protected androidx.compose.remote.core.serialize.MapSerializer serialize(androidx.compose.remote.core.serialize.MapSerializer, String, String, String);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    method protected abstract void write(androidx.compose.remote.core.WireBuffer, float, float, float);
    field protected String mName;
  }

  public static interface DrawBase3.Maker {
    method public androidx.compose.remote.core.operations.DrawBase3 create(float, float, float);
  }

  public abstract class DrawBase4 extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public DrawBase4(float, float, float, float);
    method public androidx.compose.remote.core.Operation? construct(float, float, float, float);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>, androidx.compose.remote.core.operations.DrawBase4.Maker);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method protected androidx.compose.remote.core.serialize.MapSerializer serialize(androidx.compose.remote.core.serialize.MapSerializer, String, String, String, String);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    method protected abstract void write(androidx.compose.remote.core.WireBuffer, float, float, float, float);
    method protected static void write(androidx.compose.remote.core.WireBuffer, int, float, float, float, float);
    field protected String mName;
    field protected float mX1;
    field protected float mX2;
    field protected float mY1;
    field protected float mY2;
  }

  protected static interface DrawBase4.Maker {
    method public androidx.compose.remote.core.operations.DrawBase4! create(float, float, float, float);
  }

  public abstract class DrawBase6 extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public DrawBase6(float, float, float, float, float, float);
    method public androidx.compose.remote.core.Operation? construct(float, float, float, float, float, float);
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>, androidx.compose.remote.core.operations.DrawBase6.Maker);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method protected androidx.compose.remote.core.serialize.MapSerializer serialize(androidx.compose.remote.core.serialize.MapSerializer, String, String, String, String, String, String);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    method protected abstract void write(androidx.compose.remote.core.WireBuffer, float, float, float, float, float, float);
    field protected String mName;
  }

  public static interface DrawBase6.Maker {
    method public androidx.compose.remote.core.operations.DrawBase6 create(float, float, float, float, float, float);
  }

  public class DrawBitmap extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.VariableSupport {
    ctor public DrawBitmap(int, float, float, float, float, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float, float, float, float, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class DrawBitmapFontText extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.VariableSupport {
    ctor public DrawBitmapFontText(int, int, int, int, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class DrawBitmapFontTextOnPath extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.VariableSupport {
    ctor public DrawBitmapFontTextOnPath(int, int, int, int, int, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int, int, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class DrawBitmapInt extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.semantics.AccessibleComponent {
    ctor public DrawBitmapInt(int, int, int, int, int, int, int, int, int, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int, int, int, int, int, int, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class DrawBitmapScaled extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.semantics.AccessibleComponent androidx.compose.remote.core.VariableSupport {
    ctor public DrawBitmapScaled(int, float, float, float, float, float, float, float, float, int, float, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float, float, float, float, float, float, float, float, int, float, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int SCALE_CROP = 5; // 0x5
    field public static final int SCALE_FILL_BOUNDS = 6; // 0x6
    field public static final int SCALE_FILL_HEIGHT = 3; // 0x3
    field public static final int SCALE_FILL_WIDTH = 2; // 0x2
    field public static final int SCALE_FIT = 4; // 0x4
    field public static final int SCALE_FIXED_SCALE = 7; // 0x7
    field public static final int SCALE_INSIDE = 1; // 0x1
    field public static final int SCALE_NONE = 0; // 0x0
  }

  public class DrawBitmapTextAnchored extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.VariableSupport {
    ctor public DrawBitmapTextAnchored(int, int, float, float, float, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, float, float, float, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class DrawCircle extends androidx.compose.remote.core.operations.DrawBase3 {
    ctor public DrawCircle(float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method protected void write(androidx.compose.remote.core.WireBuffer, float, float, float);
  }

  public class DrawContent extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public DrawContent();
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void setComponent(androidx.compose.remote.core.operations.layout.LayoutComponent?);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class DrawLine extends androidx.compose.remote.core.operations.DrawBase4 implements androidx.compose.remote.core.SerializableToString {
    ctor public DrawLine(float, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method protected void write(androidx.compose.remote.core.WireBuffer, float, float, float, float);
  }

  public class DrawOval extends androidx.compose.remote.core.operations.DrawBase4 {
    ctor public DrawOval(float, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method protected void write(androidx.compose.remote.core.WireBuffer, float, float, float, float);
  }

  public class DrawPath extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public DrawPath(int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class DrawRect extends androidx.compose.remote.core.operations.DrawBase4 {
    ctor public DrawRect(float, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method protected void write(androidx.compose.remote.core.WireBuffer, float, float, float, float);
  }

  public class DrawRoundRect extends androidx.compose.remote.core.operations.DrawBase6 {
    ctor public DrawRoundRect(float, float, float, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method protected void write(androidx.compose.remote.core.WireBuffer, float, float, float, float, float, float);
  }

  public class DrawSector extends androidx.compose.remote.core.operations.DrawBase6 {
    ctor public DrawSector(float, float, float, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method protected void write(androidx.compose.remote.core.WireBuffer, float, float, float, float, float, float);
  }

  public class DrawText extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.VariableSupport {
    ctor public DrawText(int, int, int, int, int, float, float, boolean);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int, int, float, float, boolean);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class DrawTextAnchored extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public DrawTextAnchored(int, float, float, float, float, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float, float, float, float, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int ANCHOR_MONOSPACE_MEASURE = 2; // 0x2
    field public static final int ANCHOR_TEXT_RTL = 1; // 0x1
    field public static final int MEASURE_EVERY_TIME = 4; // 0x4
  }

  public class DrawTextOnPath extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public DrawTextOnPath(int, int, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public int mTextId;
  }

  public class DrawToBitmap extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public DrawToBitmap(int, int, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int MODE_NO_INITIALIZE = 1; // 0x1
  }

  public class DrawTweenPath extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.VariableSupport {
    ctor public DrawTweenPath(int, int, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class FloatConstant extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public FloatConstant(int, float);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void update(androidx.compose.remote.core.operations.FloatConstant);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public int mId;
    field public float mValue;
  }

  public class FloatExpression extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.ComponentData androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public FloatExpression(int, float[], float[]?);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float[], float[]?);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public float evaluate(androidx.compose.remote.core.RemoteContext);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int MAX_EXPRESSION_SIZE = 32; // 0x20
    field public androidx.compose.remote.core.operations.utilities.easing.FloatAnimation? mFloatAnimation;
    field public int mId;
    field public float[]? mPreCalcValue;
    field public float[]? mSrcAnimation;
    field public float[] mSrcValue;
  }

  public class FloatFunctionCall extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.VariableSupport {
    ctor public FloatFunctionCall(int, float[]?);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float[]?);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class FloatFunctionDefine extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.Container androidx.compose.remote.core.VariableSupport {
    ctor public FloatFunctionDefine(int, int[]);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int[]);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public void execute(androidx.compose.remote.core.RemoteContext);
    method public int[] getArgs();
    method public java.util.ArrayList<androidx.compose.remote.core.Operation!> getList();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class FontData extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.SerializableToString {
    ctor public FontData(int, int, byte[]);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, byte[]);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void update(androidx.compose.remote.core.operations.FontData);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public final int mFontId;
  }

  public class HapticFeedback extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.SerializableToString {
    ctor public HapticFeedback(int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class Header extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.RemoteComposeOperation {
    ctor public Header(int, int, int, androidx.compose.remote.core.operations.utilities.IntMap<java.lang.Object!>?);
    ctor public Header(int, int, int, int, int, float, long);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, float, long);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, short[], Object![]);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public Object? get(short);
    method public int getProfiles();
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public static int readApiLevel(androidx.compose.remote.core.WireBuffer);
    method public static androidx.compose.remote.core.operations.Header readDirect(androidx.compose.remote.core.WireBuffer) throws java.io.IOException;
    method public static androidx.compose.remote.core.operations.Header readDirect(java.io.InputStream) throws java.io.IOException;
    method public void setVersion(androidx.compose.remote.core.CoreDocument);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final short DOC_CONTENT_DESCRIPTION = 9; // 0x9
    field public static final short DOC_DATA_UPDATE = 12; // 0xc
    field public static final short DOC_DENSITY_AT_GENERATION = 7; // 0x7
    field public static final short DOC_DESIRED_FPS = 8; // 0x8
    field public static final short DOC_HEIGHT = 6; // 0x6
    field public static final short DOC_PROFILES = 14; // 0xe
    field public static final short DOC_SOURCE = 11; // 0xb
    field public static final short DOC_WIDTH = 5; // 0x5
    field public static final short HOST_EXCEPTION_HANDLER = 13; // 0xd
  }

  public class IdLookup extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public IdLookup(int, int, float);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, float);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public int mDataSetId;
    field public float mIndex;
    field public float mOutIndex;
    field public int mTextId;
  }

  public class ImageAttribute extends androidx.compose.remote.core.PaintOperation {
    ctor public ImageAttribute(int, int, short, int[]?);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, short, int[]?);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final short IMAGE_HEIGHT = 1; // 0x1
    field public static final short IMAGE_WIDTH = 0; // 0x0
    field public int mId;
  }

  public class IntegerExpression extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public IntegerExpression(int, int, int[]);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int[]);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public int evaluate(androidx.compose.remote.core.RemoteContext);
    method public static int id();
    method public static boolean isId(int, int, int);
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int MAX_SIZE = 320; // 0x140
    field public int mId;
    field public int[]? mPreCalcValue;
    field public final int[] mSrcValue;
  }

  public class MatrixFromPath extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public MatrixFromPath(int, float, float, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float, float, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int POSITION_MATRIX_FLAG = 1; // 0x1
    field public static final int TANGENT_MATRIX_FLAG = 2; // 0x2
  }

  public class MatrixRestore extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public MatrixRestore();
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class MatrixRotate extends androidx.compose.remote.core.operations.DrawBase3 {
    ctor public MatrixRotate(float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method protected void write(androidx.compose.remote.core.WireBuffer, float, float, float);
  }

  public class MatrixSave extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public MatrixSave();
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class MatrixScale extends androidx.compose.remote.core.operations.DrawBase4 {
    ctor public MatrixScale(float, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method protected void write(androidx.compose.remote.core.WireBuffer, float, float, float, float);
  }

  public class MatrixSkew extends androidx.compose.remote.core.operations.DrawBase2 {
    ctor public MatrixSkew(float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method protected void write(androidx.compose.remote.core.WireBuffer, float, float);
  }

  public class MatrixTranslate extends androidx.compose.remote.core.operations.DrawBase2 {
    ctor public MatrixTranslate(float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method protected void write(androidx.compose.remote.core.WireBuffer, float, float);
  }

  public class NamedVariable extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public NamedVariable(int, int, String);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, String);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int COLOR_TYPE = 2; // 0x2
    field public static final int FLOAT_TYPE = 1; // 0x1
    field public static final int IMAGE_TYPE = 3; // 0x3
    field public static final int INT_TYPE = 4; // 0x4
    field public static final int LONG_TYPE = 5; // 0x5
    field public static final int MAX_STRING_SIZE = 4000; // 0xfa0
    field public static final int STRING_TYPE = 0; // 0x0
    field public final int mVarId;
    field public final String mVarName;
    field public final int mVarType;
  }

  public class PaintData extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.operations.ComponentData androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public PaintData();
    method public static void apply(androidx.compose.remote.core.WireBuffer, androidx.compose.remote.core.operations.paint.PaintBundle);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int MAX_STRING_SIZE = 4000; // 0xfa0
    field public androidx.compose.remote.core.operations.paint.PaintBundle mPaintData;
  }

  public class ParticlesCreate extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.VariableSupport {
    ctor public ParticlesCreate(int, int[], float[]![], int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int[], float[]![], int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public float[]![] getEquations();
    method public float[]![] getParticles();
    method public int[] getVariableIds();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class ParticlesLoop extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.operations.layout.Container androidx.compose.remote.core.VariableSupport {
    ctor public ParticlesLoop(int, float[]?, float[]![]);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float[]?, float[]![]);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public java.util.ArrayList<androidx.compose.remote.core.Operation!> getList();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class PathAppend extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float[]);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static String pathString(float[]?);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int CLOSE = 15; // 0xf
    field public static final float CLOSE_NAN;
    field public static final int CONIC = 13; // 0xd
    field public static final float CONIC_NAN;
    field public static final int CUBIC = 14; // 0xe
    field public static final float CUBIC_NAN;
    field public static final int DONE = 16; // 0x10
    field public static final float DONE_NAN;
    field public static final int LINE = 11; // 0xb
    field public static final float LINE_NAN;
    field public static final int MOVE = 10; // 0xa
    field public static final float MOVE_NAN;
    field public static final int QUADRATIC = 12; // 0xc
    field public static final float QUADRATIC_NAN;
    field public static final int RESET = 17; // 0x11
    field public static final float RESET_NAN;
  }

  public class PathCombine extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public PathCombine(int, int, int, byte);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, byte);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final byte OP_DIFFERENCE = 0; // 0x0
    field public static final byte OP_INTERSECT = 1; // 0x1
    field public static final byte OP_REVERSE_DIFFERENCE = 2; // 0x2
    field public static final byte OP_UNION = 3; // 0x3
    field public static final byte OP_XOR = 4; // 0x4
    field public int mOutId;
    field public int mPathId1;
    field public int mPathId2;
  }

  public class PathCreate extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static String pathString(float[]?);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int CLOSE = 15; // 0xf
    field public static final float CLOSE_NAN;
    field public static final int CONIC = 13; // 0xd
    field public static final float CONIC_NAN;
    field public static final int CUBIC = 14; // 0xe
    field public static final float CUBIC_NAN;
    field public static final int DONE = 16; // 0x10
    field public static final float DONE_NAN;
    field public static final int LINE = 11; // 0xb
    field public static final float LINE_NAN;
    field public static final int MOVE = 10; // 0xa
    field public static final float MOVE_NAN;
    field public static final int QUADRATIC = 12; // 0xc
    field public static final float QUADRATIC_NAN;
  }

  public class PathData extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float[]);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static String pathString(float[]?);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int CLOSE = 15; // 0xf
    field public static final float CLOSE_NAN;
    field public static final int CONIC = 13; // 0xd
    field public static final float CONIC_NAN;
    field public static final int CUBIC = 14; // 0xe
    field public static final float CUBIC_NAN;
    field public static final int DONE = 16; // 0x10
    field public static final float DONE_NAN;
    field public static final int LINE = 11; // 0xb
    field public static final float LINE_NAN;
    field public static final int MOVE = 10; // 0xa
    field public static final float MOVE_NAN;
    field public static final int QUADRATIC = 12; // 0xc
    field public static final float QUADRATIC_NAN;
  }

  public class PathTween extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public PathTween(int, int, int, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public int mOutId;
    field public int mPathId1;
    field public int mPathId2;
    field public float mTween;
    field public float mTweenOut;
  }

  public class Rem extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.SerializableToString {
    ctor public Rem(String);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, String);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void update(androidx.compose.remote.core.operations.Rem);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int MAX_STRING_SIZE = 4000; // 0xfa0
    field public String mText;
  }

  public class RootContentBehavior extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.RemoteComposeOperation androidx.compose.remote.core.semantics.ScrollableComponent {
    ctor public RootContentBehavior(int, int, int, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public int scrollDirection();
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int ALIGNMENT_BOTTOM = 4; // 0x4
    field public static final int ALIGNMENT_CENTER = 34; // 0x22
    field public static final int ALIGNMENT_END = 64; // 0x40
    field public static final int ALIGNMENT_HORIZONTAL_CENTER = 32; // 0x20
    field public static final int ALIGNMENT_START = 16; // 0x10
    field public static final int ALIGNMENT_TOP = 1; // 0x1
    field public static final int ALIGNMENT_VERTICAL_CENTER = 2; // 0x2
    field public static final int LAYOUT_HORIZONTAL_FIXED = 4; // 0x4
    field public static final int LAYOUT_HORIZONTAL_MATCH_PARENT = 1; // 0x1
    field public static final int LAYOUT_HORIZONTAL_WRAP_CONTENT = 2; // 0x2
    field public static final int LAYOUT_MATCH_PARENT = 9; // 0x9
    field public static final int LAYOUT_VERTICAL_FIXED = 32; // 0x20
    field public static final int LAYOUT_VERTICAL_MATCH_PARENT = 8; // 0x8
    field public static final int LAYOUT_VERTICAL_WRAP_CONTENT = 16; // 0x10
    field public static final int LAYOUT_WRAP_CONTENT = 18; // 0x12
    field public static final int NONE = 0; // 0x0
    field public static final int SCALE_CROP = 5; // 0x5
    field public static final int SCALE_FILL_BOUNDS = 6; // 0x6
    field public static final int SCALE_FILL_HEIGHT = 3; // 0x3
    field public static final int SCALE_FILL_WIDTH = 2; // 0x2
    field public static final int SCALE_FIT = 4; // 0x4
    field public static final int SCALE_INSIDE = 1; // 0x1
    field public static final int SCROLL_HORIZONTAL = 1; // 0x1
    field public static final int SCROLL_VERTICAL = 2; // 0x2
    field public static final int SIZING_LAYOUT = 1; // 0x1
    field public static final int SIZING_SCALE = 2; // 0x2
    field protected static final String TAG = "RootContentBehavior";
  }

  public class RootContentDescription extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.semantics.AccessibleComponent androidx.compose.remote.core.RemoteComposeOperation androidx.compose.remote.core.serialize.Serializable {
    ctor public RootContentDescription(int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class ShaderData extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public ShaderData(int, int, java.util.HashMap<java.lang.String!,float[]!>?, java.util.HashMap<java.lang.String!,int[]!>?, java.util.HashMap<java.lang.String!,java.lang.Integer!>?);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, java.util.HashMap<java.lang.String!,float[]!>?, java.util.HashMap<java.lang.String!,int[]!>?, java.util.HashMap<java.lang.String!,java.lang.Integer!>?);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public void enable(boolean);
    method public int getShaderTextId();
    method public int getUniformBitmapId(String);
    method public String[] getUniformBitmapNames();
    method public String[] getUniformFloatNames();
    method public float[] getUniformFloats(String);
    method public String[] getUniformIntegerNames();
    method public int[] getUniformInts(String);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class TextAttribute extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public TextAttribute(int, int, short);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, short);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final short MEASURE_BOTTOM = 5; // 0x5
    field public static final short MEASURE_HEIGHT = 1; // 0x1
    field public static final short MEASURE_LEFT = 2; // 0x2
    field public static final int MEASURE_MAX_HEIGHT_FLAG = 512; // 0x200
    field public static final int MEASURE_MONOSPACE_FLAG = 256; // 0x100
    field public static final short MEASURE_RIGHT = 3; // 0x3
    field public static final short MEASURE_TOP = 4; // 0x4
    field public static final short MEASURE_WIDTH = 0; // 0x0
    field public static final short TEXT_LENGTH = 6; // 0x6
    field public int mId;
    field public int mTextId;
    field public short mType;
  }

  public class TextData extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.SerializableToString {
    ctor public TextData(int, String);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, String);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void update(androidx.compose.remote.core.operations.TextData);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int MAX_STRING_SIZE = 4000; // 0xfa0
    field public String mText;
    field public final int mTextId;
  }

  public class TextFromFloat extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public TextFromFloat(int, float, short, short, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float, short, short, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int MAX_STRING_SIZE = 4000; // 0xfa0
    field public static final int PAD_AFTER_NONE = 1; // 0x1
    field public static final int PAD_AFTER_SPACE = 0; // 0x0
    field public static final int PAD_AFTER_ZERO = 3; // 0x3
    field public static final int PAD_PRE_NONE = 4; // 0x4
    field public static final int PAD_PRE_SPACE = 0; // 0x0
    field public static final int PAD_PRE_ZERO = 12; // 0xc
    field public short mDigitsAfter;
    field public short mDigitsBefore;
    field public int mFlags;
    field public float mOutValue;
    field public int mTextId;
    field public float mValue;
  }

  public class TextLength extends androidx.compose.remote.core.Operation {
    ctor public TextLength(int, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public int mLengthId;
    field public int mTextId;
  }

  public class TextLookup extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public TextLookup(int, int, float);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, float);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int MAX_STRING_SIZE = 4000; // 0xfa0
    field public int mDataSetId;
    field public float mIndex;
    field public float mOutIndex;
    field public int mTextId;
  }

  public class TextLookupInt extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public TextLookupInt(int, int, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int MAX_STRING_SIZE = 4000; // 0xfa0
    field public int mDataSetId;
    field public int mIndex;
    field public int mOutIndex;
    field public int mTextId;
  }

  public class TextMeasure extends androidx.compose.remote.core.PaintOperation {
    ctor public TextMeasure(int, int, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int MEASURE_BOTTOM = 5; // 0x5
    field public static final int MEASURE_HEIGHT = 1; // 0x1
    field public static final int MEASURE_LEFT = 2; // 0x2
    field public static final int MEASURE_MAX_HEIGHT_FLAG = 512; // 0x200
    field public static final int MEASURE_MONOSPACE_FLAG = 256; // 0x100
    field public static final int MEASURE_RIGHT = 3; // 0x3
    field public static final int MEASURE_TOP = 4; // 0x4
    field public static final int MEASURE_WIDTH = 0; // 0x0
    field public int mId;
    field public int mTextId;
    field public int mType;
  }

  public class TextMerge extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public TextMerge(int, int, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public int mSrcId1;
    field public int mSrcId2;
    field public int mTextId;
  }

  public class TextSubtext extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public TextSubtext(int, int, float, float);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, float, float);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class Theme extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.RemoteComposeOperation {
    ctor public Theme(int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int DARK = -2; // 0xfffffffe
    field public static final int LIGHT = -3; // 0xfffffffd
    field public static final int UNSPECIFIED = -1; // 0xffffffff
  }

  public class TimeAttribute extends androidx.compose.remote.core.PaintOperation {
    ctor public TimeAttribute(int, int, short, int[]?);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, short);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, short, int[]?);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final short TIME_DAY_OF_MONTH = 9; // 0x9
    field public static final short TIME_DAY_OF_WEEK = 11; // 0xb
    field public static final short TIME_DAY_OF_YEAR = 15; // 0xf
    field public static final short TIME_FROM_ARG_HR = 5; // 0x5
    field public static final short TIME_FROM_ARG_MIN = 4; // 0x4
    field public static final short TIME_FROM_ARG_SEC = 3; // 0x3
    field public static final short TIME_FROM_LOAD_SEC = 14; // 0xe
    field public static final short TIME_FROM_NOW_HR = 2; // 0x2
    field public static final short TIME_FROM_NOW_MIN = 1; // 0x1
    field public static final short TIME_FROM_NOW_SEC = 0; // 0x0
    field public static final short TIME_IN_HR = 8; // 0x8
    field public static final short TIME_IN_MIN = 7; // 0x7
    field public static final short TIME_IN_SEC = 6; // 0x6
    field public static final short TIME_MONTH_VALUE = 10; // 0xa
    field public static final short TIME_YEAR = 12; // 0xc
    field public int mId;
    field public int mTimeId;
    field public short mType;
  }

  public class TouchExpression extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.ComponentData androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.TouchListener androidx.compose.remote.core.VariableSupport {
    ctor public TouchExpression(int, float[], float, float, float, int, float, int, float[]?, float[]?);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float, float, float, float, int, float[], int, float[]?, float[]?);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void setComponent(androidx.compose.remote.core.operations.layout.Component?);
    method public void touchDown(androidx.compose.remote.core.RemoteContext, float, float);
    method public void touchDrag(androidx.compose.remote.core.RemoteContext, float, float);
    method public void touchUp(androidx.compose.remote.core.RemoteContext, float, float, float, float);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int MAX_EXPRESSION_SIZE = 32; // 0x20
    field public static final int STOP_ABSOLUTE_POS = 6; // 0x6
    field public static final int STOP_ENDS = 2; // 0x2
    field public static final int STOP_GENTLY = 0; // 0x0
    field public static final int STOP_INSTANTLY = 1; // 0x1
    field public static final int STOP_NOTCHES_ABSOLUTE = 5; // 0x5
    field public static final int STOP_NOTCHES_EVEN = 3; // 0x3
    field public static final int STOP_NOTCHES_PERCENTS = 4; // 0x4
    field public float[]? mSrcExp;
  }

  public class Utils {
    method public static float asNan(int);
    method public static int clamp(int);
    method public static String colorInt(int);
    method public static String floatToString(float);
    method public static String floatToString(float, float);
    method public static float getBrightness(int);
    method public static float getHue(int);
    method public static float getSaturation(int);
    method public static int hsvToRgb(float, float, float);
    method public static long idFromLong(long);
    method public static int idFromNan(float);
    method public static String idString(int);
    method public static String idStringFromNan(float);
    method public static int interpolateColor(int, int, float);
    method public static boolean isVariable(float);
    method public static void log(String);
    method public static void logStack(String, int);
    method public static String logString(String);
    method public static long longIdFromNan(float);
    method public static int toARGB(float, float, float, float);
    method public static String trimString(String, int);
  }

  public class WakeIn extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public WakeIn(float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int ANCHOR_MONOSPACE_MEASURE = 2; // 0x2
    field public static final int ANCHOR_TEXT_RTL = 1; // 0x1
    field public static final int MEASURE_EVERY_TIME = 4; // 0x4
  }

}

package androidx.compose.remote.core.operations.layout {

  public interface ActionOperation extends androidx.compose.remote.core.serialize.Serializable {
    method public void runAction(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
  }

  public class AnimatableValue implements androidx.compose.remote.core.serialize.Serializable {
    ctor public AnimatableValue(float);
    ctor public AnimatableValue(float, boolean);
    method public float evaluate(androidx.compose.remote.core.PaintContext);
    method public float getValue();
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
  }

  public class CanvasContent extends androidx.compose.remote.core.operations.layout.Component {
    ctor public CanvasContent(int, float, float, float, float, androidx.compose.remote.core.operations.layout.Component?, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
  }

  public class CanvasOperations extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.operations.layout.Container androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public CanvasOperations();
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public java.util.ArrayList<androidx.compose.remote.core.Operation!> getList();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void setComponent(androidx.compose.remote.core.operations.layout.LayoutComponent?);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public java.util.ArrayList<androidx.compose.remote.core.Operation!> mList;
  }

  public interface ClickHandler {
    method public void onClick(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
  }

  public class ClickModifierOperation extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.semantics.AccessibleComponent androidx.compose.remote.core.operations.layout.ClickHandler androidx.compose.remote.core.operations.layout.Container androidx.compose.remote.core.operations.layout.DecoratorComponent androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation {
    ctor public ClickModifierOperation();
    method public void animateRipple(float, float, long);
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public java.util.ArrayList<androidx.compose.remote.core.Operation!> getList();
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public static String name();
    method public void onClick(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public float[] locationInWindow;
    field public java.util.ArrayList<androidx.compose.remote.core.Operation!> mList;
  }

  public class Component extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.operations.layout.Container androidx.compose.remote.core.operations.layout.measure.Measurable androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.SerializableToString {
    ctor public Component(androidx.compose.remote.core.operations.layout.Component);
    ctor public Component(androidx.compose.remote.core.operations.layout.Component?, int, int, float, float, float, float);
    ctor public Component(int, float, float, float, float, androidx.compose.remote.core.operations.layout.Component?);
    method public void addComponentValue(androidx.compose.remote.core.operations.ComponentValue);
    method public void animatingBounds(androidx.compose.remote.core.RemoteContext);
    method public boolean applyAnimationAsNeeded(androidx.compose.remote.core.PaintContext);
    method public void clearNeedsBoundsAnimation();
    method public boolean contains(float, float);
    method public String content();
    method public void debugBox(androidx.compose.remote.core.operations.layout.Component, androidx.compose.remote.core.PaintContext);
    method public boolean doesNeedsRepaint();
    method public void finalizeCreation();
    method public int getAnimationId();
    method protected androidx.compose.remote.core.operations.layout.animation.AnimationSpec getAnimationSpec();
    method public androidx.compose.remote.core.operations.layout.Component? getComponent(int);
    method public int getComponentCount();
    method public int getComponentId();
    method public void getComponents(java.util.ArrayList<androidx.compose.remote.core.operations.layout.Component!>);
    method public void getData(java.util.ArrayList<androidx.compose.remote.core.Operation!>);
    method public float getHeight();
    method public java.util.ArrayList<androidx.compose.remote.core.Operation!> getList();
    method public void getLocationInWindow(float[]);
    method public void getLocationInWindow(float[], boolean);
    method public int getPaintId();
    method public androidx.compose.remote.core.operations.layout.Component? getParent();
    method public androidx.compose.remote.core.operations.layout.RootLayoutComponent getRoot() throws java.lang.Exception;
    method public float getScrollX();
    method public float getScrollY();
    method protected String getSerializedName();
    method public float getTranslateX();
    method public float getTranslateY();
    method public float getWidth();
    method public float getX();
    method public float getY();
    method public float getZIndex();
    method public void inflate();
    method public void invalidateMeasure();
    method public boolean isGone();
    method public boolean isInvisible();
    method public boolean isVisible();
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.measure.MeasurePass);
    method public void markNeedsBoundsAnimation();
    method public float maxIntrinsicHeight(androidx.compose.remote.core.RemoteContext?);
    method public float maxIntrinsicWidth(androidx.compose.remote.core.RemoteContext?);
    method public void measure(androidx.compose.remote.core.PaintContext, float, float, float, float, androidx.compose.remote.core.operations.layout.measure.MeasurePass);
    method public float minIntrinsicHeight(androidx.compose.remote.core.RemoteContext?);
    method public float minIntrinsicWidth(androidx.compose.remote.core.RemoteContext?);
    method public boolean needsBoundsAnimation();
    method public boolean needsMeasure();
    method public void needsRepaint();
    method public void onClick(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, float, float);
    method public void onTouchCancel(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, float, float, boolean);
    method public void onTouchDown(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, float, float);
    method public void onTouchDrag(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, float, float, boolean);
    method public void onTouchUp(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, float, float, float, float, boolean);
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public void paintingComponent(androidx.compose.remote.core.PaintContext);
    method public void registerVariables(androidx.compose.remote.core.RemoteContext);
    method public <T> T? selfOrModifier(Class<T!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void setAnimationId(int);
    method protected void setAnimationSpec(androidx.compose.remote.core.operations.layout.animation.AnimationSpec);
    method public void setComponentId(int);
    method public void setHeight(float);
    method public void setLayoutPosition(float, float);
    method public void setParent(androidx.compose.remote.core.operations.layout.Component?);
    method public void setVisibility(int);
    method public void setWidth(float);
    method public void setX(float);
    method public void setY(float);
    method public String textContent();
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public float[] locationInWindow;
    field public androidx.compose.remote.core.operations.layout.animation.AnimateMeasure? mAnimateMeasure;
    field protected int mAnimationId;
    field public androidx.compose.remote.core.operations.layout.animation.AnimationSpec mAnimationSpec;
    field protected int mComponentId;
    field protected java.util.HashSet<androidx.compose.remote.core.operations.ComponentValue!> mComponentValues;
    field public boolean mFirstLayout;
    field protected float mHeight;
    field public java.util.ArrayList<androidx.compose.remote.core.Operation!> mList;
    field public boolean mNeedsMeasure;
    field public boolean mNeedsRepaint;
    field protected androidx.compose.remote.core.operations.layout.Component? mParent;
    field public androidx.compose.remote.core.PaintOperation? mPreTranslate;
    field public int mScheduledVisibility;
    field public int mVisibility;
    field protected float mWidth;
    field protected float mX;
    field protected float mY;
    field protected float mZIndex;
  }

  public static class Component.Visibility {
    method public static int add(int, int);
    method public static int clearOverride(int);
    method public static boolean hasOverride(int);
    method public static boolean isGone(int);
    method public static boolean isInvisible(int);
    method public static boolean isVisible(int);
    method public static String toString(int);
    field public static final int CLEAR_OVERRIDE = 128; // 0x80
    field public static final int GONE = 0; // 0x0
    field public static final int INVISIBLE = 2; // 0x2
    field public static final int OVERRIDE_GONE = 16; // 0x10
    field public static final int OVERRIDE_INVISIBLE = 64; // 0x40
    field public static final int OVERRIDE_VISIBLE = 32; // 0x20
    field public static final int VISIBLE = 1; // 0x1
  }

  public class ComponentStart extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.Container {
    ctor public ComponentStart(int, int, float, float);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, float, float);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public int getComponentId();
    method public float getHeight();
    method public java.util.ArrayList<androidx.compose.remote.core.Operation!> getList();
    method public int getType();
    method public float getWidth();
    method public float getX();
    method public float getY();
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public static int size();
    method public static String typeDescription(int);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int BUTTON = 5; // 0x5
    field public static final int CHECKBOX = 6; // 0x6
    field public static final int CURVED_TEXT = 8; // 0x8
    field public static final int CUSTOM = 10; // 0xa
    field public static final int DEFAULT = 0; // 0x0
    field public static final int IMAGE = 12; // 0xc
    field public static final int LAYOUT = 2; // 0x2
    field public static final int LAYOUT_BOX = 14; // 0xe
    field public static final int LAYOUT_COLUMN = 16; // 0x10
    field public static final int LAYOUT_CONTENT = 3; // 0x3
    field public static final int LAYOUT_ROW = 15; // 0xf
    field public static final int LOTTIE = 11; // 0xb
    field public static final int ROOT_LAYOUT = 1; // 0x1
    field public static final int SCROLL_CONTENT = 4; // 0x4
    field public static final int STATE_BOX_CONTENT = 13; // 0xd
    field public static final int STATE_HOST = 9; // 0x9
    field public static final int TEXT = 7; // 0x7
    field public static final int UNKNOWN = -1; // 0xffffffff
    field public java.util.ArrayList<androidx.compose.remote.core.Operation!> mList;
  }

  public interface Container {
    method public java.util.ArrayList<androidx.compose.remote.core.Operation!> getList();
  }

  public class ContainerEnd extends androidx.compose.remote.core.Operation {
    ctor public ContainerEnd();
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public interface DecoratorComponent {
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
  }

  public class ImpulseOperation extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.operations.layout.Container androidx.compose.remote.core.VariableSupport {
    ctor public ImpulseOperation(float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public int estimateIterations();
    method public java.util.ArrayList<androidx.compose.remote.core.Operation!> getList();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void setProcess(androidx.compose.remote.core.operations.layout.ImpulseProcess);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public java.util.ArrayList<androidx.compose.remote.core.Operation!> mList;
  }

  public class ImpulseProcess extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.operations.layout.Container androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public ImpulseProcess();
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public int estimateIterations();
    method public java.util.ArrayList<androidx.compose.remote.core.Operation!> getList();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public java.util.ArrayList<androidx.compose.remote.core.Operation!> mList;
  }

  public class LayoutComponent extends androidx.compose.remote.core.operations.layout.Component {
    ctor public LayoutComponent(androidx.compose.remote.core.operations.layout.Component?, int, int, float, float, float, float);
    method public float computeModifierDefinedHeight(androidx.compose.remote.core.RemoteContext?);
    method public float computeModifierDefinedPaddingHeight(float[]);
    method public float computeModifierDefinedPaddingWidth(float[]);
    method public float computeModifierDefinedWidth(androidx.compose.remote.core.RemoteContext?);
    method public void drawContent(androidx.compose.remote.core.PaintContext);
    method public java.util.ArrayList<androidx.compose.remote.core.operations.layout.Component!> getChildrenComponents();
    method public androidx.compose.remote.core.operations.layout.modifiers.ComponentModifiers getComponentModifiers();
    method public androidx.compose.remote.core.operations.layout.modifiers.HeightModifierOperation? getHeightModifier();
    method public float getPaddingBottom();
    method public float getPaddingLeft();
    method public float getPaddingRight();
    method public float getPaddingTop();
    method public androidx.compose.remote.core.operations.layout.modifiers.WidthModifierOperation? getWidthModifier();
    method public void setCanvasOperations(androidx.compose.remote.core.operations.layout.CanvasOperations?);
    method public void setScrollX(float);
    method public void setScrollY(float);
    field protected final java.util.HashMap<java.lang.Integer!,java.lang.Object!>! mCachedAttributes;
    field protected java.util.ArrayList<androidx.compose.remote.core.operations.layout.Component!> mChildrenComponents;
    field protected boolean mChildrenHaveZIndex;
    field protected androidx.compose.remote.core.operations.layout.modifiers.ComponentModifiers mComponentModifiers;
    field protected androidx.compose.remote.core.operations.layout.LayoutComponentContent? mContent;
    field protected androidx.compose.remote.core.operations.layout.modifiers.GraphicsLayerModifierOperation? mGraphicsLayerModifier;
    field protected androidx.compose.remote.core.operations.layout.modifiers.HeightModifierOperation? mHeightModifier;
    field protected androidx.compose.remote.core.operations.layout.ScrollDelegate? mHorizontalScrollDelegate;
    field protected float mPaddingBottom;
    field protected float mPaddingLeft;
    field protected float mPaddingRight;
    field protected float mPaddingTop;
    field protected androidx.compose.remote.core.operations.layout.ScrollDelegate? mVerticalScrollDelegate;
    field protected androidx.compose.remote.core.operations.layout.modifiers.WidthModifierOperation? mWidthModifier;
    field protected androidx.compose.remote.core.operations.layout.modifiers.ZIndexModifierOperation? mZIndexModifier;
  }

  public class LayoutComponentContent extends androidx.compose.remote.core.operations.layout.Component {
    ctor public LayoutComponentContent(int, float, float, float, float, androidx.compose.remote.core.operations.layout.Component?, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
  }

  public abstract class ListActionsOperation extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.operations.layout.Container androidx.compose.remote.core.operations.layout.DecoratorComponent androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation {
    ctor public ListActionsOperation(String);
    method public boolean applyActions(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float, boolean);
    method public java.util.ArrayList<androidx.compose.remote.core.Operation!> getList();
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    field protected float mHeight;
    field public java.util.ArrayList<androidx.compose.remote.core.Operation!> mList;
    field protected float mWidth;
  }

  public class LoopOperation extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.operations.layout.Container androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public LoopOperation(int, float, float, float);
    ctor public LoopOperation(int, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public int estimateIterations();
    method public java.util.ArrayList<androidx.compose.remote.core.Operation!> getList();
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public java.util.ArrayList<androidx.compose.remote.core.Operation!> mList;
  }

  public class RootLayoutComponent extends androidx.compose.remote.core.operations.layout.Component {
    ctor public RootLayoutComponent(int, float, float, float, float, androidx.compose.remote.core.operations.layout.Component?);
    ctor public RootLayoutComponent(int, float, float, float, float, androidx.compose.remote.core.operations.layout.Component?, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int);
    method public void assignIds(int);
    method public String displayHierarchy();
    method public void displayHierarchy(androidx.compose.remote.core.operations.layout.Component, int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public boolean getHasTouchListeners();
    method public static int id();
    method public void layout(androidx.compose.remote.core.RemoteContext);
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void setHasTouchListeners(boolean);
  }

  public interface ScrollDelegate {
    method public float getScrollX(float);
    method public float getScrollY(float);
    method public boolean handlesHorizontalScroll();
    method public boolean handlesVerticalScroll();
    method public void reset();
  }

  public class TouchCancelModifierOperation extends androidx.compose.remote.core.operations.layout.ListActionsOperation implements androidx.compose.remote.core.operations.layout.TouchHandler {
    ctor public TouchCancelModifierOperation();
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static String name();
    method public void onTouchCancel(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDown(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDrag(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchUp(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float, float, float);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class TouchDownModifierOperation extends androidx.compose.remote.core.operations.layout.ListActionsOperation implements androidx.compose.remote.core.operations.layout.TouchHandler {
    ctor public TouchDownModifierOperation();
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static String name();
    method public void onTouchCancel(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDown(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDrag(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchUp(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float, float, float);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public interface TouchHandler {
    method public void onTouchCancel(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDown(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDrag(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchUp(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float, float, float);
  }

  public class TouchUpModifierOperation extends androidx.compose.remote.core.operations.layout.ListActionsOperation implements androidx.compose.remote.core.operations.layout.TouchHandler {
    ctor public TouchUpModifierOperation();
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static String name();
    method public void onTouchCancel(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDown(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDrag(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchUp(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float, float, float);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

}

package androidx.compose.remote.core.operations.layout.animation {

  public class AnimateMeasure {
    ctor public AnimateMeasure(long, androidx.compose.remote.core.operations.layout.Component, androidx.compose.remote.core.operations.layout.measure.ComponentMeasure, androidx.compose.remote.core.operations.layout.measure.ComponentMeasure, float, float, androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION, androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION, int, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public float getHeight();
    method public float getVisibility();
    method public float getWidth();
    method public float getX();
    method public float getY();
    method public boolean isDone();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public void update(long);
    method public void updateTarget(androidx.compose.remote.core.operations.layout.measure.ComponentMeasure, long);
    field public androidx.compose.remote.core.operations.paint.PaintBundle paint;
  }

  public class AnimationSpec extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation {
    ctor public AnimationSpec();
    ctor public AnimationSpec(int);
    ctor public AnimationSpec(int, float, int, float, int, androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION, androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION);
    method public static int animationToInt(androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float, int, float, int, androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION, androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public int getAnimationId();
    method public androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION getEnterAnimation();
    method public androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION getExitAnimation();
    method public float getMotionDuration();
    method public int getMotionEasingType();
    method public float getVisibilityDuration();
    method public int getVisibilityEasingType();
    method public static int id();
    method public static androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION intToAnimation(int);
    method public boolean isAnimationEnabled();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final androidx.compose.remote.core.operations.layout.animation.AnimationSpec! DEFAULT;
    field public static final androidx.compose.remote.core.operations.layout.animation.AnimationSpec! DISABLED;
  }

  public enum AnimationSpec.ANIMATION {
    enum_constant public static final androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION FADE_IN;
    enum_constant public static final androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION FADE_OUT;
    enum_constant public static final androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION PARTICLE;
    enum_constant public static final androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION ROTATE;
    enum_constant public static final androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION SLIDE_BOTTOM;
    enum_constant public static final androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION SLIDE_LEFT;
    enum_constant public static final androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION SLIDE_RIGHT;
    enum_constant public static final androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION SLIDE_TOP;
  }

  public class Particle {
    ctor public Particle(float, float, float, float, float, float);
    field public float b;
    field public float g;
    field public float r;
    field public float radius;
    field public final float x;
    field public final float y;
  }

  public class ParticleAnimation {
    ctor public ParticleAnimation();
    method public void animate(androidx.compose.remote.core.PaintContext, androidx.compose.remote.core.operations.layout.Component, androidx.compose.remote.core.operations.layout.measure.ComponentMeasure, androidx.compose.remote.core.operations.layout.measure.ComponentMeasure, float);
  }

}

package androidx.compose.remote.core.operations.layout.managers {

  public class BoxLayout extends androidx.compose.remote.core.operations.layout.managers.LayoutManager {
    ctor public BoxLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, float, float, float, float, int, int);
    ctor public BoxLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, int, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    field public static final int BOTTOM = 5; // 0x5
    field public static final int CENTER = 2; // 0x2
    field public static final int END = 3; // 0x3
    field public static final int START = 1; // 0x1
    field public static final int TOP = 4; // 0x4
  }

  public class CanvasLayout extends androidx.compose.remote.core.operations.layout.managers.BoxLayout {
    ctor public CanvasLayout(androidx.compose.remote.core.operations.layout.Component?, int, int);
    ctor public CanvasLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, float, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
  }

  public class CollapsibleColumnLayout extends androidx.compose.remote.core.operations.layout.managers.ColumnLayout {
    ctor public CollapsibleColumnLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, float, float, float, float, int, int, float);
    ctor public CollapsibleColumnLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, int, int, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int, float);
    method public boolean hasVerticalIntrinsicDimension();
    method public static int id();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
  }

  public class CollapsiblePriority {
    field public static final int HORIZONTAL = 0; // 0x0
    field public static final int VERTICAL = 1; // 0x1
  }

  public class CollapsibleRowLayout extends androidx.compose.remote.core.operations.layout.managers.RowLayout {
    ctor public CollapsibleRowLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, float, float, float, float, int, int, float);
    ctor public CollapsibleRowLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, int, int, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int, float);
    method public boolean hasHorizontalIntrinsicDimension();
    method public static int id();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
  }

  public class ColumnLayout extends androidx.compose.remote.core.operations.layout.managers.LayoutManager {
    ctor public ColumnLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, float, float, float, float, int, int, float);
    ctor public ColumnLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, int, int, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    field public static final int BOTTOM = 5; // 0x5
    field public static final int CENTER = 2; // 0x2
    field public static final int END = 3; // 0x3
    field public static final int SPACE_AROUND = 8; // 0x8
    field public static final int SPACE_BETWEEN = 6; // 0x6
    field public static final int SPACE_EVENLY = 7; // 0x7
    field public static final int START = 1; // 0x1
    field public static final int TOP = 4; // 0x4
  }

  public class FitBoxLayout extends androidx.compose.remote.core.operations.layout.managers.LayoutManager {
    ctor public FitBoxLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, float, float, float, float, int, int);
    ctor public FitBoxLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, int, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    field public static final int BOTTOM = 5; // 0x5
    field public static final int CENTER = 2; // 0x2
    field public static final int END = 3; // 0x3
    field public static final int START = 1; // 0x1
    field public static final int TOP = 4; // 0x4
  }

  public class ImageLayout extends androidx.compose.remote.core.operations.layout.managers.LayoutManager implements androidx.compose.remote.core.VariableSupport {
    ctor public ImageLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, int, float, float, float, float, int, float);
    ctor public ImageLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, int, int, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
  }

  public abstract class LayoutManager extends androidx.compose.remote.core.operations.layout.LayoutComponent implements androidx.compose.remote.core.operations.layout.measure.Measurable {
    ctor public LayoutManager(androidx.compose.remote.core.operations.layout.Component?, int, int, float, float, float, float);
    method public boolean applyVisibility(float, float, androidx.compose.remote.core.operations.layout.measure.MeasurePass);
    method protected boolean childrenHaveHorizontalWeights();
    method protected boolean childrenHaveVerticalWeights();
    method public void computeSize(androidx.compose.remote.core.PaintContext, float, float, float, float, androidx.compose.remote.core.operations.layout.measure.MeasurePass);
    method public void computeWrapSize(androidx.compose.remote.core.PaintContext, float, float, boolean, boolean, androidx.compose.remote.core.operations.layout.measure.MeasurePass, androidx.compose.remote.core.operations.layout.measure.Size);
    method protected boolean hasHorizontalIntrinsicDimension();
    method protected boolean hasVerticalIntrinsicDimension();
    method public void internalLayoutMeasure(androidx.compose.remote.core.PaintContext, androidx.compose.remote.core.operations.layout.measure.MeasurePass);
    method public boolean isInHorizontalFill();
    method public boolean isInVerticalFill();
    method public void selfLayout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.measure.MeasurePass);
  }

  public class RowLayout extends androidx.compose.remote.core.operations.layout.managers.LayoutManager {
    ctor public RowLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, float, float, float, float, int, int, float);
    ctor public RowLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, int, int, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    field public static final int BOTTOM = 5; // 0x5
    field public static final int CENTER = 2; // 0x2
    field public static final int END = 3; // 0x3
    field public static final int SPACE_AROUND = 8; // 0x8
    field public static final int SPACE_BETWEEN = 6; // 0x6
    field public static final int SPACE_EVENLY = 7; // 0x7
    field public static final int START = 1; // 0x1
    field public static final int TOP = 4; // 0x4
  }

  public class StateLayout extends androidx.compose.remote.core.operations.layout.managers.LayoutManager {
    ctor public StateLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, float, float, float, float, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int, int);
    method public void checkEndOfTransition();
    method public void collapsePaintedComponents();
    method public void findAnimatedComponents();
    method public androidx.compose.remote.core.operations.layout.managers.LayoutManager getLayout(int);
    method public void hideLayoutsOtherThan(int);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    field public int MAX_CACHE_ELEMENTS;
    field public int[] cacheListElementsId;
    field public int currentLayoutIndex;
    field public boolean inTransition;
    field public int measuredLayoutIndex;
    field public int previousLayoutIndex;
    field public java.util.Map<java.lang.Integer!,androidx.compose.remote.core.operations.layout.Component![]!> statePaintedComponents;
  }

  public class TextLayout extends androidx.compose.remote.core.operations.layout.managers.LayoutManager implements androidx.compose.remote.core.semantics.AccessibleComponent androidx.compose.remote.core.VariableSupport {
    ctor public TextLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, float, float, float, float, int, int, float, int, float, int, int, int, int);
    ctor public TextLayout(androidx.compose.remote.core.operations.layout.Component?, int, int, int, int, float, int, float, int, int, int, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int, int, float, int, float, int, int, int, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    field public static final int OVERFLOW_CLIP = 1; // 0x1
    field public static final int OVERFLOW_ELLIPSIS = 3; // 0x3
    field public static final int OVERFLOW_MIDDLE_ELLIPSIS = 5; // 0x5
    field public static final int OVERFLOW_START_ELLIPSIS = 4; // 0x4
    field public static final int OVERFLOW_VISIBLE = 2; // 0x2
    field public static final int TEXT_ALIGN_CENTER = 3; // 0x3
    field public static final int TEXT_ALIGN_END = 6; // 0x6
    field public static final int TEXT_ALIGN_JUSTIFY = 4; // 0x4
    field public static final int TEXT_ALIGN_LEFT = 1; // 0x1
    field public static final int TEXT_ALIGN_RIGHT = 2; // 0x2
    field public static final int TEXT_ALIGN_START = 5; // 0x5
    field public androidx.compose.remote.core.operations.paint.PaintBundle mPaint;
  }

}

package androidx.compose.remote.core.operations.layout.measure {

  public class ComponentMeasure {
    ctor public ComponentMeasure(androidx.compose.remote.core.operations.layout.Component);
    ctor public ComponentMeasure(int, float, float, float, float);
    ctor public ComponentMeasure(int, float, float, float, float, int);
    method public void addVisibilityOverride(int);
    method public void clearVisibilityOverride();
    method public void copyFrom(androidx.compose.remote.core.operations.layout.measure.ComponentMeasure);
    method public float getH();
    method public int getVisibility();
    method public float getW();
    method public float getX();
    method public float getY();
    method public boolean isGone();
    method public boolean isInvisible();
    method public boolean isVisible();
    method public boolean same(androidx.compose.remote.core.operations.layout.measure.ComponentMeasure);
    method public void setH(float);
    method public void setVisibility(int);
    method public void setW(float);
    method public void setX(float);
    method public void setY(float);
  }

  public interface Measurable {
    method public void animatingBounds(androidx.compose.remote.core.RemoteContext);
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.measure.MeasurePass);
    method public void measure(androidx.compose.remote.core.PaintContext, float, float, float, float, androidx.compose.remote.core.operations.layout.measure.MeasurePass);
    method public boolean needsMeasure();
  }

  public class MeasurePass {
    ctor public MeasurePass();
    method public void add(androidx.compose.remote.core.operations.layout.measure.ComponentMeasure) throws java.lang.Exception;
    method public void clear();
    method public boolean contains(int);
    method public androidx.compose.remote.core.operations.layout.measure.ComponentMeasure get(androidx.compose.remote.core.operations.layout.Component);
    method public androidx.compose.remote.core.operations.layout.measure.ComponentMeasure get(int);
  }

  public class Size {
    ctor public Size(float, float);
    method public float getHeight();
    method public float getWidth();
    method public void setHeight(float);
    method public void setWidth(float);
  }

}

package androidx.compose.remote.core.operations.layout.modifiers {

  public class BackgroundModifierOperation extends androidx.compose.remote.core.operations.layout.modifiers.DecoratorModifierOperation {
    ctor public BackgroundModifierOperation(float, float, float, float, float, float, float, float, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float, float, float, float, float, float, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public androidx.compose.remote.core.operations.paint.PaintBundle mPaint;
  }

  public class BorderModifierOperation extends androidx.compose.remote.core.operations.layout.modifiers.DecoratorModifierOperation {
    ctor public BorderModifierOperation(float, float, float, float, float, float, float, float, float, float, int);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float, float, float, float, float, float, float, float, int);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final String CLASS_NAME = "BorderModifierOperation";
    field public androidx.compose.remote.core.operations.paint.PaintBundle paint;
  }

  public class ClipRectModifierOperation extends androidx.compose.remote.core.operations.layout.modifiers.DecoratorModifierOperation {
    ctor public ClipRectModifierOperation();
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final String CLASS_NAME = "ClipRectModifierOperation";
  }

  public class CollapsiblePriorityModifierOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation androidx.compose.remote.core.serialize.Serializable {
    ctor public CollapsiblePriorityModifierOperation(int, float);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public int getOrientation();
    method public float getPriority();
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final String CLASS_NAME = "CollapsiblePriorityModifierOperation";
  }

  public class ComponentModifiers extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.operations.layout.ClickHandler androidx.compose.remote.core.operations.layout.DecoratorComponent androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.SerializableToString androidx.compose.remote.core.operations.layout.TouchHandler {
    ctor public ComponentModifiers();
    method public void add(androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation);
    method public void addAll(java.util.ArrayList<androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation!>);
    method public float getHorizontalScrollDimension();
    method public java.util.ArrayList<androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation!> getList();
    method public float getVerticalScrollDimension();
    method public boolean hasHorizontalScroll();
    method public boolean hasVerticalScroll();
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onClick(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchCancel(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDown(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDrag(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchUp(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float, float, float);
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void setHorizontalScrollDimension(float, float);
    method public void setVerticalScrollDimension(float, float);
    method public int size();
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class ComponentVisibilityOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.DecoratorComponent androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation androidx.compose.remote.core.VariableSupport {
    ctor public ComponentVisibilityOperation(int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public String serializedName();
    method public void setParent(androidx.compose.remote.core.operations.layout.LayoutComponent?);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public abstract class DecoratorModifierOperation extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.operations.layout.DecoratorComponent androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation androidx.compose.remote.core.serialize.Serializable {
    ctor public DecoratorModifierOperation();
  }

  public abstract class DimensionInModifierOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation androidx.compose.remote.core.VariableSupport {
    ctor public DimensionInModifierOperation(int, float, float);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public String deepToString(String);
    method public float getMax();
    method public float getMin();
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public abstract class DimensionModifierOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation androidx.compose.remote.core.VariableSupport {
    ctor public DimensionModifierOperation(androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type);
    ctor public DimensionModifierOperation(androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type, float);
    ctor public DimensionModifierOperation(float);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public String deepToString(String);
    method public androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type getType();
    method public float getValue();
    method public boolean hasWeight();
    method public boolean isFill();
    method public boolean isIntrinsicMax();
    method public boolean isIntrinsicMin();
    method public boolean isWrap();
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public String serializedName();
    method public void setValue(float);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
  }

  public enum DimensionModifierOperation.Type {
    enum_constant public static final androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type EXACT;
    enum_constant public static final androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type EXACT_DP;
    enum_constant public static final androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type FILL;
    enum_constant public static final androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type INTRINSIC_MAX;
    enum_constant public static final androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type INTRINSIC_MIN;
    enum_constant public static final androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type WEIGHT;
    enum_constant public static final androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type WRAP;
  }

  public class DrawContentOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.DecoratorComponent androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation androidx.compose.remote.core.VariableSupport {
    ctor public DrawContentOperation();
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public androidx.compose.remote.core.operations.layout.LayoutComponent? getParent();
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public String serializedName();
    method public void setParent(androidx.compose.remote.core.operations.layout.LayoutComponent?);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class GraphicsLayerModifierOperation extends androidx.compose.remote.core.operations.layout.modifiers.DecoratorModifierOperation {
    ctor public GraphicsLayerModifierOperation();
    method public static void apply(androidx.compose.remote.core.WireBuffer, java.util.HashMap<java.lang.Integer!,java.lang.Object!>);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public void fillInAttributes(java.util.HashMap<java.lang.Integer!,java.lang.Object!>);
    method public static int id();
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int ALPHA = 11; // 0xb
    field public static final int AMBIENT_SHADOW_COLOR = 15; // 0xf
    field public static final int BLUR_RADIUS_X = 17; // 0x11
    field public static final int BLUR_RADIUS_Y = 18; // 0x12
    field public static final int BLUR_TILE_MODE = 19; // 0x13
    field public static final int CAMERA_DISTANCE = 12; // 0xc
    field public static final String CLASS_NAME = "GraphicsLayerModifierOperation";
    field public static final int COMPOSITING_STRATEGY = 13; // 0xd
    field public static final int HAS_BLUR = 16; // 0x10
    field public static final int ROTATION_X = 2; // 0x2
    field public static final int ROTATION_Y = 3; // 0x3
    field public static final int ROTATION_Z = 4; // 0x4
    field public static final int SCALE_X = 0; // 0x0
    field public static final int SCALE_Y = 1; // 0x1
    field public static final int SHADOW_ELEVATION = 10; // 0xa
    field public static final int SHAPE = 20; // 0x14
    field public static final int SHAPE_CIRCLE = 2; // 0x2
    field public static final int SHAPE_RADIUS = 21; // 0x15
    field public static final int SHAPE_RECT = 0; // 0x0
    field public static final int SHAPE_ROUND_RECT = 1; // 0x1
    field public static final int SPOT_SHADOW_COLOR = 14; // 0xe
    field public static final int TILE_MODE_CLAMP = 0; // 0x0
    field public static final int TILE_MODE_DECAL = 3; // 0x3
    field public static final int TILE_MODE_MIRROR = 2; // 0x2
    field public static final int TILE_MODE_REPEATED = 1; // 0x1
    field public static final int TRANSFORM_ORIGIN_X = 5; // 0x5
    field public static final int TRANSFORM_ORIGIN_Y = 6; // 0x6
    field public static final int TRANSLATION_X = 7; // 0x7
    field public static final int TRANSLATION_Y = 8; // 0x8
    field public static final int TRANSLATION_Z = 9; // 0x9
  }

  public class HeightInModifierOperation extends androidx.compose.remote.core.operations.layout.modifiers.DimensionInModifierOperation {
    ctor public HeightInModifierOperation(float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    field public static final String CLASS_NAME = "HeightInModifierOperation";
  }

  public class HeightModifierOperation extends androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation {
    ctor public HeightModifierOperation(androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type);
    ctor public HeightModifierOperation(androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type, float);
    ctor public HeightModifierOperation(float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public androidx.compose.remote.core.operations.layout.modifiers.HeightInModifierOperation? getHeightIn();
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void setHeightIn(androidx.compose.remote.core.operations.layout.modifiers.HeightInModifierOperation);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final String CLASS_NAME = "HeightModifierOperation";
  }

  public class HostActionMetadataOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.ActionOperation androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.SerializableToString {
    ctor public HostActionMetadataOperation(int, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public int getActionId();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void runAction(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public String serializedName();
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class HostActionOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.ActionOperation androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.SerializableToString {
    ctor public HostActionOperation(int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public int getActionId();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void runAction(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public String serializedName();
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class HostNamedActionOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.ActionOperation androidx.compose.remote.core.serialize.Serializable {
    ctor public HostNamedActionOperation(int, int, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void runAction(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public String serializedName();
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final int FLOAT_ARRAY_TYPE = 3; // 0x3
    field public static final int FLOAT_TYPE = 0; // 0x0
    field public static final int INT_TYPE = 1; // 0x1
    field public static final int NONE_TYPE = -1; // 0xffffffff
    field public static final int STRING_TYPE = 2; // 0x2
  }

  public class MarqueeModifierOperation extends androidx.compose.remote.core.operations.layout.modifiers.DecoratorModifierOperation implements androidx.compose.remote.core.operations.layout.ScrollDelegate {
    ctor public MarqueeModifierOperation(int, int, float, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, float, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public float getScrollX(float);
    method public float getScrollY(float);
    method public boolean handlesHorizontalScroll();
    method public boolean handlesVerticalScroll();
    method public static int id();
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void reset();
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void setContentHeight(float);
    method public void setContentWidth(float);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final String CLASS_NAME = "MarqueeModifierOperation";
  }

  public interface ModifierOperation extends androidx.compose.remote.core.OperationInterface androidx.compose.remote.core.serialize.Serializable {
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
  }

  public class OffsetModifierOperation extends androidx.compose.remote.core.operations.layout.modifiers.DecoratorModifierOperation {
    ctor public OffsetModifierOperation(float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public float getX();
    method public float getY();
    method public static int id();
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void setX(float);
    method public void setY(float);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final String CLASS_NAME = "OffsetModifierOperation";
  }

  public class PaddingModifierOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation {
    ctor public PaddingModifierOperation(float, float, float, float);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float, float);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public float getBottom();
    method public float getLeft();
    method public float getRight();
    method public float getTop();
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void setBottom(float);
    method public void setLeft(float);
    method public void setRight(float);
    method public void setTop(float);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final String CLASS_NAME = "PaddingModifierOperation";
  }

  public class RippleModifierOperation extends androidx.compose.remote.core.operations.layout.modifiers.DecoratorModifierOperation implements androidx.compose.remote.core.operations.layout.TouchHandler {
    ctor public RippleModifierOperation();
    method public void animateRipple(float, float, long);
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public static String name();
    method public void onTouchCancel(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDown(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDrag(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchUp(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float, float, float);
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public float[] locationInWindow;
  }

  public class RoundedClipRectModifierOperation extends androidx.compose.remote.core.operations.DrawBase4 implements androidx.compose.remote.core.operations.layout.DecoratorComponent androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation {
    ctor public RoundedClipRectModifierOperation(float, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method protected void write(androidx.compose.remote.core.WireBuffer, float, float, float, float);
    field public static final String CLASS_NAME = "RoundedClipRectModifierOperation";
    field public static final int OP_CODE = 54; // 0x36
  }

  public class RunActionOperation extends androidx.compose.remote.core.PaintOperation implements androidx.compose.remote.core.operations.layout.Container {
    ctor public RunActionOperation();
    method public static void apply(androidx.compose.remote.core.WireBuffer);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public java.util.ArrayList<androidx.compose.remote.core.Operation!> getList();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public String serializedName();
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public java.util.ArrayList<androidx.compose.remote.core.Operation!> mList;
  }

  public class ScrollModifierOperation extends androidx.compose.remote.core.operations.layout.ListActionsOperation implements androidx.compose.remote.core.operations.layout.DecoratorComponent androidx.compose.remote.core.operations.layout.ScrollDelegate androidx.compose.remote.core.semantics.ScrollableComponent androidx.compose.remote.core.operations.layout.TouchHandler androidx.compose.remote.core.VariableSupport {
    ctor public ScrollModifierOperation(int, float, float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public float getContentDimension();
    method public float getScrollX();
    method public float getScrollX(float);
    method public float getScrollY();
    method public float getScrollY(float);
    method public boolean handlesHorizontalScroll();
    method public boolean handlesVerticalScroll();
    method public static int id();
    method public void inflate(androidx.compose.remote.core.operations.layout.Component);
    method public boolean isHorizontalScroll();
    method public boolean isVerticalScroll();
    method public static String name();
    method public void onTouchCancel(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDown(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchDrag(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void onTouchUp(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float, float, float);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void reset();
    method public int scrollDirection();
    method public void setHorizontalScrollDimension(float, float);
    method public void setVerticalScrollDimension(float, float);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final String CLASS_NAME = "ScrollModifierOperation";
  }

  public class ShapeType {
    method public static String getString(int);
    field public static final int CIRCLE = 1; // 0x1
    field public static final int RECTANGLE = 0; // 0x0
    field public static final int ROUNDED_RECTANGLE = 2; // 0x2
  }

  public class ValueFloatChangeActionOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.ActionOperation {
    ctor public ValueFloatChangeActionOperation(int, float);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void runAction(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public String serializedName();
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class ValueFloatExpressionChangeActionOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.ActionOperation {
    ctor public ValueFloatExpressionChangeActionOperation(int, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void runAction(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public String serializedName();
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class ValueIntegerChangeActionOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.ActionOperation {
    ctor public ValueIntegerChangeActionOperation(int, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void runAction(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public String serializedName();
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class ValueIntegerExpressionChangeActionOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.ActionOperation {
    ctor public ValueIntegerExpressionChangeActionOperation(long, long);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, long, long);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void runAction(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public String serializedName();
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class ValueStringChangeActionOperation extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.operations.layout.ActionOperation {
    ctor public ValueStringChangeActionOperation(int, int);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public int getActionId();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void runAction(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public String serializedName();
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class WidthInModifierOperation extends androidx.compose.remote.core.operations.layout.modifiers.DimensionInModifierOperation {
    ctor public WidthInModifierOperation(float, float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    field public static final String CLASS_NAME = "WidthInModifierOperation";
  }

  public class WidthModifierOperation extends androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation {
    ctor public WidthModifierOperation(androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type);
    ctor public WidthModifierOperation(androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type, float);
    ctor public WidthModifierOperation(float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public androidx.compose.remote.core.operations.layout.modifiers.WidthInModifierOperation? getWidthIn();
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void setWidthIn(androidx.compose.remote.core.operations.layout.modifiers.WidthInModifierOperation);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final String CLASS_NAME = "WidthModifierOperation";
  }

  public class ZIndexModifierOperation extends androidx.compose.remote.core.operations.layout.modifiers.DecoratorModifierOperation {
    ctor public ZIndexModifierOperation(float);
    method public static void apply(androidx.compose.remote.core.WireBuffer, float);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public float getValue();
    method public static int id();
    method public void layout(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component, float, float);
    method public static String name();
    method public void paint(androidx.compose.remote.core.PaintContext);
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void setValue(float);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public static final String CLASS_NAME = "ZIndexModifierOperation";
  }

}

package androidx.compose.remote.core.operations.layout.utils {

  public class DebugLog {
    method public static void clear();
    method public static void display();
    method public static void e();
    method public static void e(androidx.compose.remote.core.operations.layout.utils.StringValueSupplier);
    method public static void log(androidx.compose.remote.core.operations.layout.utils.StringValueSupplier);
    method public static void printNode(int, androidx.compose.remote.core.operations.layout.utils.DebugLog.Node, StringBuilder);
    method public static void s(androidx.compose.remote.core.operations.layout.utils.StringValueSupplier);
    field public static final boolean DEBUG_LAYOUT_ON = false;
    field public static androidx.compose.remote.core.operations.layout.utils.DebugLog.Node currentNode;
    field public static androidx.compose.remote.core.operations.layout.utils.DebugLog.Node node;
  }

  public static class DebugLog.LogNode extends androidx.compose.remote.core.operations.layout.utils.DebugLog.Node {
    ctor public DebugLog.LogNode(androidx.compose.remote.core.operations.layout.utils.DebugLog.Node?, String);
  }

  public static class DebugLog.Node {
    ctor public DebugLog.Node(androidx.compose.remote.core.operations.layout.utils.DebugLog.Node?, String);
    method public void add(androidx.compose.remote.core.operations.layout.utils.DebugLog.Node);
    field public String endString;
    field public java.util.ArrayList<androidx.compose.remote.core.operations.layout.utils.DebugLog.Node!> list;
    field public String name;
    field public androidx.compose.remote.core.operations.layout.utils.DebugLog.Node? parent;
  }

  public interface StringValueSupplier {
    method public String getString();
  }

}

package androidx.compose.remote.core.operations.matrix {

  public class MatrixConstant extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.MatrixAccess androidx.compose.remote.core.serialize.Serializable {
    ctor public MatrixConstant(int, int, float[]);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, float[]);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public float[] get();
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void update(androidx.compose.remote.core.operations.matrix.MatrixConstant);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class MatrixExpression extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.MatrixAccess androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public MatrixExpression(int, int, float[]);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int, float[]);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public float[] get();
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void update(androidx.compose.remote.core.operations.matrix.MatrixExpression);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class MatrixVectorMath extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable androidx.compose.remote.core.VariableSupport {
    ctor public MatrixVectorMath(short, int[], int, float[]);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, short, int[], int, float[]);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void registerListening(androidx.compose.remote.core.RemoteContext);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public int mMatrixId;
  }

}

package androidx.compose.remote.core.operations.paint {

  public class PaintBundle implements androidx.compose.remote.core.serialize.Serializable {
    ctor public PaintBundle();
    method public void applyPaintChange(androidx.compose.remote.core.PaintContext, androidx.compose.remote.core.operations.paint.PaintChanges);
    method public static String blendModeString(int);
    method public void clear(long);
    method public void clearColorFilter();
    method public void readBundle(androidx.compose.remote.core.WireBuffer);
    method public void registerVars(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.VariableSupport);
    method public void reset();
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void setAlpha(float);
    method public void setAntiAlias(boolean);
    method public void setBlendMode(int);
    method public void setColor(float, float, float, float);
    method public void setColor(int);
    method public void setColor(int, int, int, int);
    method public void setColorFilter(int, int);
    method public void setColorFilterId(int, int);
    method public void setColorId(int);
    method public void setFilterBitmap(boolean);
    method public void setLinearGradient(int[], int, float[]?, float, float, float, float, int);
    method public void setRadialGradient(int[], int, float[]?, float, float, float, int);
    method public void setShader(int);
    method public void setShaderMatrix(float);
    method public void setStrokeCap(int);
    method public void setStrokeJoin(int);
    method public void setStrokeMiter(float);
    method public void setStrokeWidth(float);
    method public void setStyle(int);
    method public void setSweepGradient(int[], int, float[]?, float, float);
    method public void setTextAxis(int[], float[]);
    method public void setTextSize(float);
    method public void setTextStyle(int, int, boolean);
    method public void setTextStyle(int, int, boolean, boolean);
    method public void setTextureShader(int, short, short, short, short);
    method public void updateVariables(androidx.compose.remote.core.RemoteContext);
    method public void writeBundle(androidx.compose.remote.core.WireBuffer);
    field public static final int ALPHA = 12; // 0xc
    field public static final int ANTI_ALIAS = 14; // 0xe
    field public static final int BLEND_MODE = 18; // 0x12
    field public static final int BLEND_MODE_CLEAR = 0; // 0x0
    field public static final int BLEND_MODE_COLOR = 27; // 0x1b
    field public static final int BLEND_MODE_COLOR_BURN = 19; // 0x13
    field public static final int BLEND_MODE_COLOR_DODGE = 18; // 0x12
    field public static final int BLEND_MODE_DARKEN = 16; // 0x10
    field public static final int BLEND_MODE_DIFFERENCE = 22; // 0x16
    field public static final int BLEND_MODE_DST = 2; // 0x2
    field public static final int BLEND_MODE_DST_ATOP = 10; // 0xa
    field public static final int BLEND_MODE_DST_IN = 6; // 0x6
    field public static final int BLEND_MODE_DST_OUT = 8; // 0x8
    field public static final int BLEND_MODE_DST_OVER = 4; // 0x4
    field public static final int BLEND_MODE_EXCLUSION = 23; // 0x17
    field public static final int BLEND_MODE_HARD_LIGHT = 20; // 0x14
    field public static final int BLEND_MODE_HUE = 25; // 0x19
    field public static final int BLEND_MODE_LIGHTEN = 17; // 0x11
    field public static final int BLEND_MODE_LUMINOSITY = 28; // 0x1c
    field public static final int BLEND_MODE_MODULATE = 13; // 0xd
    field public static final int BLEND_MODE_MULTIPLY = 24; // 0x18
    field public static final int BLEND_MODE_NULL = 29; // 0x1d
    field public static final int BLEND_MODE_OVERLAY = 15; // 0xf
    field public static final int BLEND_MODE_PLUS = 12; // 0xc
    field public static final int BLEND_MODE_SATURATION = 26; // 0x1a
    field public static final int BLEND_MODE_SCREEN = 14; // 0xe
    field public static final int BLEND_MODE_SOFT_LIGHT = 21; // 0x15
    field public static final int BLEND_MODE_SRC = 1; // 0x1
    field public static final int BLEND_MODE_SRC_ATOP = 9; // 0x9
    field public static final int BLEND_MODE_SRC_IN = 5; // 0x5
    field public static final int BLEND_MODE_SRC_OUT = 7; // 0x7
    field public static final int BLEND_MODE_SRC_OVER = 3; // 0x3
    field public static final int BLEND_MODE_XOR = 11; // 0xb
    field public static final int CLEAR_COLOR_FILTER = 21; // 0x15
    field public static final int COLOR = 4; // 0x4
    field public static final int COLOR_FILTER = 13; // 0xd
    field public static final int COLOR_FILTER_ID = 20; // 0x14
    field public static final int COLOR_ID = 19; // 0x13
    field public static final int FILTER_BITMAP = 17; // 0x11
    field public static final int FONT_AXIS = 23; // 0x17
    field public static final int FONT_BOLD = 1; // 0x1
    field public static final int FONT_BOLD_ITALIC = 3; // 0x3
    field public static final int FONT_ITALIC = 2; // 0x2
    field public static final int FONT_NORMAL = 0; // 0x0
    field public static final int FONT_TYPE_DEFAULT = 0; // 0x0
    field public static final int FONT_TYPE_MONOSPACE = 3; // 0x3
    field public static final int FONT_TYPE_SANS_SERIF = 1; // 0x1
    field public static final int FONT_TYPE_SERIF = 2; // 0x2
    field public static final int GRADIENT = 11; // 0xb
    field public static final int IMAGE_FILTER_QUALITY = 10; // 0xa
    field public static final int LINEAR_GRADIENT = 0; // 0x0
    field public static final int PORTER_MODE_ADD = 30; // 0x1e
    field public static final int RADIAL_GRADIENT = 1; // 0x1
    field public static final int SHADER = 9; // 0x9
    field public static final int SHADER_MATRIX = 22; // 0x16
    field public static final int STROKE_CAP = 7; // 0x7
    field public static final int STROKE_JOIN = 15; // 0xf
    field public static final int STROKE_MITER = 6; // 0x6
    field public static final int STROKE_WIDTH = 5; // 0x5
    field public static final int STYLE = 8; // 0x8
    field public static final int STYLE_FILL = 0; // 0x0
    field public static final int STYLE_FILL_AND_STROKE = 2; // 0x2
    field public static final int STYLE_STROKE = 1; // 0x1
    field public static final int SWEEP_GRADIENT = 2; // 0x2
    field public static final int TEXTURE = 24; // 0x18
    field public static final int TEXT_SIZE = 1; // 0x1
    field public static final int TYPEFACE = 16; // 0x10
  }

  public class PaintChangeAdapter implements androidx.compose.remote.core.operations.paint.PaintChanges {
    ctor public PaintChangeAdapter();
    method public void clear(long);
    method public void setAlpha(float);
    method public void setAntiAlias(boolean);
    method public void setBlendMode(int);
    method public void setColor(int);
    method public void setColorFilter(int, int);
    method public void setFilterBitmap(boolean);
    method public void setFontVariationAxes(String[], float[]);
    method public void setImageFilterQuality(int);
    method public void setLinearGradient(int[], float[]?, float, float, float, float, int);
    method public void setRadialGradient(int[], float[]?, float, float, float, int);
    method public void setShader(int);
    method public void setShaderMatrix(float);
    method public void setStrokeCap(int);
    method public void setStrokeJoin(int);
    method public void setStrokeMiter(float);
    method public void setStrokeWidth(float);
    method public void setStyle(int);
    method public void setSweepGradient(int[], float[]?, float, float);
    method public void setTextSize(float);
    method public void setTextureShader(int, short, short, short, short);
    method public void setTypeFace(int, int, boolean);
    method public void setTypeFace(String, int, boolean);
  }

  public interface PaintChanges {
    method public void clear(long);
    method public void setAlpha(float);
    method public void setAntiAlias(boolean);
    method public void setBlendMode(int);
    method public void setColor(int);
    method public void setColorFilter(int, int);
    method public void setFilterBitmap(boolean);
    method public void setFontVariationAxes(String[], float[]);
    method public void setImageFilterQuality(int);
    method public void setLinearGradient(int[], float[]?, float, float, float, float, int);
    method public void setRadialGradient(int[], float[]?, float, float, float, int);
    method public void setShader(int);
    method public void setShaderMatrix(float);
    method public void setStrokeCap(int);
    method public void setStrokeJoin(int);
    method public void setStrokeMiter(float);
    method public void setStrokeWidth(float);
    method public void setStyle(int);
    method public void setSweepGradient(int[], float[]?, float, float);
    method public void setTextSize(float);
    method public void setTextureShader(int, short, short, short, short);
    method public void setTypeFace(int, int, boolean);
    method public void setTypeFace(String, int, boolean);
    field public static final int CLEAR_ALPHA = 2048; // 0x800
    field public static final int CLEAR_CAP = 64; // 0x40
    field public static final int CLEAR_COLOR = 8; // 0x8
    field public static final int CLEAR_COLOR_FILTER = 4096; // 0x1000
    field public static final int CLEAR_IMAGE_FILTER_QUALITY = 512; // 0x200
    field public static final int CLEAR_RADIENT = 1024; // 0x400
    field public static final int CLEAR_SHADER = 256; // 0x100
    field public static final int CLEAR_STROKE_MITER = 32; // 0x20
    field public static final int CLEAR_STROKE_WIDTH = 16; // 0x10
    field public static final int CLEAR_STYLE = 128; // 0x80
    field public static final int CLEAR_TEXT_SIZE = 1; // 0x1
    field public static final int CLEAR_TEXT_STYLE = 32768; // 0x8000
    field public static final int VALID_BITS = 8191; // 0x1fff
  }

  public interface TextPaint {
    method public void setARGB(int, int, int, int);
    method public void setDither(boolean);
    method public void setElegantTextHeight(boolean);
    method public void setEndHyphenEdit(int);
    method public void setFakeBoldText(boolean);
    method public void setFlags(int);
    method public void setFontFeatureSettings(String);
    method public void setHinting(int);
    method public void setLetterSpacing(float);
    method public void setLinearText(boolean);
    method public void setShadowLayer(float, float, float, int);
    method public void setStartHyphenEdit(int);
    method public void setStrikeThruText(boolean);
    method public void setStrokeCap(int);
    method public void setSubpixelText(boolean);
    method public void setTextAlign(int);
    method public void setTextLocale(int);
    method public void setTextLocales(int);
    method public void setTextScaleX(float);
    method public void setTextSize(float);
    method public void setTextSkewX(float);
    method public void setUnderlineText(boolean);
    method public void setWordSpacing(float);
  }

}

package androidx.compose.remote.core.operations.utilities {

  public class AnimatedFloatExpression {
    ctor public AnimatedFloatExpression();
    method public static float asNan(int);
    method public float eval(androidx.compose.remote.core.operations.utilities.CollectionsAccess, float[], int);
    method public float eval(androidx.compose.remote.core.operations.utilities.CollectionsAccess, float[], int, float...);
    method public float eval(float[], float...);
    method public float eval(float[], int, float...);
    method public float evalDB(float[], float...);
    method public static int fromNaN(float);
    method public static int getMaxOpForLevel(int);
    method public static boolean isMathOperator(float);
    method public static String? toMathName(float);
    method public static String toString(float[], String?[]?);
    field public static final float ABS;
    field public static final float ACOS;
    field public static final float ADD;
    field public static final float ASIN;
    field public static final float ATAN;
    field public static final float ATAN2;
    field public static final float A_AVG;
    field public static final float A_DEREF;
    field public static final float A_LEN;
    field public static final float A_MAX;
    field public static final float A_MIN;
    field public static final float A_SPLINE;
    field public static final float A_SUM;
    field public static final float CBRT;
    field public static final float CEIL;
    field public static final float CLAMP;
    field public static final float COPY_SIGN;
    field public static final float COS;
    field public static final float DEG;
    field public static final float DIV;
    field public static final float DUP;
    field public static final float EXP;
    field public static final float FLOOR;
    field public static final float FRACT;
    field public static final float HYPOT;
    field public static final float IFELSE;
    field public static final float INV;
    field public static final int LAST_OP = 3211318; // 0x310036
    field public static final float LERP;
    field public static final float LN;
    field public static final float LOG;
    field public static final float LOG2;
    field public static final float MAD;
    field public static final float MAX;
    field public static final float MIN;
    field public static final float MOD;
    field public static final float MUL;
    field public static final float NOISE_FROM;
    field public static final int OFFSET = 3211264; // 0x310000
    field public static final float PINGPONG;
    field public static final float POW;
    field public static final float RAD;
    field public static final float RAND;
    field public static final float RAND_IN_RANGE;
    field public static final float RAND_SEED;
    field public static final float ROUND;
    field public static final float SIGN;
    field public static final float SIN;
    field public static final float SMOOTH_STEP;
    field public static final float SQRT;
    field public static final float SQUARE;
    field public static final float SQUARE_SUM;
    field public static final float STEP;
    field public static final float SUB;
    field public static final float SWAP;
    field public static final float TAN;
    field public static final float VAR1;
    field public static final float VAR2;
    field public static final float VAR3;
  }

  public interface ArrayAccess {
    method public float getFloatValue(int);
    method public float[]? getFloats();
    method public default int getId(int);
    method public default int getIntValue(int);
    method public int getLength();
  }

  public interface CollectionsAccess {
    method public float getFloatValue(int, int);
    method public float[]? getFloats(int);
    method public int getId(int, int);
    method public default int getIntValue(int, int);
    method public int getListLength(int);
  }

  public class ColorUtils {
    ctor public ColorUtils();
    method public static int createColor(int, int, int, int);
    method public int getDefaultColor(long);
    field public static int sRC_COLOR;
  }

  public class DataMap {
    ctor public DataMap(String[], byte[], int[]);
    method public int getId(int);
    method public int getPos(String);
    method public byte getType(int);
    field public final int[] mIds;
    field public final String[] mNames;
    field public final byte[] mTypes;
  }

  public class ImageScaling {
    ctor public ImageScaling();
    ctor public ImageScaling(float, float, float, float, float, float, float, float, int, float);
    method public void setup(float, float, float, float, float, float, float, float, int, float);
    method public static String typeToString(int);
    field public static final int SCALE_CROP = 5; // 0x5
    field public static final int SCALE_FILL_BOUNDS = 6; // 0x6
    field public static final int SCALE_FILL_HEIGHT = 3; // 0x3
    field public static final int SCALE_FILL_WIDTH = 2; // 0x2
    field public static final int SCALE_FIT = 4; // 0x4
    field public static final int SCALE_FIXED_SCALE = 7; // 0x7
    field public static final int SCALE_INSIDE = 1; // 0x1
    field public static final int SCALE_NONE = 0; // 0x0
    field public float mFinalDstBottom;
    field public float mFinalDstLeft;
    field public float mFinalDstRight;
    field public float mFinalDstTop;
  }

  public class IntFloatMap {
    ctor public IntFloatMap();
    method public void clear();
    method public boolean contains(int);
    method public float get(int);
    method public float put(int, float);
    method public int size();
  }

  public class IntIntMap {
    ctor public IntIntMap();
    method public void clear();
    method public boolean contains(int);
    method public int get(int);
    method public int put(int, int);
    method public int size();
  }

  public class IntMap<T> {
    ctor public IntMap();
    method public void clear();
    method public T? get(int);
    method public T? put(int, T);
    method public void putAll(androidx.compose.remote.core.operations.utilities.IntMap<T!>);
    method public T? remove(int);
    method public int size();
  }

  public class IntegerExpressionEvaluator {
    ctor public IntegerExpressionEvaluator();
    method public int eval(int, int[], int, int...);
    method public int eval(int, int[], int...);
    method public int evalDB(int, int[], int...);
    method public static boolean isOperation(int, int);
    method public static String? toMathName(int);
    method public static String toString(int, int[]);
    method public static String toString(int, int[], String[]);
    method public static String toStringInfix(int, int[]);
    field public static final int I_ABS = 65552; // 0x10010
    field public static final int I_ADD = 65537; // 0x10001
    field public static final int I_AND = 65546; // 0x1000a
    field public static final int I_CLAMP = 65557; // 0x10015
    field public static final int I_COPY_SIGN = 65548; // 0x1000c
    field public static final int I_DECR = 65554; // 0x10012
    field public static final int I_DIV = 65540; // 0x10004
    field public static final int I_IFELSE = 65558; // 0x10016
    field public static final int I_INCR = 65553; // 0x10011
    field public static final int I_MAD = 65559; // 0x10017
    field public static final int I_MAX = 65550; // 0x1000e
    field public static final int I_MIN = 65549; // 0x1000d
    field public static final int I_MOD = 65541; // 0x10005
    field public static final int I_MUL = 65539; // 0x10003
    field public static final int I_NEG = 65551; // 0x1000f
    field public static final int I_NOT = 65555; // 0x10013
    field public static final int I_OR = 65545; // 0x10009
    field public static final int I_SHL = 65542; // 0x10006
    field public static final int I_SHR = 65543; // 0x10007
    field public static final int I_SIGN = 65556; // 0x10014
    field public static final int I_SUB = 65538; // 0x10002
    field public static final int I_USHR = 65544; // 0x10008
    field public static final int I_VAR1 = 65560; // 0x10018
    field public static final int I_VAR2 = 65561; // 0x10019
    field public static final int I_XOR = 65547; // 0x1000b
    field public static final float LAST_OP = 25.0f;
    field public static final int OFFSET = 65536; // 0x10000
  }

  public class Matrix {
    ctor public Matrix();
    ctor public Matrix(int, int);
    method public static void copy(androidx.compose.remote.core.operations.utilities.Matrix, androidx.compose.remote.core.operations.utilities.Matrix);
    method public void copyFrom(androidx.compose.remote.core.operations.utilities.Matrix);
    method public void copyFrom(float[]);
    method public void evalPerspective(float[], float[]);
    method public float get(int, int);
    method public static void multiply(androidx.compose.remote.core.operations.utilities.Matrix, androidx.compose.remote.core.operations.utilities.Matrix, androidx.compose.remote.core.operations.utilities.Matrix);
    method public void multiply(float[], float[]);
    method public void projection(float, float, float, float);
    method public void putValues(float[]);
    method public void rotateAroundAxis(float, float, float, float);
    method public void rotateX(float);
    method public void rotateY(float);
    method public void rotateZ(float);
    method public void rotateZ(float, float, float);
    method public void set(int, int, float);
    method public void setDimensions(int, int);
    method public void setIdentity();
    method public void setScale(float, float, float);
    method public void translate(float, float, float);
    field public static float[]? sTempInVec;
    field public static float[]? sTempOutVec;
    field public static final androidx.compose.remote.core.operations.utilities.Matrix sTmpMatrix1;
    field public static final androidx.compose.remote.core.operations.utilities.Matrix sTmpMatrix2;
  }

  public class MatrixOperations {
    ctor public MatrixOperations();
    method public static float asNan(int);
    method public androidx.compose.remote.core.operations.utilities.Matrix eval(float[], float...);
    method public static int fromNaN(float);
    method public static int getMaxOpForLevel(int);
    method public static boolean isOperator(float);
    method public static String? toMathName(float);
    method public static String toString(float[], String?[]?);
    field public static final float IDENTITY;
    field public static final int LAST_OP = 3276854; // 0x320036
    field public static final float MUL;
    field public static final int OFFSET = 3276800; // 0x320000
    field public static final float PROJECTION;
    field public static final float ROT_AXIS;
    field public static final float ROT_PZ;
    field public static final float ROT_X;
    field public static final float ROT_Y;
    field public static final float ROT_Z;
    field public static final float SCALE2;
    field public static final float SCALE3;
    field public static final float SCALE_X;
    field public static final float SCALE_Y;
    field public static final float SCALE_Z;
    field public static final float TRANSLATE2;
    field public static final float TRANSLATE3;
    field public static final float TRANSLATE_X;
    field public static final float TRANSLATE_Y;
    field public static final float TRANSLATE_Z;
  }

  public class NanMap {
    method public static float asNan(int);
    method public static int fromNaN(float);
    method public static boolean isDataVariable(float);
    method public static boolean isNormalVariable(float);
    method public static boolean isOperationVariable(float);
    method public static boolean isSystemVariable(float);
    field public static final int CLOSE = 3145733; // 0x300005
    field public static final float CLOSE_NAN;
    field public static final int CONIC = 3145731; // 0x300003
    field public static final float CONIC_NAN;
    field public static final int CUBIC = 3145732; // 0x300004
    field public static final float CUBIC_NAN;
    field public static final int DONE = 3145734; // 0x300006
    field public static final float DONE_NAN;
    field public static final int ID_REGION_ARRAY = 2097152; // 0x200000
    field public static final int ID_REGION_MASK = 7340032; // 0x700000
    field public static final int LINE = 3145729; // 0x300001
    field public static final float LINE_NAN;
    field public static final int MOVE = 3145728; // 0x300000
    field public static final float MOVE_NAN;
    field public static final int QUADRATIC = 3145730; // 0x300002
    field public static final float QUADRATIC_NAN;
    field public static final int START_ARRAY = 2097194; // 0x20002a
    field public static final int START_VAR = 1048618; // 0x10002a
    field public static final int TYPE_ARRAY = 2; // 0x2
    field public static final int TYPE_OPERATION = 3; // 0x3
    field public static final int TYPE_SYSTEM = 0; // 0x0
    field public static final int TYPE_VARIABLE = 1; // 0x1
  }

  public class StringSerializer {
    ctor public StringSerializer();
    method public void append(int, String?);
    method public void reset();
  }

  public class StringUtils {
    method public static String floatToString(float, int, int, char, char);
  }

}

package androidx.compose.remote.core.operations.utilities.easing {

  public class BounceCurve extends androidx.compose.remote.core.operations.utilities.easing.Easing {
    method public float get(float);
    method public float getDiff(float);
  }

  public abstract class Easing {
    ctor public Easing();
    method public abstract float get(float);
    method public abstract float getDiff(float);
    method public static String getString(int);
    method public int getType();
    field public static final int CUBIC_ACCELERATE = 2; // 0x2
    field public static final int CUBIC_ANTICIPATE = 5; // 0x5
    field public static final int CUBIC_CUSTOM = 11; // 0xb
    field public static final int CUBIC_DECELERATE = 3; // 0x3
    field public static final int CUBIC_LINEAR = 4; // 0x4
    field public static final int CUBIC_OVERSHOOT = 6; // 0x6
    field public static final int CUBIC_STANDARD = 1; // 0x1
    field public static final int EASE_OUT_BOUNCE = 13; // 0xd
    field public static final int EASE_OUT_ELASTIC = 14; // 0xe
    field public static final int SPLINE_CUSTOM = 12; // 0xc
  }

  public class ElasticOutCurve extends androidx.compose.remote.core.operations.utilities.easing.Easing {
    ctor public ElasticOutCurve();
    method public float get(float);
    method public float getDiff(float);
  }

  public class FloatAnimation extends androidx.compose.remote.core.operations.utilities.easing.Easing implements androidx.compose.remote.core.serialize.Serializable {
    ctor public FloatAnimation(float...);
    ctor public FloatAnimation(int, float, float[]?, float, float);
    method public float get(float);
    method public float getDiff(float);
    method public float getDuration();
    method public float getInitialValue();
    method public float getTargetValue();
    method public boolean isPropagate();
    method public static float[] packToFloatArray(float, int, float[]?, float, float);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void setAnimationDescription(float[]);
    method public void setInitialValue(float);
    method public void setTargetValue(float);
    method public static String unpackAnimationToString(float[]);
  }

  public class GeneralEasing extends androidx.compose.remote.core.operations.utilities.easing.Easing {
    ctor public GeneralEasing();
    method public float get(float);
    method public float[] getCurveSpecification();
    method public float getDiff(float);
    method public void setCurveSpecification(float[]);
  }

  public class MonotonicCurveFit {
    ctor public MonotonicCurveFit(double[], double[]![]);
    method public static androidx.compose.remote.core.operations.utilities.easing.MonotonicCurveFit buildWave(String);
    method public void getPos(double, double[]);
    method public void getPos(double, float[]);
    method public double getPos(double, int);
    method public void getSlope(double, double[]);
    method public double getSlope(double, int);
    method public double[] getTimePoints();
  }

  public class MonotonicSpline {
    ctor public MonotonicSpline(float[]?, float[]);
    method public float[]? getArray();
    method public float getPos(float);
    method public float getSlope(float);
    method public float[]? getTimePoints();
  }

  public class SpringStopEngine {
    ctor public SpringStopEngine();
    ctor public SpringStopEngine(float[]);
    method public float get(float);
    method public float getAcceleration();
    method public float getTargetValue();
    method public float getVelocity();
    method public float getVelocity(float);
    method public boolean isStopped();
    method public void setInitialValue(float);
    method public void setTargetValue(float);
    method public void springParameters(float, float, float, float, int);
    method public void springStart(float, float, float);
  }

  public class StepCurve extends androidx.compose.remote.core.operations.utilities.easing.Easing {
    ctor public StepCurve(float[], int, int);
    method public float get(float);
    method public float getDiff(float);
  }

}

package androidx.compose.remote.core.operations.utilities.touch {

  public class VelocityEasing {
    ctor public VelocityEasing();
    method public void config(float, float, float, float, float, float, androidx.compose.remote.core.operations.utilities.touch.VelocityEasing.Easing?);
    method protected void configureEasingAdapter();
    method public float getDuration();
    method public float getPos(float);
    method public float getV(float);
  }

  public static interface VelocityEasing.Easing {
    method public androidx.compose.remote.core.operations.utilities.touch.VelocityEasing.Easing! clone();
    method public double get(double);
    method public double getDiff(double);
  }

}

package androidx.compose.remote.core.semantics {

  public interface AccessibilityModifier extends androidx.compose.remote.core.operations.layout.modifiers.ModifierOperation androidx.compose.remote.core.semantics.AccessibleComponent {
    method public int getOpCode();
  }

  public interface AccessibilitySemantics {
    method public default boolean isInterestingForSemantics();
  }

  public interface AccessibleComponent extends androidx.compose.remote.core.semantics.AccessibilitySemantics {
    method public default Integer? getContentDescriptionId();
    method public default androidx.compose.remote.core.semantics.CoreSemantics.Mode getMode();
    method public default androidx.compose.remote.core.semantics.AccessibleComponent.Role? getRole();
    method public default Integer? getTextId();
    method public default boolean isClickable();
  }

  public enum AccessibleComponent.Mode {
    enum_constant public static final androidx.compose.remote.core.semantics.AccessibleComponent.Mode CLEAR_AND_SET;
    enum_constant public static final androidx.compose.remote.core.semantics.AccessibleComponent.Mode MERGE;
    enum_constant public static final androidx.compose.remote.core.semantics.AccessibleComponent.Mode SET;
  }

  public enum AccessibleComponent.Role {
    method public static androidx.compose.remote.core.semantics.AccessibleComponent.Role fromInt(int);
    method public String? getDescription();
    enum_constant public static final androidx.compose.remote.core.semantics.AccessibleComponent.Role BUTTON;
    enum_constant public static final androidx.compose.remote.core.semantics.AccessibleComponent.Role CAROUSEL;
    enum_constant public static final androidx.compose.remote.core.semantics.AccessibleComponent.Role CHECKBOX;
    enum_constant public static final androidx.compose.remote.core.semantics.AccessibleComponent.Role DROPDOWN_LIST;
    enum_constant public static final androidx.compose.remote.core.semantics.AccessibleComponent.Role IMAGE;
    enum_constant public static final androidx.compose.remote.core.semantics.AccessibleComponent.Role PICKER;
    enum_constant public static final androidx.compose.remote.core.semantics.AccessibleComponent.Role RADIO_BUTTON;
    enum_constant public static final androidx.compose.remote.core.semantics.AccessibleComponent.Role SWITCH;
    enum_constant public static final androidx.compose.remote.core.semantics.AccessibleComponent.Role TAB;
    enum_constant public static final androidx.compose.remote.core.semantics.AccessibleComponent.Role UNKNOWN;
  }

  public class CoreSemantics extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.semantics.AccessibilityModifier {
    ctor public CoreSemantics();
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public String deepToString(String);
    method public androidx.compose.remote.core.semantics.AccessibleComponent.Mode getMode();
    method public int getOpCode();
    method public Integer? getStateDescriptionId();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void serializeToString(int, androidx.compose.remote.core.operations.utilities.StringSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public boolean mClickable;
    field public int mContentDescriptionId;
    field public boolean mEnabled;
    field public androidx.compose.remote.core.semantics.AccessibleComponent.Mode mMode;
    field public androidx.compose.remote.core.semantics.AccessibleComponent.Role? mRole;
    field public int mStateDescriptionId;
    field public int mTextId;
  }

  public interface ScrollableComponent extends androidx.compose.remote.core.semantics.AccessibilitySemantics {
    method public default androidx.compose.remote.core.semantics.ScrollableComponent.ScrollAxisRange? getScrollAxisRange();
    method public default int scrollByOffset(androidx.compose.remote.core.RemoteContext, int);
    method public int scrollDirection();
    method public default boolean scrollDirection(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.semantics.ScrollableComponent.ScrollDirection);
    method public default boolean showOnScreen(androidx.compose.remote.core.RemoteContext, androidx.compose.remote.core.operations.layout.Component);
    method public default boolean supportsScrollByOffset();
    field public static final int SCROLL_HORIZONTAL = 1; // 0x1
    field public static final int SCROLL_NONE = 0; // 0x0
    field public static final int SCROLL_VERTICAL = 2; // 0x2
  }

  public static class ScrollableComponent.ScrollAxisRange {
    ctor public ScrollableComponent.ScrollAxisRange(float, float, boolean, boolean);
    method public boolean canScrollBackwards();
    method public boolean canScrollForward();
    method public float getMaxValue();
    method public float getmValue();
  }

  public enum ScrollableComponent.ScrollDirection {
    enum_constant public static final androidx.compose.remote.core.semantics.ScrollableComponent.ScrollDirection BACKWARD;
    enum_constant public static final androidx.compose.remote.core.semantics.ScrollableComponent.ScrollDirection DOWN;
    enum_constant public static final androidx.compose.remote.core.semantics.ScrollableComponent.ScrollDirection FORWARD;
    enum_constant public static final androidx.compose.remote.core.semantics.ScrollableComponent.ScrollDirection LEFT;
    enum_constant public static final androidx.compose.remote.core.semantics.ScrollableComponent.ScrollDirection RIGHT;
    enum_constant public static final androidx.compose.remote.core.semantics.ScrollableComponent.ScrollDirection UP;
  }

}

package androidx.compose.remote.core.serialize {

  public interface MapSerializer {
    method public androidx.compose.remote.core.serialize.MapSerializer add(String, androidx.compose.remote.core.serialize.Serializable?);
    method public androidx.compose.remote.core.serialize.MapSerializer add(String, float, float);
    method public androidx.compose.remote.core.serialize.MapSerializer add(String, float, float, float, float);
    method public androidx.compose.remote.core.serialize.MapSerializer add(String, Boolean?);
    method public androidx.compose.remote.core.serialize.MapSerializer add(String, Byte?);
    method public androidx.compose.remote.core.serialize.MapSerializer add(String, Double?);
    method public <T extends java.lang.Enum<T>> androidx.compose.remote.core.serialize.MapSerializer add(String, Enum<T!>?);
    method public androidx.compose.remote.core.serialize.MapSerializer add(String, Float?);
    method public androidx.compose.remote.core.serialize.MapSerializer add(String, Integer?);
    method public androidx.compose.remote.core.serialize.MapSerializer add(String, Long?);
    method public androidx.compose.remote.core.serialize.MapSerializer add(String, Short?);
    method public androidx.compose.remote.core.serialize.MapSerializer add(String, String?);
    method public <T> androidx.compose.remote.core.serialize.MapSerializer add(String, java.util.List<T!>?);
    method public <T> androidx.compose.remote.core.serialize.MapSerializer add(String, java.util.Map<java.lang.String!,T!>?);
    method public androidx.compose.remote.core.serialize.MapSerializer addFloatExpressionSrc(String, float[]);
    method public androidx.compose.remote.core.serialize.MapSerializer addIntExpressionSrc(String, int[], int);
    method public androidx.compose.remote.core.serialize.MapSerializer addPath(String, float[]);
    method public androidx.compose.remote.core.serialize.MapSerializer addTags(androidx.compose.remote.core.serialize.SerializeTags!...);
    method public androidx.compose.remote.core.serialize.MapSerializer addType(String);
    method public static java.util.LinkedHashMap<java.lang.String!,java.lang.Object!> orderedOf(java.lang.Object!...);
  }

  public interface Serializable {
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
  }

  public enum SerializeTags {
    enum_constant public static final androidx.compose.remote.core.serialize.SerializeTags A11Y;
    enum_constant public static final androidx.compose.remote.core.serialize.SerializeTags ACTION;
    enum_constant public static final androidx.compose.remote.core.serialize.SerializeTags COMPONENT;
    enum_constant public static final androidx.compose.remote.core.serialize.SerializeTags DRAW_OPERATION;
    enum_constant public static final androidx.compose.remote.core.serialize.SerializeTags EXPRESSION;
    enum_constant public static final androidx.compose.remote.core.serialize.SerializeTags LAYOUT_COMPONENT;
    enum_constant public static final androidx.compose.remote.core.serialize.SerializeTags MODIFIER;
  }

}

package androidx.compose.remote.core.types {

  public class BooleanConstant extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public BooleanConstant(int, boolean);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, boolean);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public boolean getValue();
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void write(androidx.compose.remote.core.WireBuffer);
  }

  public class IntegerConstant extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable {
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, int);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public static int id();
    method public static String name();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void update(androidx.compose.remote.core.types.IntegerConstant);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public final int mId;
  }

  public class LongConstant extends androidx.compose.remote.core.Operation implements androidx.compose.remote.core.serialize.Serializable {
    ctor public LongConstant(int, long);
    method public void apply(androidx.compose.remote.core.RemoteContext);
    method public static void apply(androidx.compose.remote.core.WireBuffer, int, long);
    method public String deepToString(String);
    method public static void documentation(androidx.compose.remote.core.documentation.DocumentationBuilder);
    method public long getValue();
    method public static void read(androidx.compose.remote.core.WireBuffer, java.util.List<androidx.compose.remote.core.Operation!>);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer);
    method public void setValue(long);
    method public void update(androidx.compose.remote.core.types.LongConstant);
    method public void write(androidx.compose.remote.core.WireBuffer);
    field public final int mId;
  }

}

