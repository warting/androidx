// Signature format: 4.0
package androidx.compose.remote.player.view {

  public class RemoteComposeDocument {
    ctor public RemoteComposeDocument(androidx.compose.remote.core.CoreDocument!);
    ctor public RemoteComposeDocument(byte[]!);
    ctor public RemoteComposeDocument(java.io.InputStream!);
    ctor public RemoteComposeDocument(java.io.InputStream!, java.time.Clock!);
    method public boolean canBeDisplayed(int, int, long);
    method public java.time.Clock! getClock();
    method public androidx.compose.remote.core.operations.layout.Component! getComponent(int);
    method public androidx.compose.remote.core.CoreDocument! getDocument();
    method public int getHeight();
    method public String![]! getNamedColors();
    method public String![]! getNamedVariables(int);
    method public String![]! getStats();
    method public int getWidth();
    method public int hasSensorListeners(int[]!);
    method public void initializeContext(androidx.compose.remote.core.RemoteContext!);
    method public void invalidate();
    method public boolean isUpdateDoc();
    method public int needsRepaint();
    method public void paint(androidx.compose.remote.core.RemoteContext!, int);
    method public void serialize(androidx.compose.remote.core.serialize.MapSerializer!);
    method public void setDocument(androidx.compose.remote.core.CoreDocument!);
  }

  public class RemoteComposePlayer extends android.widget.FrameLayout implements androidx.compose.remote.core.RemoteContextActions {
    ctor public RemoteComposePlayer(android.content.Context!);
    ctor public RemoteComposePlayer(android.content.Context!, android.util.AttributeSet!);
    ctor public RemoteComposePlayer(android.content.Context!, android.util.AttributeSet!, int);
    method public void addIdActionListener(androidx.compose.remote.player.view.RemoteComposePlayer.IdActionCallbacks!);
    method public void clearLocalString(String!, String!);
    method public void clearSystemLocalString(String!);
    method public void clearUserLocalBitmap(String!);
    method public void clearUserLocalColor(String!);
    method public void clearUserLocalFloat(String!);
    method public void clearUserLocalInt(String!);
    method public void clearUserLocalString(String!);
    method public androidx.compose.remote.player.view.RemoteComposeDocument! getDocument();
    method public float getEvalTime();
    method public String![]! getNamedColors();
    method public String![]! getNamedFloats();
    method public String![]! getNamedImages();
    method public String![]! getNamedStrings();
    method public int getOpsPerFrame();
    method public androidx.compose.remote.player.view.state.StateUpdater! getStateUpdater();
    method public boolean isDraggable();
    method public boolean performClick(androidx.compose.remote.core.CoreDocument, androidx.compose.remote.core.operations.layout.Component, String);
    method public int scrollByOffset(androidx.compose.remote.core.operations.layout.Component, int);
    method public boolean scrollDirection(androidx.compose.remote.core.operations.layout.Component, androidx.compose.remote.core.semantics.ScrollableComponent.ScrollDirection);
    method public void setColor(String!, int);
    method public void setDebug(int);
    method public void setDocument(androidx.compose.remote.player.view.RemoteComposeDocument!);
    method public void setDocument(byte[]!);
    method public void setDocument(java.io.InputStream!);
    method public void setLocalString(String!, String!, String!);
    method public void setLong(String!, long);
    method public void setShaderControl(androidx.compose.remote.core.CoreDocument.ShaderControl!);
    method public void setSystemLocalString(String!, String!);
    method public void setTheme(int);
    method @VisibleForTesting public void setUseChoreographer(boolean);
    method public void setUserLocalBitmap(String!, android.graphics.Bitmap!);
    method public void setUserLocalColor(String!, int);
    method public void setUserLocalFloat(String!, float);
    method public void setUserLocalInt(String!, int);
    method public void setUserLocalString(String!, String!);
    method public boolean showOnScreen(androidx.compose.remote.core.operations.layout.Component);
    method public void updateDocument(androidx.compose.remote.player.view.RemoteComposeDocument!);
    method public void updateDocument(byte[]!);
    field public static final int THEME_DARK = -2; // 0xfffffffe
    field public static final int THEME_LIGHT = -3; // 0xfffffffd
    field public static final int THEME_UNSPECIFIED = -1; // 0xffffffff
  }

  public static interface RemoteComposePlayer.IdActionCallbacks {
    method public void onAction(int, String!);
  }

}

package androidx.compose.remote.player.view.accessibility {

  public abstract class BaseSemanticNodeApplier<N> implements androidx.compose.remote.player.view.accessibility.SemanticNodeApplier<N!> {
    ctor public BaseSemanticNodeApplier();
    method public void applyComponent(androidx.compose.remote.player.view.accessibility.RemoteComposeDocumentAccessibility!, N!, androidx.compose.remote.core.operations.layout.Component!, java.util.List<androidx.compose.remote.core.semantics.AccessibilitySemantics!>!);
    method protected void applyContentDescription(Integer!, N!, androidx.compose.remote.player.view.accessibility.RemoteComposeDocumentAccessibility!);
    method protected void applyCoreSemantics(androidx.compose.remote.player.view.accessibility.RemoteComposeDocumentAccessibility!, N!, androidx.compose.remote.core.semantics.CoreSemantics!);
    method protected abstract void applyListItem(N!, int);
    method protected void applyRole(androidx.compose.remote.core.semantics.AccessibleComponent.Role!, N!);
    method protected abstract void applyScrollable(N!, androidx.compose.remote.core.semantics.ScrollableComponent.ScrollAxisRange!, int);
    method protected void applySemantics(androidx.compose.remote.player.view.accessibility.RemoteComposeDocumentAccessibility!, N!, java.util.List<androidx.compose.remote.core.semantics.AccessibilitySemantics!>!);
    method protected void applyStateDescription(Integer!, N!, androidx.compose.remote.player.view.accessibility.RemoteComposeDocumentAccessibility!);
    method protected void applyText(Integer!, N!, androidx.compose.remote.player.view.accessibility.RemoteComposeDocumentAccessibility!);
    method protected abstract CharSequence! getContentDescription(N!);
    method protected abstract CharSequence! getStateDescription(N!);
    method protected abstract CharSequence! getText(N!);
    method protected abstract void setBoundsInScreen(N!, android.graphics.Rect!);
    method protected abstract void setClickable(N!, boolean);
    method protected abstract void setContentDescription(N!, CharSequence!);
    method protected abstract void setEnabled(N!, boolean);
    method protected abstract void setRoleDescription(N!, String!);
    method protected abstract void setStateDescription(N!, CharSequence!);
    method protected abstract void setText(N!, CharSequence!);
    method protected abstract void setUniqueId(N!, String!);
  }

  public class CoreDocumentAccessibility implements androidx.compose.remote.player.view.accessibility.RemoteComposeDocumentAccessibility {
    ctor public CoreDocumentAccessibility(androidx.compose.remote.core.CoreDocument!, androidx.compose.remote.core.RemoteContextActions!);
    method public androidx.compose.remote.core.operations.layout.Component? findComponentById(int);
    method public Integer? getComponentIdAt(android.graphics.PointF!);
    method public androidx.compose.remote.core.semantics.CoreSemantics.Mode! mergeMode(androidx.compose.remote.core.operations.layout.Component!);
    method public boolean performAction(androidx.compose.remote.core.operations.layout.Component!, int, android.os.Bundle!);
    method public boolean performClick(androidx.compose.remote.core.operations.layout.Component);
    method public int scrollByOffset(androidx.compose.remote.core.operations.layout.Component, int);
    method public boolean scrollDirection(androidx.compose.remote.core.operations.layout.Component, androidx.compose.remote.core.semantics.ScrollableComponent.ScrollDirection!);
    method public java.util.List<androidx.compose.remote.core.semantics.AccessibilitySemantics!>! semanticModifiersForComponent(androidx.compose.remote.core.operations.layout.Component!);
    method public java.util.List<java.lang.Integer!>! semanticallyRelevantChildComponents(androidx.compose.remote.core.operations.layout.Component!, boolean);
    method public String? stringValue(int);
  }

  public interface RemoteComposeAccessibilityRegistrar {
    method public void clearAccessibilityDelegate(android.view.View!);
    method public void setAccessibilityDelegate(android.view.View!, androidx.compose.remote.core.CoreDocument!);
  }

  public interface RemoteComposeDocumentAccessibility {
    method public androidx.compose.remote.core.operations.layout.Component? findComponentById(int);
    method public Integer? getComponentIdAt(android.graphics.PointF!);
    method public androidx.compose.remote.core.semantics.CoreSemantics.Mode! mergeMode(androidx.compose.remote.core.operations.layout.Component!);
    method public boolean performAction(androidx.compose.remote.core.operations.layout.Component!, int, android.os.Bundle!);
    method public java.util.List<androidx.compose.remote.core.semantics.AccessibilitySemantics!>! semanticModifiersForComponent(androidx.compose.remote.core.operations.layout.Component!);
    method public java.util.List<java.lang.Integer!>! semanticallyRelevantChildComponents(androidx.compose.remote.core.operations.layout.Component!, boolean);
    method public String? stringValue(int);
    field public static final int ACTION_CLICK = 16; // 0x10
    field public static final int RootId = -1; // 0xffffffff
  }

  public interface SemanticNodeApplier<N> {
    method public void addChildren(N!, java.util.List<java.lang.Integer!>!);
    method public void applyComponent(androidx.compose.remote.player.view.accessibility.RemoteComposeDocumentAccessibility!, N!, androidx.compose.remote.core.operations.layout.Component!, java.util.List<androidx.compose.remote.core.semantics.AccessibilitySemantics!>!);
    field public static final String VIRTUAL_VIEW_ID_KEY = "VirtualViewId";
  }

}

package androidx.compose.remote.player.view.accessibility.platform {

  public class AndroidxRemoteComposeAccessibilityRegistrar implements androidx.compose.remote.player.view.accessibility.RemoteComposeAccessibilityRegistrar {
    ctor public AndroidxRemoteComposeAccessibilityRegistrar();
    method public void clearAccessibilityDelegate(android.view.View!);
    method public androidx.compose.remote.player.view.accessibility.platform.AndroidxRemoteComposeTouchHelper<androidx.core.view.accessibility.AccessibilityNodeInfoCompat!,androidx.compose.remote.core.operations.layout.Component!,androidx.compose.remote.core.semantics.AccessibilitySemantics!>! forRemoteComposePlayer(android.view.View!, androidx.compose.remote.core.CoreDocument);
    method public void setAccessibilityDelegate(android.view.View!, androidx.compose.remote.core.CoreDocument!);
  }

  public class AndroidxRemoteComposeTouchHelper<N, C, S> extends androidx.customview.widget.ExploreByTouchHelper {
    ctor public AndroidxRemoteComposeTouchHelper(android.view.View!, androidx.compose.remote.player.view.accessibility.RemoteComposeDocumentAccessibility!, androidx.compose.remote.player.view.accessibility.SemanticNodeApplier<androidx.core.view.accessibility.AccessibilityNodeInfoCompat!>!);
    method protected int getVirtualViewAt(float, float);
    method public java.util.List<java.lang.Integer!>! getVisibleChildVirtualViews();
    method public void getVisibleVirtualViews(java.util.List<java.lang.Integer!>!);
    method protected boolean onPerformActionForVirtualView(int, int, android.os.Bundle?);
    method public void onPopulateNodeForVirtualView(int, androidx.core.view.accessibility.AccessibilityNodeInfoCompat);
  }

  public class AndroidxSemanticNodeApplier extends androidx.compose.remote.player.view.accessibility.BaseSemanticNodeApplier<androidx.core.view.accessibility.AccessibilityNodeInfoCompat!> {
    ctor public AndroidxSemanticNodeApplier(android.view.View!);
    method public void addChildren(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!, java.util.List<java.lang.Integer!>!);
    method protected void applyListItem(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!, int);
    method protected void applyScrollable(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!, androidx.compose.remote.core.semantics.ScrollableComponent.ScrollAxisRange!, int);
    method protected CharSequence! getContentDescription(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!);
    method protected CharSequence! getStateDescription(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!);
    method protected CharSequence! getText(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!);
    method protected void setBoundsInScreen(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!, android.graphics.Rect!);
    method protected void setClickable(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!, boolean);
    method protected void setContentDescription(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!, CharSequence!);
    method protected void setEnabled(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!, boolean);
    method protected void setRoleDescription(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!, String!);
    method protected void setStateDescription(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!, CharSequence!);
    method protected void setText(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!, CharSequence!);
    method protected void setUniqueId(androidx.core.view.accessibility.AccessibilityNodeInfoCompat!, String!);
  }

  public class RemoteComposeTouchHelper {
    ctor public RemoteComposeTouchHelper();
    field public static final androidx.compose.remote.player.view.accessibility.RemoteComposeAccessibilityRegistrar! REGISTRAR;
  }

}

package androidx.compose.remote.player.view.action {

  public interface NamedActionHandler {
    method public void execute(String, Object?, androidx.compose.remote.player.view.state.StateUpdater!);
  }

  public abstract class StateUpdaterActionCallback implements androidx.compose.remote.core.CoreDocument.ActionCallback {
    ctor public StateUpdaterActionCallback(androidx.compose.remote.player.view.state.StateUpdater, androidx.compose.remote.player.view.action.NamedActionHandler);
    method public void onAction(String, Object?);
  }

}

package androidx.compose.remote.player.view.platform {

  public class AndroidComputedTextLayout implements androidx.compose.remote.core.Platform.ComputedTextLayout {
    ctor public AndroidComputedTextLayout(android.text.StaticLayout!, float, float);
    method public android.text.StaticLayout! get();
    method public float getHeight();
    method public float getWidth();
    method public void set(android.text.StaticLayout!);
  }

  public class AndroidPaintContext extends androidx.compose.remote.core.PaintContext {
    ctor public AndroidPaintContext(androidx.compose.remote.core.RemoteContext!, android.graphics.Canvas!);
    method public void applyPaint(androidx.compose.remote.core.operations.paint.PaintBundle);
    method public void clipPath(int, int);
    method public void clipRect(float, float, float, float);
    method public void combinePath(int, int, int, byte);
    method public void drawArc(float, float, float, float, float, float);
    method public void drawBitmap(int, float, float, float, float);
    method public void drawBitmap(int, int, int, int, int, int, int, int, int, int);
    method public void drawCircle(float, float, float);
    method public void drawComplexText(androidx.compose.remote.core.Platform.ComputedTextLayout?);
    method public void drawLine(float, float, float, float);
    method public void drawOval(float, float, float, float);
    method public void drawPath(int, float, float);
    method public void drawRect(float, float, float, float);
    method public void drawRoundRect(float, float, float, float, float, float);
    method public void drawSector(float, float, float, float, float, float);
    method public void drawTextOnPath(int, int, float, float);
    method public void drawTextRun(int, int, int, int, int, float, float, boolean);
    method public void drawToBitmap(int, int, int);
    method public void drawTweenPath(int, int, float, float, float);
    method public void endGraphicsLayer();
    method public android.graphics.Canvas! getCanvas();
    method public String? getText(int);
    method public void getTextBounds(int, int, int, int, float[]);
    method public androidx.compose.remote.core.Platform.ComputedTextLayout? layoutComplexText(int, int, int, int, int, int, float, int);
    method public void matrixFromPath(int, float, float, int);
    method public void matrixRestore();
    method public void matrixRotate(float, float, float);
    method public void matrixSave();
    method public void matrixScale(float, float, float, float);
    method public void matrixSkew(float, float);
    method public void matrixTranslate(float, float);
    method public void replacePaint(androidx.compose.remote.core.operations.paint.PaintBundle);
    method public void reset();
    method public void restorePaint();
    method public void roundedClipRect(float, float, float, float, float, float);
    method public void savePaint();
    method public void scale(float, float);
    method public void setCanvas(android.graphics.Canvas!);
    method public void setGraphicsLayer(java.util.HashMap<java.lang.Integer!,java.lang.Object!>);
    method public void startGraphicsLayer(int, int);
    method public void translate(float, float);
    method public void tweenPath(int, int, int, float);
  }

  public class AndroidPlatformServices implements androidx.compose.remote.core.Platform {
    ctor public AndroidPlatformServices();
    method public int getImageHeight(Object);
    method public int getImageWidth(Object);
    method public byte[]! imageToByteArray(Object);
    method public boolean isAlpha8Image(Object);
    method public void log(androidx.compose.remote.core.Platform.LogCategory, String);
    method public float[]? pathToFloatArray(Object);
  }

  public class AndroidRemoteContext extends androidx.compose.remote.core.RemoteContext {
    ctor public AndroidRemoteContext();
    ctor public AndroidRemoteContext(java.time.Clock!);
    method public void addClickArea(int, int, float, float, float, float, int);
    method public void addCollection(int, androidx.compose.remote.core.operations.utilities.ArrayAccess);
    method public void clearDataOverride(int);
    method public void clearFloatOverride(int);
    method public void clearIntegerOverride(int);
    method public void clearNamedDataOverride(String);
    method public void clearNamedFloatOverride(String);
    method public void clearNamedIntegerOverride(String);
    method public void clearNamedStringOverride(String);
    method public int getColor(int);
    method public androidx.compose.remote.core.operations.utilities.DataMap! getDataMap(int);
    method public float getFloat(int);
    method public int getInteger(int);
    method public long getLong(int);
    method public Object! getObject(int);
    method public float[]! getPathData(int);
    method public androidx.compose.remote.core.operations.ShaderData? getShader(int);
    method public String! getText(int);
    method public void hapticEffect(int);
    method public void listensTo(int, androidx.compose.remote.core.VariableSupport);
    method public void loadAnimatedFloat(int, androidx.compose.remote.core.operations.FloatExpression);
    method public void loadBitmap(int, short, short, int, int, byte[]);
    method public void loadColor(int, int);
    method public void loadFloat(int, float);
    method public void loadInteger(int, int);
    method public void loadPathData(int, float[]);
    method public void loadShader(int, androidx.compose.remote.core.operations.ShaderData);
    method public void loadText(int, String);
    method public void loadVariableName(String, int, int);
    method public void overrideData(int, Object!);
    method public void overrideFloat(int, float);
    method public void overrideInt(int, int);
    method public void overrideInteger(int, int);
    method public void overrideText(int, int);
    method public void overrideText(int, String!);
    method public void putDataMap(int, androidx.compose.remote.core.operations.utilities.DataMap);
    method public void putObject(int, Object);
    method public void runAction(int, String);
    method public void runNamedAction(int, Object?);
    method public void setAccessibilityAnimationEnabled(boolean);
    method public void setNamedColorOverride(String, int);
    method public void setNamedDataOverride(String, Object);
    method public void setNamedFloatOverride(String, float);
    method public void setNamedIntegerOverride(String, int);
    method public void setNamedLong(String, long);
    method public void setNamedStringOverride(String, String);
    method public int updateOps();
    method public void useCanvas(android.graphics.Canvas!);
  }

  public class FloatsToPath {
    method public static void genPath(android.graphics.Path!, float[]!, float, float);
  }

  public class HapticSupport {
    ctor public HapticSupport();
    method public void setupHaptics(androidx.compose.remote.player.view.platform.RemoteComposeView!);
  }

  public class RemoteComposeView extends android.widget.FrameLayout implements android.view.View.OnAttachStateChangeListener {
    ctor public RemoteComposeView(android.content.Context!);
    ctor public RemoteComposeView(android.content.Context!, android.util.AttributeSet!);
    ctor public RemoteComposeView(android.content.Context!, android.util.AttributeSet!, int);
    ctor public RemoteComposeView(android.content.Context!, android.util.AttributeSet!, int, java.time.Clock!);
    method public void addIdActionListener(androidx.compose.remote.player.view.platform.RemoteComposeView.ClickCallbacks!);
    method public void applyUpdate(androidx.compose.remote.player.view.RemoteComposeDocument!);
    method public void checkShaders(androidx.compose.remote.core.CoreDocument.ShaderControl!);
    method public void clearLocalBitmap(String!);
    method public void clearLocalColor(String!);
    method public void clearLocalFloat(String!);
    method public void clearLocalInt(String!);
    method public void clearLocalString(String!);
    method public androidx.compose.remote.player.view.RemoteComposeDocument! getDocument();
    method public float getEvalTime();
    method public String![]! getNamedColors();
    method public String![]! getNamedVariables(int);
    method public androidx.compose.remote.core.RemoteContext! getRemoteContext();
    method public int getTheme();
    method public boolean isDraggable();
    method public void onViewAttachedToWindow(android.view.View!);
    method public void onViewDetachedFromWindow(android.view.View!);
    method public void setColor(String!, int);
    method public void setDebug(int);
    method public void setDocument(androidx.compose.remote.player.view.RemoteComposeDocument);
    method public void setExternalFloat(int, float);
    method public void setHapticEngine(androidx.compose.remote.core.CoreDocument.HapticEngine!);
    method public void setLocalBitmap(String!, android.graphics.Bitmap!);
    method public void setLocalColor(String!, int);
    method public void setLocalFloat(String!, Float!);
    method public void setLocalInt(String!, int);
    method public void setLocalString(String!, String!);
    method public void setLong(String!, long);
    method public void setTheme(int);
    method public void setUseChoreographer(boolean);
  }

  public static interface RemoteComposeView.ClickCallbacks {
    method public void click(int, String!);
  }

  public class SensorSupport {
    ctor public SensorSupport();
    method public void setupSensors(android.content.Context, androidx.compose.remote.player.view.platform.RemoteComposeView);
    method public void unregisterListener();
  }

  public class ThemeSupport {
    ctor public ThemeSupport();
    method public void mapColors(android.content.Context!, androidx.compose.remote.player.view.platform.RemoteComposeView!);
  }

}

package androidx.compose.remote.player.view.player.platform {

  public class SettingsRetriever {
    ctor public SettingsRetriever();
    method public static Boolean! animationsEnabled(android.content.Context!);
  }

}

package androidx.compose.remote.player.view.state {

  public enum RemoteDomains {
    enum_constant public static final androidx.compose.remote.player.view.state.RemoteDomains SYSTEM;
    enum_constant public static final androidx.compose.remote.player.view.state.RemoteDomains USER;
  }

  public interface StateUpdater {
    method public static String! getUserDomainString(String!);
    method public void setNamedLong(String, long);
    method public void setUserLocalBitmap(String!, android.graphics.Bitmap!);
    method public void setUserLocalColor(String!, int);
    method public void setUserLocalInt(String!, int);
    method public void setUserLocalString(String!, String!);
  }

  public class StateUpdaterImpl implements androidx.compose.remote.player.view.state.StateUpdater {
    ctor public StateUpdaterImpl(androidx.compose.remote.core.RemoteContext!);
    method public void setNamedLong(String, long);
    method public void setUserLocalBitmap(String!, android.graphics.Bitmap!);
    method public void setUserLocalColor(String!, int);
    method public void setUserLocalInt(String!, int);
    method public void setUserLocalString(String!, String!);
  }

}

