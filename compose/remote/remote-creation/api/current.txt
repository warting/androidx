// Signature format: 4.0
package androidx.compose.remote.creation {

  public class FontUtils {
    method public static androidx.compose.remote.core.operations.BitmapFontData.Glyph![] createGlyphs(androidx.compose.remote.creation.RemoteComposeWriter, String, android.graphics.Paint);
    method public static java.util.HashMap<java.lang.String!,java.lang.Short!> extractKerningTable(androidx.compose.remote.core.operations.BitmapFontData.Glyph![], android.graphics.Paint);
    method @RequiresApi(api=android.os.Build.VERSION_CODES.O) public static void setFontOnPaint(android.app.Activity, android.graphics.Paint, int);
  }

  public final class Matrix {
    ctor public Matrix(androidx.compose.remote.creation.RemoteComposeContext rc, float... exp);
    method public float getId();
    method public androidx.compose.remote.creation.RemoteComposeContext getRc();
    method public androidx.compose.remote.creation.Matrix.Vector2 mult(float x, float y);
    method public androidx.compose.remote.creation.Matrix.Vector3 mult(float x, float y, float z);
    method public androidx.compose.remote.creation.Matrix.Vector4 mult(float x, float y, float z, float w);
    method public kotlin.Triple<java.lang.Float,java.lang.Float,java.lang.Float> projectionMult(float x, float y, float z);
    method public void setId(float);
    property public float id;
    property public androidx.compose.remote.creation.RemoteComposeContext rc;
  }

  public static final class Matrix.Vector2 {
    ctor public Matrix.Vector2(float x, float y);
    method public float component1();
    method public float component2();
    method public androidx.compose.remote.creation.Matrix.Vector2 copy(optional float x, optional float y);
    method public float getX();
    method public float getY();
    property public float x;
    property public float y;
  }

  public static final class Matrix.Vector3 {
    ctor public Matrix.Vector3(float x, float y, float z);
    method public float component1();
    method public float component2();
    method public float component3();
    method public androidx.compose.remote.creation.Matrix.Vector3 copy(optional float x, optional float y, optional float z);
    method public float getX();
    method public float getY();
    method public float getZ();
    property public float x;
    property public float y;
    property public float z;
  }

  public static final class Matrix.Vector4 {
    ctor public Matrix.Vector4(float x, float y, float z, float w);
    method public float component1();
    method public float component2();
    method public float component3();
    method public float component4();
    method public androidx.compose.remote.creation.Matrix.Vector4 copy(optional float x, optional float y, optional float z, optional float w);
    method public float getW();
    method public float getX();
    method public float getY();
    method public float getZ();
    property public float w;
    property public float x;
    property public float y;
    property public float z;
  }

  public class Painter {
    method public androidx.compose.remote.creation.Painter clearColorFilter();
    method public void commit();
    method public static int porterDuffInt(android.graphics.PorterDuff.Mode);
    method public androidx.compose.remote.creation.Painter setAlpha(float);
    method public androidx.compose.remote.creation.Painter setAntiAlias(boolean);
    method public androidx.compose.remote.creation.Painter setAxis(int[], float[]);
    method public androidx.compose.remote.creation.Painter setAxis(String![], float[]);
    method @RequiresApi(api=android.os.Build.VERSION_CODES.Q) public androidx.compose.remote.creation.Painter setBlendMode(android.graphics.BlendMode);
    method public androidx.compose.remote.creation.Painter setColor(int);
    method public androidx.compose.remote.creation.Painter setColorId(int);
    method public androidx.compose.remote.creation.Painter setFilterBitmap(boolean);
    method public androidx.compose.remote.creation.Painter setLinearGradient(float, float, float, float, int[], float[]?, android.graphics.Shader.TileMode);
    method public androidx.compose.remote.creation.Painter setLinearGradient(float, float, float, float, int[], int, float[], android.graphics.Shader.TileMode);
    method public androidx.compose.remote.creation.Painter setPorterDuffColorFilter(int, android.graphics.PorterDuff.Mode);
    method public androidx.compose.remote.creation.Painter setRadialGradient(float, float, float, int[], float[]?, android.graphics.Shader.TileMode);
    method public androidx.compose.remote.creation.Painter setRadialGradient(float, float, float, int[], int, float[]?, android.graphics.Shader.TileMode);
    method public androidx.compose.remote.creation.Painter setShader(int);
    method public androidx.compose.remote.creation.Painter setShaderMatrix(float);
    method public androidx.compose.remote.creation.Painter setStrokeCap(android.graphics.Paint.Cap);
    method public androidx.compose.remote.creation.Painter setStrokeJoin(android.graphics.Paint.Join);
    method public androidx.compose.remote.creation.Painter setStrokeMiter(float);
    method public androidx.compose.remote.creation.Painter setStrokeWidth(float);
    method public androidx.compose.remote.creation.Painter setStyle(android.graphics.Paint.Style);
    method public androidx.compose.remote.creation.Painter setSweepGradient(float, float, int[], float[]?);
    method public androidx.compose.remote.creation.Painter setSweepGradient(float, float, int[], int, float[]?);
    method public androidx.compose.remote.creation.Painter setTextSize(float);
    method public androidx.compose.remote.creation.Painter setTextureShader(int, short, short, short, short);
    method @RequiresApi(api=android.os.Build.VERSION_CODES.P) public androidx.compose.remote.creation.Painter setTypeface(android.graphics.Typeface?);
    method public androidx.compose.remote.creation.Painter setTypeface(int);
    method public androidx.compose.remote.creation.Painter setTypeface(int, int, boolean);
    method public androidx.compose.remote.creation.Painter setTypeface(String);
    field public static int FONT_TYPE_DEFAULT;
    field public static int FONT_TYPE_MONOSPACE;
    field public static int FONT_TYPE_SANS_SERIF;
    field public static int FONT_TYPE_SERIF;
  }

  public final class RFloat extends java.lang.Number {
    ctor public RFloat(androidx.compose.remote.creation.RemoteComposeWriter? writer, float a);
    ctor public RFloat(androidx.compose.remote.creation.RemoteComposeWriter? writer, float[] array);
    method public operator androidx.compose.remote.creation.RFloat div(androidx.compose.remote.creation.RFloat v);
    method public operator androidx.compose.remote.creation.RFloat div(float v);
    method @BytecodeOnly public double doubleValue();
    method @BytecodeOnly public float floatValue();
    method public operator androidx.compose.remote.creation.RFloat get(androidx.compose.remote.creation.RFloat v);
    method public operator androidx.compose.remote.creation.RFloat get(int v);
    method public float[] getArray();
    method public float getId();
    method public androidx.compose.remote.creation.RemoteComposeWriter? getWriter();
    method @BytecodeOnly public int intValue();
    method @BytecodeOnly public long longValue();
    method public androidx.compose.remote.creation.RFloat min(androidx.compose.remote.creation.RFloat v);
    method public androidx.compose.remote.creation.RFloat min(float v);
    method public operator androidx.compose.remote.creation.RFloat minus(androidx.compose.remote.creation.RFloat v);
    method public operator androidx.compose.remote.creation.RFloat minus(float v);
    method public operator androidx.compose.remote.creation.RFloat plus(androidx.compose.remote.creation.RFloat v);
    method public operator androidx.compose.remote.creation.RFloat plus(float v);
    method public operator androidx.compose.remote.creation.RFloat rem(androidx.compose.remote.creation.RFloat v);
    method public operator androidx.compose.remote.creation.RFloat rem(float v);
    method public void setArray(float[]);
    method public void setId(float);
    method public void setWriter(androidx.compose.remote.creation.RemoteComposeWriter?);
    method public operator androidx.compose.remote.creation.RFloat times(androidx.compose.remote.creation.RFloat v);
    method public operator androidx.compose.remote.creation.RFloat times(float v);
    method public float[] toArray();
    method public byte toByte();
    method @Deprecated public char toChar();
    method public double toDouble();
    method public float toFloat();
    method public int toInt();
    method public long toLong();
    method public short toShort();
    method public operator androidx.compose.remote.creation.RFloat unaryPlus();
    property public float[] array;
    property public float id;
    property public androidx.compose.remote.creation.RemoteComposeWriter? writer;
    field public static final androidx.compose.remote.creation.RFloat.Companion Companion;
  }

  public static final class RFloat.Companion {
    method public operator androidx.compose.remote.creation.RFloat invoke(float float, optional androidx.compose.remote.creation.RemoteComposeWriter? writer);
  }

  public final class RFloatKt {
    method public static androidx.compose.remote.creation.RFloat ComponentHeight(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static androidx.compose.remote.creation.RFloat ComponentWidth(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static androidx.compose.remote.creation.RFloat ContinuousSec(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static androidx.compose.remote.creation.RFloat DayOfMonth(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static androidx.compose.remote.creation.RFloat DayOfWeek(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static androidx.compose.remote.creation.RFloat Hour(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static androidx.compose.remote.creation.RFloat Minutes(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static androidx.compose.remote.creation.RFloat Month(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static androidx.compose.remote.creation.RFloat Seconds(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static androidx.compose.remote.creation.RFloat UtcOffset(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static androidx.compose.remote.creation.RFloat abs(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat acos(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat animationTime(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static androidx.compose.remote.creation.RFloat asin(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat atan(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat atan2(androidx.compose.remote.creation.RFloat a, androidx.compose.remote.creation.RFloat b);
    method public static androidx.compose.remote.creation.RFloat atan2(androidx.compose.remote.creation.RFloat a, float b);
    method public static androidx.compose.remote.creation.RFloat atan2(float a, androidx.compose.remote.creation.RFloat b);
    method public static androidx.compose.remote.creation.RFloat cbrt(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat ceil(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat clamp(Number min, Number max, Number value);
    method public static androidx.compose.remote.creation.RFloat copySign(androidx.compose.remote.creation.RFloat a, androidx.compose.remote.creation.RFloat b);
    method public static androidx.compose.remote.creation.RFloat copySign(androidx.compose.remote.creation.RFloat a, float b);
    method public static androidx.compose.remote.creation.RFloat copySign(float a, androidx.compose.remote.creation.RFloat b);
    method public static androidx.compose.remote.creation.RFloat cos(androidx.compose.remote.creation.RFloat a);
    method public static void cubicTo(androidx.compose.remote.creation.RemotePath, Number x1, Number y1, Number x2, Number y2, Number x3, Number y3);
    method public static androidx.compose.remote.creation.RFloat deltTime(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static androidx.compose.remote.creation.RFloat exp(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat floor(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat ifElse(androidx.compose.remote.creation.RemoteComposeWriter, Number a, Number b, Number c);
    method public static androidx.compose.remote.creation.RFloat index(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static void lineTo(androidx.compose.remote.creation.RemotePath, Number x, Number y);
    method public static androidx.compose.remote.creation.RFloat ln(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat log(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat mad(Number a, Number b, Number c);
    method public static androidx.compose.remote.creation.RFloat max(androidx.compose.remote.creation.RFloat a, androidx.compose.remote.creation.RFloat b);
    method public static androidx.compose.remote.creation.RFloat max(androidx.compose.remote.creation.RFloat a, float b);
    method public static androidx.compose.remote.creation.RFloat max(float a, androidx.compose.remote.creation.RFloat b);
    method public static androidx.compose.remote.creation.RFloat min(androidx.compose.remote.creation.RFloat a, androidx.compose.remote.creation.RFloat b);
    method public static androidx.compose.remote.creation.RFloat min(androidx.compose.remote.creation.RFloat a, float b);
    method public static androidx.compose.remote.creation.RFloat min(float a, androidx.compose.remote.creation.RFloat b);
    method public static void moveTo(androidx.compose.remote.creation.RemotePath, Number x, Number y);
    method public static androidx.compose.remote.creation.RFloat pow(androidx.compose.remote.creation.RFloat a, androidx.compose.remote.creation.RFloat b);
    method public static androidx.compose.remote.creation.RFloat pow(androidx.compose.remote.creation.RFloat a, float b);
    method public static androidx.compose.remote.creation.RFloat pow(float a, androidx.compose.remote.creation.RFloat b);
    method public static androidx.compose.remote.creation.RFloat rand(androidx.compose.remote.creation.RemoteComposeWriter);
    method public static androidx.compose.remote.creation.RFloat rf(androidx.compose.remote.creation.RemoteComposeWriter, float... elements);
    method public static androidx.compose.remote.creation.RFloat rf(androidx.compose.remote.creation.RemoteComposeWriter, Number v);
    method public static androidx.compose.remote.creation.RFloat round(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat sign(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat sin(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat sqrt(androidx.compose.remote.creation.RFloat a);
    method public static androidx.compose.remote.creation.RFloat tan(androidx.compose.remote.creation.RFloat a);
    method public static float[] toArray(androidx.compose.remote.creation.RFloat a);
    method public static float[] toArray(Number a);
    method public static androidx.compose.remote.creation.RFloat toDeg(androidx.compose.remote.creation.RFloat a);
    method public static float toFloat(Number a);
    method public static androidx.compose.remote.creation.RFloat toRad(androidx.compose.remote.creation.RFloat a);
  }

  public final class RFloatPathsKt {
    method public static androidx.compose.remote.creation.RemotePath createDynamicCircle(androidx.compose.remote.creation.RemoteComposeWriter writer, int n, float radius, float cx, float cy);
    method public static androidx.compose.remote.creation.RemotePath createSquirclePath(androidx.compose.remote.creation.RemoteComposeWriter rc, androidx.compose.remote.creation.RFloat cx, androidx.compose.remote.creation.RFloat cy, androidx.compose.remote.creation.RFloat radius, androidx.compose.remote.creation.RFloat cornerRadius);
    method public static androidx.compose.remote.creation.RemotePath createSquirclePath(androidx.compose.remote.creation.RemoteComposeWriter rc, float cx, float cy, float radius, float cornerRadius);
  }

  public class Rc {
    ctor public Rc();
  }

  public static class Rc.Animate {
    ctor public Rc.Animate();
    field public static final int CUBIC_ACCELERATE = 2; // 0x2
    field public static final int CUBIC_ANTICIPATE = 5; // 0x5
    field public static final int CUBIC_CUSTOM = 11; // 0xb
    field public static final int CUBIC_DECELERATE = 3; // 0x3
    field public static final int CUBIC_LINEAR = 4; // 0x4
    field public static final int CUBIC_OVERSHOOT = 6; // 0x6
    field public static final int CUBIC_STANDARD = 1; // 0x1
    field public static final int EASE_OUT_BOUNCE = 13; // 0xd
    field public static final int EASE_OUT_ELASTIC = 14; // 0xe
    field public static final int SPLINE_CUSTOM = 12; // 0xc
  }

  public static class Rc.ColorAttribute {
    ctor public Rc.ColorAttribute();
    field public static final short ALPHA = 6; // 0x6
    field public static final short BLUE = 5; // 0x5
    field public static final short BRIGHTNESS = 2; // 0x2
    field public static final short GREEN = 4; // 0x4
    field public static final short HUE = 0; // 0x0
    field public static final short RED = 3; // 0x3
    field public static final short SATURATION = 1; // 0x1
  }

  public static class Rc.ColorExpression {
    ctor public Rc.ColorExpression();
    field public static final byte ARGB_MODE = 5; // 0x5
    field public static final byte COLOR_COLOR_INTERPOLATE = 0; // 0x0
    field public static final byte COLOR_ID_INTERPOLATE = 2; // 0x2
    field public static final byte HSV_MODE = 4; // 0x4
    field public static final byte IDARGB_MODE = 6; // 0x6
    field public static final byte ID_COLOR_INTERPOLATE = 1; // 0x1
    field public static final byte ID_ID_INTERPOLATE = 3; // 0x3
  }

  public static class Rc.Condition {
    ctor public Rc.Condition();
    field public static final byte EQ = 0; // 0x0
    field public static final byte GT = 4; // 0x4
    field public static final byte GTE = 5; // 0x5
    field public static final byte LT = 2; // 0x2
    field public static final byte LTE = 3; // 0x3
    field public static final byte NEQ = 1; // 0x1
  }

  public static class Rc.Debug {
    ctor public Rc.Debug();
    field public static final int SHOW_USAGE = 1; // 0x1
  }

  public static class Rc.DocHeader {
    ctor public Rc.DocHeader();
    field public static final short DOC_CONTENT_DESCRIPTION = 9; // 0x9
    field public static final short DOC_DATA_UPDATE = 12; // 0xc
    field public static final short DOC_DENSITY_AT_GENERATION = 7; // 0x7
    field public static final short DOC_DESIRED_FPS = 8; // 0x8
    field public static final short DOC_HEIGHT = 6; // 0x6
    field public static final short DOC_PROFILES = 14; // 0xe
    field public static final short DOC_SOURCE = 11; // 0xb
    field public static final short DOC_WIDTH = 5; // 0x5
    field public static final short HOST_EXCEPTION_HANDLER = 13; // 0xd
  }

  public static class Rc.FloatExpression {
    ctor public Rc.FloatExpression();
    field public static final float ABS;
    field public static final float ACOS;
    field public static final float ADD;
    field public static final float ASIN;
    field public static final float ATAN;
    field public static final float ATAN2;
    field public static final float A_AVG;
    field public static final float A_DEREF;
    field public static final float A_LEN;
    field public static final float A_MAX;
    field public static final float A_MIN;
    field public static final float A_SPLINE;
    field public static final float A_SUM;
    field public static final float CBRT;
    field public static final float CEIL;
    field public static final float CLAMP;
    field public static final float COPY_SIGN;
    field public static final float COS;
    field public static final float DEG;
    field public static final float DIV;
    field public static final float DUP;
    field public static final float EXP;
    field public static final float FLOOR;
    field public static final float FRACT;
    field public static final float HYPOT;
    field public static final float IFELSE;
    field public static final float INV;
    field public static final float LERP;
    field public static final float LN;
    field public static final float LOG;
    field public static final float LOG2;
    field public static final float MAD;
    field public static final float MAX;
    field public static final float MIN;
    field public static final float MOD;
    field public static final float MUL;
    field public static final float NOISE_FROM;
    field public static final float PINGPONG;
    field public static final float POW;
    field public static final float RAD;
    field public static final float RAND;
    field public static final float RAND_IN_RANGE;
    field public static final float RAND_SEED;
    field public static final float ROUND;
    field public static final float SIGN;
    field public static final float SIN;
    field public static final float SMOOTH_STEP;
    field public static final float SQRT;
    field public static final float SQUARE;
    field public static final float SQUARE_SUM;
    field public static final float STEP;
    field public static final float SUB;
    field public static final float SWAP;
    field public static final float TAN;
    field public static final float VAR1;
    field public static final float VAR2;
    field public static final float VAR3;
  }

  public static class Rc.Haptic {
    ctor public Rc.Haptic();
    field public static final int CLOCK_TICK = 4; // 0x4
    field public static final int CONFIRM = 12; // 0xc
    field public static final int CONTEXT_CLICK = 5; // 0x5
    field public static final int DRAG_START = 18; // 0x12
    field public static final int GESTURE_END = 11; // 0xb
    field public static final int GESTURE_START = 10; // 0xa
    field public static final int GESTURE_THRESHOLD_ACTIVATE = 16; // 0x10
    field public static final int GESTURE_THRESHOLD_DEACTIVATE = 17; // 0x11
    field public static final int KEYBOARD_PRESS = 6; // 0x6
    field public static final int KEYBOARD_RELEASE = 7; // 0x7
    field public static final int KEYBOARD_TAP = 3; // 0x3
    field public static final int LONG_PRESS = 1; // 0x1
    field public static final int NO_HAPTICS = 0; // 0x0
    field public static final int REJECT = 13; // 0xd
    field public static final int SEGMENT_FREQUENT_TICK = 20; // 0x14
    field public static final int SEGMENT_TICK = 19; // 0x13
    field public static final int TEXT_HANDLE_MOVE = 9; // 0x9
    field public static final int TOGGLE_OFF = 15; // 0xf
    field public static final int TOGGLE_ON = 14; // 0xe
    field public static final int VIRTUAL_KEY = 2; // 0x2
    field public static final int VIRTUAL_KEY_RELEASE = 8; // 0x8
  }

  public static class Rc.ImageScale {
    ctor public Rc.ImageScale();
    field public static final int CROP = 5; // 0x5
    field public static final int FILL_BOUNDS = 6; // 0x6
    field public static final int FILL_HEIGHT = 3; // 0x3
    field public static final int FILL_WIDTH = 2; // 0x2
    field public static final int FIT = 4; // 0x4
    field public static final int FIXED_SCALE = 7; // 0x7
    field public static final int INSIDE = 1; // 0x1
    field public static final int NONE = 0; // 0x0
  }

  public static class Rc.IntegerExpression {
    ctor public Rc.IntegerExpression();
    field public static final long L_ABS = 4295032848L; // 0x100010010L
    field public static final long L_ADD = 4295032833L; // 0x100010001L
    field public static final long L_AND = 4295032842L; // 0x10001000aL
    field public static final long L_CLAMP = 4295032853L; // 0x100010015L
    field public static final long L_COPY_SIGN = 4295032844L; // 0x10001000cL
    field public static final long L_DECR = 4295032850L; // 0x100010012L
    field public static final long L_DIV = 4295032836L; // 0x100010004L
    field public static final long L_IFELSE = 4295032854L; // 0x100010016L
    field public static final long L_INCR = 4295032849L; // 0x100010011L
    field public static final long L_MAD = 4295032855L; // 0x100010017L
    field public static final long L_MAX = 4295032846L; // 0x10001000eL
    field public static final long L_MIN = 4295032845L; // 0x10001000dL
    field public static final long L_MOD = 4295032837L; // 0x100010005L
    field public static final long L_MUL = 4295032835L; // 0x100010003L
    field public static final long L_NEG = 4295032847L; // 0x10001000fL
    field public static final long L_NOT = 4295032851L; // 0x100010013L
    field public static final long L_OR = 4295032841L; // 0x100010009L
    field public static final long L_SHL = 4295032838L; // 0x100010006L
    field public static final long L_SHR = 4295032839L; // 0x100010007L
    field public static final long L_SIGN = 4295032852L; // 0x100010014L
    field public static final long L_SUB = 4295032834L; // 0x100010002L
    field public static final long L_USHR = 4295032840L; // 0x100010008L
    field public static final long L_VAR1 = 4295032856L; // 0x100010018L
    field public static final long L_VAR2 = 4295032857L; // 0x100010019L
    field public static final long L_XOR = 4295032843L; // 0x10001000bL
  }

  public static class Rc.Sensor {
    ctor public Rc.Sensor();
    field public static final float ACCELERATION_X;
    field public static final float ACCELERATION_Y;
    field public static final float ACCELERATION_Z;
    field public static final float GYRO_ROT_X;
    field public static final float GYRO_ROT_Y;
    field public static final float GYRO_ROT_Z;
    field public static final float LIGHT;
    field public static final float MAGNETIC_X;
    field public static final float MAGNETIC_Y;
    field public static final float MAGNETIC_Z;
  }

  public static class Rc.System {
    ctor public Rc.System();
    field public static final float API_LEVEL;
    field public static final float DENSITY;
    field public static final float FONT_SIZE;
    field public static final int ID_DEREF = 1073741824; // 0x40000000
    field public static final float WINDOW_HEIGHT;
    field public static final float WINDOW_WIDTH;
  }

  public static class Rc.Text {
    ctor public Rc.Text();
    field public static final int ALIGN_CENTER = 3; // 0x3
    field public static final int ALIGN_END = 6; // 0x6
    field public static final int ALIGN_JUSTIFY = 4; // 0x4
    field public static final int ALIGN_LEFT = 1; // 0x1
    field public static final int ALIGN_RIGHT = 2; // 0x2
    field public static final int ALIGN_START = 5; // 0x5
    field public static final int OVERFLOW_CLIP = 1; // 0x1
    field public static final int OVERFLOW_ELLIPSIS = 3; // 0x3
    field public static final int OVERFLOW_MIDDLE_ELLIPSIS = 5; // 0x5
    field public static final int OVERFLOW_START_ELLIPSIS = 4; // 0x4
    field public static final int OVERFLOW_VISIBLE = 2; // 0x2
  }

  public static class Rc.TextAnchorMask {
    ctor public Rc.TextAnchorMask();
    field public static final int MEASURE_EVERY_TIME = 4; // 0x4
    field public static final int MONOSPACE_MEASURE = 2; // 0x2
    field public static final int TEXT_RTL = 1; // 0x1
  }

  public static class Rc.TextFromFloat {
    ctor public Rc.TextFromFloat();
    field public static final int PAD_AFTER_NONE = 1; // 0x1
    field public static final int PAD_AFTER_SPACE = 0; // 0x0
    field public static final int PAD_AFTER_ZERO = 3; // 0x3
    field public static final int PAD_PRE_NONE = 4; // 0x4
    field public static final int PAD_PRE_SPACE = 0; // 0x0
    field public static final int PAD_PRE_ZERO = 12; // 0xc
  }

  public static class Rc.Texture {
    ctor public Rc.Texture();
    field public static final short FILTER_DEFAULT = 0; // 0x0
    field public static final short FILTER_LINEAR = 2; // 0x2
    field public static final short FILTER_NEAREST = 1; // 0x1
    field public static final short TILE_CLAMP = 0; // 0x0
    field public static final short TILE_DECAL = 3; // 0x3
    field public static final short TILE_MIRROR = 1; // 0x1
    field public static final short TILE_REPEAT = 2; // 0x2
  }

  public static class Rc.Time {
    ctor public Rc.Time();
    field public static final float ANIMATION_DELTA_TIME;
    field public static final float ANIMATION_TIME;
    field public static final float CALENDAR_MONTH;
    field public static final float CONTINUOUS_SEC;
    field public static final float DAY_OF_MONTH;
    field public static final float DAY_OF_YEAR;
    field public static final long INT_EPOCH_SECOND = 4294967328L; // 0x100000020L
    field public static final float OFFSET_TO_UTC;
    field public static final float TIME_IN_HR;
    field public static final float TIME_IN_MIN;
    field public static final float TIME_IN_SEC;
    field public static final float WEEK_DAY;
    field public static final float YEAR;
  }

  public static class Rc.TimeAttributes {
    ctor public Rc.TimeAttributes();
    field public static final short TIME_DAY_OF_MONTH = 9; // 0x9
    field public static final short TIME_DAY_OF_WEEK = 11; // 0xb
    field public static final short TIME_FROM_ARG_HR = 5; // 0x5
    field public static final short TIME_FROM_ARG_MIN = 4; // 0x4
    field public static final short TIME_FROM_ARG_SEC = 3; // 0x3
    field public static final short TIME_FROM_LOAD_SEC = 14; // 0xe
    field public static final short TIME_FROM_NOW_HR = 2; // 0x2
    field public static final short TIME_FROM_NOW_MIN = 1; // 0x1
    field public static final short TIME_FROM_NOW_SEC = 0; // 0x0
    field public static final short TIME_IN_HR = 8; // 0x8
    field public static final short TIME_IN_MIN = 7; // 0x7
    field public static final short TIME_IN_SEC = 6; // 0x6
    field public static final short TIME_MONTH_VALUE = 10; // 0xa
    field public static final short TIME_YEAR = 12; // 0xc
  }

  public static class Rc.Touch {
    ctor public Rc.Touch();
    field public static final float POSITION_X;
    field public static final float POSITION_Y;
    field public static final float TOUCH_EVENT_TIME;
    field public static final float VELOCITY_X;
    field public static final float VELOCITY_Y;
  }

  public final class RemoteComposeContext {
    ctor public RemoteComposeContext(androidx.compose.remote.creation.RemoteComposeWriter.HTag[] tags, kotlin.jvm.functions.Function1<? super androidx.compose.remote.creation.RemoteComposeContext,kotlin.Unit> content);
    ctor public RemoteComposeContext(int apiLevel, androidx.compose.remote.creation.RemoteComposeWriter.HTag[] tags, kotlin.jvm.functions.Function1<? super androidx.compose.remote.creation.RemoteComposeContext,kotlin.Unit> content);
    ctor public RemoteComposeContext(int width, int height, String contentDescription, optional androidx.compose.remote.core.Platform platform, kotlin.jvm.functions.Function1<? super androidx.compose.remote.creation.RemoteComposeContext,kotlin.Unit> content);
    ctor public RemoteComposeContext(int width, int height, String contentDescription, androidx.compose.remote.creation.profile.Profile profile, kotlin.jvm.functions.Function1<? super androidx.compose.remote.creation.RemoteComposeContext,kotlin.Unit> content);
    ctor public RemoteComposeContext(int width, int height, String contentDescription, int apiLevel, int profiles, optional androidx.compose.remote.core.Platform platform, kotlin.jvm.functions.Function1<? super androidx.compose.remote.creation.RemoteComposeContext,kotlin.Unit> content);
    method public androidx.compose.remote.creation.RFloat ComponentHeight();
    method public androidx.compose.remote.creation.RFloat ComponentWidth();
    method public androidx.compose.remote.creation.RFloat ContinuousSec();
    method public androidx.compose.remote.creation.RFloat DayOfMonth();
    method public androidx.compose.remote.creation.RFloat DayOfWeek();
    method public androidx.compose.remote.creation.RFloat Hour();
    method public void MatrixMultiply(float matrixId, float[]? from, float[]? out);
    method public void MatrixMultiply(float matrixId, short type, float[]? from, float[] out);
    method public androidx.compose.remote.creation.RFloat Minutes();
    method public androidx.compose.remote.creation.RFloat Month();
    method public androidx.compose.remote.creation.RFloat Seconds();
    method public androidx.compose.remote.creation.RFloat UtcOffset();
    method public void addAction(androidx.compose.remote.creation.actions.Action?... actions);
    method public int addBitmap(android.graphics.Bitmap image);
    method public int addBitmap(android.graphics.Bitmap image, String name);
    method public int addBitmapFont(androidx.compose.remote.core.operations.BitmapFontData.Glyph[] glyphs);
    method public int addBoolean(boolean value);
    method public void addClickArea(int id, String? contentDescription, float left, float top, float right, float bottom, String? metadata);
    method public void addClipPath(int pathId);
    method public int addColor(int color);
    method public short addColorExpression(float hue, float sat, float value);
    method public short addColorExpression(float alpha, float red, float green, float blue);
    method public short addColorExpression(int alpha, float hue, float sat, float value);
    method public short addColorExpression(int color1, int color2, float tween);
    method public short addColorExpression(int color1, short colorId2, float tween);
    method public short addColorExpression(short colorId1, int color2, float tween);
    method public short addColorExpression(short colorId1, short colorId2, float tween);
    method public float addComponentHeightValue();
    method public float addComponentWidthValue();
    method public int addDataMap(androidx.compose.remote.creation.RemoteComposeWriter.DataMap?... data);
    method public float addDataMap(String[] keys, int[] ids);
    method public void addDebugMessage(int textId, float value, int flag);
    method public void addDebugMessage(String message);
    method public void addDebugMessage(String message, float value);
    method public void addDebugMessage(String message, float value, int flag);
    method public float addFloatArray(float[] values);
    method public float addFloatConstant(float value);
    method public float addFloatList(float[] values);
    method public float addFloatMap(String[] keys, float[] values);
    method public int addFont(byte[] data);
    method public long addInteger(int value);
    method public float addList(int[] listId);
    method public int addLong(long value);
    method public float addMatrixConst(android.graphics.Matrix m);
    method public void addModifierScroll(int direction);
    method public void addModifierScroll(int direction, float positionId);
    method public void addModifierScroll(int direction, float positionId, int notches);
    method public int addNamedBitmap(String name, android.graphics.Bitmap initialValue);
    method public int addNamedColor(String name, int color);
    method public float addNamedFloat(String name, float initialValue);
    method public long addNamedInt(String name, int initialValue);
    method public int addNamedLong(String name, long initialValue);
    method public int addNamedString(String name, String initialValue);
    method public int addPathData(Object path);
    method public int addPathString(String path);
    method public float addStringList(int... strIds);
    method public float addStringList(java.lang.String?... strs);
    method public int addText(String text);
    method public int addTimeLong(long time);
    method public float addTouch(float defValue, float min, float max, int touchMode, float velocityId, int touchEffects, float[]? touchSpec, float[]? easingSpec, float... exp);
    method public float[] anim(float duration);
    method public float[] anim(float duration, int type);
    method public float[] anim(float duration, int type, float[]? spec);
    method public float[] anim(float duration, int type, float[]? spec, float initialValue);
    method public float[] anim(float duration, int type, float[]? spec, float initialValue, float wrap);
    method public androidx.compose.remote.creation.RFloat animationTime();
    method public boolean areFloatExpressionOperationsValid(float f);
    method public float asFloatId(long id);
    method public float bitmapAttribute(int bitmapId, short attribute);
    method public float bitmapTextMeasure(int textId, int bmFontId, int measureWidth);
    method public void box(androidx.compose.remote.creation.modifiers.RecordingModifier modifier);
    method public void box(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int horizontal, int vertical);
    method public void box(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int horizontal, int vertical, androidx.compose.remote.creation.RemoteComposeWriterInterface content);
    method public void box(optional androidx.compose.remote.creation.modifiers.RecordingModifier modifier, optional int horizontal, optional int vertical, kotlin.jvm.functions.Function1<? super androidx.compose.remote.creation.RemoteComposeContext,kotlin.Unit> content);
    method public byte[] buffer();
    method public int bufferSize();
    method public void callFloatFunction(int id, float... args);
    method public void canvas(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, androidx.compose.remote.creation.RemoteComposeWriterInterface content);
    method public boolean checkAndClearForceSendingNewPaint();
    method public void clipRect(float left, float top, float right, float bottom);
    method public void collapsibleColumn(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int horizontal, int vertical, androidx.compose.remote.creation.RemoteComposeWriterInterface content);
    method public void collapsibleRow(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int horizontal, int vertical, androidx.compose.remote.creation.RemoteComposeWriterInterface content);
    method public void column(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int horizontal, int vertical, androidx.compose.remote.creation.RemoteComposeWriterInterface content);
    method public void column(optional androidx.compose.remote.creation.modifiers.RecordingModifier modifier, optional int horizontal, optional int vertical, kotlin.jvm.functions.Function1<? super androidx.compose.remote.creation.RemoteComposeContext,kotlin.Unit> content);
    method public void conditionalOperations(byte type, float a, float b);
    method public void conditionalOperations(byte type, float a, float b, androidx.compose.remote.creation.RemoteComposeWriterInterface content);
    method public int createFloatFunction(float[] args);
    method public float createFloatId();
    method public int createID(int type);
    method public float createParticles(float[] variables, float[][] initialExpressions, int particleCount);
    method public androidx.compose.remote.creation.RemoteComposeShader createShader(String shaderString);
    method public int createTextFromFloat(float value, int before, int after, int flags);
    method public androidx.compose.remote.creation.RFloat deltTime();
    method public void drawArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle);
    method public void drawBitmap(android.graphics.Bitmap image, String contentDescription);
    method public void drawBitmap(int imageId, float left, float top, float right, float bottom, String? contentDescription);
    method public void drawBitmap(int imageId, float left, float top, String? contentDescription);
    method public void drawBitmap(Object image, float left, float top, float right, float bottom, String? contentDescription);
    method public void drawBitmapFontTextRun(int textId, int bitmapFontId, int start, int end, float x, float y);
    method public void drawBitmapTextAnchored(int textId, int bitmapFontId, float start, float end, float x, float y, float panX, float panY);
    method public void drawBitmapTextAnchored(String text, int bitmapFontId, float start, float end, float x, float y, float panX, float panY);
    method public void drawCircle(float centerX, float centerY, float radius);
    method public void drawComponentContent();
    method public void drawLine(float x1, float y1, float x2, float y2);
    method public void drawOval(float left, float top, float right, float bottom);
    method public void drawPath(int pathId);
    method public void drawPath(Object path);
    method public void drawRect(float left, float top, float right, float bottom);
    method public void drawRoundRect(float left, float top, float right, float bottom, float radiusX, float radiusY);
    method public void drawScaledBitmap(android.graphics.Bitmap image, float srcLeft, float srcTop, float srcRight, float srcBottom, float dstLeft, float dstTop, float dstRight, float dstBottom, int scaleType, float scaleFactor, String? contentDescription);
    method public void drawScaledBitmap(int imageId, float srcLeft, float srcTop, float srcRight, float srcBottom, float dstLeft, float dstTop, float dstRight, float dstBottom, int scaleType, float scaleFactor, String? contentDescription);
    method public void drawSector(float left, float top, float right, float bottom, float startAngle, float sweepAngle);
    method public void drawTextAnchored(int strId, float x, float y, float panX, float panY, int flags);
    method public void drawTextAnchored(String str, float x, float y, float panX, float panY, int flags);
    method public void drawTextOnPath(int textId, Object path, float hOffset, float vOffset);
    method public void drawTextOnPath(String text, Object path, float hOffset, float vOffset);
    method public void drawTextRun(int textId, int start, int end, int contextStart, int contextEnd, float x, float y, boolean rtl);
    method public void drawTextRun(String text, int start, int end, int contextStart, int contextEnd, float x, float y, boolean rtl);
    method public void drawTweenPath(int path1Id, int path2Id, float tween, float start, float stop);
    method public void drawTweenPath(Object path1, Object path2, float tween, float start, float stop);
    method public float[] easing(float maxTime, float maxAcceleration, float maxVelocity);
    method public void endBox();
    method public void endCanvas();
    method public void endCanvasOperations();
    method public void endCollapsibleColumn();
    method public void endCollapsibleRow();
    method public void endColumn();
    method public void endConditionalOperations();
    method public void endFitBox();
    method public void endFloatFunction();
    method public void endLoop();
    method public void endRow();
    method public void endRunActions();
    method public void endStateLayout();
    method public void endTextComponent();
    method public float[] exp(float... value);
    method public float floatExpression(float... value);
    method public float floatExpression(float[] value, float[] animation);
    method public androidx.compose.remote.core.RemoteComposeBuffer getBuffer();
    method public float getColorAttribute(int baseColor, short type);
    method public int getFONT_TYPE_DEFAULT();
    method public int getFONT_TYPE_MONOSPACE();
    method public int getFONT_TYPE_SANS_SERIF();
    method public int getFONT_TYPE_SERIF();
    method public androidx.compose.remote.creation.RemoteComposeWriter getMRemoteWriter();
    method public androidx.compose.remote.creation.modifiers.RecordingModifier getModifier();
    method public androidx.compose.remote.creation.Painter getPainter();
    method public float getTIME_IN_SEC();
    method public androidx.compose.remote.creation.RemoteComposeWriter getWriter();
    method public void header(int width, int height, String? contentDescription, float density, long capabilities);
    method public void image(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int imageId, int scaleType, float alpha);
    method public void impulse(float duration, float start);
    method public void impulse(float duration, float start, Runnable run);
    method public void impulseEnd();
    method public void impulseProcess();
    method public void impulseProcess(Runnable run);
    method public androidx.compose.remote.creation.RFloat index();
    method public long integerExpression(int mask, int... value);
    method public long integerExpression(long... v);
    method public void loop(int indexId, float from, float step, float until, androidx.compose.remote.creation.RemoteComposeWriterInterface content);
    method public void loop(int indexId, int from, int step, int until, androidx.compose.remote.creation.RemoteComposeWriterInterface content);
    method public int mapLookup(int mapId, int strId);
    method public int mapLookup(int mapId, String str);
    method public androidx.compose.remote.creation.Matrix matrix(float... exp);
    method public float matrixExpression(float... exp);
    method public void matrixFromPath(int pathId, float fraction, float vOffset, int flags);
    method public void nameBitmapId(int id, String omicron);
    method public int nextId();
    method public void particlesLoop(float id, float[]? restart, float[][] expressions, Runnable r);
    method public void pathAppend(int pathId, float... path);
    method public void pathAppendClose(int pathId);
    method public void pathAppendLineTo(int pathId, float x, float y);
    method public void pathAppendMoveTo(int pathId, float x, float y);
    method public void pathAppendQuadTo(int pathId, float x1, float y1, float x2, float y2);
    method public void pathAppendReset(int pathId);
    method public int pathCombine(int path1, int path2, byte op);
    method public int pathCreate(float x, float y);
    method public int pathTween(int pid1, int pid2, float tween);
    method public void performHaptic(int feedbackConstant);
    method public androidx.compose.remote.creation.RFloat rand();
    method public float reserveFloatVariable();
    method public void reset();
    method public void restore();
    method public androidx.compose.remote.creation.RFloat rf(float... elements);
    method public androidx.compose.remote.creation.RFloat rf(Number v);
    method public void root(androidx.compose.remote.creation.RemoteComposeWriterInterface content);
    method public void rotate(float angle);
    method public void rotate(float angle, float centerX, float centerY);
    method public void row(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int horizontal, int vertical, androidx.compose.remote.creation.RemoteComposeWriterInterface content);
    method public void row(optional androidx.compose.remote.creation.modifiers.RecordingModifier modifier, optional int horizontal, optional int vertical, kotlin.jvm.functions.Function1<? super androidx.compose.remote.creation.RemoteComposeContext,kotlin.Unit> content);
    method public void save();
    method public void scale(float scaleX, float scaleY);
    method public void scale(float scaleX, float scaleY, float centerX, float centerY);
    method public void setColorName(int id, String name);
    method public void setMRemoteWriter(androidx.compose.remote.creation.RemoteComposeWriter);
    method public void setRootContentBehavior(int scroll, int alignment, int sizing, int mode);
    method public void setStringName(int id, String name);
    method public void setTheme(int theme);
    method public void skew(float skewX, float skewY);
    method public float[] spring(float stiffness, float damping, float stopThreshold, int boundaryMode);
    method public void startBox(androidx.compose.remote.creation.modifiers.RecordingModifier modifier);
    method public void startBox(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int horizontal, int vertical);
    method public void startCanvas(androidx.compose.remote.creation.modifiers.RecordingModifier modifier);
    method public void startCanvasOperations();
    method public void startCollapsibleColumn(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int horizontal, int vertical);
    method public void startCollapsibleRow(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int horizontal, int vertical);
    method public void startColumn(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int horizontal, int vertical);
    method public void startFitBox(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int horizontal, int vertical);
    method public float startLoop(float count);
    method public void startLoop(int indexId, float from, float step, float until);
    method public float startLoopVar(float from, float step, float until);
    method public void startRow(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int horizontal, int vertical);
    method public void startRunActions();
    method public void startStateLayout(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int indexId);
    method public void startTextComponent(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int textId, int color, float fontSize, int fontStyle, float fontWeight, String? fontFamily, int textAlign, int overflow, int maxLines);
    method public void stateLayout(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int indexId, androidx.compose.remote.creation.RemoteComposeWriterInterface content);
    method public int storeBitmap(Object image);
    method public float textAttribute(int textId, short attribute);
    method public void textComponent(androidx.compose.remote.creation.modifiers.RecordingModifier modifier, int textId, int color, float fontSize, int fontStyle, float fontWeight, String? fontFamily, int textAlign, int overflow, int maxLines, androidx.compose.remote.creation.RemoteComposeWriterInterface content);
    method public int textCreateId(String text);
    method public float textLength(int textId);
    method public int textLookup(float arrayId, float index);
    method public int textLookup(float arrayId, int indexId);
    method public float textMeasure(int textId, int mode);
    method public int textMerge(int id1, int id2);
    method public int textSubtext(int txtId, float start, float len);
    method public float timeAttribute(int longID, short type, int... args);
    method public void translate(float dx, float dy);
    method public void validateOps(float[] ops);
    property public int FONT_TYPE_DEFAULT;
    property public int FONT_TYPE_MONOSPACE;
    property public int FONT_TYPE_SANS_SERIF;
    property public int FONT_TYPE_SERIF;
    property public androidx.compose.remote.creation.modifiers.RecordingModifier Modifier;
    property public float TIME_IN_SEC;
    property public androidx.compose.remote.core.RemoteComposeBuffer buffer;
    property public androidx.compose.remote.creation.RemoteComposeWriter mRemoteWriter;
    property public androidx.compose.remote.creation.Painter painter;
    property public androidx.compose.remote.creation.RemoteComposeWriter writer;
    field public androidx.compose.remote.creation.RemoteComposeWriter mRemoteWriter;
  }

  public final class RemoteComposeContextKt {
    method public static operator <RFloat> RFloat component6(RFloat[]);
    method public static operator <RFloat> RFloat component7(RFloat[]);
    method public static androidx.compose.remote.creation.RemotePath createCirclePath(androidx.compose.remote.creation.RemoteComposeContext, androidx.compose.remote.creation.RFloat cx, androidx.compose.remote.creation.RFloat cy, androidx.compose.remote.creation.RFloat radius);
    method public static androidx.compose.remote.creation.RemotePath createCirclePath(androidx.compose.remote.creation.RemoteComposeContext, float cx, float cy, float radius);
    method public static float createParticles(androidx.compose.remote.creation.RemoteComposeWriter, androidx.compose.remote.creation.RFloat[] rvariables, Number[] initialize, int particleCount);
    method public static void particlesLoops(androidx.compose.remote.creation.RemoteComposeWriter, float id, androidx.compose.remote.creation.RFloat? restart, Number[] rexpressions, Runnable r);
  }

  public class RemoteComposeShader {
    ctor public RemoteComposeShader(String, androidx.compose.remote.creation.RemoteComposeWriter);
    method public int commit();
    method public String getShader();
    method public int getShaderID();
    method public int getShaderTextID();
    method public androidx.compose.remote.creation.RemoteComposeShader setBitmapUniform(String, int);
    method public androidx.compose.remote.creation.RemoteComposeShader setFloatUniform(String, float);
    method public androidx.compose.remote.creation.RemoteComposeShader setFloatUniform(String, float, float);
    method public androidx.compose.remote.creation.RemoteComposeShader setFloatUniform(String, float, float, float);
    method public androidx.compose.remote.creation.RemoteComposeShader setFloatUniform(String, float, float, float, float);
    method public androidx.compose.remote.creation.RemoteComposeShader setIntUniform(String, int);
    method public androidx.compose.remote.creation.RemoteComposeShader setIntUniform(String, int, int);
    method public androidx.compose.remote.creation.RemoteComposeShader setIntUniform(String, int, int, int);
    method public androidx.compose.remote.creation.RemoteComposeShader setIntUniform(String, int, int, int, int);
    method public void setShaderID(int);
  }

  public class RemoteComposeWriter {
    ctor public RemoteComposeWriter(androidx.compose.remote.core.Platform, androidx.compose.remote.creation.RemoteComposeWriter.HTag!...);
    ctor public RemoteComposeWriter(androidx.compose.remote.core.Platform, int, androidx.compose.remote.creation.RemoteComposeWriter.HTag!...);
    ctor protected RemoteComposeWriter(androidx.compose.remote.creation.profile.Profile, androidx.compose.remote.core.RemoteComposeBuffer, androidx.compose.remote.creation.RemoteComposeWriter.HTag!...);
    ctor public RemoteComposeWriter(int, int, String, androidx.compose.remote.core.Platform);
    ctor public RemoteComposeWriter(int, int, String, int, int, androidx.compose.remote.core.Platform);
    method public void addAction(androidx.compose.remote.creation.actions.Action!...);
    method public int addBitmap(android.graphics.Bitmap);
    method public int addBitmap(android.graphics.Bitmap, String);
    method public int addBitmapFont(androidx.compose.remote.core.operations.BitmapFontData.Glyph![]);
    method public int addBitmapFont(androidx.compose.remote.core.operations.BitmapFontData.Glyph![], java.util.Map<java.lang.String!,java.lang.Short!>);
    method public int addBoolean(boolean);
    method public void addClickArea(int, String?, float, float, float, float, String?);
    method public void addClipPath(int);
    method public int addColor(int);
    method public short addColorExpression(float, float, float);
    method public short addColorExpression(float, float, float, float);
    method public short addColorExpression(int, float, float, float);
    method public short addColorExpression(int, int, float);
    method public short addColorExpression(int, short, float);
    method public short addColorExpression(short, int, float);
    method public short addColorExpression(short, short, float);
    method public Float addComponentHeightValue();
    method public Float addComponentWidthValue();
    method public int addDataMap(androidx.compose.remote.creation.RemoteComposeWriter.DataMap!...);
    method public float addDataMap(String![], int[]);
    method public void addDebugMessage(int, float, int);
    method public void addDebugMessage(String);
    method public void addDebugMessage(String, float);
    method public void addDebugMessage(String, float, int);
    method public float addFloatArray(float[]);
    method public Float addFloatConstant(float);
    method public float addFloatList(float[]);
    method public float addFloatMap(String![], float[]);
    method public int addFont(byte[]);
    method public long addInteger(int);
    method public float addList(int[]);
    method public int addLong(long);
    method public float addMatrixConst(android.graphics.Matrix);
    method public void addMatrixMultiply(float, float[]?, float[]?);
    method public void addMatrixMultiply(float, short, float[]?, float[]);
    method public void addModifierScroll(int);
    method public void addModifierScroll(int, float);
    method public void addModifierScroll(int, float, int);
    method public int addNamedBitmap(String, android.graphics.Bitmap);
    method public int addNamedColor(String, int);
    method public float addNamedFloat(String, float);
    method public long addNamedInt(String, int);
    method public int addNamedLong(String, long);
    method public int addNamedString(String, String);
    method public int addPathData(Object);
    method public int addPathString(String);
    method public float addStringList(int...);
    method public float addStringList(java.lang.String!...);
    method public int addText(String);
    method public int addTimeLong(long);
    method public float addTouch(float, float, float, int, float, int, float[]?, float[]?, float...);
    method public float[] anim(float);
    method public float[] anim(float, int);
    method public float[] anim(float, int, float[]?);
    method public float[] anim(float, int, float[]?, float);
    method public float[] anim(float, int, float[]?, float, float);
    method protected boolean areFloatExpressionOperationsValid(float);
    method public float asFloatId(long);
    method public float bitmapAttribute(int, short);
    method public float bitmapTextMeasure(int, int, int);
    method public void box(androidx.compose.remote.creation.modifiers.RecordingModifier);
    method public void box(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int);
    method public void box(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int, androidx.compose.remote.creation.RemoteComposeWriterInterface);
    method public byte[] buffer();
    method public int bufferSize();
    method public void callFloatFunction(int, float...);
    method public void canvas(androidx.compose.remote.creation.modifiers.RecordingModifier, androidx.compose.remote.creation.RemoteComposeWriterInterface);
    method public boolean checkAndClearForceSendingNewPaint();
    method public void clipRect(float, float, float, float);
    method public void collapsibleColumn(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int, androidx.compose.remote.creation.RemoteComposeWriterInterface);
    method public void collapsibleRow(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int, androidx.compose.remote.creation.RemoteComposeWriterInterface);
    method public void column(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int, androidx.compose.remote.creation.RemoteComposeWriterInterface);
    method public void conditionalOperations(byte, float, float);
    method public void conditionalOperations(byte, float, float, androidx.compose.remote.creation.RemoteComposeWriterInterface);
    method public int createBitmap(int, int);
    method public int createFloatFunction(float[]);
    method public float createFloatId();
    method public int createID(int);
    method public float createParticles(float[], float[][]?, int);
    method public androidx.compose.remote.creation.RemoteComposeShader createShader(String);
    method public int createTextFromFloat(float, int, int, int);
    method public void drawArc(float, float, float, float, float, float);
    method public void drawBitmap(android.graphics.Bitmap, String?);
    method public void drawBitmap(int, float, float, float, float, String?);
    method public void drawBitmap(int, float, float, String?);
    method public void drawBitmap(Object, float, float, float, float, String?);
    method public void drawBitmapFontTextRun(int, int, int, int, float, float);
    method public void drawBitmapFontTextRunOnPath(int, int, Object, int, int, float);
    method public void drawBitmapTextAnchored(int, int, float, float, float, float, float, float);
    method public void drawBitmapTextAnchored(String, int, float, float, float, float, float, float);
    method public void drawCircle(float, float, float);
    method public void drawComponentContent();
    method public void drawLine(float, float, float, float);
    method public void drawOnBitmap(int);
    method public void drawOnBitmap(int, int, int);
    method public void drawOval(float, float, float, float);
    method public void drawPath(int);
    method public void drawPath(Object);
    method public void drawRect(float, float, float, float);
    method public void drawRoundRect(float, float, float, float, float, float);
    method public void drawScaledBitmap(android.graphics.Bitmap, float, float, float, float, float, float, float, float, int, float, String?);
    method public void drawScaledBitmap(int, float, float, float, float, float, float, float, float, int, float, String?);
    method public void drawSector(float, float, float, float, float, float);
    method public void drawTextAnchored(int, float, float, float, float, int);
    method public void drawTextAnchored(String, float, float, float, float, int);
    method public void drawTextOnPath(int, Object, float, float);
    method public void drawTextOnPath(String, Object, float, float);
    method public void drawTextRun(int, int, int, int, int, float, float, Boolean);
    method public void drawTextRun(String, int, int, int, int, float, float, Boolean);
    method public void drawTweenPath(int, int, float, float, float);
    method public void drawTweenPath(Object, Object, float, float, float);
    method public float[] easing(float, float, float);
    method public void endBox();
    method public void endCanvas();
    method public void endCanvasOperations();
    method public void endCollapsibleColumn();
    method public void endCollapsibleRow();
    method public void endColumn();
    method public void endConditionalOperations();
    method public void endFitBox();
    method public void endFloatFunction();
    method public void endLoop();
    method public void endRow();
    method public void endRunActions();
    method public void endStateLayout();
    method public void endTextComponent();
    method public float[] exp(float...);
    method public Float floatExpression(float...);
    method public float floatExpression(float[], float[]?);
    method public androidx.compose.remote.core.RemoteComposeBuffer getBuffer();
    method public float getColorAttribute(int, short);
    method public androidx.compose.remote.creation.Painter getPainter();
    method public static androidx.compose.remote.creation.RemoteComposeWriter.HTag hTag(short, Object);
    method public void header(int, int, String?, float, long);
    method public int idLookup(float, float);
    method public void image(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int, float);
    method public void impulse(float, float);
    method public void impulse(float, float, Runnable);
    method public void impulseEnd();
    method public void impulseProcess();
    method public void impulseProcess(Runnable);
    method public long integerExpression(int, int...);
    method public long integerExpression(long...);
    method public void loop(int, float, float, float, androidx.compose.remote.creation.RemoteComposeWriterInterface);
    method public void loop(int, int, int, int, androidx.compose.remote.creation.RemoteComposeWriterInterface);
    method public static androidx.compose.remote.creation.RemoteComposeWriter.DataMap map(String, boolean);
    method public static androidx.compose.remote.creation.RemoteComposeWriter.DataMap map(String, float);
    method public static androidx.compose.remote.creation.RemoteComposeWriter.DataMap map(String, int);
    method public static androidx.compose.remote.creation.RemoteComposeWriter.DataMap map(String, String);
    method public static androidx.compose.remote.creation.RemoteComposeWriter.DataMap map(String, long);
    method public int mapLookup(int, int);
    method public int mapLookup(int, String);
    method public float matrixExpression(float...);
    method public void matrixFromPath(int, float, float, int);
    method public void nameBitmapId(int, String);
    method public int nextId();
    method public static androidx.compose.remote.creation.RemoteComposeWriter obtain(int, int, androidx.compose.remote.creation.profile.Profile);
    method public static androidx.compose.remote.creation.RemoteComposeWriter obtain(int, int, String, androidx.compose.remote.creation.profile.Profile);
    method public static android.graphics.Path parsePath(String);
    method public void particlesLoop(float, float[]?, float[][], Runnable);
    method public void pathAppend(int, float...);
    method public void pathAppendClose(int);
    method public void pathAppendLineTo(int, float, float);
    method public void pathAppendMoveTo(int, float, float);
    method public void pathAppendQuadTo(int, float, float, float, float);
    method public void pathAppendReset(int);
    method public int pathCombine(int, int, byte);
    method public int pathCreate(float, float);
    method public int pathTween(int, int, float);
    method public void performHaptic(int);
    method public float reserveFloatVariable();
    method public void reset();
    method public void restore();
    method public void root(androidx.compose.remote.creation.RemoteComposeWriterInterface);
    method public void rotate(float);
    method public void rotate(float, float, float);
    method public void row(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int, androidx.compose.remote.creation.RemoteComposeWriterInterface);
    method public void save();
    method public void scale(float, float);
    method public void scale(float, float, float, float);
    method public void setColorName(int, String);
    method public void setRootContentBehavior(int, int, int, int);
    method public void setStringName(int, String);
    method public void setTheme(int);
    method public void skew(float, float);
    method public float[] spring(float, float, float, int);
    method public void startBox(androidx.compose.remote.creation.modifiers.RecordingModifier);
    method public void startBox(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int);
    method public void startCanvas(androidx.compose.remote.creation.modifiers.RecordingModifier);
    method public void startCanvasOperations();
    method public void startCollapsibleColumn(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int);
    method public void startCollapsibleRow(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int);
    method public void startColumn(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int);
    method public void startFitBox(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int);
    method public float startLoop(float);
    method public void startLoop(int, float, float, float);
    method public float startLoopVar(float, float, float);
    method public void startRow(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int);
    method public void startRunActions();
    method public void startStateLayout(androidx.compose.remote.creation.modifiers.RecordingModifier, int);
    method public void startTextComponent(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int, float, int, float, String?, int, int, int);
    method public void stateLayout(androidx.compose.remote.creation.modifiers.RecordingModifier, int, androidx.compose.remote.creation.RemoteComposeWriterInterface);
    method public int storeBitmap(Object);
    method public float textAttribute(int, short);
    method public void textComponent(androidx.compose.remote.creation.modifiers.RecordingModifier, int, int, float, int, float, String?, int, int, int, androidx.compose.remote.creation.RemoteComposeWriterInterface);
    method public int textCreateId(String);
    method public float textLength(int);
    method public int textLookup(float, float);
    method public int textLookup(float, int);
    method public float textMeasure(int, int);
    method public int textMerge(int, int);
    method public int textSubtext(int, float, float);
    method public float timeAttribute(int, short, int...);
    method public void translate(float, float);
    method protected void validateOps(float[]);
    method public void wakeIn(float);
    field public static final byte COMBINE_DIFFERENCE = 0; // 0x0
    field public static final byte COMBINE_INTERSECT = 1; // 0x1
    field public static final byte COMBINE_REVERSE_DIFFERENCE = 2; // 0x2
    field public static final byte COMBINE_UNION = 3; // 0x3
    field public static final byte COMBINE_XOR = 4; // 0x4
    field public static final int FONT_TYPE_DEFAULT = 0; // 0x0
    field public static final int FONT_TYPE_MONOSPACE = 3; // 0x3
    field public static final int FONT_TYPE_SANS_SERIF = 1; // 0x1
    field public static final int FONT_TYPE_SERIF = 2; // 0x2
    field public static final int ID_REFERENCE = 32768; // 0x8000
    field public static final int IMAGE_REFERENCE = 256; // 0x100
    field public static final int IMAGE_SCALE_CROP = 5; // 0x5
    field public static final int IMAGE_SCALE_FILL_BOUNDS = 6; // 0x6
    field public static final int IMAGE_SCALE_FILL_HEIGHT = 3; // 0x3
    field public static final int IMAGE_SCALE_FILL_WIDTH = 2; // 0x2
    field public static final int IMAGE_SCALE_FIT = 4; // 0x4
    field public static final int IMAGE_SCALE_FIXED_SCALE = 7; // 0x7
    field public static final int IMAGE_SCALE_INSIDE = 1; // 0x1
    field public static final int IMAGE_SCALE_NONE = 0; // 0x0
    field public static final long L_ABS = 4295032848L; // 0x100010010L
    field public static final long L_ADD = 4295032833L; // 0x100010001L
    field public static final long L_AND = 4295032842L; // 0x10001000aL
    field public static final long L_CLAMP = 4295032853L; // 0x100010015L
    field public static final long L_COPY_SIGN = 4295032844L; // 0x10001000cL
    field public static final long L_DECR = 4295032850L; // 0x100010012L
    field public static final long L_DIV = 4295032836L; // 0x100010004L
    field public static final long L_IFELSE = 4295032854L; // 0x100010016L
    field public static final long L_INCR = 4295032849L; // 0x100010011L
    field public static final long L_MAD = 4295032855L; // 0x100010017L
    field public static final long L_MAX = 4295032846L; // 0x10001000eL
    field public static final long L_MIN = 4295032845L; // 0x10001000dL
    field public static final long L_MOD = 4295032837L; // 0x100010005L
    field public static final long L_MUL = 4295032835L; // 0x100010003L
    field public static final long L_NEG = 4295032847L; // 0x10001000fL
    field public static final long L_NOT = 4295032851L; // 0x100010013L
    field public static final long L_OR = 4295032841L; // 0x100010009L
    field public static final long L_SHL = 4295032838L; // 0x100010006L
    field public static final long L_SHR = 4295032839L; // 0x100010007L
    field public static final long L_SIGN = 4295032852L; // 0x100010014L
    field public static final long L_SUB = 4295032834L; // 0x100010002L
    field public static final long L_USHR = 4295032840L; // 0x100010008L
    field public static final long L_VAR1 = 4295032856L; // 0x100010018L
    field public static final long L_VAR2 = 4295032857L; // 0x100010019L
    field public static final long L_XOR = 4295032843L; // 0x10001000bL
    field public static final int PROPAGATE_ANIMATION = 4096; // 0x1000
    field public static final int SNAP_WHEN_LESS = 1024; // 0x400
    field public static final int SNAP_WHEN_MORE = 2048; // 0x800
    field public static final byte STOP_ABSOLUTE_POS = 6; // 0x6
    field public static final byte STOP_ENDS = 2; // 0x2
    field public static final byte STOP_GENTLY = 0; // 0x0
    field public static final byte STOP_INSTANTLY = 1; // 0x1
    field public static final byte STOP_NOTCHES_ABSOLUTE = 5; // 0x5
    field public static final byte STOP_NOTCHES_EVEN = 3; // 0x3
    field public static final byte STOP_NOTCHES_PERCENTS = 4; // 0x4
    field public static final float TIME_IN_CONTINUOUS_SEC;
    field protected androidx.compose.remote.core.RemoteComposeBuffer mBuffer;
    field protected int mMaxValidFloatExpressionOperation;
    field protected androidx.compose.remote.creation.Painter mPainter;
    field protected androidx.compose.remote.core.Platform mPlatform;
    field protected androidx.compose.remote.core.RemoteComposeState mState;
  }

  public static class RemoteComposeWriter.DataMap {
  }

  public static class RemoteComposeWriter.HTag {
    ctor public RemoteComposeWriter.HTag(Short, Object);
  }

  public interface RemoteComposeWriterInterface {
    method public void run();
  }

  public class RemotePath {
    ctor public RemotePath();
    ctor public RemotePath(String);
    method public void addArc(android.graphics.RectF, float, float);
    method public void addArc(float, float, float, float, float, float);
    method public void addArc(float, float, float, float, float, float, boolean);
    method public void arcTo(android.graphics.RectF, float, float);
    method public void arcTo(android.graphics.RectF, float, float, boolean);
    method public void arcTo(float, float, float, float, float, float, boolean);
    method public void close();
    method public void conicTo(float, float, float, float, float);
    method public static androidx.compose.remote.creation.RemotePath createCirclePath(androidx.compose.remote.creation.RemoteComposeWriter, float, float, float);
    method public float[] createFloatArray();
    method public void cubicTo(float, float, float, float, float, float);
    method public float getCurrentX();
    method public float getCurrentY();
    method public android.graphics.Path getPath();
    method public void incReserve(int);
    method public boolean isEmpty();
    method public void lineTo(float, float);
    method public void moveTo(float, float);
    method public void quadTo(float, float, float, float);
    method public void rConicTo(float, float, float, float, float);
    method public void rCubicTo(float, float, float, float, float, float);
    method public void rLineTo(float, float);
    method public void rMoveTo(float, float);
    method public void rQuadTo(float, float, float, float);
    method public void reset();
    method public void rewind();
    method public void transform(android.graphics.Matrix);
    field public static final int CLOSE = 15; // 0xf
    field public static final float CLOSE_NAN;
    field public static final int CONIC = 13; // 0xd
    field public static final float CONIC_NAN;
    field public static final int CUBIC = 14; // 0xe
    field public static final float CUBIC_NAN;
    field public static final int DONE = 16; // 0x10
    field public static final float DONE_NAN;
    field public static final int LINE = 11; // 0xb
    field public static final float LINE_NAN;
    field public static final int MOVE = 10; // 0xa
    field public static final float MOVE_NAN;
    field public static final int QUADRATIC = 12; // 0xc
    field public static final float QUADRATIC_NAN;
  }

}

package androidx.compose.remote.creation.actions {

  public interface Action {
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class HostAction implements androidx.compose.remote.creation.actions.Action {
    ctor public HostAction(int);
    ctor public HostAction(int, int);
    ctor public HostAction(String);
    ctor public HostAction(String, int, int);
    method public String? getActionName();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class ValueFloatChange implements androidx.compose.remote.creation.actions.Action {
    ctor public ValueFloatChange(int, float);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class ValueFloatExpressionChange implements androidx.compose.remote.creation.actions.Action {
    ctor public ValueFloatExpressionChange(int, int);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class ValueIntegerChange implements androidx.compose.remote.creation.actions.Action {
    ctor public ValueIntegerChange(int, int);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class ValueIntegerExpressionChange implements androidx.compose.remote.creation.actions.Action {
    ctor public ValueIntegerExpressionChange(long, long);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class ValueStringChange implements androidx.compose.remote.creation.actions.Action {
    ctor public ValueStringChange(int, String);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

}

package androidx.compose.remote.creation.modifiers {

  public class AnimateSpecModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public AnimateSpecModifier(int, float, int, float, int, androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION, androidx.compose.remote.core.operations.layout.animation.AnimationSpec.ANIMATION);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class BackgroundModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public BackgroundModifier(android.graphics.Shader?, int);
    method public android.graphics.Shader? getShader();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class BorderModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public BorderModifier(float, float, int, int);
    method public int getColor();
    method public float getRoundedCorner();
    method public int getShapeType();
    method public float getWidth();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class CircleShape extends androidx.compose.remote.creation.modifiers.Shape {
    ctor public CircleShape();
  }

  public class ClickActionModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public ClickActionModifier(java.util.List<androidx.compose.remote.creation.actions.Action!>);
    method public java.util.List<androidx.compose.remote.creation.actions.Action!> getActions();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class ClipModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public ClipModifier(androidx.compose.remote.creation.modifiers.Shape);
    method public androidx.compose.remote.creation.modifiers.Shape getShape();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class CollapsiblePriorityModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public CollapsiblePriorityModifier(int, float);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
    field public static final int HORIZONTAL = 0; // 0x0
    field public static final int VERTICAL = 1; // 0x1
  }

  public class DrawWithContentModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public DrawWithContentModifier();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class GraphicsLayerModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public GraphicsLayerModifier();
    method public void setFloatAttribute(int, float);
    method public void setIntAttribute(int, int);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class HeightInModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public HeightInModifier(float, float);
    method public float getMax();
    method public float getMin();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class HeightModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public HeightModifier(androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type);
    ctor public HeightModifier(androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type, float);
    ctor public HeightModifier(float);
    method public androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type getType();
    method public float getValue();
    method public void update(androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type, float);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class MarqueeModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public MarqueeModifier(int, int, float, float, float, float);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class OffsetModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public OffsetModifier(float, float);
    method public float getX();
    method public float getY();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class PaddingModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public PaddingModifier(float, float, float, float);
    method public float getBottom();
    method public float getLeft();
    method public float getRight();
    method public float getTop();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class RecordingModifier {
    ctor public RecordingModifier();
    method public androidx.compose.remote.creation.modifiers.RecordingModifier background(int);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier border(float, float, int, int);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier clip(androidx.compose.remote.creation.modifiers.Shape);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier collapsiblePriority(int, float);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier componentId(int);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier fillMaxHeight();
    method public androidx.compose.remote.creation.modifiers.RecordingModifier fillMaxSize();
    method public androidx.compose.remote.creation.modifiers.RecordingModifier fillMaxWidth();
    method public <T extends androidx.compose.remote.creation.modifiers.RecordingModifier.Element> T? find(Class<T!>);
    method public int getComponentId();
    method public boolean getFillMaxHeight();
    method public boolean getFillMaxWidth();
    method public float getHorizontalWeight();
    method public java.util.List<androidx.compose.remote.creation.modifiers.RecordingModifier.Element!> getList();
    method public float getSpacedBy();
    method public float getVerticalWeight();
    method public androidx.compose.remote.creation.modifiers.RecordingModifier height(int);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier heightIn(float, float);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier horizontalWeight(float);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier onClick(androidx.compose.remote.creation.actions.Action!...);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier onTouchCancel(androidx.compose.remote.creation.actions.Action!...);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier onTouchDown(androidx.compose.remote.creation.actions.Action!...);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier onTouchUp(androidx.compose.remote.creation.actions.Action!...);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier padding(int);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier padding(int, int, int, int);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier size(int);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier size(int, int);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier spacedBy(float);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier then(androidx.compose.remote.creation.modifiers.RecordingModifier);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier then(androidx.compose.remote.creation.modifiers.RecordingModifier.Element);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier verticalWeight(float);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier visibility(int);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier width(int);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier widthIn(float, float);
    method public androidx.compose.remote.creation.modifiers.RecordingModifier wrapContentSize();
    method public void write(androidx.compose.remote.core.RemoteComposeBuffer);
  }

  public static interface RecordingModifier.Element {
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class RectShape extends androidx.compose.remote.creation.modifiers.Shape {
    ctor public RectShape(float, float, float, float);
    method public float getBottom();
    method public float getLeft();
    method public float getRight();
    method public float getTop();
  }

  public class RippleModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public RippleModifier();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class RoundedRectShape extends androidx.compose.remote.creation.modifiers.Shape {
    ctor public RoundedRectShape(float, float, float, float);
    method public float getBottomEnd();
    method public float getBottomStart();
    method public float getTopEnd();
    method public float getTopStart();
  }

  public class ScrollModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public ScrollModifier(int, float, int);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
    field public static final int HORIZONTAL = 1; // 0x1
    field public static final int VERTICAL = 0; // 0x0
  }

  public class SemanticsModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public SemanticsModifier(androidx.compose.remote.core.semantics.AccessibilityModifier);
    method public androidx.compose.remote.core.semantics.AccessibilityModifier getSemantics();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class Shape {
    ctor public Shape();
  }

  public class TouchActionModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public TouchActionModifier(int, java.util.List<androidx.compose.remote.creation.actions.Action!>);
    method public java.util.List<androidx.compose.remote.creation.actions.Action!> getActions();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
    field public static final int CANCEL = 2; // 0x2
    field public static final int DOWN = 0; // 0x0
    field public static final int UP = 1; // 0x1
  }

  public class UnsupportedModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public UnsupportedModifier(String);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class VisibilityModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public VisibilityModifier(int);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class WidthInModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public WidthInModifier(float, float);
    method public float getMax();
    method public float getMin();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class WidthModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public WidthModifier(androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type);
    ctor public WidthModifier(androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type, float);
    ctor public WidthModifier(float);
    method public androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type getType();
    method public float getValue();
    method public void update(androidx.compose.remote.core.operations.layout.modifiers.DimensionModifierOperation.Type, float);
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

  public class ZIndexModifier implements androidx.compose.remote.creation.modifiers.RecordingModifier.Element {
    ctor public ZIndexModifier(float);
    method public float getValue();
    method public void write(androidx.compose.remote.creation.RemoteComposeWriter);
  }

}

package androidx.compose.remote.creation.platform {

  public class AndroidxPlatformServices implements androidx.compose.remote.core.Platform {
    ctor public AndroidxPlatformServices();
    ctor public AndroidxPlatformServices(optional androidx.compose.remote.creation.platform.RCLogger logger);
    method public int getImageHeight(Object image);
    method public int getImageWidth(Object image);
    method public byte[]? imageToByteArray(Object image);
    method public boolean isAlpha8Image(Object image);
    method public void log(androidx.compose.remote.core.Platform.LogCategory category, String message);
    method public float[]? pathToFloatArray(Object path);
  }

  public interface RCLogger {
    method public void log(androidx.compose.remote.core.Platform.LogCategory category, String message);
  }

  public static final class RCLogger.AndroidLog implements androidx.compose.remote.creation.platform.RCLogger {
    method public String getTag();
    method public void log(androidx.compose.remote.core.Platform.LogCategory category, String message);
    property public String Tag;
    field public static final androidx.compose.remote.creation.platform.RCLogger.AndroidLog INSTANCE;
  }

  public static final class RCLogger.None implements androidx.compose.remote.creation.platform.RCLogger {
    method public void log(androidx.compose.remote.core.Platform.LogCategory category, String message);
    field public static final androidx.compose.remote.creation.platform.RCLogger.None INSTANCE;
  }

}

package androidx.compose.remote.creation.profile {

  public class Profile {
    ctor public Profile(int, int, androidx.compose.remote.core.Platform, androidx.compose.remote.creation.profile.ProfileFactory);
    ctor public Profile(int, int, androidx.compose.remote.core.Platform, java.util.function.Supplier<java.util.Set<java.lang.Integer!>!>, androidx.compose.remote.creation.profile.ProfileFactory);
    method public androidx.compose.remote.creation.RemoteComposeWriter create(int, int, String);
    method public int getApiLevel();
    method public int getOperationsProfiles();
    method public androidx.compose.remote.core.Platform getPlatform();
    method public androidx.compose.remote.creation.profile.ProfileFactory getProfileFactory();
    method @RequiresApi(24) public java.util.Set<java.lang.Integer!>? getSupportedOperations();
    field public static androidx.compose.remote.creation.profile.Profile ANDROIDX;
    field public static androidx.compose.remote.creation.profile.Profile WIDGETS_V6;
  }

  public interface ProfileFactory {
    method public androidx.compose.remote.creation.RemoteComposeWriter create(int, int, String, androidx.compose.remote.creation.profile.Profile);
  }

  public class WidgetsProfileWriterV6 extends androidx.compose.remote.creation.RemoteComposeWriter {
    ctor public WidgetsProfileWriterV6(int, int, String, androidx.compose.remote.creation.profile.Profile);
  }

}

