<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.11.0-alpha10" type="baseline" client="gradle" dependencies="false" name="AGP (8.11.0-alpha10)" variant="all" version="8.11.0-alpha10">

    <issue
        id="CheckResult"
        message="The result of `isWithin` is not used"
        errorLine1="                    assertThat((it - expected).x).isWithin(0.01f)"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/Scrollable2DTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `isWithin` is not used"
        errorLine1="                    assertThat((it - expected).y).isWithin(0.01f)"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/Scrollable2DTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `isWithin` is not used"
        errorLine1="                assertThat((consumed - expectedConsumed).x).isWithin(0.001f)"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/Scrollable2DTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `isWithin` is not used"
        errorLine1="                assertThat((consumed - expectedConsumed).y).isWithin(0.001f)"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/Scrollable2DTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `isWithin` is not used"
        errorLine1="                    assertThat(it - expected).isWithin(0.01f)"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/ScrollableTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `isWithin` is not used"
        errorLine1="                assertThat(consumed.x - expectedConsumed).isWithin(0.001f)"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/ScrollableTest.kt"/>
    </issue>

    <issue
        id="CheckResult"
        message="The result of `assertThat` is not used"
        errorLine1="            assertThat(texts.isEmpty())"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidUnitTest/kotlin/androidx/compose/foundation/text/input/TextFieldStateTest.kt"/>
    </issue>

    <issue
        id="LambdaStructuralEquality"
        message="Checking lambdas for structural equality, instead of checking for referential equality"
        errorLine1="        if (onAttach != other.onAttach) return false"
        errorLine2="                     ~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/ClickableTest.kt"/>
    </issue>

    <issue
        id="LambdaStructuralEquality"
        message="Checking lambdas for structural equality, instead of checking for referential equality"
        errorLine1="        if (onDraw != other.onDraw) return false"
        errorLine2="                   ~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/IndicationTest.kt"/>
    </issue>

    <issue
        id="LambdaStructuralEquality"
        message="Checking lambdas for structural equality, instead of checking for referential equality"
        errorLine1="        if (onCreate != other.onCreate) return false"
        errorLine2="                     ~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/IndicationTest.kt"/>
    </issue>

    <issue
        id="LambdaStructuralEquality"
        message="Checking lambdas for structural equality, instead of checking for referential equality"
        errorLine1="        if (hasScrollableBlock != other.hasScrollableBlock) return false"
        errorLine2="                               ~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/ScrollableTest.kt"/>
    </issue>

    <issue
        id="CoroutineCreationDuringComposition"
        message="Calls to launch should happen inside a LaunchedEffect and not composition"
        errorLine1="            rememberCoroutineScope().launch(start = CoroutineStart.UNDISPATCHED) {"
        errorLine2="                                     ~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/selection/SelectionContainerTest.kt"/>
    </issue>

    <issue
        id="CoroutineCreationDuringComposition"
        message="Calls to launch should happen inside a LaunchedEffect and not composition"
        errorLine1="            rememberCoroutineScope().launch(start = CoroutineStart.UNDISPATCHED) {"
        errorLine2="                                     ~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/selection/SelectionContainerTest.kt"/>
    </issue>

    <issue
        id="InvalidLanguageTagDelimiter"
        message="A hyphen (-), not an underscore (_) delimiter should be used in a language tag"
        errorLine1="                    TransformedText(text.toUpperCase(LocaleList(&quot;en_US&quot;)), OffsetMapping.Identity)"
        errorLine2="                                                                ~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/textfield/TextFieldTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="    internal fun &lt;T> createAnchoredDraggableModifier("
        errorLine2="                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/anchoredDraggable/AnchoredDraggableBackwardsCompatibleTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="    fun LazyItemScope.fillParentMaxMainAxis() ="
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/lazy/list/BaseLazyListTestWithOrientation.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="    fun LazyItemScope.fillParentMaxCrossAxis() ="
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/lazy/list/BaseLazyListTestWithOrientation.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="    private fun createSubject(text: AnnotatedString): TextAnnotatedStringElement {"
        errorLine2="                ~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/modifiers/TextAnnotatedStringContentCaptureInvalidationTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryExtensionFunction"
        message="Modifier factory functions should be extensions on Modifier"
        errorLine1="    private fun createSubject(text: String): TextStringSimpleElement {"
        errorLine2="                ~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/modifiers/TextStringContentCaptureTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryReturnType"
        message="Modifier factory functions should have a return type of Modifier"
        errorLine1="    private fun createSubject(text: AnnotatedString): TextAnnotatedStringElement {"
        errorLine2="                ~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/modifiers/TextAnnotatedStringContentCaptureInvalidationTest.kt"/>
    </issue>

    <issue
        id="ModifierFactoryReturnType"
        message="Modifier factory functions should have a return type of Modifier"
        errorLine1="    private fun createSubject(text: String): TextStringSimpleElement {"
        errorLine2="                ~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/modifiers/TextStringContentCaptureTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="        modifier: Modifier = Modifier,"
        errorLine2="        ~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/pager/BasePagerTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be named modifier"
        errorLine1="    private fun TestMarqueeContent(marqueeModifier: Modifier) {"
        errorLine2="                                   ~~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/BasicMarqueeTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="        modifier: Modifier = Modifier,"
        errorLine2="        ~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/contextmenu/ContextMenuAreaTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="        modifier: Modifier = Modifier,"
        errorLine2="        ~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/contextmenu/ContextMenuAreaTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="        modifier: Modifier = Modifier.testTag(tag),"
        errorLine2="        ~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/contextmenu/ContextMenuUiTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Optional Modifier parameter should have a default value of `Modifier`"
        errorLine1="        modifier: Modifier = Modifier.testTag(tag),"
        errorLine2="        ~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/contextmenu/ContextMenuUiTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="        modifier: Modifier = Modifier,"
        errorLine2="        ~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/pager/SingleParamBasePagerTest.kt"/>
    </issue>

    <issue
        id="ModifierParameter"
        message="Modifier parameter should be the first optional parameter"
        errorLine1="        modifier: Modifier = Modifier,"
        errorLine2="        ~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/pager/SingleParamBasePagerTest.kt"/>
    </issue>

    <issue
        id="UnnecessaryComposedModifier"
        message="Unnecessary use of Modifier.composed"
        errorLine1="                    Modifier.fillMaxSize().testTag(PagerTestTag).composed {"
        errorLine2="                                                                 ~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/pager/PagerTest.kt"/>
    </issue>

    <issue
        id="UnrememberedMutableState"
        message="Creating a state object during composition without using `remember`"
        errorLine1="        texts = derivedStateOf {"
        errorLine2="                ~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/selection/gestures/MultiTextSelectionGesturesBidiTest.kt"/>
    </issue>

    <issue
        id="UnrememberedMutableState"
        message="Creating a state object during composition without using `remember`"
        errorLine1="        textContentIndices = derivedStateOf { texts.value.textContentIndices() }"
        errorLine2="                             ~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/selection/gestures/MultiTextSelectionGesturesBidiTest.kt"/>
    </issue>

    <issue
        id="UnrememberedMutableState"
        message="Creating a state object during composition without using `remember`"
        errorLine1="        texts = derivedStateOf {"
        errorLine2="                ~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/selection/gestures/MultiTextSelectionGesturesRtlTest.kt"/>
    </issue>

    <issue
        id="UnrememberedMutableState"
        message="Creating a state object during composition without using `remember`"
        errorLine1="        textContentIndices = derivedStateOf { texts.value.textContentIndices() }"
        errorLine2="                             ~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/selection/gestures/MultiTextSelectionGesturesRtlTest.kt"/>
    </issue>

    <issue
        id="UnrememberedMutableState"
        message="Creating a state object during composition without using `remember`"
        errorLine1="        texts = derivedStateOf {"
        errorLine2="                ~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/selection/gestures/MultiTextSelectionGesturesTest.kt"/>
    </issue>

    <issue
        id="UnrememberedMutableState"
        message="Creating a state object during composition without using `remember`"
        errorLine1="        textContentIndices = derivedStateOf { texts.value.textContentIndices() }"
        errorLine2="                             ~~~~~~~~~~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/selection/gestures/MultiTextSelectionGesturesTest.kt"/>
    </issue>

    <issue
        id="UnusedBoxWithConstraintsScope"
        message="BoxWithConstraints scope is not used"
        errorLine1="                    BoxWithConstraints {"
        errorLine2="                                       ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/ClickableTest.kt"/>
    </issue>

    <issue
        id="UnusedBoxWithConstraintsScope"
        message="BoxWithConstraints scope is not used"
        errorLine1="                    BoxWithConstraints {"
        errorLine2="                                       ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/CombinedClickableTest.kt"/>
    </issue>

    <issue
        id="UnusedBoxWithConstraintsScope"
        message="BoxWithConstraints scope is not used"
        errorLine1="                    BoxWithConstraints {"
        errorLine2="                                       ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/modifiers/TextAnnotatedStringNodeTest.kt"/>
    </issue>

    <issue
        id="UnusedBoxWithConstraintsScope"
        message="BoxWithConstraints scope is not used"
        errorLine1="                    BoxWithConstraints {"
        errorLine2="                                       ^">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/modifiers/TextStringSimpleNodeTest.kt"/>
    </issue>

    <issue
        id="AutoboxingStateValueProperty"
        message="Reading `value` will cause an autoboxing operation. Use `intValue` to avoid unnecessary allocations."
        errorLine1="            val stateValue = state.value"
        errorLine2="                                   ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/input/TextFieldKeyEventTest.kt"/>
    </issue>

    <issue
        id="AutoboxingStateValueProperty"
        message="Assigning `value` will cause an autoboxing operation. Use `intValue` to avoid unnecessary allocations."
        errorLine1="            state.value += 1"
        errorLine2="                  ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/foundation/text/input/TextFieldKeyEventTest.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable pinnedItems with type List&lt;? extends Integer>: replace with IntList"
        errorLine1="            val pinnedItems ="
        errorLine2="            ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGrid.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of calculateCrossAxisCellSizes: replace with IntList"
        errorLine1="    fun Density.calculateCrossAxisCellSizes(availableSize: Int, spacing: Int): List&lt;Int>"
        errorLine2="                                                                               ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridDsl.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of calculateCellsCrossAxisSizeImpl: replace with IntList"
        errorLine1="): List&lt;Int> {"
        errorLine2="   ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridDsl.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method measureLazyGrid has parameter pinnedItems with type List&lt;Integer>: replace with IntList"
        errorLine1="    pinnedItems: List&lt;Int>,"
        errorLine2="                 ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridMeasure.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method calculateExtraItems has parameter pinnedItems with type List&lt;Integer>: replace with IntList"
        errorLine1="    pinnedItems: List&lt;Int>,"
        errorLine2="                 ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridMeasure.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="constructor LazyGridMeasuredLine has parameter spans with type List&lt;GridItemSpan>: replace with LongList"
        errorLine1="    private val spans: List&lt;GridItemSpan>,"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridMeasuredLine.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field spans with type List&lt;GridItemSpan>: replace with LongList"
        errorLine1="    private val spans: List&lt;GridItemSpan>,"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridMeasuredLine.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method createLine has parameter spans with type List&lt;GridItemSpan>: replace with LongList"
        errorLine1="        spans: List&lt;GridItemSpan>,"
        errorLine2="               ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridMeasuredLineProvider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="constructor LineConfiguration has parameter spans with type List&lt;GridItemSpan>: replace with LongList"
        errorLine1="    class LineConfiguration(val firstItemIndex: Int, val spans: List&lt;GridItemSpan>)"
        errorLine2="                                                                ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridSpanLayoutProvider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field spans with type List&lt;GridItemSpan>: replace with LongList"
        errorLine1="    class LineConfiguration(val firstItemIndex: Int, val spans: List&lt;GridItemSpan>)"
        errorLine2="                                                                ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridSpanLayoutProvider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;GridItemSpan> of getSpans: replace with LongList"
        errorLine1="    class LineConfiguration(val firstItemIndex: Int, val spans: List&lt;GridItemSpan>)"
        errorLine2="                                                                ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridSpanLayoutProvider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field cachedBucket with type List&lt;Integer>: replace with IntList"
        errorLine1="    /**"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridSpanLayoutProvider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field previousDefaultSpans with type List&lt;GridItemSpan>: replace with LongList"
        errorLine1="    /** List of 1x1 spans if we do not have custom spans. */"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridSpanLayoutProvider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;GridItemSpan> of getDefaultSpans: replace with LongList"
        errorLine1="    private fun getDefaultSpans(currentSlotsPerLine: Int) ="
        errorLine2="                ~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridSpanLayoutProvider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable spans with type List&lt;GridItemSpan>: replace with LongList"
        errorLine1="        val spans = mutableListOf&lt;GridItemSpan>()"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/grid/LazyGridSpanLayoutProvider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of calculateLazyLayoutPinnedIndices: replace with IntList"
        errorLine1="): List&lt;Int> {"
        errorLine2="   ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/layout/LazyLayoutBeyondBoundsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable pinnedItems with type List&lt;Integer>: replace with IntList"
        errorLine1="        val pinnedItems = mutableListOf&lt;Int>()"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/layout/LazyLayoutBeyondBoundsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable pinnedItems with type List&lt;? extends Integer>: replace with IntList"
        errorLine1="            val pinnedItems ="
        errorLine2="            ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/LazyList.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method measureLazyList has parameter pinnedItems with type List&lt;Integer>: replace with IntList"
        errorLine1="    pinnedItems: List&lt;Int>,"
        errorLine2="                 ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/LazyListMeasure.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method createItemsAfterList has parameter pinnedItems with type List&lt;Integer>: replace with IntList"
        errorLine1="    pinnedItems: List&lt;Int>,"
        errorLine2="                 ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/LazyListMeasure.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method createItemsBeforeList has parameter pinnedItems with type List&lt;Integer>: replace with IntList"
        errorLine1="    pinnedItems: List&lt;Int>,"
        errorLine2="                 ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/LazyListMeasure.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method measureStaggeredGrid has parameter pinnedItems with type List&lt;Integer>: replace with IntList"
        errorLine1="    pinnedItems: List&lt;Int>,"
        errorLine2="                 ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/staggeredgrid/LazyStaggeredGridMeasure.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="constructor LazyStaggeredGridMeasureContext has parameter pinnedItems with type List&lt;Integer>: replace with IntList"
        errorLine1="    val pinnedItems: List&lt;Int>,"
        errorLine2="                     ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/staggeredgrid/LazyStaggeredGridMeasure.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field pinnedItems with type List&lt;Integer>: replace with IntList"
        errorLine1="    val pinnedItems: List&lt;Int>,"
        errorLine2="                     ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/staggeredgrid/LazyStaggeredGridMeasure.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of getPinnedItems: replace with IntList"
        errorLine1="    val pinnedItems: List&lt;Int>,"
        errorLine2="                     ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/staggeredgrid/LazyStaggeredGridMeasure.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable pinnedItems with type List&lt;? extends Integer>: replace with IntList"
        errorLine1="            val pinnedItems ="
        errorLine2="            ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/staggeredgrid/LazyStaggeredGridMeasurePolicy.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field currentItemPrefetchHandles with type Map&lt;Integer, PrefetchHandle>: replace with IntObjectMap"
        errorLine1="    private val currentItemPrefetchHandles = mutableMapOf&lt;Int, PrefetchHandle>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/staggeredgrid/LazyStaggeredGridState.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable prefetchHandlesUsed with type Set&lt;Integer>: replace with IntSet"
        errorLine1="            val prefetchHandlesUsed = mutableSetOf&lt;Int>()"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/staggeredgrid/LazyStaggeredGridState.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method clearLeftoverPrefetchHandles has parameter prefetchHandlesUsed with type Set&lt;Integer>: replace with IntSet"
        errorLine1="    private fun clearLeftoverPrefetchHandles(prefetchHandlesUsed: Set&lt;Int>) {"
        errorLine2="                                                                  ~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/lazy/staggeredgrid/LazyStaggeredGridState.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method measurePager has parameter pinnedPages with type List&lt;Integer>: replace with IntList"
        errorLine1="    pinnedPages: List&lt;Int>,"
        errorLine2="                 ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/pager/PagerMeasure.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method createPagesAfterList has parameter pinnedPages with type List&lt;Integer>: replace with IntList"
        errorLine1="    pinnedPages: List&lt;Int>,"
        errorLine2="                 ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/pager/PagerMeasure.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method createPagesBeforeList has parameter pinnedPages with type List&lt;Integer>: replace with IntList"
        errorLine1="    pinnedPages: List&lt;Int>,"
        errorLine2="                 ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/pager/PagerMeasure.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable pinnedPages with type List&lt;? extends Integer>: replace with IntList"
        errorLine1="            val pinnedPages ="
        errorLine2="            ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/foundation/pager/PagerMeasurePolicy.kt"/>
    </issue>

</issues>
