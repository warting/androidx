// Signature format: 4.0
package androidx.compose.foundation {

  public interface AndroidExternalSurfaceScope {
    method public void onSurface(kotlin.jvm.functions.Function5<? super androidx.compose.foundation.SurfaceCoroutineScope,? super android.view.Surface,? super java.lang.Integer,? super java.lang.Integer,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> onSurface);
  }

  @kotlin.jvm.JvmInline public final value class AndroidExternalSurfaceZOrder {
    method @BytecodeOnly public static androidx.compose.foundation.AndroidExternalSurfaceZOrder! box-impl(int);
    method public int getZOrder();
    method @BytecodeOnly public int unbox-impl();
    property public int zOrder;
    field public static final androidx.compose.foundation.AndroidExternalSurfaceZOrder.Companion Companion;
  }

  public static final class AndroidExternalSurfaceZOrder.Companion {
    method @BytecodeOnly public int getBehind-B_4ceCc();
    method @BytecodeOnly public int getMediaOverlay-B_4ceCc();
    method @BytecodeOnly public int getOnTop-B_4ceCc();
    property public androidx.compose.foundation.AndroidExternalSurfaceZOrder Behind;
    property public androidx.compose.foundation.AndroidExternalSurfaceZOrder MediaOverlay;
    property public androidx.compose.foundation.AndroidExternalSurfaceZOrder OnTop;
  }

  public final class AndroidExternalSurface_androidKt {
    method @KotlinOnly @androidx.compose.runtime.Composable public static void AndroidEmbeddedExternalSurface(optional androidx.compose.ui.Modifier modifier, optional boolean isOpaque, optional androidx.compose.ui.unit.IntSize surfaceSize, optional androidx.compose.ui.graphics.Matrix? transform, kotlin.jvm.functions.Function1<androidx.compose.foundation.AndroidExternalSurfaceScope,kotlin.Unit> onInit);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void AndroidEmbeddedExternalSurface-sv6N_fY(androidx.compose.ui.Modifier?, boolean, long, float[]?, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.AndroidExternalSurfaceScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @KotlinOnly @androidx.compose.runtime.Composable public static void AndroidExternalSurface(optional androidx.compose.ui.Modifier modifier, optional boolean isOpaque, optional androidx.compose.ui.unit.IntSize surfaceSize, optional androidx.compose.foundation.AndroidExternalSurfaceZOrder zOrder, optional boolean isSecure, kotlin.jvm.functions.Function1<androidx.compose.foundation.AndroidExternalSurfaceScope,kotlin.Unit> onInit);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void AndroidExternalSurface-58FFMhA(androidx.compose.ui.Modifier?, boolean, long, int, boolean, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.AndroidExternalSurfaceScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  public final class AndroidOverscroll_androidKt {
    method @KotlinOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.OverscrollFactory rememberPlatformOverscrollFactory(optional androidx.compose.ui.graphics.Color glowColor, optional androidx.compose.foundation.layout.PaddingValues glowDrawPadding);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.OverscrollFactory rememberPlatformOverscrollFactory-3J-VO9M(long, androidx.compose.foundation.layout.PaddingValues?, androidx.compose.runtime.Composer?, int, int);
  }

  public final class BackgroundKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier background(androidx.compose.ui.Modifier, androidx.compose.ui.graphics.Brush brush, optional androidx.compose.ui.graphics.Shape shape, optional @FloatRange(from=0.0, to=1.0) float alpha);
    method @KotlinOnly @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier background(androidx.compose.ui.Modifier, androidx.compose.ui.graphics.Color color, optional androidx.compose.ui.graphics.Shape shape);
    method @BytecodeOnly @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier background-bw27NRU(androidx.compose.ui.Modifier, long, androidx.compose.ui.graphics.Shape);
  }

  public final class BasicMarqueeKt {
    method @KotlinOnly public static androidx.compose.foundation.MarqueeSpacing MarqueeSpacing(androidx.compose.ui.unit.Dp spacing);
    method @BytecodeOnly public static androidx.compose.foundation.MarqueeSpacing MarqueeSpacing-0680j_4(float);
    method @KotlinOnly @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier basicMarquee(androidx.compose.ui.Modifier, optional int iterations, optional androidx.compose.foundation.MarqueeAnimationMode animationMode, optional int repeatDelayMillis, optional int initialDelayMillis, optional androidx.compose.foundation.MarqueeSpacing spacing, optional androidx.compose.ui.unit.Dp velocity);
    method @BytecodeOnly @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier basicMarquee-1Mj1MLw(androidx.compose.ui.Modifier, int, int, int, int, androidx.compose.foundation.MarqueeSpacing, float);
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public final class BasicTooltipDefaults {
    method public androidx.compose.foundation.MutatorMutex getGlobalMutatorMutex();
    property public androidx.compose.foundation.MutatorMutex GlobalMutatorMutex;
    property public static long TooltipDuration;
    field public static final androidx.compose.foundation.BasicTooltipDefaults INSTANCE;
    field public static final long TooltipDuration = 1500L; // 0x5dcL
  }

  public final class BasicTooltipKt {
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static void BasicTooltipBox(androidx.compose.ui.window.PopupPositionProvider positionProvider, kotlin.jvm.functions.Function0<kotlin.Unit> tooltip, androidx.compose.foundation.BasicTooltipState state, optional androidx.compose.ui.Modifier modifier, optional boolean focusable, optional boolean enableUserInput, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static void BasicTooltipBox(androidx.compose.ui.window.PopupPositionProvider, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.foundation.BasicTooltipState, androidx.compose.ui.Modifier?, boolean, boolean, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Stable public static androidx.compose.foundation.BasicTooltipState BasicTooltipState(optional boolean initialIsVisible, optional boolean isPersistent, optional androidx.compose.foundation.MutatorMutex mutatorMutex);
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static androidx.compose.foundation.BasicTooltipState rememberBasicTooltipState(optional boolean initialIsVisible, optional boolean isPersistent, optional androidx.compose.foundation.MutatorMutex mutatorMutex);
    method @BytecodeOnly @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static androidx.compose.foundation.BasicTooltipState rememberBasicTooltipState(boolean, boolean, androidx.compose.foundation.MutatorMutex?, androidx.compose.runtime.Composer?, int, int);
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Stable public interface BasicTooltipState {
    method public void dismiss();
    method public boolean isPersistent();
    method public boolean isVisible();
    method public void onDispose();
    method public suspend Object? show(optional androidx.compose.foundation.MutatePriority mutatePriority, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public abstract boolean isPersistent;
    property public abstract boolean isVisible;
  }

  public final class BasicTooltip_androidKt {
    method @BytecodeOnly @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static void BasicTooltipBox(androidx.compose.ui.window.PopupPositionProvider!, kotlin.jvm.functions.Function2!, androidx.compose.foundation.BasicTooltipState!, androidx.compose.ui.Modifier!, boolean, boolean, kotlin.jvm.functions.Function2!, androidx.compose.runtime.Composer!, int, int);
  }

  public final class BorderKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier border(androidx.compose.ui.Modifier, androidx.compose.foundation.BorderStroke border, optional androidx.compose.ui.graphics.Shape shape);
    method @KotlinOnly @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier border(androidx.compose.ui.Modifier, androidx.compose.ui.unit.Dp width, androidx.compose.ui.graphics.Brush brush, androidx.compose.ui.graphics.Shape shape);
    method @KotlinOnly @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier border(androidx.compose.ui.Modifier, androidx.compose.ui.unit.Dp width, androidx.compose.ui.graphics.Color color, optional androidx.compose.ui.graphics.Shape shape);
    method @BytecodeOnly @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier border-xT4_qwU(androidx.compose.ui.Modifier, float, long, androidx.compose.ui.graphics.Shape);
    method @BytecodeOnly @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier border-ziNgDLE(androidx.compose.ui.Modifier, float, androidx.compose.ui.graphics.Brush, androidx.compose.ui.graphics.Shape);
  }

  @androidx.compose.runtime.Immutable public final class BorderStroke {
    ctor @KotlinOnly public BorderStroke(androidx.compose.ui.unit.Dp width, androidx.compose.ui.graphics.Brush brush);
    ctor @BytecodeOnly public BorderStroke(float, androidx.compose.ui.graphics.Brush!, kotlin.jvm.internal.DefaultConstructorMarker!);
    method @KotlinOnly public androidx.compose.foundation.BorderStroke copy(optional androidx.compose.ui.unit.Dp width, optional androidx.compose.ui.graphics.Brush brush);
    method @BytecodeOnly public androidx.compose.foundation.BorderStroke copy-D5KLDUw(float, androidx.compose.ui.graphics.Brush);
    method public androidx.compose.ui.graphics.Brush getBrush();
    method @BytecodeOnly public float getWidth-D9Ej5fM();
    property public androidx.compose.ui.graphics.Brush brush;
    property public androidx.compose.ui.unit.Dp width;
  }

  public final class BorderStrokeKt {
    method @KotlinOnly @androidx.compose.runtime.Stable public static androidx.compose.foundation.BorderStroke BorderStroke(androidx.compose.ui.unit.Dp width, androidx.compose.ui.graphics.Color color);
    method @BytecodeOnly @androidx.compose.runtime.Stable public static androidx.compose.foundation.BorderStroke BorderStroke-cXLIe8U(float, long);
  }

  public final class CanvasKt {
    method @androidx.compose.runtime.Composable public static void Canvas(androidx.compose.ui.Modifier modifier, String contentDescription, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit> onDraw);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void Canvas(androidx.compose.ui.Modifier, String, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.DrawScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int);
    method @androidx.compose.runtime.Composable public static void Canvas(androidx.compose.ui.Modifier modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit> onDraw);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void Canvas(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.DrawScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int);
  }

  public final class CheckScrollableContainerConstraintsKt {
    method @KotlinOnly public static void checkScrollableContainerConstraints(androidx.compose.ui.unit.Constraints constraints, androidx.compose.foundation.gestures.Orientation orientation);
    method @BytecodeOnly public static void checkScrollableContainerConstraints-K40F9xA(long, androidx.compose.foundation.gestures.Orientation);
  }

  public final class ClickableKt {
    method @KotlinOnly public static androidx.compose.ui.Modifier clickable(androidx.compose.ui.Modifier, androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, androidx.compose.foundation.Indication? indication, optional boolean enabled, optional String? onClickLabel, optional androidx.compose.ui.semantics.Role? role, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
    method @KotlinOnly public static androidx.compose.ui.Modifier clickable(androidx.compose.ui.Modifier, optional boolean enabled, optional String? onClickLabel, optional androidx.compose.ui.semantics.Role? role, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
    method @BytecodeOnly public static androidx.compose.ui.Modifier clickable-O2vRcR0(androidx.compose.ui.Modifier, androidx.compose.foundation.interaction.MutableInteractionSource?, androidx.compose.foundation.Indication?, boolean, String?, androidx.compose.ui.semantics.Role?, kotlin.jvm.functions.Function0<kotlin.Unit!>);
    method @BytecodeOnly @Deprecated public static androidx.compose.ui.Modifier! clickable-XHw0xAI(androidx.compose.ui.Modifier!, boolean, String!, androidx.compose.ui.semantics.Role!, kotlin.jvm.functions.Function0!);
    method @BytecodeOnly public static androidx.compose.ui.Modifier clickable-oSLSa3U(androidx.compose.ui.Modifier, boolean, String?, androidx.compose.ui.semantics.Role?, androidx.compose.foundation.interaction.MutableInteractionSource?, kotlin.jvm.functions.Function0<kotlin.Unit!>);
    method @KotlinOnly public static androidx.compose.ui.Modifier combinedClickable(androidx.compose.ui.Modifier, androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, androidx.compose.foundation.Indication? indication, optional boolean enabled, optional String? onClickLabel, optional androidx.compose.ui.semantics.Role? role, optional String? onLongClickLabel, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onDoubleClick, optional boolean hapticFeedbackEnabled, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
    method @KotlinOnly public static androidx.compose.ui.Modifier combinedClickable(androidx.compose.ui.Modifier, optional boolean enabled, optional String? onClickLabel, optional androidx.compose.ui.semantics.Role? role, optional String? onLongClickLabel, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onDoubleClick, optional boolean hapticFeedbackEnabled, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
    method @BytecodeOnly @Deprecated public static androidx.compose.ui.Modifier! combinedClickable-XVZzFYc(androidx.compose.ui.Modifier!, androidx.compose.foundation.interaction.MutableInteractionSource!, androidx.compose.foundation.Indication!, boolean, String!, androidx.compose.ui.semantics.Role!, String!, kotlin.jvm.functions.Function0!, kotlin.jvm.functions.Function0!, kotlin.jvm.functions.Function0!);
    method @BytecodeOnly public static androidx.compose.ui.Modifier combinedClickable-auXiCPI(androidx.compose.ui.Modifier, androidx.compose.foundation.interaction.MutableInteractionSource?, androidx.compose.foundation.Indication?, boolean, String?, androidx.compose.ui.semantics.Role?, String?, kotlin.jvm.functions.Function0<kotlin.Unit!>?, kotlin.jvm.functions.Function0<kotlin.Unit!>?, boolean, kotlin.jvm.functions.Function0<kotlin.Unit!>);
    method @BytecodeOnly @Deprecated public static androidx.compose.ui.Modifier! combinedClickable-cJG_KMw(androidx.compose.ui.Modifier!, boolean, String!, androidx.compose.ui.semantics.Role!, String!, kotlin.jvm.functions.Function0!, kotlin.jvm.functions.Function0!, kotlin.jvm.functions.Function0!);
    method @BytecodeOnly @Deprecated public static androidx.compose.ui.Modifier! combinedClickable-f5TDLPQ(androidx.compose.ui.Modifier!, boolean, String!, androidx.compose.ui.semantics.Role!, String!, kotlin.jvm.functions.Function0!, kotlin.jvm.functions.Function0!, boolean, kotlin.jvm.functions.Function0!);
    method @BytecodeOnly public static androidx.compose.ui.Modifier combinedClickable-hoGz1lA(androidx.compose.ui.Modifier, boolean, String?, androidx.compose.ui.semantics.Role?, String?, kotlin.jvm.functions.Function0<kotlin.Unit!>?, kotlin.jvm.functions.Function0<kotlin.Unit!>?, boolean, androidx.compose.foundation.interaction.MutableInteractionSource?, kotlin.jvm.functions.Function0<kotlin.Unit!>);
  }

  public final class ClipScrollableContainerKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier clipScrollableContainer(androidx.compose.ui.Modifier, androidx.compose.foundation.gestures.Orientation orientation);
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public final class ComposeFoundationFlags {
    property public boolean DragGesturePickUpEnabled;
    property public boolean isAdjustPointerInputChangeOffsetForVelocityTrackerEnabled;
    property public boolean isAutomaticNestedPrefetchEnabled;
    property public boolean isCacheWindowForPagerEnabled;
    property public boolean isDetectTapGesturesImmediateCoroutineDispatchEnabled;
    property public boolean isFlingContinuationAtBoundsEnabled;
    property public boolean isKeepInViewFocusObservationChangeEnabled;
    property public boolean isMouseWheel1DAxisLockingEnabled;
    property public boolean isNewContextMenuEnabled;
    property public boolean isNonComposedClickableEnabled;
    property public boolean isNonSuspendingPointerInputInClickableEnabled;
    property public boolean isNonSuspendingPointerInputInDraggableEnabled;
    property public boolean isOnScrollChangedCallbackEnabled;
    property public boolean isPausableCompositionInPrefetchEnabled;
    property public boolean isSmartSelectionEnabled;
    property public boolean isTextFieldDpadNavigationEnabled;
    field public static boolean DragGesturePickUpEnabled;
    field public static final androidx.compose.foundation.ComposeFoundationFlags INSTANCE;
    field public static boolean isAdjustPointerInputChangeOffsetForVelocityTrackerEnabled;
    field public static boolean isAutomaticNestedPrefetchEnabled;
    field public static boolean isCacheWindowForPagerEnabled;
    field public static boolean isDetectTapGesturesImmediateCoroutineDispatchEnabled;
    field public static boolean isFlingContinuationAtBoundsEnabled;
    field public static boolean isKeepInViewFocusObservationChangeEnabled;
    field public static boolean isMouseWheel1DAxisLockingEnabled;
    field public static boolean isNewContextMenuEnabled;
    field public static boolean isNonComposedClickableEnabled;
    field public static boolean isNonSuspendingPointerInputInClickableEnabled;
    field public static boolean isNonSuspendingPointerInputInDraggableEnabled;
    field public static boolean isOnScrollChangedCallbackEnabled;
    field public static boolean isPausableCompositionInPrefetchEnabled;
    field public static boolean isSmartSelectionEnabled;
    field public static boolean isTextFieldDpadNavigationEnabled;
  }

  public final class DarkThemeKt {
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static boolean isSystemInDarkTheme();
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ReadOnlyComposable public static boolean isSystemInDarkTheme(androidx.compose.runtime.Composer?, int);
  }

  public final class ExcludeFromSystemGestureKt {
    method @Deprecated public static androidx.compose.ui.Modifier excludeFromSystemGesture(androidx.compose.ui.Modifier);
    method @Deprecated public static androidx.compose.ui.Modifier excludeFromSystemGesture(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.layout.LayoutCoordinates,androidx.compose.ui.geometry.Rect> exclusion);
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This foundation API is experimental and is likely to change or be removed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalFoundationApi {
  }

  public final class FocusableKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier focusGroup(androidx.compose.ui.Modifier);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier focusable(androidx.compose.ui.Modifier, optional boolean enabled, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource);
  }

  public final class FocusedBoundsKt {
    method public static androidx.compose.ui.Modifier onFocusedBoundsChanged(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.layout.LayoutCoordinates?,kotlin.Unit> onPositioned);
  }

  public final class HoverableKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier hoverable(androidx.compose.ui.Modifier, androidx.compose.foundation.interaction.MutableInteractionSource interactionSource, optional boolean enabled);
  }

  public final class ImageKt {
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void Image(androidx.compose.ui.graphics.ImageBitmap!, String!, androidx.compose.ui.Modifier!, androidx.compose.ui.Alignment!, androidx.compose.ui.layout.ContentScale!, float, androidx.compose.ui.graphics.ColorFilter!, androidx.compose.runtime.Composer!, int, int);
    method @KotlinOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.NonRestartableComposable public static void Image(androidx.compose.ui.graphics.ImageBitmap bitmap, String? contentDescription, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.Alignment alignment, optional androidx.compose.ui.layout.ContentScale contentScale, optional float alpha, optional androidx.compose.ui.graphics.ColorFilter? colorFilter, optional androidx.compose.ui.graphics.FilterQuality filterQuality);
    method @androidx.compose.runtime.Composable public static void Image(androidx.compose.ui.graphics.painter.Painter painter, String? contentDescription, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.Alignment alignment, optional androidx.compose.ui.layout.ContentScale contentScale, optional float alpha, optional androidx.compose.ui.graphics.ColorFilter? colorFilter);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void Image(androidx.compose.ui.graphics.painter.Painter, String?, androidx.compose.ui.Modifier?, androidx.compose.ui.Alignment?, androidx.compose.ui.layout.ContentScale?, float, androidx.compose.ui.graphics.ColorFilter?, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.NonRestartableComposable public static void Image(androidx.compose.ui.graphics.vector.ImageVector imageVector, String? contentDescription, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.Alignment alignment, optional androidx.compose.ui.layout.ContentScale contentScale, optional float alpha, optional androidx.compose.ui.graphics.ColorFilter? colorFilter);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void Image(androidx.compose.ui.graphics.vector.ImageVector, String?, androidx.compose.ui.Modifier?, androidx.compose.ui.Alignment?, androidx.compose.ui.layout.ContentScale?, float, androidx.compose.ui.graphics.ColorFilter?, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void Image-5h-nEew(androidx.compose.ui.graphics.ImageBitmap, String?, androidx.compose.ui.Modifier?, androidx.compose.ui.Alignment?, androidx.compose.ui.layout.ContentScale?, float, androidx.compose.ui.graphics.ColorFilter?, int, androidx.compose.runtime.Composer?, int, int);
  }

  @androidx.compose.runtime.Stable public interface Indication {
    method @Deprecated @androidx.compose.runtime.Composable public default androidx.compose.foundation.IndicationInstance rememberUpdatedInstance(androidx.compose.foundation.interaction.InteractionSource interactionSource);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public default androidx.compose.foundation.IndicationInstance rememberUpdatedInstance(androidx.compose.foundation.interaction.InteractionSource, androidx.compose.runtime.Composer?, int);
  }

  @Deprecated public interface IndicationInstance {
    method @Deprecated public void drawIndication(androidx.compose.ui.graphics.drawscope.ContentDrawScope);
  }

  public final class IndicationKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.Indication> getLocalIndication();
    method public static androidx.compose.ui.Modifier indication(androidx.compose.ui.Modifier, androidx.compose.foundation.interaction.InteractionSource interactionSource, androidx.compose.foundation.Indication? indication);
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.Indication> LocalIndication;
  }

  @androidx.compose.runtime.Stable public interface IndicationNodeFactory extends androidx.compose.foundation.Indication {
    method public androidx.compose.ui.node.DelegatableNode create(androidx.compose.foundation.interaction.InteractionSource interactionSource);
    method public boolean equals(Object? other);
    method public int hashCode();
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This API is internal to library.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.CLASS, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.PROPERTY_SETTER}) public @interface InternalFoundationApi {
  }

  public final class Magnifier_androidKt {
    method @KotlinOnly public static androidx.compose.ui.Modifier magnifier(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<androidx.compose.ui.unit.Density,androidx.compose.ui.geometry.Offset> sourceCenter, optional kotlin.jvm.functions.Function1<androidx.compose.ui.unit.Density,androidx.compose.ui.geometry.Offset>? magnifierCenter, optional kotlin.jvm.functions.Function1<androidx.compose.ui.unit.DpSize,kotlin.Unit>? onSizeChanged, optional float zoom, optional androidx.compose.ui.unit.DpSize size, optional androidx.compose.ui.unit.Dp cornerRadius, optional androidx.compose.ui.unit.Dp elevation, optional boolean clip);
    method @BytecodeOnly public static androidx.compose.ui.Modifier magnifier-UpNRX3w(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.unit.Density!,androidx.compose.ui.geometry.Offset!>, kotlin.jvm.functions.Function1<? super androidx.compose.ui.unit.Density!,androidx.compose.ui.geometry.Offset!>?, kotlin.jvm.functions.Function1<? super androidx.compose.ui.unit.DpSize!,kotlin.Unit!>?, float, long, float, float, boolean);
  }

  @kotlin.jvm.JvmInline public final value class MarqueeAnimationMode {
    method @BytecodeOnly public static androidx.compose.foundation.MarqueeAnimationMode! box-impl(int);
    method @BytecodeOnly public int unbox-impl();
    field public static final androidx.compose.foundation.MarqueeAnimationMode.Companion Companion;
  }

  public static final class MarqueeAnimationMode.Companion {
    method @BytecodeOnly public int getImmediately-ZbEOnfQ();
    method @BytecodeOnly public int getWhileFocused-ZbEOnfQ();
    property public androidx.compose.foundation.MarqueeAnimationMode Immediately;
    property public androidx.compose.foundation.MarqueeAnimationMode WhileFocused;
  }

  public final class MarqueeDefaults {
    method public int getIterations();
    method public int getRepeatDelayMillis();
    method public androidx.compose.foundation.MarqueeSpacing getSpacing();
    method @BytecodeOnly public float getVelocity-D9Ej5fM();
    property public int Iterations;
    property public int RepeatDelayMillis;
    property public androidx.compose.foundation.MarqueeSpacing Spacing;
    property public androidx.compose.ui.unit.Dp Velocity;
    field public static final androidx.compose.foundation.MarqueeDefaults INSTANCE;
  }

  @androidx.compose.runtime.Stable public fun interface MarqueeSpacing {
    method public int calculateSpacing(androidx.compose.ui.unit.Density, int contentWidth, int containerWidth);
    field public static final androidx.compose.foundation.MarqueeSpacing.Companion Companion;
  }

  public static final class MarqueeSpacing.Companion {
    method public androidx.compose.foundation.MarqueeSpacing fractionOfContainer(float fraction);
  }

  public enum MutatePriority {
    enum_constant public static final androidx.compose.foundation.MutatePriority Default;
    enum_constant public static final androidx.compose.foundation.MutatePriority PreventUserInput;
    enum_constant public static final androidx.compose.foundation.MutatePriority UserInput;
  }

  @androidx.compose.runtime.Stable public final class MutatorMutex {
    ctor public MutatorMutex();
    method public suspend <R> Object? mutate(optional androidx.compose.foundation.MutatePriority priority, kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super R>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super R>);
    method public suspend <T, R> Object? mutateWith(T receiver, optional androidx.compose.foundation.MutatePriority priority, kotlin.jvm.functions.Function2<? super T,? super kotlin.coroutines.Continuation<? super R>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super R>);
    method @kotlin.PublishedApi internal boolean tryLock();
    method public inline boolean tryMutate(kotlin.jvm.functions.Function0<kotlin.Unit> block);
    method @kotlin.PublishedApi internal void unlock();
  }

  @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Stable public final class OverscrollConfiguration {
    ctor @Deprecated public OverscrollConfiguration();
    ctor @KotlinOnly @Deprecated public OverscrollConfiguration(optional androidx.compose.ui.graphics.Color glowColor, optional androidx.compose.foundation.layout.PaddingValues drawPadding);
    ctor @BytecodeOnly @Deprecated public OverscrollConfiguration(long, androidx.compose.foundation.layout.PaddingValues!, kotlin.jvm.internal.DefaultConstructorMarker!);
    method @Deprecated public androidx.compose.foundation.layout.PaddingValues getDrawPadding();
    method @BytecodeOnly @Deprecated public long getGlowColor-0d7_KjU();
    property @Deprecated public androidx.compose.foundation.layout.PaddingValues drawPadding;
    property @Deprecated public androidx.compose.ui.graphics.Color glowColor;
  }

  public final class OverscrollConfiguration_androidKt {
    method @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.OverscrollConfiguration?> getLocalOverscrollConfiguration();
    property @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.OverscrollConfiguration?> LocalOverscrollConfiguration;
  }

  @androidx.compose.runtime.Stable public interface OverscrollEffect {
    method @KotlinOnly public suspend Object? applyToFling(androidx.compose.ui.unit.Velocity velocity, kotlin.jvm.functions.Function2<androidx.compose.ui.unit.Velocity,kotlin.coroutines.Continuation<? super androidx.compose.ui.unit.Velocity>,?> performFling, kotlin.coroutines.Continuation<? super java.lang.Void>);
    method @BytecodeOnly public Object? applyToFling-BMRW4eQ(long, kotlin.jvm.functions.Function2<? super androidx.compose.ui.unit.Velocity!,? super kotlin.coroutines.Continuation<? super androidx.compose.ui.unit.Velocity!>!,? extends java.lang.Object!>, kotlin.coroutines.Continuation<? super kotlin.Unit!>);
    method @KotlinOnly public androidx.compose.ui.geometry.Offset applyToScroll(androidx.compose.ui.geometry.Offset delta, androidx.compose.ui.input.nestedscroll.NestedScrollSource source, kotlin.jvm.functions.Function1<androidx.compose.ui.geometry.Offset,androidx.compose.ui.geometry.Offset> performScroll);
    method @BytecodeOnly public long applyToScroll-Rhakbz0(long, int, kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset!,androidx.compose.ui.geometry.Offset!>);
    method @Deprecated public default androidx.compose.ui.Modifier getEffectModifier();
    method public default androidx.compose.ui.node.DelegatableNode getNode();
    method public boolean isInProgress();
    property @Deprecated public default androidx.compose.ui.Modifier effectModifier;
    property public abstract boolean isInProgress;
    property public default androidx.compose.ui.node.DelegatableNode node;
  }

  public interface OverscrollFactory {
    method public androidx.compose.foundation.OverscrollEffect createOverscrollEffect();
    method public boolean equals(Object? other);
    method public int hashCode();
  }

  public final class OverscrollKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.OverscrollFactory?> getLocalOverscrollFactory();
    method public static androidx.compose.ui.Modifier overscroll(androidx.compose.ui.Modifier, androidx.compose.foundation.OverscrollEffect? overscrollEffect);
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.OverscrollEffect? rememberOverscrollEffect();
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.OverscrollEffect? rememberOverscrollEffect(androidx.compose.runtime.Composer?, int);
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.OverscrollEffect withoutEventHandling(androidx.compose.foundation.OverscrollEffect);
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.OverscrollEffect withoutVisualEffect(androidx.compose.foundation.OverscrollEffect);
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.OverscrollFactory?> LocalOverscrollFactory;
  }

  public final class PreferKeepClear_androidKt {
    method public static androidx.compose.ui.Modifier preferKeepClear(androidx.compose.ui.Modifier);
    method public static androidx.compose.ui.Modifier preferKeepClear(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.layout.LayoutCoordinates,androidx.compose.ui.geometry.Rect> rectProvider);
  }

  public final class ProgressSemanticsKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier progressSemantics(androidx.compose.ui.Modifier);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier progressSemantics(androidx.compose.ui.Modifier, float value, optional kotlin.ranges.ClosedFloatingPointRange<java.lang.Float> valueRange, optional @IntRange(from=0L) int steps);
  }

  @androidx.compose.runtime.Stable public interface ScrollIndicatorState {
    method @IntRange(from=0L) public int getContentSize();
    method @IntRange(from=0L) public int getScrollOffset();
    method @IntRange(from=0L) public int getViewportSize();
    property @IntRange(from=0L) public abstract int contentSize;
    property @IntRange(from=0L) public abstract int scrollOffset;
    property @IntRange(from=0L) public abstract int viewportSize;
  }

  public final class ScrollKt {
    method public static androidx.compose.ui.Modifier horizontalScroll(androidx.compose.ui.Modifier, androidx.compose.foundation.ScrollState state, androidx.compose.foundation.OverscrollEffect? overscrollEffect, optional boolean enabled, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior, optional boolean reverseScrolling);
    method public static androidx.compose.ui.Modifier horizontalScroll(androidx.compose.ui.Modifier, androidx.compose.foundation.ScrollState state, optional boolean enabled, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior, optional boolean reverseScrolling);
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.ScrollState rememberScrollState(optional int initial);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.ScrollState rememberScrollState(int, androidx.compose.runtime.Composer?, int, int);
    method public static androidx.compose.ui.Modifier verticalScroll(androidx.compose.ui.Modifier, androidx.compose.foundation.ScrollState state, androidx.compose.foundation.OverscrollEffect? overscrollEffect, optional boolean enabled, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior, optional boolean reverseScrolling);
    method public static androidx.compose.ui.Modifier verticalScroll(androidx.compose.ui.Modifier, androidx.compose.foundation.ScrollState state, optional boolean enabled, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior, optional boolean reverseScrolling);
  }

  @androidx.compose.runtime.Stable public final class ScrollState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor public ScrollState(int initial);
    method public suspend Object? animateScrollTo(int value, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public float dispatchRawDelta(float delta);
    method public androidx.compose.foundation.interaction.InteractionSource getInteractionSource();
    method public int getMaxValue();
    method public int getValue();
    method public int getViewportSize();
    method public boolean isScrollInProgress();
    method public suspend Object? scroll(androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? scrollTo(int value, kotlin.coroutines.Continuation<? super java.lang.Float>);
    property public boolean canScrollBackward;
    property public boolean canScrollForward;
    property public androidx.compose.foundation.interaction.InteractionSource interactionSource;
    property public boolean isScrollInProgress;
    property public boolean lastScrolledBackward;
    property public boolean lastScrolledForward;
    property public int maxValue;
    property public int value;
    property public int viewportSize;
    field public static final androidx.compose.foundation.ScrollState.Companion Companion;
  }

  public static final class ScrollState.Companion {
    method public androidx.compose.runtime.saveable.Saver<androidx.compose.foundation.ScrollState,? extends java.lang.Object?> getSaver();
    property public androidx.compose.runtime.saveable.Saver<androidx.compose.foundation.ScrollState,? extends java.lang.Object?> Saver;
  }

  public interface SurfaceCoroutineScope extends androidx.compose.foundation.SurfaceScope kotlinx.coroutines.CoroutineScope {
  }

  public interface SurfaceScope {
    method public void onChanged(android.view.Surface, kotlin.jvm.functions.Function3<? super android.view.Surface,? super java.lang.Integer,? super java.lang.Integer,kotlin.Unit> onChanged);
    method public void onDestroyed(android.view.Surface, kotlin.jvm.functions.Function1<? super android.view.Surface,kotlin.Unit> onDestroyed);
  }

  public final class SystemGestureExclusionKt {
    method public static androidx.compose.ui.Modifier systemGestureExclusion(androidx.compose.ui.Modifier);
    method public static androidx.compose.ui.Modifier systemGestureExclusion(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.layout.LayoutCoordinates,androidx.compose.ui.geometry.Rect> exclusion);
  }

}

package androidx.compose.foundation.content {

  public final class MediaType {
    ctor public MediaType(String representation);
    method public String getRepresentation();
    property public String representation;
    field public static final androidx.compose.foundation.content.MediaType.Companion Companion;
  }

  public static final class MediaType.Companion {
    method public androidx.compose.foundation.content.MediaType getAll();
    method public androidx.compose.foundation.content.MediaType getHtmlText();
    method public androidx.compose.foundation.content.MediaType getImage();
    method public androidx.compose.foundation.content.MediaType getPlainText();
    method public androidx.compose.foundation.content.MediaType getText();
    property public androidx.compose.foundation.content.MediaType All;
    property public androidx.compose.foundation.content.MediaType HtmlText;
    property public androidx.compose.foundation.content.MediaType Image;
    property public androidx.compose.foundation.content.MediaType PlainText;
    property public androidx.compose.foundation.content.MediaType Text;
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public final class PlatformTransferableContent {
    method public android.os.Bundle getExtras();
    method public android.net.Uri? getLinkUri();
    property public android.os.Bundle extras;
    property public android.net.Uri? linkUri;
  }

  public final class ReceiveContentKt {
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static androidx.compose.ui.Modifier contentReceiver(androidx.compose.ui.Modifier, androidx.compose.foundation.content.ReceiveContentListener receiveContentListener);
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public fun interface ReceiveContentListener {
    method public default void onDragEnd();
    method public default void onDragEnter();
    method public default void onDragExit();
    method public default void onDragStart();
    method public androidx.compose.foundation.content.TransferableContent? onReceive(androidx.compose.foundation.content.TransferableContent transferableContent);
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public final class TransferableContent {
    method public androidx.compose.ui.platform.ClipEntry getClipEntry();
    method public androidx.compose.ui.platform.ClipMetadata getClipMetadata();
    method public androidx.compose.foundation.content.PlatformTransferableContent? getPlatformTransferableContent();
    method @BytecodeOnly public int getSource-kB6V9T0();
    property public androidx.compose.ui.platform.ClipEntry clipEntry;
    property public androidx.compose.ui.platform.ClipMetadata clipMetadata;
    property public androidx.compose.foundation.content.PlatformTransferableContent? platformTransferableContent;
    property public androidx.compose.foundation.content.TransferableContent.Source source;
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @kotlin.jvm.JvmInline public static final value class TransferableContent.Source {
    method @BytecodeOnly public static androidx.compose.foundation.content.TransferableContent.Source! box-impl(int);
    method @BytecodeOnly public int unbox-impl();
    field public static final androidx.compose.foundation.content.TransferableContent.Source.Companion Companion;
  }

  public static final class TransferableContent.Source.Companion {
    method @BytecodeOnly public int getClipboard-kB6V9T0();
    method @BytecodeOnly public int getDragAndDrop-kB6V9T0();
    method @BytecodeOnly public int getKeyboard-kB6V9T0();
    property public androidx.compose.foundation.content.TransferableContent.Source Clipboard;
    property public androidx.compose.foundation.content.TransferableContent.Source DragAndDrop;
    property public androidx.compose.foundation.content.TransferableContent.Source Keyboard;
  }

  public final class TransferableContent_androidKt {
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static androidx.compose.foundation.content.TransferableContent? consume(androidx.compose.foundation.content.TransferableContent, kotlin.jvm.functions.Function1<? super android.content.ClipData.Item,java.lang.Boolean> predicate);
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static boolean hasMediaType(androidx.compose.foundation.content.TransferableContent, androidx.compose.foundation.content.MediaType mediaType);
  }

}

package androidx.compose.foundation.draganddrop {

  public final class AndroidDragAndDropSource_androidKt {
    method @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static androidx.compose.ui.Modifier dragAndDropSource(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.draganddrop.DragAndDropSourceScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block);
  }

  public final class DragAndDropSourceKt {
    method public static androidx.compose.ui.Modifier dragAndDropSource(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,androidx.compose.ui.draganddrop.DragAndDropTransferData?> transferData);
    method public static androidx.compose.ui.Modifier dragAndDropSource(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit> drawDragDecoration, kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,androidx.compose.ui.draganddrop.DragAndDropTransferData?> transferData);
    method @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static androidx.compose.ui.Modifier dragAndDropSource(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit> drawDragDecoration, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.draganddrop.DragAndDropSourceScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block);
  }

  @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public interface DragAndDropSourceScope extends androidx.compose.ui.input.pointer.PointerInputScope {
    method @Deprecated public void startTransfer(androidx.compose.ui.draganddrop.DragAndDropTransferData transferData);
  }

  public final class DragAndDropTargetKt {
    method public static androidx.compose.ui.Modifier dragAndDropTarget(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.draganddrop.DragAndDropEvent,java.lang.Boolean> shouldStartDragAndDrop, androidx.compose.ui.draganddrop.DragAndDropTarget target);
  }

}

package androidx.compose.foundation.gestures {

  public interface AnchoredDragScope {
    method public void dragTo(float newOffset, optional float lastKnownVelocity);
  }

  public final class AnchoredDraggableDefaults {
    method @androidx.compose.runtime.Composable public <T> androidx.compose.foundation.gestures.TargetedFlingBehavior flingBehavior(androidx.compose.foundation.gestures.AnchoredDraggableState<T> state, optional kotlin.jvm.functions.Function1<? super java.lang.Float,java.lang.Float> positionalThreshold, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec);
    method @BytecodeOnly @androidx.compose.runtime.Composable public <T> androidx.compose.foundation.gestures.TargetedFlingBehavior flingBehavior(androidx.compose.foundation.gestures.AnchoredDraggableState<T!>, kotlin.jvm.functions.Function1<? super java.lang.Float!,java.lang.Float!>?, androidx.compose.animation.core.AnimationSpec<java.lang.Float!>?, androidx.compose.runtime.Composer?, int, int);
    method public androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> getDecayAnimationSpec();
    method public kotlin.jvm.functions.Function1<java.lang.Float,java.lang.Float> getPositionalThreshold();
    method public androidx.compose.animation.core.AnimationSpec<java.lang.Float> getSnapAnimationSpec();
    property public androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> DecayAnimationSpec;
    property public kotlin.jvm.functions.Function1<java.lang.Float,java.lang.Float> PositionalThreshold;
    property public androidx.compose.animation.core.AnimationSpec<java.lang.Float> SnapAnimationSpec;
    field public static final androidx.compose.foundation.gestures.AnchoredDraggableDefaults INSTANCE;
  }

  public final class AnchoredDraggableKt {
    method @Deprecated public static <T> androidx.compose.foundation.gestures.AnchoredDraggableState<T> AnchoredDraggableState(T initialValue, androidx.compose.foundation.gestures.DraggableAnchors<T> anchors, kotlin.jvm.functions.Function1<? super java.lang.Float,java.lang.Float> positionalThreshold, kotlin.jvm.functions.Function0<java.lang.Float> velocityThreshold, androidx.compose.animation.core.AnimationSpec<java.lang.Float> snapAnimationSpec, androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, optional kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> confirmValueChange);
    method @Deprecated public static <T> androidx.compose.foundation.gestures.AnchoredDraggableState<T> AnchoredDraggableState(T initialValue, kotlin.jvm.functions.Function1<? super java.lang.Float,java.lang.Float> positionalThreshold, kotlin.jvm.functions.Function0<java.lang.Float> velocityThreshold, androidx.compose.animation.core.AnimationSpec<java.lang.Float> snapAnimationSpec, androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, optional kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> confirmValueChange);
    method public static <T> androidx.compose.foundation.gestures.DraggableAnchors<T> DraggableAnchors(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.gestures.DraggableAnchorsConfig<T>,kotlin.Unit> builder);
    method public static <T> androidx.compose.ui.Modifier anchoredDraggable(androidx.compose.ui.Modifier, androidx.compose.foundation.gestures.AnchoredDraggableState<T> state, androidx.compose.foundation.gestures.Orientation orientation, optional boolean enabled, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior);
    method @Deprecated public static <T> androidx.compose.ui.Modifier anchoredDraggable(androidx.compose.ui.Modifier, androidx.compose.foundation.gestures.AnchoredDraggableState<T> state, androidx.compose.foundation.gestures.Orientation orientation, optional boolean enabled, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, optional boolean startDragImmediately, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior);
    method public static <T> androidx.compose.ui.Modifier anchoredDraggable(androidx.compose.ui.Modifier, androidx.compose.foundation.gestures.AnchoredDraggableState<T> state, boolean reverseDirection, androidx.compose.foundation.gestures.Orientation orientation, optional boolean enabled, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior);
    method @Deprecated public static <T> androidx.compose.ui.Modifier anchoredDraggable(androidx.compose.ui.Modifier, androidx.compose.foundation.gestures.AnchoredDraggableState<T> state, boolean reverseDirection, androidx.compose.foundation.gestures.Orientation orientation, optional boolean enabled, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, optional boolean startDragImmediately, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior);
    method public static suspend <T> Object? animateTo(androidx.compose.foundation.gestures.AnchoredDraggableState<T>, T targetValue, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public static suspend <T> Object? animateToWithDecay(androidx.compose.foundation.gestures.AnchoredDraggableState<T>, T targetValue, float velocity, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> snapAnimationSpec, optional androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, kotlin.coroutines.Continuation<? super java.lang.Float>);
    method public static inline <T> void forEach(androidx.compose.foundation.gestures.DraggableAnchors<T>, kotlin.jvm.functions.Function2<? super T,? super java.lang.Float,kotlin.Unit> block);
    method public static suspend <T> Object? snapTo(androidx.compose.foundation.gestures.AnchoredDraggableState<T>, T targetValue, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  @androidx.compose.runtime.Stable public final class AnchoredDraggableState<T> {
    ctor public AnchoredDraggableState(T initialValue);
    ctor public AnchoredDraggableState(T initialValue, androidx.compose.foundation.gestures.DraggableAnchors<T> anchors);
    ctor @Deprecated public AnchoredDraggableState(T initialValue, androidx.compose.foundation.gestures.DraggableAnchors<T> anchors, optional kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> confirmValueChange);
    ctor @Deprecated public AnchoredDraggableState(T initialValue, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> confirmValueChange);
    method public suspend Object? anchoredDrag(optional androidx.compose.foundation.MutatePriority dragPriority, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.gestures.AnchoredDragScope,? super androidx.compose.foundation.gestures.DraggableAnchors<T>,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? anchoredDrag(T targetValue, optional androidx.compose.foundation.MutatePriority dragPriority, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.gestures.AnchoredDragScope,? super androidx.compose.foundation.gestures.DraggableAnchors<T>,? super T,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public float dispatchRawDelta(float delta);
    method public androidx.compose.foundation.gestures.DraggableAnchors<T> getAnchors();
    method public T getCurrentValue();
    method @Deprecated public androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> getDecayAnimationSpec();
    method public float getLastVelocity();
    method @androidx.compose.runtime.annotation.FrequentlyChangingValue public float getOffset();
    method @Deprecated @FloatRange(from=0.0, to=1.0) @androidx.compose.runtime.annotation.FrequentlyChangingValue public float getProgress();
    method public T getSettledValue();
    method @Deprecated public androidx.compose.animation.core.AnimationSpec<java.lang.Float> getSnapAnimationSpec();
    method public T getTargetValue();
    method public boolean isAnimationRunning();
    method @FloatRange(from=0.0, to=1.0) @androidx.compose.runtime.annotation.FrequentlyChangingValue public float progress(T from, T to);
    method @androidx.compose.runtime.annotation.FrequentlyChangingValue public float requireOffset();
    method public suspend Object? settle(androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @Deprecated public suspend Object? settle(float velocity, kotlin.coroutines.Continuation<? super java.lang.Float>);
    method public void updateAnchors(androidx.compose.foundation.gestures.DraggableAnchors<T> newAnchors, optional T newTarget);
    property public androidx.compose.foundation.gestures.DraggableAnchors<T> anchors;
    property public T currentValue;
    property @Deprecated public androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec;
    property public boolean isAnimationRunning;
    property public float lastVelocity;
    property @androidx.compose.runtime.annotation.FrequentlyChangingValue public float offset;
    property @Deprecated @FloatRange(from=0.0, to=1.0) @androidx.compose.runtime.annotation.FrequentlyChangingValue public float progress;
    property public T settledValue;
    property @Deprecated public androidx.compose.animation.core.AnimationSpec<java.lang.Float> snapAnimationSpec;
    property public T targetValue;
    field public static final androidx.compose.foundation.gestures.AnchoredDraggableState.Companion Companion;
    field @Deprecated public androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec;
    field @Deprecated public androidx.compose.animation.core.AnimationSpec<java.lang.Float> snapAnimationSpec;
  }

  public static final class AnchoredDraggableState.Companion {
    method public <T> androidx.compose.runtime.saveable.Saver<androidx.compose.foundation.gestures.AnchoredDraggableState<T>,T> Saver();
    method @Deprecated public <T> androidx.compose.runtime.saveable.Saver<androidx.compose.foundation.gestures.AnchoredDraggableState<T>,T> Saver(androidx.compose.animation.core.AnimationSpec<java.lang.Float> snapAnimationSpec, androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, kotlin.jvm.functions.Function1<? super java.lang.Float,java.lang.Float> positionalThreshold, kotlin.jvm.functions.Function0<java.lang.Float> velocityThreshold, optional kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> confirmValueChange);
    method @Deprecated public <T> androidx.compose.runtime.saveable.Saver<androidx.compose.foundation.gestures.AnchoredDraggableState<T>,T> Saver(optional kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> confirmValueChange);
  }

  @androidx.compose.runtime.Stable public interface BringIntoViewSpec {
    method public default float calculateScrollDistance(float offset, float size, float containerSize);
    method @Deprecated public default androidx.compose.animation.core.AnimationSpec<java.lang.Float> getScrollAnimationSpec();
    property @Deprecated public default androidx.compose.animation.core.AnimationSpec<java.lang.Float> scrollAnimationSpec;
    field public static final androidx.compose.foundation.gestures.BringIntoViewSpec.Companion Companion;
  }

  public static final class BringIntoViewSpec.Companion {
  }

  public final class BringIntoViewSpec_androidKt {
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.gestures.BringIntoViewSpec> getLocalBringIntoViewSpec();
    property @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.gestures.BringIntoViewSpec> LocalBringIntoViewSpec;
  }

  public interface Drag2DScope {
    method @KotlinOnly public void dragBy(androidx.compose.ui.geometry.Offset pixels);
    method @BytecodeOnly public void dragBy-k-4lQ0M(long);
  }

  public final class DragGestureDetectorKt {
    method @KotlinOnly public static suspend Object? awaitDragOrCancellation(androidx.compose.ui.input.pointer.AwaitPointerEventScope, androidx.compose.ui.input.pointer.PointerId pointerId, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange?>);
    method @BytecodeOnly public static Object? awaitDragOrCancellation-rnUCldI(androidx.compose.ui.input.pointer.AwaitPointerEventScope, long, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange!>);
    method @KotlinOnly public static suspend Object? awaitHorizontalDragOrCancellation(androidx.compose.ui.input.pointer.AwaitPointerEventScope, androidx.compose.ui.input.pointer.PointerId pointerId, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange?>);
    method @BytecodeOnly public static Object? awaitHorizontalDragOrCancellation-rnUCldI(androidx.compose.ui.input.pointer.AwaitPointerEventScope, long, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange!>);
    method @KotlinOnly public static suspend Object? awaitHorizontalPointerSlopOrCancellation(androidx.compose.ui.input.pointer.AwaitPointerEventScope, androidx.compose.ui.input.pointer.PointerId pointerId, androidx.compose.ui.input.pointer.PointerType pointerType, kotlin.jvm.functions.Function2<androidx.compose.ui.input.pointer.PointerInputChange,java.lang.Float,kotlin.Unit> onPointerSlopReached, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange?>);
    method @BytecodeOnly public static Object? awaitHorizontalPointerSlopOrCancellation-gDDlDlE(androidx.compose.ui.input.pointer.AwaitPointerEventScope, long, int, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange!,? super java.lang.Float!,kotlin.Unit!>, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange!>);
    method @KotlinOnly public static suspend Object? awaitHorizontalTouchSlopOrCancellation(androidx.compose.ui.input.pointer.AwaitPointerEventScope, androidx.compose.ui.input.pointer.PointerId pointerId, kotlin.jvm.functions.Function2<androidx.compose.ui.input.pointer.PointerInputChange,java.lang.Float,kotlin.Unit> onTouchSlopReached, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange?>);
    method @BytecodeOnly public static Object? awaitHorizontalTouchSlopOrCancellation-jO51t88(androidx.compose.ui.input.pointer.AwaitPointerEventScope, long, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange!,? super java.lang.Float!,kotlin.Unit!>, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange!>);
    method @KotlinOnly public static suspend Object? awaitLongPressOrCancellation(androidx.compose.ui.input.pointer.AwaitPointerEventScope, androidx.compose.ui.input.pointer.PointerId pointerId, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange?>);
    method @BytecodeOnly public static Object? awaitLongPressOrCancellation-rnUCldI(androidx.compose.ui.input.pointer.AwaitPointerEventScope, long, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange!>);
    method @KotlinOnly public static suspend Object? awaitTouchSlopOrCancellation(androidx.compose.ui.input.pointer.AwaitPointerEventScope, androidx.compose.ui.input.pointer.PointerId pointerId, kotlin.jvm.functions.Function2<androidx.compose.ui.input.pointer.PointerInputChange,androidx.compose.ui.geometry.Offset,kotlin.Unit> onTouchSlopReached, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange?>);
    method @BytecodeOnly public static Object? awaitTouchSlopOrCancellation-jO51t88(androidx.compose.ui.input.pointer.AwaitPointerEventScope, long, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange!,? super androidx.compose.ui.geometry.Offset!,kotlin.Unit!>, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange!>);
    method @KotlinOnly public static suspend Object? awaitVerticalDragOrCancellation(androidx.compose.ui.input.pointer.AwaitPointerEventScope, androidx.compose.ui.input.pointer.PointerId pointerId, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange?>);
    method @BytecodeOnly public static Object? awaitVerticalDragOrCancellation-rnUCldI(androidx.compose.ui.input.pointer.AwaitPointerEventScope, long, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange!>);
    method @KotlinOnly public static suspend Object? awaitVerticalPointerSlopOrCancellation(androidx.compose.ui.input.pointer.AwaitPointerEventScope, androidx.compose.ui.input.pointer.PointerId pointerId, androidx.compose.ui.input.pointer.PointerType pointerType, kotlin.jvm.functions.Function2<androidx.compose.ui.input.pointer.PointerInputChange,java.lang.Float,kotlin.Unit> onPointerSlopReached, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange?>);
    method @BytecodeOnly public static Object? awaitVerticalPointerSlopOrCancellation-gDDlDlE(androidx.compose.ui.input.pointer.AwaitPointerEventScope, long, int, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange!,? super java.lang.Float!,kotlin.Unit!>, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange!>);
    method @KotlinOnly public static suspend Object? awaitVerticalTouchSlopOrCancellation(androidx.compose.ui.input.pointer.AwaitPointerEventScope, androidx.compose.ui.input.pointer.PointerId pointerId, kotlin.jvm.functions.Function2<androidx.compose.ui.input.pointer.PointerInputChange,java.lang.Float,kotlin.Unit> onTouchSlopReached, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange?>);
    method @BytecodeOnly public static Object? awaitVerticalTouchSlopOrCancellation-jO51t88(androidx.compose.ui.input.pointer.AwaitPointerEventScope, long, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange!,? super java.lang.Float!,kotlin.Unit!>, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange!>);
    method public static suspend Object? detectDragGestures(androidx.compose.ui.input.pointer.PointerInputScope, androidx.compose.foundation.gestures.Orientation? orientationLock, optional kotlin.jvm.functions.Function3<? super androidx.compose.ui.input.pointer.PointerInputChange,? super androidx.compose.ui.input.pointer.PointerInputChange,? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDragStart, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.input.pointer.PointerInputChange,kotlin.Unit> onDragEnd, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDragCancel, optional kotlin.jvm.functions.Function0<java.lang.Boolean> shouldAwaitTouchSlop, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange,? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDrag, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public static suspend Object? detectDragGestures(androidx.compose.ui.input.pointer.PointerInputScope, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDragStart, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDragEnd, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDragCancel, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange,? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDrag, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public static suspend Object? detectDragGesturesAfterLongPress(androidx.compose.ui.input.pointer.PointerInputScope, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDragStart, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDragEnd, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDragCancel, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange,? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDrag, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public static suspend Object? detectHorizontalDragGestures(androidx.compose.ui.input.pointer.PointerInputScope, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDragStart, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDragEnd, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDragCancel, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange,? super java.lang.Float,kotlin.Unit> onHorizontalDrag, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public static suspend Object? detectVerticalDragGestures(androidx.compose.ui.input.pointer.PointerInputScope, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDragStart, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDragEnd, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDragCancel, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange,? super java.lang.Float,kotlin.Unit> onVerticalDrag, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @KotlinOnly public static suspend Object? drag(androidx.compose.ui.input.pointer.AwaitPointerEventScope, androidx.compose.ui.input.pointer.PointerId pointerId, kotlin.jvm.functions.Function1<androidx.compose.ui.input.pointer.PointerInputChange,kotlin.Unit> onDrag, kotlin.coroutines.Continuation<? super java.lang.Boolean>);
    method @BytecodeOnly public static Object? drag-jO51t88(androidx.compose.ui.input.pointer.AwaitPointerEventScope, long, kotlin.jvm.functions.Function1<? super androidx.compose.ui.input.pointer.PointerInputChange!,kotlin.Unit!>, kotlin.coroutines.Continuation<? super java.lang.Boolean!>);
    method @KotlinOnly public static suspend Object? horizontalDrag(androidx.compose.ui.input.pointer.AwaitPointerEventScope, androidx.compose.ui.input.pointer.PointerId pointerId, kotlin.jvm.functions.Function1<androidx.compose.ui.input.pointer.PointerInputChange,kotlin.Unit> onDrag, kotlin.coroutines.Continuation<? super java.lang.Boolean>);
    method @BytecodeOnly public static Object? horizontalDrag-jO51t88(androidx.compose.ui.input.pointer.AwaitPointerEventScope, long, kotlin.jvm.functions.Function1<? super androidx.compose.ui.input.pointer.PointerInputChange!,kotlin.Unit!>, kotlin.coroutines.Continuation<? super java.lang.Boolean!>);
    method @KotlinOnly public static suspend Object? verticalDrag(androidx.compose.ui.input.pointer.AwaitPointerEventScope, androidx.compose.ui.input.pointer.PointerId pointerId, kotlin.jvm.functions.Function1<androidx.compose.ui.input.pointer.PointerInputChange,kotlin.Unit> onDrag, kotlin.coroutines.Continuation<? super java.lang.Boolean>);
    method @BytecodeOnly public static Object? verticalDrag-jO51t88(androidx.compose.ui.input.pointer.AwaitPointerEventScope, long, kotlin.jvm.functions.Function1<? super androidx.compose.ui.input.pointer.PointerInputChange!,kotlin.Unit!>, kotlin.coroutines.Continuation<? super java.lang.Boolean!>);
  }

  public interface DragScope {
    method public void dragBy(float pixels);
  }

  public final class Draggable2DKt {
    method public static androidx.compose.foundation.gestures.Draggable2DState Draggable2DState(kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDelta);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier draggable2D(androidx.compose.ui.Modifier, androidx.compose.foundation.gestures.Draggable2DState state, optional boolean enabled, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional boolean startDragImmediately, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDragStarted, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.unit.Velocity,kotlin.Unit> onDragStopped, optional boolean reverseDirection);
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.Draggable2DState rememberDraggable2DState(kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDelta);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.Draggable2DState rememberDraggable2DState(kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int);
  }

  public interface Draggable2DState {
    method @KotlinOnly public void dispatchRawDelta(androidx.compose.ui.geometry.Offset delta);
    method @BytecodeOnly public void dispatchRawDelta-k-4lQ0M(long);
    method public suspend Object? drag(optional androidx.compose.foundation.MutatePriority dragPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.Drag2DScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public interface DraggableAnchors<T> {
    method public T? anchorAt(int index);
    method public T? closestAnchor(float position);
    method public T? closestAnchor(float position, boolean searchUpwards);
    method public int getSize();
    method public boolean hasPositionFor(T anchor);
    method public float maxPosition();
    method public float minPosition();
    method public float positionAt(int index);
    method public float positionOf(T anchor);
    property public abstract int size;
  }

  public final class DraggableAnchorsConfig<T> {
    ctor public DraggableAnchorsConfig();
    method public infix void at(T, float position);
  }

  public final class DraggableKt {
    method public static androidx.compose.foundation.gestures.DraggableState DraggableState(kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onDelta);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier draggable(androidx.compose.ui.Modifier, androidx.compose.foundation.gestures.DraggableState state, androidx.compose.foundation.gestures.Orientation orientation, optional boolean enabled, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional boolean startDragImmediately, optional kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super androidx.compose.ui.geometry.Offset,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> onDragStarted, optional kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super java.lang.Float,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> onDragStopped, optional boolean reverseDirection);
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.DraggableState rememberDraggableState(kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onDelta);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.DraggableState rememberDraggableState(kotlin.jvm.functions.Function1<? super java.lang.Float!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface DraggableState {
    method public void dispatchRawDelta(float delta);
    method public suspend Object? drag(optional androidx.compose.foundation.MutatePriority dragPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.DragScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  @Deprecated @SuppressCompatibility @kotlin.RequiresOptIn(message="This API feature-flags new behavior and will be removed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalTapGestureDetectorBehaviorApi {
  }

  @androidx.compose.runtime.Stable public interface FlingBehavior {
    method public suspend Object? performFling(androidx.compose.foundation.gestures.ScrollScope, float initialVelocity, kotlin.coroutines.Continuation<? super java.lang.Float>);
  }

  public final class ForEachGestureKt {
    method public static suspend Object? awaitEachGesture(androidx.compose.ui.input.pointer.PointerInputScope, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.AwaitPointerEventScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @Deprecated public static suspend Object? forEachGesture(androidx.compose.ui.input.pointer.PointerInputScope, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public final class GestureCancellationException extends java.util.concurrent.CancellationException {
    ctor public GestureCancellationException();
    ctor public GestureCancellationException(optional String? message);
  }

  public enum Orientation {
    enum_constant public static final androidx.compose.foundation.gestures.Orientation Horizontal;
    enum_constant public static final androidx.compose.foundation.gestures.Orientation Vertical;
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface PressGestureScope extends androidx.compose.ui.unit.Density {
    method public suspend Object? awaitRelease(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? tryAwaitRelease(kotlin.coroutines.Continuation<? super java.lang.Boolean>);
  }

  public interface Scroll2DScope {
    method @KotlinOnly public androidx.compose.ui.geometry.Offset scrollBy(androidx.compose.ui.geometry.Offset delta);
    method @BytecodeOnly public long scrollBy-MK-Hz9U(long);
  }

  public final class ScrollExtensionsKt {
    method @KotlinOnly public static suspend Object? animateScrollBy(androidx.compose.foundation.gestures.Scrollable2DState, androidx.compose.ui.geometry.Offset value, optional androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Offset> animationSpec, kotlin.coroutines.Continuation<? super androidx.compose.ui.geometry.Offset>);
    method public static suspend Object? animateScrollBy(androidx.compose.foundation.gestures.ScrollableState, float value, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.coroutines.Continuation<? super java.lang.Float>);
    method @BytecodeOnly public static Object? animateScrollBy-ubNVwUQ(androidx.compose.foundation.gestures.Scrollable2DState, long, androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Offset!>, kotlin.coroutines.Continuation<? super androidx.compose.ui.geometry.Offset!>);
    method @KotlinOnly public static suspend Object? scrollBy(androidx.compose.foundation.gestures.Scrollable2DState, androidx.compose.ui.geometry.Offset value, kotlin.coroutines.Continuation<? super androidx.compose.ui.geometry.Offset>);
    method public static suspend Object? scrollBy(androidx.compose.foundation.gestures.ScrollableState, float value, kotlin.coroutines.Continuation<? super java.lang.Float>);
    method @BytecodeOnly public static Object? scrollBy-d-4ec7I(androidx.compose.foundation.gestures.Scrollable2DState, long, kotlin.coroutines.Continuation<? super androidx.compose.ui.geometry.Offset!>);
    method public static suspend Object? stopScroll(androidx.compose.foundation.gestures.Scrollable2DState, optional androidx.compose.foundation.MutatePriority scrollPriority, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public static suspend Object? stopScroll(androidx.compose.foundation.gestures.ScrollableState, optional androidx.compose.foundation.MutatePriority scrollPriority, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public interface ScrollScope {
    method public float scrollBy(float pixels);
  }

  public final class Scrollable2DKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier scrollable2D(androidx.compose.ui.Modifier, androidx.compose.foundation.gestures.Scrollable2DState state, optional boolean enabled, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource);
  }

  public interface Scrollable2DState {
    method @KotlinOnly public boolean canScroll(androidx.compose.ui.geometry.Offset offset);
    method @BytecodeOnly public boolean canScroll-k-4lQ0M(long);
    method @KotlinOnly public androidx.compose.ui.geometry.Offset dispatchRawDelta(androidx.compose.ui.geometry.Offset delta);
    method @BytecodeOnly public long dispatchRawDelta-MK-Hz9U(long);
    method public boolean isScrollInProgress();
    method public suspend Object? scroll(optional androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.Scroll2DScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public abstract boolean isScrollInProgress;
  }

  public final class Scrollable2DStateKt {
    method public static androidx.compose.foundation.gestures.Scrollable2DState Scrollable2DState(kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,androidx.compose.ui.geometry.Offset> consumeScrollDelta);
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.Scrollable2DState rememberScrollable2DState(kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,androidx.compose.ui.geometry.Offset> consumeScrollDelta);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.Scrollable2DState rememberScrollable2DState(kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset!,androidx.compose.ui.geometry.Offset!>, androidx.compose.runtime.Composer?, int);
  }

  public final class ScrollableDefaults {
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.gestures.FlingBehavior flingBehavior();
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.compose.foundation.gestures.FlingBehavior flingBehavior(androidx.compose.runtime.Composer?, int);
    method @Deprecated @androidx.compose.runtime.Composable public androidx.compose.foundation.OverscrollEffect overscrollEffect();
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public androidx.compose.foundation.OverscrollEffect overscrollEffect(androidx.compose.runtime.Composer?, int);
    method public boolean reverseDirection(androidx.compose.ui.unit.LayoutDirection layoutDirection, androidx.compose.foundation.gestures.Orientation orientation, boolean reverseScrolling);
    field public static final androidx.compose.foundation.gestures.ScrollableDefaults INSTANCE;
  }

  public final class ScrollableKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier scrollable(androidx.compose.ui.Modifier, androidx.compose.foundation.gestures.ScrollableState state, androidx.compose.foundation.gestures.Orientation orientation, androidx.compose.foundation.OverscrollEffect? overscrollEffect, optional boolean enabled, optional boolean reverseDirection, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.compose.foundation.gestures.BringIntoViewSpec? bringIntoViewSpec);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier scrollable(androidx.compose.ui.Modifier, androidx.compose.foundation.gestures.ScrollableState state, androidx.compose.foundation.gestures.Orientation orientation, optional boolean enabled, optional boolean reverseDirection, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface ScrollableState {
    method public float dispatchRawDelta(float delta);
    method public default boolean getCanScrollBackward();
    method public default boolean getCanScrollForward();
    method public default boolean getLastScrolledBackward();
    method public default boolean getLastScrolledForward();
    method public boolean isScrollInProgress();
    method public suspend Object? scroll(optional androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public default boolean canScrollBackward;
    property public default boolean canScrollForward;
    property public abstract boolean isScrollInProgress;
    property public default boolean lastScrolledBackward;
    property public default boolean lastScrolledForward;
  }

  public final class ScrollableStateKt {
    method public static androidx.compose.foundation.gestures.ScrollableState ScrollableState(kotlin.jvm.functions.Function1<? super java.lang.Float,java.lang.Float> consumeScrollDelta);
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.ScrollableState rememberScrollableState(kotlin.jvm.functions.Function1<? super java.lang.Float,java.lang.Float> consumeScrollDelta);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.ScrollableState rememberScrollableState(kotlin.jvm.functions.Function1<? super java.lang.Float!,java.lang.Float!>, androidx.compose.runtime.Composer?, int);
  }

  public final class TapGestureDetectorKt {
    method public static suspend Object? awaitFirstDown(androidx.compose.ui.input.pointer.AwaitPointerEventScope, optional boolean requireUnconsumed, optional androidx.compose.ui.input.pointer.PointerEventPass pass, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange>);
    method @BytecodeOnly @Deprecated public static Object! awaitFirstDown(androidx.compose.ui.input.pointer.AwaitPointerEventScope!, boolean, kotlin.coroutines.Continuation!);
    method public static suspend Object? detectTapGestures(androidx.compose.ui.input.pointer.PointerInputScope, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit>? onDoubleTap, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit>? onLongPress, optional kotlin.jvm.functions.Function3<? super androidx.compose.foundation.gestures.PressGestureScope,? super androidx.compose.ui.geometry.Offset,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> onPress, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit>? onTap, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @Deprecated @SuppressCompatibility @androidx.compose.foundation.gestures.ExperimentalTapGestureDetectorBehaviorApi public static boolean getDetectTapGesturesEnableNewDispatchingBehavior();
    method @Deprecated @SuppressCompatibility @androidx.compose.foundation.gestures.ExperimentalTapGestureDetectorBehaviorApi public static void setDetectTapGesturesEnableNewDispatchingBehavior(boolean);
    method public static suspend Object? waitForUpOrCancellation(androidx.compose.ui.input.pointer.AwaitPointerEventScope, optional androidx.compose.ui.input.pointer.PointerEventPass pass, kotlin.coroutines.Continuation<? super androidx.compose.ui.input.pointer.PointerInputChange?>);
    method @BytecodeOnly @Deprecated public static Object! waitForUpOrCancellation(androidx.compose.ui.input.pointer.AwaitPointerEventScope!, kotlin.coroutines.Continuation!);
    property @Deprecated @SuppressCompatibility @androidx.compose.foundation.gestures.ExperimentalTapGestureDetectorBehaviorApi public static boolean DetectTapGesturesEnableNewDispatchingBehavior;
  }

  @androidx.compose.runtime.Stable public interface TargetedFlingBehavior extends androidx.compose.foundation.gestures.FlingBehavior {
    method public default suspend Object? performFling(androidx.compose.foundation.gestures.ScrollScope, float initialVelocity, kotlin.coroutines.Continuation<? super java.lang.Float>);
    method public suspend Object? performFling(androidx.compose.foundation.gestures.ScrollScope, float initialVelocity, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onRemainingDistanceUpdated, kotlin.coroutines.Continuation<? super java.lang.Float>);
  }

  public final class TransformGestureDetectorKt {
    method @InaccessibleFromJava public static androidx.compose.ui.geometry.Offset calculateCentroid(androidx.compose.ui.input.pointer.PointerEvent, optional boolean useCurrent);
    method public static float calculateCentroidSize(androidx.compose.ui.input.pointer.PointerEvent, optional boolean useCurrent);
    method @InaccessibleFromJava public static androidx.compose.ui.geometry.Offset calculatePan(androidx.compose.ui.input.pointer.PointerEvent);
    method public static float calculateRotation(androidx.compose.ui.input.pointer.PointerEvent);
    method public static float calculateZoom(androidx.compose.ui.input.pointer.PointerEvent);
    method public static suspend Object? detectTransformGestures(androidx.compose.ui.input.pointer.PointerInputScope, optional boolean panZoomLock, kotlin.jvm.functions.Function4<? super androidx.compose.ui.geometry.Offset,? super androidx.compose.ui.geometry.Offset,? super java.lang.Float,? super java.lang.Float,kotlin.Unit> onGesture, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface TransformScope {
    method @KotlinOnly public void transformBy(optional float zoomChange, optional androidx.compose.ui.geometry.Offset panChange, optional float rotationChange);
    method @BytecodeOnly public void transformBy-d-4ec7I(float, long, float);
  }

  public final class TransformableKt {
    method public static androidx.compose.ui.Modifier transformable(androidx.compose.ui.Modifier, androidx.compose.foundation.gestures.TransformableState state, optional boolean lockRotationOnZoomPan, optional boolean enabled);
    method public static androidx.compose.ui.Modifier transformable(androidx.compose.ui.Modifier, androidx.compose.foundation.gestures.TransformableState state, kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,java.lang.Boolean> canPan, optional boolean lockRotationOnZoomPan, optional boolean enabled);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface TransformableState {
    method public boolean isTransformInProgress();
    method public suspend Object? transform(optional androidx.compose.foundation.MutatePriority transformPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.TransformScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public abstract boolean isTransformInProgress;
  }

  public final class TransformableStateKt {
    method public static androidx.compose.foundation.gestures.TransformableState TransformableState(kotlin.jvm.functions.Function3<? super java.lang.Float,? super androidx.compose.ui.geometry.Offset,? super java.lang.Float,kotlin.Unit> onTransformation);
    method @KotlinOnly public static suspend Object? animateBy(androidx.compose.foundation.gestures.TransformableState, float zoomFactor, androidx.compose.ui.geometry.Offset panOffset, float rotationDegrees, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> zoomAnimationSpec, optional androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Offset> panAnimationSpec, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> rotationAnimationSpec, kotlin.coroutines.Continuation<? super java.lang.Void>);
    method @BytecodeOnly public static Object? animateBy-Su4bsnU(androidx.compose.foundation.gestures.TransformableState, float, long, float, androidx.compose.animation.core.AnimationSpec<java.lang.Float!>, androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Offset!>, androidx.compose.animation.core.AnimationSpec<java.lang.Float!>, kotlin.coroutines.Continuation<? super kotlin.Unit!>);
    method @KotlinOnly public static suspend Object? animatePanBy(androidx.compose.foundation.gestures.TransformableState, androidx.compose.ui.geometry.Offset offset, optional androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Offset> animationSpec, kotlin.coroutines.Continuation<? super java.lang.Void>);
    method @BytecodeOnly public static Object? animatePanBy-ubNVwUQ(androidx.compose.foundation.gestures.TransformableState, long, androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Offset!>, kotlin.coroutines.Continuation<? super kotlin.Unit!>);
    method public static suspend Object? animateRotateBy(androidx.compose.foundation.gestures.TransformableState, float degrees, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public static suspend Object? animateZoomBy(androidx.compose.foundation.gestures.TransformableState, float zoomFactor, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @KotlinOnly public static suspend Object? panBy(androidx.compose.foundation.gestures.TransformableState, androidx.compose.ui.geometry.Offset offset, kotlin.coroutines.Continuation<? super java.lang.Void>);
    method @BytecodeOnly public static Object? panBy-d-4ec7I(androidx.compose.foundation.gestures.TransformableState, long, kotlin.coroutines.Continuation<? super kotlin.Unit!>);
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.TransformableState rememberTransformableState(kotlin.jvm.functions.Function3<? super java.lang.Float,? super androidx.compose.ui.geometry.Offset,? super java.lang.Float,kotlin.Unit> onTransformation);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.TransformableState rememberTransformableState(kotlin.jvm.functions.Function3<? super java.lang.Float!,? super androidx.compose.ui.geometry.Offset!,? super java.lang.Float!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int);
    method public static suspend Object? rotateBy(androidx.compose.foundation.gestures.TransformableState, float degrees, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public static suspend Object? stopTransformation(androidx.compose.foundation.gestures.TransformableState, optional androidx.compose.foundation.MutatePriority terminationPriority, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public static suspend Object? zoomBy(androidx.compose.foundation.gestures.TransformableState, float zoomFactor, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

}

package androidx.compose.foundation.gestures.snapping {

  public final class LazyGridSnapLayoutInfoProviderKt {
    method public static androidx.compose.foundation.gestures.snapping.SnapLayoutInfoProvider SnapLayoutInfoProvider(androidx.compose.foundation.lazy.grid.LazyGridState lazyGridState, optional androidx.compose.foundation.gestures.snapping.SnapPosition snapPosition);
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.FlingBehavior rememberSnapFlingBehavior(androidx.compose.foundation.lazy.grid.LazyGridState lazyGridState, optional androidx.compose.foundation.gestures.snapping.SnapPosition snapPosition);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.FlingBehavior rememberSnapFlingBehavior(androidx.compose.foundation.lazy.grid.LazyGridState, androidx.compose.foundation.gestures.snapping.SnapPosition?, androidx.compose.runtime.Composer?, int, int);
  }

  public final class LazyListSnapLayoutInfoProviderKt {
    method public static androidx.compose.foundation.gestures.snapping.SnapLayoutInfoProvider SnapLayoutInfoProvider(androidx.compose.foundation.lazy.LazyListState lazyListState, optional androidx.compose.foundation.gestures.snapping.SnapPosition snapPosition);
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.FlingBehavior rememberSnapFlingBehavior(androidx.compose.foundation.lazy.LazyListState lazyListState, optional androidx.compose.foundation.gestures.snapping.SnapPosition snapPosition);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.FlingBehavior rememberSnapFlingBehavior(androidx.compose.foundation.lazy.LazyListState, androidx.compose.foundation.gestures.snapping.SnapPosition?, androidx.compose.runtime.Composer?, int, int);
  }

  public final class SnapFlingBehaviorKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.TargetedFlingBehavior rememberSnapFlingBehavior(androidx.compose.foundation.gestures.snapping.SnapLayoutInfoProvider snapLayoutInfoProvider);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.TargetedFlingBehavior rememberSnapFlingBehavior(androidx.compose.foundation.gestures.snapping.SnapLayoutInfoProvider, androidx.compose.runtime.Composer?, int);
    method public static androidx.compose.foundation.gestures.TargetedFlingBehavior snapFlingBehavior(androidx.compose.foundation.gestures.snapping.SnapLayoutInfoProvider snapLayoutInfoProvider, androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, androidx.compose.animation.core.AnimationSpec<java.lang.Float> snapAnimationSpec);
  }

  public interface SnapLayoutInfoProvider {
    method public default float calculateApproachOffset(float velocity, float decayOffset);
    method public float calculateSnapOffset(float velocity);
  }

  @androidx.compose.runtime.Stable public interface SnapPosition {
    method public int position(int layoutSize, int itemSize, int beforeContentPadding, int afterContentPadding, int itemIndex, int itemCount);
  }

  public static final class SnapPosition.Center implements androidx.compose.foundation.gestures.snapping.SnapPosition {
    method public int position(int layoutSize, int itemSize, int beforeContentPadding, int afterContentPadding, int itemIndex, int itemCount);
    field public static final androidx.compose.foundation.gestures.snapping.SnapPosition.Center INSTANCE;
  }

  public static final class SnapPosition.End implements androidx.compose.foundation.gestures.snapping.SnapPosition {
    method public int position(int layoutSize, int itemSize, int beforeContentPadding, int afterContentPadding, int itemIndex, int itemCount);
    field public static final androidx.compose.foundation.gestures.snapping.SnapPosition.End INSTANCE;
  }

  public static final class SnapPosition.Start implements androidx.compose.foundation.gestures.snapping.SnapPosition {
    method public int position(int layoutSize, int itemSize, int beforeContentPadding, int afterContentPadding, int itemIndex, int itemCount);
    field public static final androidx.compose.foundation.gestures.snapping.SnapPosition.Start INSTANCE;
  }

}

package androidx.compose.foundation.interaction {

  public interface DragInteraction extends androidx.compose.foundation.interaction.Interaction {
  }

  public static final class DragInteraction.Cancel implements androidx.compose.foundation.interaction.DragInteraction {
    ctor public DragInteraction.Cancel(androidx.compose.foundation.interaction.DragInteraction.Start start);
    method public androidx.compose.foundation.interaction.DragInteraction.Start getStart();
    property public androidx.compose.foundation.interaction.DragInteraction.Start start;
  }

  public static final class DragInteraction.Start implements androidx.compose.foundation.interaction.DragInteraction {
    ctor public DragInteraction.Start();
  }

  public static final class DragInteraction.Stop implements androidx.compose.foundation.interaction.DragInteraction {
    ctor public DragInteraction.Stop(androidx.compose.foundation.interaction.DragInteraction.Start start);
    method public androidx.compose.foundation.interaction.DragInteraction.Start getStart();
    property public androidx.compose.foundation.interaction.DragInteraction.Start start;
  }

  public final class DragInteractionKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<java.lang.Boolean> collectIsDraggedAsState(androidx.compose.foundation.interaction.InteractionSource);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<java.lang.Boolean!> collectIsDraggedAsState(androidx.compose.foundation.interaction.InteractionSource, androidx.compose.runtime.Composer?, int);
  }

  public interface FocusInteraction extends androidx.compose.foundation.interaction.Interaction {
  }

  public static final class FocusInteraction.Focus implements androidx.compose.foundation.interaction.FocusInteraction {
    ctor public FocusInteraction.Focus();
  }

  public static final class FocusInteraction.Unfocus implements androidx.compose.foundation.interaction.FocusInteraction {
    ctor public FocusInteraction.Unfocus(androidx.compose.foundation.interaction.FocusInteraction.Focus focus);
    method public androidx.compose.foundation.interaction.FocusInteraction.Focus getFocus();
    property public androidx.compose.foundation.interaction.FocusInteraction.Focus focus;
  }

  public final class FocusInteractionKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<java.lang.Boolean> collectIsFocusedAsState(androidx.compose.foundation.interaction.InteractionSource);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<java.lang.Boolean!> collectIsFocusedAsState(androidx.compose.foundation.interaction.InteractionSource, androidx.compose.runtime.Composer?, int);
  }

  public interface HoverInteraction extends androidx.compose.foundation.interaction.Interaction {
  }

  public static final class HoverInteraction.Enter implements androidx.compose.foundation.interaction.HoverInteraction {
    ctor public HoverInteraction.Enter();
  }

  public static final class HoverInteraction.Exit implements androidx.compose.foundation.interaction.HoverInteraction {
    ctor public HoverInteraction.Exit(androidx.compose.foundation.interaction.HoverInteraction.Enter enter);
    method public androidx.compose.foundation.interaction.HoverInteraction.Enter getEnter();
    property public androidx.compose.foundation.interaction.HoverInteraction.Enter enter;
  }

  public final class HoverInteractionKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<java.lang.Boolean> collectIsHoveredAsState(androidx.compose.foundation.interaction.InteractionSource);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<java.lang.Boolean!> collectIsHoveredAsState(androidx.compose.foundation.interaction.InteractionSource, androidx.compose.runtime.Composer?, int);
  }

  public interface Interaction {
  }

  @androidx.compose.runtime.Stable public interface InteractionSource {
    method public kotlinx.coroutines.flow.Flow<androidx.compose.foundation.interaction.Interaction> getInteractions();
    property public abstract kotlinx.coroutines.flow.Flow<androidx.compose.foundation.interaction.Interaction> interactions;
  }

  public final class InteractionSourceKt {
    method @androidx.compose.runtime.annotation.RememberInComposition public static androidx.compose.foundation.interaction.MutableInteractionSource MutableInteractionSource();
  }

  @androidx.compose.runtime.Stable public interface MutableInteractionSource extends androidx.compose.foundation.interaction.InteractionSource {
    method public suspend Object? emit(androidx.compose.foundation.interaction.Interaction interaction, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public boolean tryEmit(androidx.compose.foundation.interaction.Interaction interaction);
  }

  public interface PressInteraction extends androidx.compose.foundation.interaction.Interaction {
  }

  public static final class PressInteraction.Cancel implements androidx.compose.foundation.interaction.PressInteraction {
    ctor public PressInteraction.Cancel(androidx.compose.foundation.interaction.PressInteraction.Press press);
    method public androidx.compose.foundation.interaction.PressInteraction.Press getPress();
    property public androidx.compose.foundation.interaction.PressInteraction.Press press;
  }

  public static final class PressInteraction.Press implements androidx.compose.foundation.interaction.PressInteraction {
    ctor @KotlinOnly public PressInteraction.Press(androidx.compose.ui.geometry.Offset pressPosition);
    ctor @BytecodeOnly public PressInteraction.Press(long, kotlin.jvm.internal.DefaultConstructorMarker!);
    method @BytecodeOnly public long getPressPosition-F1C5BW0();
    property public androidx.compose.ui.geometry.Offset pressPosition;
  }

  public static final class PressInteraction.Release implements androidx.compose.foundation.interaction.PressInteraction {
    ctor public PressInteraction.Release(androidx.compose.foundation.interaction.PressInteraction.Press press);
    method public androidx.compose.foundation.interaction.PressInteraction.Press getPress();
    property public androidx.compose.foundation.interaction.PressInteraction.Press press;
  }

  public final class PressInteractionKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<java.lang.Boolean> collectIsPressedAsState(androidx.compose.foundation.interaction.InteractionSource);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.runtime.State<java.lang.Boolean!> collectIsPressedAsState(androidx.compose.foundation.interaction.InteractionSource, androidx.compose.runtime.Composer?, int);
  }

}

package androidx.compose.foundation.lazy {

  public final class LazyDslKt {
    method @androidx.compose.runtime.Composable public static void LazyColumn(optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.lazy.LazyListState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional boolean reverseLayout, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.LazyListScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyColumn(androidx.compose.ui.Modifier?, androidx.compose.foundation.lazy.LazyListState?, androidx.compose.foundation.layout.PaddingValues?, boolean, androidx.compose.foundation.layout.Arrangement.Vertical?, androidx.compose.ui.Alignment.Horizontal?, androidx.compose.foundation.gestures.FlingBehavior?, boolean, androidx.compose.foundation.OverscrollEffect?, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.LazyListScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyColumn(androidx.compose.ui.Modifier!, androidx.compose.foundation.lazy.LazyListState!, androidx.compose.foundation.layout.PaddingValues!, boolean, androidx.compose.foundation.layout.Arrangement.Vertical!, androidx.compose.ui.Alignment.Horizontal!, androidx.compose.foundation.gestures.FlingBehavior!, boolean, kotlin.jvm.functions.Function1!, androidx.compose.runtime.Composer!, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyColumn(androidx.compose.ui.Modifier!, androidx.compose.foundation.lazy.LazyListState!, androidx.compose.foundation.layout.PaddingValues!, boolean, androidx.compose.foundation.layout.Arrangement.Vertical!, androidx.compose.ui.Alignment.Horizontal!, androidx.compose.foundation.gestures.FlingBehavior!, kotlin.jvm.functions.Function1!, androidx.compose.runtime.Composer!, int, int);
    method @androidx.compose.runtime.Composable public static void LazyRow(optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.lazy.LazyListState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional boolean reverseLayout, optional androidx.compose.foundation.layout.Arrangement.Horizontal horizontalArrangement, optional androidx.compose.ui.Alignment.Vertical verticalAlignment, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.LazyListScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyRow(androidx.compose.ui.Modifier?, androidx.compose.foundation.lazy.LazyListState?, androidx.compose.foundation.layout.PaddingValues?, boolean, androidx.compose.foundation.layout.Arrangement.Horizontal?, androidx.compose.ui.Alignment.Vertical?, androidx.compose.foundation.gestures.FlingBehavior?, boolean, androidx.compose.foundation.OverscrollEffect?, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.LazyListScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyRow(androidx.compose.ui.Modifier!, androidx.compose.foundation.lazy.LazyListState!, androidx.compose.foundation.layout.PaddingValues!, boolean, androidx.compose.foundation.layout.Arrangement.Horizontal!, androidx.compose.ui.Alignment.Vertical!, androidx.compose.foundation.gestures.FlingBehavior!, boolean, kotlin.jvm.functions.Function1!, androidx.compose.runtime.Composer!, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyRow(androidx.compose.ui.Modifier!, androidx.compose.foundation.lazy.LazyListState!, androidx.compose.foundation.layout.PaddingValues!, boolean, androidx.compose.foundation.layout.Arrangement.Horizontal!, androidx.compose.ui.Alignment.Vertical!, androidx.compose.foundation.gestures.FlingBehavior!, kotlin.jvm.functions.Function1!, androidx.compose.runtime.Composer!, int, int);
    method public static inline <T> void items(androidx.compose.foundation.lazy.LazyListScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function1<? super T,?>? key, optional kotlin.jvm.functions.Function1<? super T,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.LazyItemScope,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void items(androidx.compose.foundation.lazy.LazyListScope, java.util.List<? extends T!>, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.lazy.LazyItemScope!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method @BytecodeOnly @Deprecated public static <T> void items(androidx.compose.foundation.lazy.LazyListScope!, java.util.List<? extends T!>!, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>!, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.lazy.LazyItemScope!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>!);
    method public static inline <T> void items(androidx.compose.foundation.lazy.LazyListScope, T[] items, optional kotlin.jvm.functions.Function1<? super T,?>? key, optional kotlin.jvm.functions.Function1<? super T,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.LazyItemScope,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void items(androidx.compose.foundation.lazy.LazyListScope, T![], kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.lazy.LazyItemScope!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method @BytecodeOnly @Deprecated public static <T> void items(androidx.compose.foundation.lazy.LazyListScope!, T![]!, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>!, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.lazy.LazyItemScope!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>!);
    method public static inline <T> void itemsIndexed(androidx.compose.foundation.lazy.LazyListScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,?>? key, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.LazyItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void itemsIndexed(androidx.compose.foundation.lazy.LazyListScope, java.util.List<? extends T!>, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function5<? super androidx.compose.foundation.lazy.LazyItemScope!,? super java.lang.Integer!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method @BytecodeOnly @Deprecated public static <T> void itemsIndexed(androidx.compose.foundation.lazy.LazyListScope!, java.util.List<? extends T!>!, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>!, kotlin.jvm.functions.Function5<? super androidx.compose.foundation.lazy.LazyItemScope!,? super java.lang.Integer!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>!);
    method public static inline <T> void itemsIndexed(androidx.compose.foundation.lazy.LazyListScope, T[] items, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,?>? key, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.LazyItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void itemsIndexed(androidx.compose.foundation.lazy.LazyListScope, T![], kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function5<? super androidx.compose.foundation.lazy.LazyItemScope!,? super java.lang.Integer!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method @BytecodeOnly @Deprecated public static <T> void itemsIndexed(androidx.compose.foundation.lazy.LazyListScope!, T![]!, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>!, kotlin.jvm.functions.Function5<? super androidx.compose.foundation.lazy.LazyItemScope!,? super java.lang.Integer!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>!);
  }

  @androidx.compose.foundation.lazy.LazyScopeMarker @androidx.compose.runtime.Stable @kotlin.jvm.JvmDefaultWithCompatibility public interface LazyItemScope {
    method public default androidx.compose.ui.Modifier animateItem(androidx.compose.ui.Modifier, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float>? fadeInSpec, optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset>? placementSpec, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float>? fadeOutSpec);
    method public androidx.compose.ui.Modifier fillParentMaxHeight(androidx.compose.ui.Modifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method public androidx.compose.ui.Modifier fillParentMaxSize(androidx.compose.ui.Modifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method public androidx.compose.ui.Modifier fillParentMaxWidth(androidx.compose.ui.Modifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
  }

  public interface LazyListItemInfo {
    method public default Object? getContentType();
    method public int getIndex();
    method public Object getKey();
    method public int getOffset();
    method public int getSize();
    property public default Object? contentType;
    property public abstract int index;
    property public abstract Object key;
    property public abstract int offset;
    property public abstract int size;
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface LazyListLayoutInfo {
    method public default int getAfterContentPadding();
    method public default int getBeforeContentPadding();
    method public default int getMainAxisItemSpacing();
    method public default androidx.compose.foundation.gestures.Orientation getOrientation();
    method public default boolean getReverseLayout();
    method public int getTotalItemsCount();
    method public int getViewportEndOffset();
    method @BytecodeOnly public default long getViewportSize-YbymL2g();
    method public int getViewportStartOffset();
    method public java.util.List<androidx.compose.foundation.lazy.LazyListItemInfo> getVisibleItemsInfo();
    property public default int afterContentPadding;
    property public default int beforeContentPadding;
    property public default int mainAxisItemSpacing;
    property public default androidx.compose.foundation.gestures.Orientation orientation;
    property public default boolean reverseLayout;
    property public abstract int totalItemsCount;
    property public abstract int viewportEndOffset;
    property public default androidx.compose.ui.unit.IntSize viewportSize;
    property public abstract int viewportStartOffset;
    property public abstract java.util.List<androidx.compose.foundation.lazy.LazyListItemInfo> visibleItemsInfo;
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public sealed interface LazyListPrefetchResultScope {
    method public int getIndex();
    method public int getMainAxisSize();
    property public abstract int index;
    property public abstract int mainAxisSize;
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public interface LazyListPrefetchScope {
    method public androidx.compose.foundation.lazy.layout.LazyLayoutPrefetchState.PrefetchHandle schedulePrefetch(int index, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.LazyListPrefetchResultScope,kotlin.Unit>? onPrefetchFinished);
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public interface LazyListPrefetchStrategy {
    method @Deprecated public default androidx.compose.foundation.lazy.layout.PrefetchScheduler? getPrefetchScheduler();
    method public void onNestedPrefetch(androidx.compose.foundation.lazy.layout.NestedPrefetchScope, int firstVisibleItemIndex);
    method public void onScroll(androidx.compose.foundation.lazy.LazyListPrefetchScope, float delta, androidx.compose.foundation.lazy.LazyListLayoutInfo layoutInfo);
    method public void onVisibleItemsUpdated(androidx.compose.foundation.lazy.LazyListPrefetchScope, androidx.compose.foundation.lazy.LazyListLayoutInfo layoutInfo);
    property @Deprecated public default androidx.compose.foundation.lazy.layout.PrefetchScheduler? prefetchScheduler;
  }

  public final class LazyListPrefetchStrategyKt {
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static androidx.compose.foundation.lazy.LazyListPrefetchStrategy LazyListPrefetchStrategy(optional int nestedPrefetchItemCount);
  }

  @androidx.compose.foundation.lazy.LazyScopeMarker @kotlin.jvm.JvmDefaultWithCompatibility public interface LazyListScope {
    method public default void item(optional Object? key, optional Object? contentType, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.LazyItemScope,kotlin.Unit> content);
    method @BytecodeOnly public default void item(Object?, Object?, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.LazyItemScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method @BytecodeOnly @Deprecated public default void item(Object!, kotlin.jvm.functions.Function3!);
    method @BytecodeOnly @Deprecated public default void items(int, kotlin.jvm.functions.Function1!, kotlin.jvm.functions.Function4!);
    method public default void items(int count, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,?>? key, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.LazyItemScope,? super java.lang.Integer,kotlin.Unit> itemContent);
    method @BytecodeOnly public default void items(int, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.lazy.LazyItemScope!,? super java.lang.Integer!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public default void stickyHeader(optional Object? key, optional Object? contentType, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.LazyItemScope,? super java.lang.Integer,kotlin.Unit> content);
    method @BytecodeOnly @Deprecated public default void stickyHeader(Object!, Object!, kotlin.jvm.functions.Function3!);
    method @BytecodeOnly public default void stickyHeader(Object?, Object?, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.lazy.LazyItemScope!,? super java.lang.Integer!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
  }

  public final class LazyListScrollScopeKt {
    method public static androidx.compose.foundation.lazy.layout.LazyLayoutScrollScope LazyLayoutScrollScope(androidx.compose.foundation.lazy.LazyListState state, androidx.compose.foundation.gestures.ScrollScope scrollScope);
  }

  @androidx.compose.runtime.Stable public final class LazyListState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public LazyListState();
    ctor @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public LazyListState(androidx.compose.foundation.lazy.layout.LazyLayoutCacheWindow cacheWindow, optional int firstVisibleItemIndex, optional int firstVisibleItemScrollOffset);
    ctor public LazyListState(optional int firstVisibleItemIndex, optional int firstVisibleItemScrollOffset);
    ctor @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public LazyListState(optional int firstVisibleItemIndex, optional int firstVisibleItemScrollOffset, optional androidx.compose.foundation.lazy.LazyListPrefetchStrategy prefetchStrategy);
    method public suspend Object? animateScrollToItem(@IntRange(from=0L) int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public float dispatchRawDelta(float delta);
    method @androidx.compose.runtime.annotation.FrequentlyChangingValue public int getFirstVisibleItemIndex();
    method @androidx.compose.runtime.annotation.FrequentlyChangingValue public int getFirstVisibleItemScrollOffset();
    method public androidx.compose.foundation.interaction.InteractionSource getInteractionSource();
    method @androidx.compose.runtime.annotation.FrequentlyChangingValue public androidx.compose.foundation.lazy.LazyListLayoutInfo getLayoutInfo();
    method public boolean isScrollInProgress();
    method public void requestScrollToItem(@IntRange(from=0L) int index, optional int scrollOffset);
    method public suspend Object? scroll(androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? scrollToItem(@IntRange(from=0L) int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public boolean canScrollBackward;
    property public boolean canScrollForward;
    property @androidx.compose.runtime.annotation.FrequentlyChangingValue public int firstVisibleItemIndex;
    property @androidx.compose.runtime.annotation.FrequentlyChangingValue public int firstVisibleItemScrollOffset;
    property public androidx.compose.foundation.interaction.InteractionSource interactionSource;
    property public boolean isScrollInProgress;
    property public boolean lastScrolledBackward;
    property public boolean lastScrolledForward;
    property @androidx.compose.runtime.annotation.FrequentlyChangingValue public androidx.compose.foundation.lazy.LazyListLayoutInfo layoutInfo;
    field public static final androidx.compose.foundation.lazy.LazyListState.Companion Companion;
  }

  public static final class LazyListState.Companion {
    method public androidx.compose.runtime.saveable.Saver<androidx.compose.foundation.lazy.LazyListState,? extends java.lang.Object?> getSaver();
    property public androidx.compose.runtime.saveable.Saver<androidx.compose.foundation.lazy.LazyListState,? extends java.lang.Object?> Saver;
  }

  public final class LazyListStateKt {
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.LazyListState rememberLazyListState(androidx.compose.foundation.lazy.layout.LazyLayoutCacheWindow cacheWindow, optional int initialFirstVisibleItemIndex, optional int initialFirstVisibleItemScrollOffset);
    method @BytecodeOnly @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.LazyListState rememberLazyListState(androidx.compose.foundation.lazy.layout.LazyLayoutCacheWindow, int, int, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.LazyListState rememberLazyListState(optional int initialFirstVisibleItemIndex, optional int initialFirstVisibleItemScrollOffset);
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.LazyListState rememberLazyListState(optional int initialFirstVisibleItemIndex, optional int initialFirstVisibleItemScrollOffset, optional androidx.compose.foundation.lazy.LazyListPrefetchStrategy prefetchStrategy);
    method @BytecodeOnly @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.LazyListState rememberLazyListState(int, int, androidx.compose.foundation.lazy.LazyListPrefetchStrategy?, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.LazyListState rememberLazyListState(int, int, androidx.compose.runtime.Composer?, int, int);
  }

  @kotlin.DslMarker public @interface LazyScopeMarker {
  }

}

package androidx.compose.foundation.lazy.grid {

  @androidx.compose.runtime.Stable public interface GridCells {
    method public java.util.List<java.lang.Integer> calculateCrossAxisCellSizes(androidx.compose.ui.unit.Density, int availableSize, int spacing);
  }

  public static final class GridCells.Adaptive implements androidx.compose.foundation.lazy.grid.GridCells {
    ctor @KotlinOnly public GridCells.Adaptive(androidx.compose.ui.unit.Dp minSize);
    ctor @BytecodeOnly public GridCells.Adaptive(float, kotlin.jvm.internal.DefaultConstructorMarker!);
    method public java.util.List<java.lang.Integer> calculateCrossAxisCellSizes(androidx.compose.ui.unit.Density, int availableSize, int spacing);
  }

  public static final class GridCells.Fixed implements androidx.compose.foundation.lazy.grid.GridCells {
    ctor public GridCells.Fixed(int count);
    method public java.util.List<java.lang.Integer> calculateCrossAxisCellSizes(androidx.compose.ui.unit.Density, int availableSize, int spacing);
  }

  public static final class GridCells.FixedSize implements androidx.compose.foundation.lazy.grid.GridCells {
    ctor @KotlinOnly public GridCells.FixedSize(androidx.compose.ui.unit.Dp size);
    ctor @BytecodeOnly public GridCells.FixedSize(float, kotlin.jvm.internal.DefaultConstructorMarker!);
    method public java.util.List<java.lang.Integer> calculateCrossAxisCellSizes(androidx.compose.ui.unit.Density, int availableSize, int spacing);
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class GridItemSpan {
    method @BytecodeOnly public static androidx.compose.foundation.lazy.grid.GridItemSpan! box-impl(long);
    method @BytecodeOnly public static int getCurrentLineSpan-impl(long);
    method @BytecodeOnly public long unbox-impl();
    property public int currentLineSpan;
  }

  public final class LazyGridDslKt {
    method @androidx.compose.runtime.Composable public static void LazyHorizontalGrid(androidx.compose.foundation.lazy.grid.GridCells rows, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.lazy.grid.LazyGridState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional boolean reverseLayout, optional androidx.compose.foundation.layout.Arrangement.Horizontal horizontalArrangement, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.grid.LazyGridScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyHorizontalGrid(androidx.compose.foundation.lazy.grid.GridCells, androidx.compose.ui.Modifier?, androidx.compose.foundation.lazy.grid.LazyGridState?, androidx.compose.foundation.layout.PaddingValues?, boolean, androidx.compose.foundation.layout.Arrangement.Horizontal?, androidx.compose.foundation.layout.Arrangement.Vertical?, androidx.compose.foundation.gestures.FlingBehavior?, boolean, androidx.compose.foundation.OverscrollEffect?, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.grid.LazyGridScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyHorizontalGrid(androidx.compose.foundation.lazy.grid.GridCells!, androidx.compose.ui.Modifier!, androidx.compose.foundation.lazy.grid.LazyGridState!, androidx.compose.foundation.layout.PaddingValues!, boolean, androidx.compose.foundation.layout.Arrangement.Horizontal!, androidx.compose.foundation.layout.Arrangement.Vertical!, androidx.compose.foundation.gestures.FlingBehavior!, boolean, kotlin.jvm.functions.Function1!, androidx.compose.runtime.Composer!, int, int);
    method @androidx.compose.runtime.Composable public static void LazyVerticalGrid(androidx.compose.foundation.lazy.grid.GridCells columns, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.lazy.grid.LazyGridState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional boolean reverseLayout, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.foundation.layout.Arrangement.Horizontal horizontalArrangement, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.grid.LazyGridScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyVerticalGrid(androidx.compose.foundation.lazy.grid.GridCells, androidx.compose.ui.Modifier?, androidx.compose.foundation.lazy.grid.LazyGridState?, androidx.compose.foundation.layout.PaddingValues?, boolean, androidx.compose.foundation.layout.Arrangement.Vertical?, androidx.compose.foundation.layout.Arrangement.Horizontal?, androidx.compose.foundation.gestures.FlingBehavior?, boolean, androidx.compose.foundation.OverscrollEffect?, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.grid.LazyGridScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyVerticalGrid(androidx.compose.foundation.lazy.grid.GridCells!, androidx.compose.ui.Modifier!, androidx.compose.foundation.lazy.grid.LazyGridState!, androidx.compose.foundation.layout.PaddingValues!, boolean, androidx.compose.foundation.layout.Arrangement.Vertical!, androidx.compose.foundation.layout.Arrangement.Horizontal!, androidx.compose.foundation.gestures.FlingBehavior!, boolean, kotlin.jvm.functions.Function1!, androidx.compose.runtime.Composer!, int, int);
    method public static inline <T> void items(androidx.compose.foundation.lazy.grid.LazyGridScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function1<? super T,?>? key, optional kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.grid.LazyGridItemSpanScope,? super T,androidx.compose.foundation.lazy.grid.GridItemSpan>? span, optional kotlin.jvm.functions.Function1<? super T,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void items(androidx.compose.foundation.lazy.grid.LazyGridScope, java.util.List<? extends T!>, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.grid.LazyGridItemSpanScope!,? super T!,androidx.compose.foundation.lazy.grid.GridItemSpan!>?, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public static inline <T> void items(androidx.compose.foundation.lazy.grid.LazyGridScope, T[] items, optional kotlin.jvm.functions.Function1<? super T,?>? key, optional kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.grid.LazyGridItemSpanScope,? super T,androidx.compose.foundation.lazy.grid.GridItemSpan>? span, optional kotlin.jvm.functions.Function1<? super T,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void items(androidx.compose.foundation.lazy.grid.LazyGridScope, T![], kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.grid.LazyGridItemSpanScope!,? super T!,androidx.compose.foundation.lazy.grid.GridItemSpan!>?, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public static inline <T> void itemsIndexed(androidx.compose.foundation.lazy.grid.LazyGridScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,?>? key, optional kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.grid.LazyGridItemSpanScope,? super java.lang.Integer,? super T,androidx.compose.foundation.lazy.grid.GridItemSpan>? span, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void itemsIndexed(androidx.compose.foundation.lazy.grid.LazyGridScope, java.util.List<? extends T!>, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.grid.LazyGridItemSpanScope!,? super java.lang.Integer!,? super T!,androidx.compose.foundation.lazy.grid.GridItemSpan!>?, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function5<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope!,? super java.lang.Integer!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public static inline <T> void itemsIndexed(androidx.compose.foundation.lazy.grid.LazyGridScope, T[] items, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,?>? key, optional kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.grid.LazyGridItemSpanScope,? super java.lang.Integer,? super T,androidx.compose.foundation.lazy.grid.GridItemSpan>? span, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void itemsIndexed(androidx.compose.foundation.lazy.grid.LazyGridScope, T![], kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.grid.LazyGridItemSpanScope!,? super java.lang.Integer!,? super T!,androidx.compose.foundation.lazy.grid.GridItemSpan!>?, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function5<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope!,? super java.lang.Integer!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
  }

  public sealed interface LazyGridItemInfo {
    method public int getColumn();
    method public Object? getContentType();
    method public int getIndex();
    method public Object getKey();
    method @BytecodeOnly public long getOffset-nOcc-ac();
    method public int getRow();
    method @BytecodeOnly public long getSize-YbymL2g();
    method public int getSpan();
    property public abstract int column;
    property public abstract Object? contentType;
    property public abstract int index;
    property public abstract Object key;
    property public abstract androidx.compose.ui.unit.IntOffset offset;
    property public abstract int row;
    property public abstract androidx.compose.ui.unit.IntSize size;
    property public abstract int span;
    field public static final androidx.compose.foundation.lazy.grid.LazyGridItemInfo.Companion Companion;
    field public static final int UnknownColumn = -1; // 0xffffffff
    field public static final int UnknownRow = -1; // 0xffffffff
  }

  public static final class LazyGridItemInfo.Companion {
    property public static int UnknownColumn;
    property public static int UnknownRow;
    field public static final int UnknownColumn = -1; // 0xffffffff
    field public static final int UnknownRow = -1; // 0xffffffff
  }

  @androidx.compose.foundation.lazy.grid.LazyGridScopeMarker @androidx.compose.runtime.Stable public sealed interface LazyGridItemScope {
    method public androidx.compose.ui.Modifier animateItem(androidx.compose.ui.Modifier, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float>? fadeInSpec, optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset>? placementSpec, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float>? fadeOutSpec);
  }

  @androidx.compose.foundation.lazy.grid.LazyGridScopeMarker public sealed interface LazyGridItemSpanScope {
    method public int getMaxCurrentLineSpan();
    method public int getMaxLineSpan();
    property public abstract int maxCurrentLineSpan;
    property public abstract int maxLineSpan;
  }

  public sealed interface LazyGridLayoutInfo {
    method public int getAfterContentPadding();
    method public int getBeforeContentPadding();
    method public int getMainAxisItemSpacing();
    method public int getMaxSpan();
    method public androidx.compose.foundation.gestures.Orientation getOrientation();
    method public boolean getReverseLayout();
    method public int getTotalItemsCount();
    method public int getViewportEndOffset();
    method @BytecodeOnly public long getViewportSize-YbymL2g();
    method public int getViewportStartOffset();
    method public java.util.List<androidx.compose.foundation.lazy.grid.LazyGridItemInfo> getVisibleItemsInfo();
    property public abstract int afterContentPadding;
    property public abstract int beforeContentPadding;
    property public abstract int mainAxisItemSpacing;
    property public abstract int maxSpan;
    property public abstract androidx.compose.foundation.gestures.Orientation orientation;
    property public abstract boolean reverseLayout;
    property public abstract int totalItemsCount;
    property public abstract int viewportEndOffset;
    property public abstract androidx.compose.ui.unit.IntSize viewportSize;
    property public abstract int viewportStartOffset;
    property public abstract java.util.List<androidx.compose.foundation.lazy.grid.LazyGridItemInfo> visibleItemsInfo;
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public sealed interface LazyGridPrefetchResultScope {
    method public int getLineIndex();
    method public int getLineItemCount();
    method public int getMainAxisSize(int itemIndexInLine);
    property public abstract int lineIndex;
    property public abstract int lineItemCount;
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public interface LazyGridPrefetchScope {
    method public java.util.List<androidx.compose.foundation.lazy.layout.LazyLayoutPrefetchState.PrefetchHandle> scheduleLinePrefetch(int lineIndex);
    method public default java.util.List<androidx.compose.foundation.lazy.layout.LazyLayoutPrefetchState.PrefetchHandle> scheduleLinePrefetch(int lineIndex, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.grid.LazyGridPrefetchResultScope,kotlin.Unit>? onPrefetchFinished);
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public interface LazyGridPrefetchStrategy {
    method @Deprecated public default androidx.compose.foundation.lazy.layout.PrefetchScheduler? getPrefetchScheduler();
    method public void onNestedPrefetch(androidx.compose.foundation.lazy.layout.NestedPrefetchScope, int firstVisibleItemIndex);
    method public void onScroll(androidx.compose.foundation.lazy.grid.LazyGridPrefetchScope, float delta, androidx.compose.foundation.lazy.grid.LazyGridLayoutInfo layoutInfo);
    method public void onVisibleItemsUpdated(androidx.compose.foundation.lazy.grid.LazyGridPrefetchScope, androidx.compose.foundation.lazy.grid.LazyGridLayoutInfo layoutInfo);
    property @Deprecated public default androidx.compose.foundation.lazy.layout.PrefetchScheduler? prefetchScheduler;
  }

  public final class LazyGridPrefetchStrategyKt {
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static androidx.compose.foundation.lazy.grid.LazyGridPrefetchStrategy LazyGridPrefetchStrategy(optional int nestedPrefetchItemCount);
  }

  @androidx.compose.foundation.lazy.grid.LazyGridScopeMarker public sealed interface LazyGridScope {
    method public void item(optional Object? key, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.grid.LazyGridItemSpanScope,androidx.compose.foundation.lazy.grid.GridItemSpan>? span, optional Object? contentType, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope,kotlin.Unit> content);
    method @BytecodeOnly public void item(Object?, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.grid.LazyGridItemSpanScope!,androidx.compose.foundation.lazy.grid.GridItemSpan!>?, Object?, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public void items(int count, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,?>? key, optional kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.grid.LazyGridItemSpanScope,? super java.lang.Integer,androidx.compose.foundation.lazy.grid.GridItemSpan>? span, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,? extends java.lang.Object?> contentType, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope,? super java.lang.Integer,kotlin.Unit> itemContent);
    method @BytecodeOnly public void items(int, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.grid.LazyGridItemSpanScope!,? super java.lang.Integer!,androidx.compose.foundation.lazy.grid.GridItemSpan!>?, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope!,? super java.lang.Integer!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public void stickyHeader(optional Object? key, optional Object? contentType, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope,? super java.lang.Integer,kotlin.Unit> content);
    method @BytecodeOnly public void stickyHeader(Object?, Object?, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.lazy.grid.LazyGridItemScope!,? super java.lang.Integer!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
  }

  @kotlin.DslMarker public @interface LazyGridScopeMarker {
  }

  public final class LazyGridScrollScopeKt {
    method public static androidx.compose.foundation.lazy.layout.LazyLayoutScrollScope LazyLayoutScrollScope(androidx.compose.foundation.lazy.grid.LazyGridState state, androidx.compose.foundation.gestures.ScrollScope scrollScope);
  }

  public final class LazyGridSpanKt {
    method @InaccessibleFromJava public static androidx.compose.foundation.lazy.grid.GridItemSpan GridItemSpan(@IntRange(from=1L) int currentLineSpan);
  }

  @androidx.compose.runtime.Stable public final class LazyGridState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public LazyGridState();
    ctor @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public LazyGridState(androidx.compose.foundation.lazy.layout.LazyLayoutCacheWindow cacheWindow, optional int firstVisibleItemIndex, optional int firstVisibleItemScrollOffset);
    ctor public LazyGridState(optional int firstVisibleItemIndex, optional int firstVisibleItemScrollOffset);
    ctor @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public LazyGridState(optional int firstVisibleItemIndex, optional int firstVisibleItemScrollOffset, optional androidx.compose.foundation.lazy.grid.LazyGridPrefetchStrategy prefetchStrategy);
    method public suspend Object? animateScrollToItem(@IntRange(from=0L) int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public float dispatchRawDelta(float delta);
    method @androidx.compose.runtime.annotation.FrequentlyChangingValue public int getFirstVisibleItemIndex();
    method @androidx.compose.runtime.annotation.FrequentlyChangingValue public int getFirstVisibleItemScrollOffset();
    method public androidx.compose.foundation.interaction.InteractionSource getInteractionSource();
    method @androidx.compose.runtime.annotation.FrequentlyChangingValue public androidx.compose.foundation.lazy.grid.LazyGridLayoutInfo getLayoutInfo();
    method public boolean isScrollInProgress();
    method public void requestScrollToItem(@IntRange(from=0L) int index, optional int scrollOffset);
    method public suspend Object? scroll(androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? scrollToItem(@IntRange(from=0L) int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public boolean canScrollBackward;
    property public boolean canScrollForward;
    property @androidx.compose.runtime.annotation.FrequentlyChangingValue public int firstVisibleItemIndex;
    property @androidx.compose.runtime.annotation.FrequentlyChangingValue public int firstVisibleItemScrollOffset;
    property public androidx.compose.foundation.interaction.InteractionSource interactionSource;
    property public boolean isScrollInProgress;
    property public boolean lastScrolledBackward;
    property public boolean lastScrolledForward;
    property @androidx.compose.runtime.annotation.FrequentlyChangingValue public androidx.compose.foundation.lazy.grid.LazyGridLayoutInfo layoutInfo;
    field public static final androidx.compose.foundation.lazy.grid.LazyGridState.Companion Companion;
  }

  public static final class LazyGridState.Companion {
    method public androidx.compose.runtime.saveable.Saver<androidx.compose.foundation.lazy.grid.LazyGridState,? extends java.lang.Object?> getSaver();
    property public androidx.compose.runtime.saveable.Saver<androidx.compose.foundation.lazy.grid.LazyGridState,? extends java.lang.Object?> Saver;
  }

  public final class LazyGridStateKt {
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.grid.LazyGridState rememberLazyGridState(androidx.compose.foundation.lazy.layout.LazyLayoutCacheWindow cacheWindow, optional int initialFirstVisibleItemIndex, optional int initialFirstVisibleItemScrollOffset);
    method @BytecodeOnly @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.grid.LazyGridState rememberLazyGridState(androidx.compose.foundation.lazy.layout.LazyLayoutCacheWindow, int, int, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.grid.LazyGridState rememberLazyGridState(optional int initialFirstVisibleItemIndex, optional int initialFirstVisibleItemScrollOffset);
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.grid.LazyGridState rememberLazyGridState(optional int initialFirstVisibleItemIndex, optional int initialFirstVisibleItemScrollOffset, optional androidx.compose.foundation.lazy.grid.LazyGridPrefetchStrategy prefetchStrategy);
    method @BytecodeOnly @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.grid.LazyGridState rememberLazyGridState(int, int, androidx.compose.foundation.lazy.grid.LazyGridPrefetchStrategy?, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.grid.LazyGridState rememberLazyGridState(int, int, androidx.compose.runtime.Composer?, int, int);
  }

}

package androidx.compose.foundation.lazy.layout {

  public sealed interface IntervalList<T> {
    method public void forEach(optional int fromIndex, optional int toIndex, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.layout.IntervalList.Interval<? extends T>,kotlin.Unit> block);
    method public operator androidx.compose.foundation.lazy.layout.IntervalList.Interval<T> get(int index);
    method public int getSize();
    property public abstract int size;
  }

  public static final class IntervalList.Interval<T> {
    method public int getSize();
    method public int getStartIndex();
    method public T getValue();
    property public int size;
    property public int startIndex;
    property public T value;
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Stable public interface LazyLayoutCacheWindow {
    method public default int calculateAheadWindow(androidx.compose.ui.unit.Density, int viewport);
    method public default int calculateBehindWindow(androidx.compose.ui.unit.Density, int viewport);
  }

  public final class LazyLayoutCacheWindowKt {
    method @KotlinOnly @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static androidx.compose.foundation.lazy.layout.LazyLayoutCacheWindow LazyLayoutCacheWindow(optional androidx.compose.ui.unit.Dp ahead, optional androidx.compose.ui.unit.Dp behind);
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static androidx.compose.foundation.lazy.layout.LazyLayoutCacheWindow LazyLayoutCacheWindow(optional @FloatRange(from=0.0) float aheadFraction, optional @FloatRange(from=0.0) float behindFraction);
    method @BytecodeOnly @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static androidx.compose.foundation.lazy.layout.LazyLayoutCacheWindow LazyLayoutCacheWindow-YgX7TsA(float, float);
  }

  public abstract class LazyLayoutIntervalContent<Interval extends androidx.compose.foundation.lazy.layout.LazyLayoutIntervalContent.Interval> {
    ctor public LazyLayoutIntervalContent();
    method public final Object? getContentType(int index);
    method public abstract androidx.compose.foundation.lazy.layout.IntervalList<Interval> getIntervals();
    method public final int getItemCount();
    method public final Object getKey(int index);
    method public final inline <T> T withInterval(int globalIndex, kotlin.jvm.functions.Function2<? super java.lang.Integer,? super Interval,? extends T> block);
    property public abstract androidx.compose.foundation.lazy.layout.IntervalList<Interval> intervals;
    property public final int itemCount;
  }

  public static interface LazyLayoutIntervalContent.Interval {
    method public default kotlin.jvm.functions.Function1<java.lang.Integer,java.lang.Object>? getKey();
    method public default kotlin.jvm.functions.Function1<java.lang.Integer,java.lang.Object?> getType();
    property public default kotlin.jvm.functions.Function1<java.lang.Integer,java.lang.Object>? key;
    property public default kotlin.jvm.functions.Function1<java.lang.Integer,java.lang.Object?> type;
  }

  @androidx.compose.runtime.Stable public interface LazyLayoutItemProvider {
    method @androidx.compose.runtime.Composable public void Item(@IntRange(from=0L) int index, Object key);
    method @BytecodeOnly @androidx.compose.runtime.Composable public void Item(@IntRange(from=0L) int, Object, androidx.compose.runtime.Composer?, int);
    method public default Object? getContentType(@IntRange(from=0L) int index);
    method public default int getIndex(Object key);
    method @IntRange(from=0L) public int getItemCount();
    method public default Object getKey(@IntRange(from=0L) int index);
    property @IntRange(from=0L) public abstract int itemCount;
  }

  public final class LazyLayoutKt {
    method @BytecodeOnly @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static void LazyLayout(kotlin.jvm.functions.Function0!, androidx.compose.ui.Modifier!, androidx.compose.foundation.lazy.layout.LazyLayoutPrefetchState!, kotlin.jvm.functions.Function2!, androidx.compose.runtime.Composer!, int, int);
    method @androidx.compose.runtime.Composable public static void LazyLayout(kotlin.jvm.functions.Function0<? extends androidx.compose.foundation.lazy.layout.LazyLayoutItemProvider> itemProvider, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.lazy.layout.LazyLayoutPrefetchState? prefetchState, androidx.compose.foundation.lazy.layout.LazyLayoutMeasurePolicy measurePolicy);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void LazyLayout(kotlin.jvm.functions.Function0<? extends androidx.compose.foundation.lazy.layout.LazyLayoutItemProvider!>, androidx.compose.ui.Modifier?, androidx.compose.foundation.lazy.layout.LazyLayoutPrefetchState?, androidx.compose.foundation.lazy.layout.LazyLayoutMeasurePolicy, androidx.compose.runtime.Composer?, int, int);
  }

  public fun interface LazyLayoutMeasurePolicy {
    method @KotlinOnly public androidx.compose.ui.layout.MeasureResult measure(androidx.compose.foundation.lazy.layout.LazyLayoutMeasureScope, androidx.compose.ui.unit.Constraints constraints);
    method @BytecodeOnly public androidx.compose.ui.layout.MeasureResult measure-0kLqBqw(androidx.compose.foundation.lazy.layout.LazyLayoutMeasureScope, long);
  }

  @androidx.compose.runtime.Stable public sealed interface LazyLayoutMeasureScope extends androidx.compose.ui.layout.MeasureScope {
    method public java.util.List<androidx.compose.ui.layout.Measurable> compose(@IntRange(from=0L) int index);
    method @KotlinOnly @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public java.util.List<androidx.compose.ui.layout.Placeable> measure(int index, androidx.compose.ui.unit.Constraints constraints);
    method @BytecodeOnly @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public java.util.List<androidx.compose.ui.layout.Placeable!> measure-0kLqBqw(int, long);
  }

  public final class LazyLayoutPinnableItemKt {
    method @androidx.compose.runtime.Composable public static void LazyLayoutPinnableItem(Object? key, int index, androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList pinnedItemList, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void LazyLayoutPinnableItem(Object?, int, androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int);
  }

  public final class LazyLayoutPinnedItemList implements kotlin.jvm.internal.markers.KMappedMarker java.util.List<androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem> {
    ctor public LazyLayoutPinnedItemList();
    method @BytecodeOnly public boolean add(androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem!);
    method @BytecodeOnly public void add(int, androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem!);
    method @BytecodeOnly public boolean addAll(int, java.util.Collection<? extends androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem!>!);
    method @BytecodeOnly public boolean addAll(java.util.Collection<? extends androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem!>!);
    method @BytecodeOnly public void addFirst(androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem!);
    method @BytecodeOnly public void addLast(androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem!);
    method @BytecodeOnly public void clear();
    method @BytecodeOnly public boolean contains(androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem);
    method @BytecodeOnly public boolean contains(Object!);
    method @BytecodeOnly public boolean containsAll(java.util.Collection<? extends java.lang.Object!>);
    method @BytecodeOnly public androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem get(int);
    method @BytecodeOnly public int getSize();
    method @BytecodeOnly public int indexOf(androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem);
    method @BytecodeOnly public int indexOf(Object!);
    method @BytecodeOnly public boolean isEmpty();
    method @BytecodeOnly public java.util.Iterator<androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem!> iterator();
    method @BytecodeOnly public int lastIndexOf(androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem);
    method @BytecodeOnly public int lastIndexOf(Object!);
    method @BytecodeOnly public java.util.ListIterator<androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem!> listIterator();
    method @BytecodeOnly public java.util.ListIterator<androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem!> listIterator(int);
    method @BytecodeOnly public androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem! remove(int);
    method @BytecodeOnly public boolean remove(Object!);
    method @BytecodeOnly public boolean removeAll(java.util.Collection<? extends java.lang.Object!>!);
    method @BytecodeOnly public androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem! removeFirst();
    method @BytecodeOnly public androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem! removeLast();
    method @BytecodeOnly public void replaceAll(java.util.function.UnaryOperator<androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem!>!);
    method @BytecodeOnly public boolean retainAll(java.util.Collection<? extends java.lang.Object!>!);
    method @BytecodeOnly public androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem! set(int, androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem!);
    method @BytecodeOnly public int size();
    method @BytecodeOnly public void sort(java.util.Comparator<? super androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem!>!);
    method @BytecodeOnly public java.util.List<androidx.compose.foundation.lazy.layout.LazyLayoutPinnedItemList.PinnedItem!> subList(int, int);
    method @BytecodeOnly public Object![]! toArray();
    method @BytecodeOnly public <T> T![]! toArray(T![]!);
  }

  public static sealed interface LazyLayoutPinnedItemList.PinnedItem {
    method public int getIndex();
    method public Object? getKey();
    property public abstract int index;
    property public abstract Object? key;
  }

  @androidx.compose.runtime.Stable public final class LazyLayoutPrefetchState {
    ctor public LazyLayoutPrefetchState();
    ctor @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public LazyLayoutPrefetchState(optional androidx.compose.foundation.lazy.layout.PrefetchScheduler? prefetchScheduler, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.layout.NestedPrefetchScope,kotlin.Unit>? onNestedPrefetch);
    ctor @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public LazyLayoutPrefetchState(optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.layout.NestedPrefetchScope,kotlin.Unit>? onNestedPrefetch);
    method public androidx.compose.foundation.lazy.layout.LazyLayoutPrefetchState.PrefetchHandle schedulePrecomposition(@IntRange(from=0L) int index);
    method @KotlinOnly public androidx.compose.foundation.lazy.layout.LazyLayoutPrefetchState.PrefetchHandle schedulePrecompositionAndPremeasure(@IntRange(from=0L) int index, androidx.compose.ui.unit.Constraints constraints, optional kotlin.jvm.functions.Function1<androidx.compose.foundation.lazy.layout.LazyLayoutPrefetchState.PrefetchResultScope,kotlin.Unit>? onItemPremeasured);
    method @BytecodeOnly public androidx.compose.foundation.lazy.layout.LazyLayoutPrefetchState.PrefetchHandle schedulePrecompositionAndPremeasure-VKLhPVY(@IntRange(from=0L) int, long, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.layout.LazyLayoutPrefetchState.PrefetchResultScope!,kotlin.Unit!>?);
  }

  public static sealed interface LazyLayoutPrefetchState.PrefetchHandle {
    method public void cancel();
    method public void markAsUrgent();
  }

  public static sealed interface LazyLayoutPrefetchState.PrefetchResultScope {
    method public int getIndex();
    method public int getPlaceablesCount();
    method @KotlinOnly public androidx.compose.ui.unit.IntSize getSize(@IntRange(from=0L) int placeableIndex);
    method @BytecodeOnly public long getSize-YEO4UFw(@IntRange(from=0L) int);
    property public abstract int index;
    property public abstract int placeablesCount;
  }

  public interface LazyLayoutScrollScope extends androidx.compose.foundation.gestures.ScrollScope {
    method public int calculateDistanceTo(int targetIndex, optional int targetOffset);
    method public int getFirstVisibleItemIndex();
    method public int getFirstVisibleItemScrollOffset();
    method public int getItemCount();
    method public int getLastVisibleItemIndex();
    method public void snapToItem(int index, optional int offset);
    property public abstract int firstVisibleItemIndex;
    property public abstract int firstVisibleItemScrollOffset;
    property public abstract int itemCount;
    property public abstract int lastVisibleItemIndex;
  }

  public final class Lazy_androidKt {
    method public static Object getDefaultLazyLayoutKey(int index);
  }

  public final class MutableIntervalList<T> implements androidx.compose.foundation.lazy.layout.IntervalList<T> {
    ctor public MutableIntervalList();
    method public void addInterval(int size, T value);
    method public void forEach(int fromIndex, int toIndex, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.layout.IntervalList.Interval<? extends T>,kotlin.Unit> block);
    method public androidx.compose.foundation.lazy.layout.IntervalList.Interval<T> get(int index);
    method public int getSize();
    property public int size;
  }

  @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public sealed interface NestedPrefetchScope {
    method public default int getNestedPrefetchItemCount();
    method public void schedulePrecomposition(int index);
    method @KotlinOnly public void schedulePrecompositionAndPremeasure(int index, androidx.compose.ui.unit.Constraints constraints);
    method @BytecodeOnly public void schedulePrecompositionAndPremeasure-0kLqBqw(int, long);
    method @Deprecated public default void schedulePrefetch(int index);
    method @KotlinOnly @Deprecated public default void schedulePrefetch(int index, androidx.compose.ui.unit.Constraints constraints);
    method @BytecodeOnly @Deprecated public default void schedulePrefetch-0kLqBqw(int, long);
    property public default int nestedPrefetchItemCount;
  }

  @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public sealed interface PrefetchRequest {
    method @Deprecated public boolean execute(androidx.compose.foundation.lazy.layout.PrefetchRequestScope);
  }

  @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public interface PrefetchRequestScope {
    method @Deprecated public long availableTimeNanos();
  }

  @Deprecated @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public interface PrefetchScheduler {
    method @Deprecated public void schedulePrefetch(androidx.compose.foundation.lazy.layout.PrefetchRequest prefetchRequest);
  }

}

package androidx.compose.foundation.lazy.staggeredgrid {

  public final class LazyStaggeredGridDslKt {
    method @KotlinOnly @androidx.compose.runtime.Composable public static void LazyHorizontalStaggeredGrid(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells rows, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional boolean reverseLayout, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.ui.unit.Dp horizontalItemSpacing, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function1<androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyHorizontalStaggeredGrid-121YqSk(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells, androidx.compose.ui.Modifier?, androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState?, androidx.compose.foundation.layout.PaddingValues?, boolean, androidx.compose.foundation.layout.Arrangement.Vertical?, float, androidx.compose.foundation.gestures.FlingBehavior?, boolean, androidx.compose.foundation.OverscrollEffect?, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyHorizontalStaggeredGrid-cJHQLPU(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells!, androidx.compose.ui.Modifier!, androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState!, androidx.compose.foundation.layout.PaddingValues!, boolean, androidx.compose.foundation.layout.Arrangement.Vertical!, float, androidx.compose.foundation.gestures.FlingBehavior!, boolean, kotlin.jvm.functions.Function1!, androidx.compose.runtime.Composer!, int, int);
    method @KotlinOnly @androidx.compose.runtime.Composable public static void LazyVerticalStaggeredGrid(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells columns, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState state, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional boolean reverseLayout, optional androidx.compose.ui.unit.Dp verticalItemSpacing, optional androidx.compose.foundation.layout.Arrangement.Horizontal horizontalArrangement, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional boolean userScrollEnabled, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function1<androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridScope,kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyVerticalStaggeredGrid-6qCrX9Q(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells, androidx.compose.ui.Modifier?, androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState?, androidx.compose.foundation.layout.PaddingValues?, boolean, float, androidx.compose.foundation.layout.Arrangement.Horizontal?, androidx.compose.foundation.gestures.FlingBehavior?, boolean, androidx.compose.foundation.OverscrollEffect?, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridScope!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void LazyVerticalStaggeredGrid-zadm560(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells!, androidx.compose.ui.Modifier!, androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState!, androidx.compose.foundation.layout.PaddingValues!, boolean, float, androidx.compose.foundation.layout.Arrangement.Horizontal!, androidx.compose.foundation.gestures.FlingBehavior!, boolean, kotlin.jvm.functions.Function1!, androidx.compose.runtime.Composer!, int, int);
    method public static inline <T> void items(androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function1<? super T,?>? key, optional kotlin.jvm.functions.Function1<? super T,? extends java.lang.Object?> contentType, optional kotlin.jvm.functions.Function1<? super T,androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan>? span, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemScope,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void items(androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridScope, java.util.List<? extends T!>, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function1<? super T!,androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan!>?, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemScope!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public static inline <T> void items(androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridScope, T[] items, optional kotlin.jvm.functions.Function1<? super T,?>? key, optional kotlin.jvm.functions.Function1<? super T,? extends java.lang.Object?> contentType, optional kotlin.jvm.functions.Function1<? super T,androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan>? span, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemScope,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void items(androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridScope, T![], kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function1<? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function1<? super T!,androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan!>?, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemScope!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public static inline <T> void itemsIndexed(androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridScope, java.util.List<? extends T> items, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,?>? key, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,? extends java.lang.Object?> contentType, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan>? span, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void itemsIndexed(androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridScope, java.util.List<? extends T!>, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan!>?, kotlin.jvm.functions.Function5<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemScope!,? super java.lang.Integer!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public static inline <T> void itemsIndexed(androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridScope, T[] items, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,?>? key, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,? extends java.lang.Object?> contentType, optional kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan>? span, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
    method @BytecodeOnly public static <T> void itemsIndexed(androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridScope, T![], kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,? extends java.lang.Object!>, kotlin.jvm.functions.Function2<? super java.lang.Integer!,? super T!,androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan!>?, kotlin.jvm.functions.Function5<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemScope!,? super java.lang.Integer!,? super T!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
  }

  public sealed interface LazyStaggeredGridItemInfo {
    method public Object? getContentType();
    method public int getIndex();
    method public Object getKey();
    method public int getLane();
    method @BytecodeOnly public long getOffset-nOcc-ac();
    method @BytecodeOnly public long getSize-YbymL2g();
    property public abstract Object? contentType;
    property public abstract int index;
    property public abstract Object key;
    property public abstract int lane;
    property public abstract androidx.compose.ui.unit.IntOffset offset;
    property public abstract androidx.compose.ui.unit.IntSize size;
  }

  @androidx.compose.runtime.Stable public sealed interface LazyStaggeredGridItemScope {
    method public androidx.compose.ui.Modifier animateItem(androidx.compose.ui.Modifier, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float>? fadeInSpec, optional androidx.compose.animation.core.FiniteAnimationSpec<androidx.compose.ui.unit.IntOffset>? placementSpec, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float>? fadeOutSpec);
  }

  public sealed interface LazyStaggeredGridLayoutInfo {
    method public int getAfterContentPadding();
    method public int getBeforeContentPadding();
    method public int getMainAxisItemSpacing();
    method public androidx.compose.foundation.gestures.Orientation getOrientation();
    method public int getTotalItemsCount();
    method public int getViewportEndOffset();
    method @BytecodeOnly public long getViewportSize-YbymL2g();
    method public int getViewportStartOffset();
    method public java.util.List<androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemInfo> getVisibleItemsInfo();
    property public abstract int afterContentPadding;
    property public abstract int beforeContentPadding;
    property public abstract int mainAxisItemSpacing;
    property public abstract androidx.compose.foundation.gestures.Orientation orientation;
    property public abstract int totalItemsCount;
    property public abstract int viewportEndOffset;
    property public abstract androidx.compose.ui.unit.IntSize viewportSize;
    property public abstract int viewportStartOffset;
    property public abstract java.util.List<androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemInfo> visibleItemsInfo;
  }

  public sealed interface LazyStaggeredGridScope {
    method public void item(optional Object? key, optional Object? contentType, optional androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan? span, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemScope,kotlin.Unit> content);
    method @BytecodeOnly public void item(Object?, Object?, androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan?, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemScope!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public void items(int count, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,?>? key, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,? extends java.lang.Object?> contentType, optional kotlin.jvm.functions.Function1<? super java.lang.Integer,androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan>? span, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemScope,? super java.lang.Integer,kotlin.Unit> itemContent);
    method @BytecodeOnly public void items(int, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>?, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>, kotlin.jvm.functions.Function1<? super java.lang.Integer!,androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan!>?, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemScope!,? super java.lang.Integer!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
  }

  public final class LazyStaggeredGridScrollScopeKt {
    method public static androidx.compose.foundation.lazy.layout.LazyLayoutScrollScope LazyLayoutScrollScope(androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState state, androidx.compose.foundation.gestures.ScrollScope scrollScope);
  }

  @androidx.compose.runtime.Stable public final class LazyStaggeredGridState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor public LazyStaggeredGridState(optional int initialFirstVisibleItemIndex, optional int initialFirstVisibleItemOffset);
    method public suspend Object? animateScrollToItem(int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public float dispatchRawDelta(float delta);
    method public int getFirstVisibleItemIndex();
    method public int getFirstVisibleItemScrollOffset();
    method public androidx.compose.foundation.interaction.InteractionSource getInteractionSource();
    method public androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridLayoutInfo getLayoutInfo();
    method public boolean isScrollInProgress();
    method public void requestScrollToItem(@IntRange(from=0L) int index, optional int scrollOffset);
    method public suspend Object? scroll(androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? scrollToItem(int index, optional int scrollOffset, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public boolean canScrollBackward;
    property public boolean canScrollForward;
    property public int firstVisibleItemIndex;
    property public int firstVisibleItemScrollOffset;
    property public androidx.compose.foundation.interaction.InteractionSource interactionSource;
    property public boolean isScrollInProgress;
    property public boolean lastScrolledBackward;
    property public boolean lastScrolledForward;
    property public androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridLayoutInfo layoutInfo;
    field public static final androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState.Companion Companion;
  }

  public static final class LazyStaggeredGridState.Companion {
    method public androidx.compose.runtime.saveable.Saver<androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState,java.lang.Object> getSaver();
    property public androidx.compose.runtime.saveable.Saver<androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState,java.lang.Object> Saver;
  }

  public final class LazyStaggeredGridStateKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState rememberLazyStaggeredGridState(optional int initialFirstVisibleItemIndex, optional int initialFirstVisibleItemScrollOffset);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState rememberLazyStaggeredGridState(int, int, androidx.compose.runtime.Composer?, int, int);
  }

  @androidx.compose.runtime.Stable public interface StaggeredGridCells {
    method public int[] calculateCrossAxisCellSizes(androidx.compose.ui.unit.Density, int availableSize, int spacing);
  }

  public static final class StaggeredGridCells.Adaptive implements androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells {
    ctor @KotlinOnly public StaggeredGridCells.Adaptive(androidx.compose.ui.unit.Dp minSize);
    ctor @BytecodeOnly public StaggeredGridCells.Adaptive(float, kotlin.jvm.internal.DefaultConstructorMarker!);
    method public int[] calculateCrossAxisCellSizes(androidx.compose.ui.unit.Density, int availableSize, int spacing);
  }

  public static final class StaggeredGridCells.Fixed implements androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells {
    ctor public StaggeredGridCells.Fixed(int count);
    method public int[] calculateCrossAxisCellSizes(androidx.compose.ui.unit.Density, int availableSize, int spacing);
  }

  public static final class StaggeredGridCells.FixedSize implements androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells {
    ctor @KotlinOnly public StaggeredGridCells.FixedSize(androidx.compose.ui.unit.Dp size);
    ctor @BytecodeOnly public StaggeredGridCells.FixedSize(float, kotlin.jvm.internal.DefaultConstructorMarker!);
    method public int[] calculateCrossAxisCellSizes(androidx.compose.ui.unit.Density, int availableSize, int spacing);
  }

  public final class StaggeredGridItemSpan {
    field public static final androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan.Companion Companion;
  }

  public static final class StaggeredGridItemSpan.Companion {
    method public androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan getFullLine();
    method public androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan getSingleLane();
    property public androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan FullLine;
    property public androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridItemSpan SingleLane;
  }

}

package androidx.compose.foundation.pager {

  public sealed interface PageInfo {
    method public int getIndex();
    method public Object getKey();
    method public int getOffset();
    property public abstract int index;
    property public abstract Object key;
    property public abstract int offset;
  }

  @androidx.compose.runtime.Stable public interface PageSize {
    method public int calculateMainAxisPageSize(androidx.compose.ui.unit.Density, int availableSpace, int pageSpacing);
  }

  public static final class PageSize.Fill implements androidx.compose.foundation.pager.PageSize {
    method public int calculateMainAxisPageSize(androidx.compose.ui.unit.Density, int availableSpace, int pageSpacing);
    field public static final androidx.compose.foundation.pager.PageSize.Fill INSTANCE;
  }

  public static final class PageSize.Fixed implements androidx.compose.foundation.pager.PageSize {
    ctor @KotlinOnly public PageSize.Fixed(androidx.compose.ui.unit.Dp pageSize);
    ctor @BytecodeOnly public PageSize.Fixed(float, kotlin.jvm.internal.DefaultConstructorMarker!);
    method public int calculateMainAxisPageSize(androidx.compose.ui.unit.Density, int availableSpace, int pageSpacing);
    method @BytecodeOnly public float getPageSize-D9Ej5fM();
    property public androidx.compose.ui.unit.Dp pageSize;
  }

  public final class PagerDefaults {
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.gestures.TargetedFlingBehavior flingBehavior(androidx.compose.foundation.pager.PagerState state, optional androidx.compose.foundation.pager.PagerSnapDistance pagerSnapDistance, optional androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> snapAnimationSpec, optional @FloatRange(from=0.0, to=1.0) float snapPositionalThreshold);
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.compose.foundation.gestures.TargetedFlingBehavior flingBehavior(androidx.compose.foundation.pager.PagerState, androidx.compose.foundation.pager.PagerSnapDistance?, androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float!>?, androidx.compose.animation.core.AnimationSpec<java.lang.Float!>?, @FloatRange(from=0.0, to=1.0) float, androidx.compose.runtime.Composer?, int, int);
    method @androidx.compose.runtime.Composable public androidx.compose.ui.input.nestedscroll.NestedScrollConnection pageNestedScrollConnection(androidx.compose.foundation.pager.PagerState state, androidx.compose.foundation.gestures.Orientation orientation);
    method @BytecodeOnly @androidx.compose.runtime.Composable public androidx.compose.ui.input.nestedscroll.NestedScrollConnection pageNestedScrollConnection(androidx.compose.foundation.pager.PagerState, androidx.compose.foundation.gestures.Orientation, androidx.compose.runtime.Composer?, int);
    property public static int BeyondViewportPageCount;
    field public static final int BeyondViewportPageCount = 0; // 0x0
    field public static final androidx.compose.foundation.pager.PagerDefaults INSTANCE;
  }

  public final class PagerKt {
    method @KotlinOnly @androidx.compose.runtime.Composable public static void HorizontalPager(androidx.compose.foundation.pager.PagerState state, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.pager.PageSize pageSize, optional int beyondViewportPageCount, optional androidx.compose.ui.unit.Dp pageSpacing, optional androidx.compose.ui.Alignment.Vertical verticalAlignment, optional androidx.compose.foundation.gestures.TargetedFlingBehavior flingBehavior, optional boolean userScrollEnabled, optional boolean reverseLayout, optional kotlin.jvm.functions.Function1<java.lang.Integer,java.lang.Object>? key, optional androidx.compose.ui.input.nestedscroll.NestedScrollConnection pageNestedScrollConnection, optional androidx.compose.foundation.gestures.snapping.SnapPosition snapPosition, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function2<androidx.compose.foundation.pager.PagerScope,java.lang.Integer,kotlin.Unit> pageContent);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void HorizontalPager--8jOkeI(androidx.compose.foundation.pager.PagerState, androidx.compose.ui.Modifier?, androidx.compose.foundation.layout.PaddingValues?, androidx.compose.foundation.pager.PageSize?, int, float, androidx.compose.ui.Alignment.Vertical?, androidx.compose.foundation.gestures.TargetedFlingBehavior?, boolean, boolean, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>?, androidx.compose.ui.input.nestedscroll.NestedScrollConnection?, androidx.compose.foundation.gestures.snapping.SnapPosition?, androidx.compose.foundation.OverscrollEffect?, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.pager.PagerScope!,? super java.lang.Integer!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public static void HorizontalPager-oI3XNZo(androidx.compose.foundation.pager.PagerState!, androidx.compose.ui.Modifier!, androidx.compose.foundation.layout.PaddingValues!, androidx.compose.foundation.pager.PageSize!, int, float, androidx.compose.ui.Alignment.Vertical!, androidx.compose.foundation.gestures.TargetedFlingBehavior!, boolean, boolean, kotlin.jvm.functions.Function1!, androidx.compose.ui.input.nestedscroll.NestedScrollConnection!, androidx.compose.foundation.gestures.snapping.SnapPosition!, kotlin.jvm.functions.Function4!, androidx.compose.runtime.Composer!, int, int, int);
    method @KotlinOnly @androidx.compose.runtime.Composable public static void VerticalPager(androidx.compose.foundation.pager.PagerState state, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional androidx.compose.foundation.pager.PageSize pageSize, optional int beyondViewportPageCount, optional androidx.compose.ui.unit.Dp pageSpacing, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, optional androidx.compose.foundation.gestures.TargetedFlingBehavior flingBehavior, optional boolean userScrollEnabled, optional boolean reverseLayout, optional kotlin.jvm.functions.Function1<java.lang.Integer,java.lang.Object>? key, optional androidx.compose.ui.input.nestedscroll.NestedScrollConnection pageNestedScrollConnection, optional androidx.compose.foundation.gestures.snapping.SnapPosition snapPosition, optional androidx.compose.foundation.OverscrollEffect? overscrollEffect, kotlin.jvm.functions.Function2<androidx.compose.foundation.pager.PagerScope,java.lang.Integer,kotlin.Unit> pageContent);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void VerticalPager--8jOkeI(androidx.compose.foundation.pager.PagerState, androidx.compose.ui.Modifier?, androidx.compose.foundation.layout.PaddingValues?, androidx.compose.foundation.pager.PageSize?, int, float, androidx.compose.ui.Alignment.Horizontal?, androidx.compose.foundation.gestures.TargetedFlingBehavior?, boolean, boolean, kotlin.jvm.functions.Function1<? super java.lang.Integer!,? extends java.lang.Object!>?, androidx.compose.ui.input.nestedscroll.NestedScrollConnection?, androidx.compose.foundation.gestures.snapping.SnapPosition?, androidx.compose.foundation.OverscrollEffect?, kotlin.jvm.functions.Function4<? super androidx.compose.foundation.pager.PagerScope!,? super java.lang.Integer!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public static void VerticalPager-oI3XNZo(androidx.compose.foundation.pager.PagerState!, androidx.compose.ui.Modifier!, androidx.compose.foundation.layout.PaddingValues!, androidx.compose.foundation.pager.PageSize!, int, float, androidx.compose.ui.Alignment.Horizontal!, androidx.compose.foundation.gestures.TargetedFlingBehavior!, boolean, boolean, kotlin.jvm.functions.Function1!, androidx.compose.ui.input.nestedscroll.NestedScrollConnection!, androidx.compose.foundation.gestures.snapping.SnapPosition!, kotlin.jvm.functions.Function4!, androidx.compose.runtime.Composer!, int, int, int);
  }

  public sealed interface PagerLayoutInfo {
    method public int getAfterContentPadding();
    method public int getBeforeContentPadding();
    method public int getBeyondViewportPageCount();
    method public androidx.compose.foundation.gestures.Orientation getOrientation();
    method public int getPageSize();
    method public int getPageSpacing();
    method public boolean getReverseLayout();
    method public androidx.compose.foundation.gestures.snapping.SnapPosition getSnapPosition();
    method public int getViewportEndOffset();
    method @BytecodeOnly public long getViewportSize-YbymL2g();
    method public int getViewportStartOffset();
    method public java.util.List<androidx.compose.foundation.pager.PageInfo> getVisiblePagesInfo();
    property public abstract int afterContentPadding;
    property public abstract int beforeContentPadding;
    property public abstract int beyondViewportPageCount;
    property public abstract androidx.compose.foundation.gestures.Orientation orientation;
    property public abstract int pageSize;
    property public abstract int pageSpacing;
    property public abstract boolean reverseLayout;
    property public abstract androidx.compose.foundation.gestures.snapping.SnapPosition snapPosition;
    property public abstract int viewportEndOffset;
    property public abstract androidx.compose.ui.unit.IntSize viewportSize;
    property public abstract int viewportStartOffset;
    property public abstract java.util.List<androidx.compose.foundation.pager.PageInfo> visiblePagesInfo;
  }

  public sealed interface PagerScope {
  }

  public final class PagerScrollScopeKt {
    method public static androidx.compose.foundation.lazy.layout.LazyLayoutScrollScope LazyLayoutScrollScope(androidx.compose.foundation.pager.PagerState state, androidx.compose.foundation.gestures.ScrollScope scrollScope);
  }

  @androidx.compose.runtime.Stable public interface PagerSnapDistance {
    method public int calculateTargetPage(int startPage, int suggestedTargetPage, float velocity, int pageSize, int pageSpacing);
    field public static final androidx.compose.foundation.pager.PagerSnapDistance.Companion Companion;
  }

  public static final class PagerSnapDistance.Companion {
    method public androidx.compose.foundation.pager.PagerSnapDistance atMost(int pages);
  }

  @androidx.compose.runtime.Stable public abstract class PagerState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor public PagerState(optional int currentPage, optional @FloatRange(from=-0.5, to=0.5) float currentPageOffsetFraction);
    method public final suspend Object? animateScrollToPage(int page, optional @FloatRange(from=-0.5, to=0.5) float pageOffsetFraction, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public float dispatchRawDelta(float delta);
    method public final boolean getCanScrollBackward();
    method public final boolean getCanScrollForward();
    method public final int getCurrentPage();
    method public final float getCurrentPageOffsetFraction();
    method public final androidx.compose.foundation.interaction.InteractionSource getInteractionSource();
    method public final androidx.compose.foundation.pager.PagerLayoutInfo getLayoutInfo();
    method public final float getOffsetDistanceInPages(int page);
    method public abstract int getPageCount();
    method public final int getSettledPage();
    method public final int getTargetPage();
    method public boolean isScrollInProgress();
    method public final void requestScrollToPage(@IntRange(from=0L) int page, optional @FloatRange(from=-0.5, to=0.5) float pageOffsetFraction);
    method public suspend Object? scroll(androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public final suspend Object? scrollToPage(int page, optional @FloatRange(from=-0.5, to=0.5) float pageOffsetFraction, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public final void updateCurrentPage(androidx.compose.foundation.gestures.ScrollScope, int page, optional @FloatRange(from=-0.5, to=0.5) float pageOffsetFraction);
    method public final void updateTargetPage(androidx.compose.foundation.gestures.ScrollScope, int targetPage);
    property public final boolean canScrollBackward;
    property public final boolean canScrollForward;
    property public final int currentPage;
    property public final float currentPageOffsetFraction;
    property public final androidx.compose.foundation.interaction.InteractionSource interactionSource;
    property public boolean isScrollInProgress;
    property public boolean lastScrolledBackward;
    property public boolean lastScrolledForward;
    property public final androidx.compose.foundation.pager.PagerLayoutInfo layoutInfo;
    property public abstract int pageCount;
    property public final int settledPage;
    property public final int targetPage;
  }

  public final class PagerStateKt {
    method public static androidx.compose.foundation.pager.PagerState PagerState(optional int currentPage, optional @FloatRange(from=-0.5, to=0.5) float currentPageOffsetFraction, kotlin.jvm.functions.Function0<java.lang.Integer> pageCount);
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.pager.PagerState rememberPagerState(optional int initialPage, optional @FloatRange(from=-0.5, to=0.5) float initialPageOffsetFraction, kotlin.jvm.functions.Function0<java.lang.Integer> pageCount);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.pager.PagerState rememberPagerState(int, @FloatRange(from=-0.5, to=0.5) float, kotlin.jvm.functions.Function0<java.lang.Integer!>, androidx.compose.runtime.Composer?, int, int);
  }

}

package androidx.compose.foundation.relocation {

  public sealed interface BringIntoViewRequester {
    method public suspend Object? bringIntoView(optional androidx.compose.ui.geometry.Rect? rect, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public final class BringIntoViewRequesterKt {
    method @androidx.compose.runtime.annotation.RememberInComposition public static androidx.compose.foundation.relocation.BringIntoViewRequester BringIntoViewRequester();
    method public static androidx.compose.ui.Modifier bringIntoViewRequester(androidx.compose.ui.Modifier, androidx.compose.foundation.relocation.BringIntoViewRequester bringIntoViewRequester);
    method @Deprecated public static androidx.compose.ui.Modifier bringIntoViewResponder(androidx.compose.ui.Modifier, androidx.compose.foundation.relocation.BringIntoViewResponder responder);
  }

  @Deprecated public interface BringIntoViewResponder {
    method @Deprecated public suspend Object? bringChildIntoView(kotlin.jvm.functions.Function0<androidx.compose.ui.geometry.Rect?> localRect, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @Deprecated public androidx.compose.ui.geometry.Rect calculateRectForParent(androidx.compose.ui.geometry.Rect localRect);
  }

}

package androidx.compose.foundation.selection {

  public final class SelectableGroupKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier selectableGroup(androidx.compose.ui.Modifier);
  }

  public final class SelectableKt {
    method @KotlinOnly public static androidx.compose.ui.Modifier selectable(androidx.compose.ui.Modifier, boolean selected, androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, androidx.compose.foundation.Indication? indication, optional boolean enabled, optional androidx.compose.ui.semantics.Role? role, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
    method @KotlinOnly public static androidx.compose.ui.Modifier selectable(androidx.compose.ui.Modifier, boolean selected, optional boolean enabled, optional androidx.compose.ui.semantics.Role? role, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
    method @BytecodeOnly public static androidx.compose.ui.Modifier selectable-O2vRcR0(androidx.compose.ui.Modifier, boolean, androidx.compose.foundation.interaction.MutableInteractionSource?, androidx.compose.foundation.Indication?, boolean, androidx.compose.ui.semantics.Role?, kotlin.jvm.functions.Function0<kotlin.Unit!>);
    method @BytecodeOnly @Deprecated public static androidx.compose.ui.Modifier! selectable-XHw0xAI(androidx.compose.ui.Modifier!, boolean, boolean, androidx.compose.ui.semantics.Role!, kotlin.jvm.functions.Function0!);
    method @BytecodeOnly public static androidx.compose.ui.Modifier selectable-oSLSa3U(androidx.compose.ui.Modifier, boolean, boolean, androidx.compose.ui.semantics.Role?, androidx.compose.foundation.interaction.MutableInteractionSource?, kotlin.jvm.functions.Function0<kotlin.Unit!>);
  }

  public final class ToggleableKt {
    method @KotlinOnly public static androidx.compose.ui.Modifier toggleable(androidx.compose.ui.Modifier, boolean value, androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, androidx.compose.foundation.Indication? indication, optional boolean enabled, optional androidx.compose.ui.semantics.Role? role, kotlin.jvm.functions.Function1<java.lang.Boolean,kotlin.Unit> onValueChange);
    method @KotlinOnly public static androidx.compose.ui.Modifier toggleable(androidx.compose.ui.Modifier, boolean value, optional boolean enabled, optional androidx.compose.ui.semantics.Role? role, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, kotlin.jvm.functions.Function1<java.lang.Boolean,kotlin.Unit> onValueChange);
    method @BytecodeOnly public static androidx.compose.ui.Modifier toggleable-O2vRcR0(androidx.compose.ui.Modifier, boolean, androidx.compose.foundation.interaction.MutableInteractionSource?, androidx.compose.foundation.Indication?, boolean, androidx.compose.ui.semantics.Role?, kotlin.jvm.functions.Function1<? super java.lang.Boolean!,kotlin.Unit!>);
    method @BytecodeOnly @Deprecated public static androidx.compose.ui.Modifier! toggleable-XHw0xAI(androidx.compose.ui.Modifier!, boolean, boolean, androidx.compose.ui.semantics.Role!, kotlin.jvm.functions.Function1!);
    method @BytecodeOnly public static androidx.compose.ui.Modifier toggleable-oSLSa3U(androidx.compose.ui.Modifier, boolean, boolean, androidx.compose.ui.semantics.Role?, androidx.compose.foundation.interaction.MutableInteractionSource?, kotlin.jvm.functions.Function1<? super java.lang.Boolean!,kotlin.Unit!>);
    method @KotlinOnly public static androidx.compose.ui.Modifier triStateToggleable(androidx.compose.ui.Modifier, androidx.compose.ui.state.ToggleableState state, androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, androidx.compose.foundation.Indication? indication, optional boolean enabled, optional androidx.compose.ui.semantics.Role? role, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
    method @KotlinOnly public static androidx.compose.ui.Modifier triStateToggleable(androidx.compose.ui.Modifier, androidx.compose.ui.state.ToggleableState state, optional boolean enabled, optional androidx.compose.ui.semantics.Role? role, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
    method @BytecodeOnly public static androidx.compose.ui.Modifier triStateToggleable-O2vRcR0(androidx.compose.ui.Modifier, androidx.compose.ui.state.ToggleableState, androidx.compose.foundation.interaction.MutableInteractionSource?, androidx.compose.foundation.Indication?, boolean, androidx.compose.ui.semantics.Role?, kotlin.jvm.functions.Function0<kotlin.Unit!>);
    method @BytecodeOnly @Deprecated public static androidx.compose.ui.Modifier! triStateToggleable-XHw0xAI(androidx.compose.ui.Modifier!, androidx.compose.ui.state.ToggleableState!, boolean, androidx.compose.ui.semantics.Role!, kotlin.jvm.functions.Function0!);
    method @BytecodeOnly public static androidx.compose.ui.Modifier triStateToggleable-oSLSa3U(androidx.compose.ui.Modifier, androidx.compose.ui.state.ToggleableState, boolean, androidx.compose.ui.semantics.Role?, androidx.compose.foundation.interaction.MutableInteractionSource?, kotlin.jvm.functions.Function0<kotlin.Unit!>);
  }

}

package androidx.compose.foundation.shape {

  public final class AbsoluteCutCornerShape extends androidx.compose.foundation.shape.CornerBasedShape {
    ctor public AbsoluteCutCornerShape(androidx.compose.foundation.shape.CornerSize topLeft, androidx.compose.foundation.shape.CornerSize topRight, androidx.compose.foundation.shape.CornerSize bottomRight, androidx.compose.foundation.shape.CornerSize bottomLeft);
    method public androidx.compose.foundation.shape.AbsoluteCutCornerShape copy(androidx.compose.foundation.shape.CornerSize topStart, androidx.compose.foundation.shape.CornerSize topEnd, androidx.compose.foundation.shape.CornerSize bottomEnd, androidx.compose.foundation.shape.CornerSize bottomStart);
    method @KotlinOnly public androidx.compose.ui.graphics.Outline createOutline(androidx.compose.ui.geometry.Size size, float topStart, float topEnd, float bottomEnd, float bottomStart, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method @BytecodeOnly public androidx.compose.ui.graphics.Outline createOutline-LjSzlW0(long, float, float, float, float, androidx.compose.ui.unit.LayoutDirection);
  }

  public final class AbsoluteCutCornerShapeKt {
    method public static androidx.compose.foundation.shape.AbsoluteCutCornerShape AbsoluteCutCornerShape(androidx.compose.foundation.shape.CornerSize corner);
    method @KotlinOnly public static androidx.compose.foundation.shape.AbsoluteCutCornerShape AbsoluteCutCornerShape(androidx.compose.ui.unit.Dp size);
    method @KotlinOnly public static androidx.compose.foundation.shape.AbsoluteCutCornerShape AbsoluteCutCornerShape(optional androidx.compose.ui.unit.Dp topLeft, optional androidx.compose.ui.unit.Dp topRight, optional androidx.compose.ui.unit.Dp bottomRight, optional androidx.compose.ui.unit.Dp bottomLeft);
    method public static androidx.compose.foundation.shape.AbsoluteCutCornerShape AbsoluteCutCornerShape(float size);
    method public static androidx.compose.foundation.shape.AbsoluteCutCornerShape AbsoluteCutCornerShape(optional float topLeft, optional float topRight, optional float bottomRight, optional float bottomLeft);
    method public static androidx.compose.foundation.shape.AbsoluteCutCornerShape AbsoluteCutCornerShape(int percent);
    method public static androidx.compose.foundation.shape.AbsoluteCutCornerShape AbsoluteCutCornerShape(optional @IntRange(from=0L, to=100L) int topLeftPercent, optional @IntRange(from=0L, to=100L) int topRightPercent, optional @IntRange(from=0L, to=100L) int bottomRightPercent, optional @IntRange(from=0L, to=100L) int bottomLeftPercent);
    method @BytecodeOnly public static androidx.compose.foundation.shape.AbsoluteCutCornerShape AbsoluteCutCornerShape-0680j_4(float);
    method @BytecodeOnly public static androidx.compose.foundation.shape.AbsoluteCutCornerShape AbsoluteCutCornerShape-a9UjIt4(float, float, float, float);
  }

  public final class AbsoluteRoundedCornerShape extends androidx.compose.foundation.shape.CornerBasedShape {
    ctor public AbsoluteRoundedCornerShape(androidx.compose.foundation.shape.CornerSize topLeft, androidx.compose.foundation.shape.CornerSize topRight, androidx.compose.foundation.shape.CornerSize bottomRight, androidx.compose.foundation.shape.CornerSize bottomLeft);
    method public androidx.compose.foundation.shape.AbsoluteRoundedCornerShape copy(androidx.compose.foundation.shape.CornerSize topStart, androidx.compose.foundation.shape.CornerSize topEnd, androidx.compose.foundation.shape.CornerSize bottomEnd, androidx.compose.foundation.shape.CornerSize bottomStart);
    method @KotlinOnly public androidx.compose.ui.graphics.Outline createOutline(androidx.compose.ui.geometry.Size size, float topStart, float topEnd, float bottomEnd, float bottomStart, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method @BytecodeOnly public androidx.compose.ui.graphics.Outline createOutline-LjSzlW0(long, float, float, float, float, androidx.compose.ui.unit.LayoutDirection);
  }

  public final class AbsoluteRoundedCornerShapeKt {
    method public static androidx.compose.foundation.shape.AbsoluteRoundedCornerShape AbsoluteRoundedCornerShape(androidx.compose.foundation.shape.CornerSize corner);
    method @KotlinOnly public static androidx.compose.foundation.shape.AbsoluteRoundedCornerShape AbsoluteRoundedCornerShape(androidx.compose.ui.unit.Dp size);
    method @KotlinOnly public static androidx.compose.foundation.shape.AbsoluteRoundedCornerShape AbsoluteRoundedCornerShape(optional androidx.compose.ui.unit.Dp topLeft, optional androidx.compose.ui.unit.Dp topRight, optional androidx.compose.ui.unit.Dp bottomRight, optional androidx.compose.ui.unit.Dp bottomLeft);
    method public static androidx.compose.foundation.shape.AbsoluteRoundedCornerShape AbsoluteRoundedCornerShape(float size);
    method public static androidx.compose.foundation.shape.AbsoluteRoundedCornerShape AbsoluteRoundedCornerShape(optional float topLeft, optional float topRight, optional float bottomRight, optional float bottomLeft);
    method public static androidx.compose.foundation.shape.AbsoluteRoundedCornerShape AbsoluteRoundedCornerShape(int percent);
    method public static androidx.compose.foundation.shape.AbsoluteRoundedCornerShape AbsoluteRoundedCornerShape(optional @IntRange(from=0L, to=100L) int topLeftPercent, optional @IntRange(from=0L, to=100L) int topRightPercent, optional @IntRange(from=0L, to=100L) int bottomRightPercent, optional @IntRange(from=0L, to=100L) int bottomLeftPercent);
    method @BytecodeOnly public static androidx.compose.foundation.shape.AbsoluteRoundedCornerShape AbsoluteRoundedCornerShape-0680j_4(float);
    method @BytecodeOnly public static androidx.compose.foundation.shape.AbsoluteRoundedCornerShape AbsoluteRoundedCornerShape-a9UjIt4(float, float, float, float);
  }

  public abstract class CornerBasedShape implements androidx.compose.ui.graphics.Interpolatable androidx.compose.ui.graphics.Shape {
    ctor public CornerBasedShape(androidx.compose.foundation.shape.CornerSize topStart, androidx.compose.foundation.shape.CornerSize topEnd, androidx.compose.foundation.shape.CornerSize bottomEnd, androidx.compose.foundation.shape.CornerSize bottomStart);
    method public final androidx.compose.foundation.shape.CornerBasedShape copy(androidx.compose.foundation.shape.CornerSize all);
    method public abstract androidx.compose.foundation.shape.CornerBasedShape copy(optional androidx.compose.foundation.shape.CornerSize topStart, optional androidx.compose.foundation.shape.CornerSize topEnd, optional androidx.compose.foundation.shape.CornerSize bottomEnd, optional androidx.compose.foundation.shape.CornerSize bottomStart);
    method @KotlinOnly public final androidx.compose.ui.graphics.Outline createOutline(androidx.compose.ui.geometry.Size size, androidx.compose.ui.unit.LayoutDirection layoutDirection, androidx.compose.ui.unit.Density density);
    method @KotlinOnly public abstract androidx.compose.ui.graphics.Outline createOutline(androidx.compose.ui.geometry.Size size, float topStart, float topEnd, float bottomEnd, float bottomStart, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method @BytecodeOnly public abstract androidx.compose.ui.graphics.Outline createOutline-LjSzlW0(long, float, float, float, float, androidx.compose.ui.unit.LayoutDirection);
    method @BytecodeOnly public final androidx.compose.ui.graphics.Outline createOutline-Pq9zytI(long, androidx.compose.ui.unit.LayoutDirection, androidx.compose.ui.unit.Density);
    method public final androidx.compose.foundation.shape.CornerSize getBottomEnd();
    method public final androidx.compose.foundation.shape.CornerSize getBottomStart();
    method public final androidx.compose.foundation.shape.CornerSize getTopEnd();
    method public final androidx.compose.foundation.shape.CornerSize getTopStart();
    method public Object? lerp(Object? other, float t);
    property public final androidx.compose.foundation.shape.CornerSize bottomEnd;
    property public final androidx.compose.foundation.shape.CornerSize bottomStart;
    property public final androidx.compose.foundation.shape.CornerSize topEnd;
    property public final androidx.compose.foundation.shape.CornerSize topStart;
  }

  @androidx.compose.runtime.Immutable public interface CornerSize {
    method @KotlinOnly public float toPx(androidx.compose.ui.geometry.Size shapeSize, androidx.compose.ui.unit.Density density);
    method @BytecodeOnly public float toPx-TmRCtEA(long, androidx.compose.ui.unit.Density);
  }

  public final class CornerSizeKt {
    method @KotlinOnly @androidx.compose.runtime.Stable public static androidx.compose.foundation.shape.CornerSize CornerSize(androidx.compose.ui.unit.Dp size);
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.shape.CornerSize CornerSize(float size);
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.shape.CornerSize CornerSize(@IntRange(from=0L, to=100L) int percent);
    method @BytecodeOnly @androidx.compose.runtime.Stable public static androidx.compose.foundation.shape.CornerSize CornerSize-0680j_4(float);
    method public static androidx.compose.foundation.shape.CornerSize getZeroCornerSize();
    property @androidx.compose.runtime.Stable public static androidx.compose.foundation.shape.CornerSize ZeroCornerSize;
  }

  public final class CutCornerShape extends androidx.compose.foundation.shape.CornerBasedShape {
    ctor public CutCornerShape(androidx.compose.foundation.shape.CornerSize topStart, androidx.compose.foundation.shape.CornerSize topEnd, androidx.compose.foundation.shape.CornerSize bottomEnd, androidx.compose.foundation.shape.CornerSize bottomStart);
    method public androidx.compose.foundation.shape.CutCornerShape copy(androidx.compose.foundation.shape.CornerSize topStart, androidx.compose.foundation.shape.CornerSize topEnd, androidx.compose.foundation.shape.CornerSize bottomEnd, androidx.compose.foundation.shape.CornerSize bottomStart);
    method @KotlinOnly public androidx.compose.ui.graphics.Outline createOutline(androidx.compose.ui.geometry.Size size, float topStart, float topEnd, float bottomEnd, float bottomStart, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method @BytecodeOnly public androidx.compose.ui.graphics.Outline createOutline-LjSzlW0(long, float, float, float, float, androidx.compose.ui.unit.LayoutDirection);
  }

  public final class CutCornerShapeKt {
    method public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape(androidx.compose.foundation.shape.CornerSize corner);
    method @KotlinOnly public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape(androidx.compose.ui.unit.Dp size);
    method @KotlinOnly public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape(optional androidx.compose.ui.unit.Dp topStart, optional androidx.compose.ui.unit.Dp topEnd, optional androidx.compose.ui.unit.Dp bottomEnd, optional androidx.compose.ui.unit.Dp bottomStart);
    method public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape(float size);
    method public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape(optional float topStart, optional float topEnd, optional float bottomEnd, optional float bottomStart);
    method public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape(int percent);
    method public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape(optional @IntRange(from=0L, to=100L) int topStartPercent, optional @IntRange(from=0L, to=100L) int topEndPercent, optional @IntRange(from=0L, to=100L) int bottomEndPercent, optional @IntRange(from=0L, to=100L) int bottomStartPercent);
    method @BytecodeOnly public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape-0680j_4(float);
    method @BytecodeOnly public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape-a9UjIt4(float, float, float, float);
  }

  public final class GenericShape implements androidx.compose.ui.graphics.Shape {
    ctor public GenericShape(kotlin.jvm.functions.Function3<? super androidx.compose.ui.graphics.Path,? super androidx.compose.ui.geometry.Size,? super androidx.compose.ui.unit.LayoutDirection,kotlin.Unit> builder);
    method @KotlinOnly public androidx.compose.ui.graphics.Outline createOutline(androidx.compose.ui.geometry.Size size, androidx.compose.ui.unit.LayoutDirection layoutDirection, androidx.compose.ui.unit.Density density);
    method @BytecodeOnly public androidx.compose.ui.graphics.Outline createOutline-Pq9zytI(long, androidx.compose.ui.unit.LayoutDirection, androidx.compose.ui.unit.Density);
  }

  public final class RoundedCornerShape extends androidx.compose.foundation.shape.CornerBasedShape {
    ctor public RoundedCornerShape(androidx.compose.foundation.shape.CornerSize topStart, androidx.compose.foundation.shape.CornerSize topEnd, androidx.compose.foundation.shape.CornerSize bottomEnd, androidx.compose.foundation.shape.CornerSize bottomStart);
    method public androidx.compose.foundation.shape.RoundedCornerShape copy(androidx.compose.foundation.shape.CornerSize topStart, androidx.compose.foundation.shape.CornerSize topEnd, androidx.compose.foundation.shape.CornerSize bottomEnd, androidx.compose.foundation.shape.CornerSize bottomStart);
    method @KotlinOnly public androidx.compose.ui.graphics.Outline createOutline(androidx.compose.ui.geometry.Size size, float topStart, float topEnd, float bottomEnd, float bottomStart, androidx.compose.ui.unit.LayoutDirection layoutDirection);
    method @BytecodeOnly public androidx.compose.ui.graphics.Outline createOutline-LjSzlW0(long, float, float, float, float, androidx.compose.ui.unit.LayoutDirection);
  }

  public final class RoundedCornerShapeKt {
    method public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape(androidx.compose.foundation.shape.CornerSize corner);
    method @KotlinOnly public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape(androidx.compose.ui.unit.Dp size);
    method @KotlinOnly public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape(optional androidx.compose.ui.unit.Dp topStart, optional androidx.compose.ui.unit.Dp topEnd, optional androidx.compose.ui.unit.Dp bottomEnd, optional androidx.compose.ui.unit.Dp bottomStart);
    method public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape(float size);
    method public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape(optional float topStart, optional float topEnd, optional float bottomEnd, optional float bottomStart);
    method public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape(int percent);
    method public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape(optional @IntRange(from=0L, to=100L) int topStartPercent, optional @IntRange(from=0L, to=100L) int topEndPercent, optional @IntRange(from=0L, to=100L) int bottomEndPercent, optional @IntRange(from=0L, to=100L) int bottomStartPercent);
    method @BytecodeOnly public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape-0680j_4(float);
    method @BytecodeOnly public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape-a9UjIt4(float, float, float, float);
    method public static androidx.compose.foundation.shape.RoundedCornerShape getCircleShape();
    property public static androidx.compose.foundation.shape.RoundedCornerShape CircleShape;
  }

}

package androidx.compose.foundation.text {

  public final class AutofillHighlightKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Brush> getLocalAutofillHighlightBrush();
    method @Deprecated public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Color> getLocalAutofillHighlightColor();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Brush> LocalAutofillHighlightBrush;
    property @Deprecated public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.ui.graphics.Color> LocalAutofillHighlightColor;
  }

  public final class BasicSecureTextFieldKt {
    method @KotlinOnly @androidx.compose.runtime.Composable public static void BasicSecureTextField(androidx.compose.foundation.text.input.TextFieldState state, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional boolean readOnly, optional androidx.compose.foundation.text.input.InputTransformation? inputTransformation, optional androidx.compose.ui.text.TextStyle textStyle, optional androidx.compose.foundation.text.KeyboardOptions keyboardOptions, optional androidx.compose.foundation.text.input.KeyboardActionHandler? onKeyboardAction, optional kotlin.jvm.functions.Function2<androidx.compose.ui.unit.Density,kotlin.jvm.functions.Function0<androidx.compose.ui.text.TextLayoutResult?>,kotlin.Unit>? onTextLayout, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.compose.ui.graphics.Brush cursorBrush, optional androidx.compose.foundation.text.input.TextFieldDecorator? decorator, optional androidx.compose.foundation.text.input.TextObfuscationMode textObfuscationMode, optional char textObfuscationCharacter, optional androidx.compose.foundation.ScrollState scrollState);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public static void BasicSecureTextField-Jb9bMDk(androidx.compose.foundation.text.input.TextFieldState!, androidx.compose.ui.Modifier!, boolean, androidx.compose.foundation.text.input.InputTransformation!, androidx.compose.ui.text.TextStyle!, androidx.compose.foundation.text.KeyboardOptions!, androidx.compose.foundation.text.input.KeyboardActionHandler!, kotlin.jvm.functions.Function2!, androidx.compose.foundation.interaction.MutableInteractionSource!, androidx.compose.ui.graphics.Brush!, androidx.compose.foundation.text.input.TextFieldDecorator!, int, char, androidx.compose.runtime.Composer!, int, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public static void BasicSecureTextField-egD4TGM(androidx.compose.foundation.text.input.TextFieldState!, androidx.compose.ui.Modifier!, boolean, boolean, androidx.compose.foundation.text.input.InputTransformation!, androidx.compose.ui.text.TextStyle!, androidx.compose.foundation.text.KeyboardOptions!, androidx.compose.foundation.text.input.KeyboardActionHandler!, kotlin.jvm.functions.Function2!, androidx.compose.foundation.interaction.MutableInteractionSource!, androidx.compose.ui.graphics.Brush!, androidx.compose.foundation.text.input.TextFieldDecorator!, int, char, androidx.compose.runtime.Composer!, int, int, int);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void BasicSecureTextField-ltb6GB4(androidx.compose.foundation.text.input.TextFieldState, androidx.compose.ui.Modifier?, boolean, boolean, androidx.compose.foundation.text.input.InputTransformation?, androidx.compose.ui.text.TextStyle?, androidx.compose.foundation.text.KeyboardOptions?, androidx.compose.foundation.text.input.KeyboardActionHandler?, kotlin.jvm.functions.Function2<? super androidx.compose.ui.unit.Density!,? super kotlin.jvm.functions.Function0<androidx.compose.ui.text.TextLayoutResult!>!,kotlin.Unit!>?, androidx.compose.foundation.interaction.MutableInteractionSource?, androidx.compose.ui.graphics.Brush?, androidx.compose.foundation.text.input.TextFieldDecorator?, int, char, androidx.compose.foundation.ScrollState?, androidx.compose.runtime.Composer?, int, int, int);
  }

  public final class BasicTextFieldKt {
    method @androidx.compose.runtime.Composable public static void BasicTextField(androidx.compose.foundation.text.input.TextFieldState state, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional boolean readOnly, optional androidx.compose.foundation.text.input.InputTransformation? inputTransformation, optional androidx.compose.ui.text.TextStyle textStyle, optional androidx.compose.foundation.text.KeyboardOptions keyboardOptions, optional androidx.compose.foundation.text.input.KeyboardActionHandler? onKeyboardAction, optional androidx.compose.foundation.text.input.TextFieldLineLimits lineLimits, optional kotlin.jvm.functions.Function2<? super androidx.compose.ui.unit.Density,? super kotlin.jvm.functions.Function0<androidx.compose.ui.text.TextLayoutResult?>,kotlin.Unit>? onTextLayout, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.compose.ui.graphics.Brush cursorBrush, optional androidx.compose.foundation.text.input.OutputTransformation? outputTransformation, optional androidx.compose.foundation.text.input.TextFieldDecorator? decorator, optional androidx.compose.foundation.ScrollState scrollState);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void BasicTextField(androidx.compose.foundation.text.input.TextFieldState, androidx.compose.ui.Modifier?, boolean, boolean, androidx.compose.foundation.text.input.InputTransformation?, androidx.compose.ui.text.TextStyle?, androidx.compose.foundation.text.KeyboardOptions?, androidx.compose.foundation.text.input.KeyboardActionHandler?, androidx.compose.foundation.text.input.TextFieldLineLimits?, kotlin.jvm.functions.Function2<? super androidx.compose.ui.unit.Density!,? super kotlin.jvm.functions.Function0<androidx.compose.ui.text.TextLayoutResult!>!,kotlin.Unit!>?, androidx.compose.foundation.interaction.MutableInteractionSource?, androidx.compose.ui.graphics.Brush?, androidx.compose.foundation.text.input.OutputTransformation?, androidx.compose.foundation.text.input.TextFieldDecorator?, androidx.compose.foundation.ScrollState?, androidx.compose.runtime.Composer?, int, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public static void BasicTextField(androidx.compose.ui.text.input.TextFieldValue!, kotlin.jvm.functions.Function1!, androidx.compose.ui.Modifier!, boolean, boolean, androidx.compose.ui.text.TextStyle!, androidx.compose.foundation.text.KeyboardOptions!, androidx.compose.foundation.text.KeyboardActions!, boolean, int, androidx.compose.ui.text.input.VisualTransformation!, kotlin.jvm.functions.Function1!, androidx.compose.foundation.interaction.MutableInteractionSource!, androidx.compose.ui.graphics.Brush!, kotlin.jvm.functions.Function3!, androidx.compose.runtime.Composer!, int, int, int);
    method @androidx.compose.runtime.Composable public static void BasicTextField(androidx.compose.ui.text.input.TextFieldValue value, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.input.TextFieldValue,kotlin.Unit> onValueChange, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional boolean readOnly, optional androidx.compose.ui.text.TextStyle textStyle, optional androidx.compose.foundation.text.KeyboardOptions keyboardOptions, optional androidx.compose.foundation.text.KeyboardActions keyboardActions, optional boolean singleLine, optional int maxLines, optional int minLines, optional androidx.compose.ui.text.input.VisualTransformation visualTransformation, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult,kotlin.Unit> onTextLayout, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.compose.ui.graphics.Brush cursorBrush, optional kotlin.jvm.functions.Function1<? super kotlin.jvm.functions.Function0<kotlin.Unit>,kotlin.Unit> decorationBox);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void BasicTextField(androidx.compose.ui.text.input.TextFieldValue, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.input.TextFieldValue!,kotlin.Unit!>, androidx.compose.ui.Modifier?, boolean, boolean, androidx.compose.ui.text.TextStyle?, androidx.compose.foundation.text.KeyboardOptions?, androidx.compose.foundation.text.KeyboardActions?, boolean, int, int, androidx.compose.ui.text.input.VisualTransformation?, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult!,kotlin.Unit!>?, androidx.compose.foundation.interaction.MutableInteractionSource?, androidx.compose.ui.graphics.Brush?, kotlin.jvm.functions.Function3<? super kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>?, androidx.compose.runtime.Composer?, int, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable public static void BasicTextField(String!, kotlin.jvm.functions.Function1!, androidx.compose.ui.Modifier!, boolean, boolean, androidx.compose.ui.text.TextStyle!, androidx.compose.foundation.text.KeyboardOptions!, androidx.compose.foundation.text.KeyboardActions!, boolean, int, androidx.compose.ui.text.input.VisualTransformation!, kotlin.jvm.functions.Function1!, androidx.compose.foundation.interaction.MutableInteractionSource!, androidx.compose.ui.graphics.Brush!, kotlin.jvm.functions.Function3!, androidx.compose.runtime.Composer!, int, int, int);
    method @androidx.compose.runtime.Composable public static void BasicTextField(String value, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> onValueChange, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional boolean readOnly, optional androidx.compose.ui.text.TextStyle textStyle, optional androidx.compose.foundation.text.KeyboardOptions keyboardOptions, optional androidx.compose.foundation.text.KeyboardActions keyboardActions, optional boolean singleLine, optional int maxLines, optional int minLines, optional androidx.compose.ui.text.input.VisualTransformation visualTransformation, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult,kotlin.Unit> onTextLayout, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional androidx.compose.ui.graphics.Brush cursorBrush, optional kotlin.jvm.functions.Function1<? super kotlin.jvm.functions.Function0<kotlin.Unit>,kotlin.Unit> decorationBox);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void BasicTextField(String, kotlin.jvm.functions.Function1<? super java.lang.String!,kotlin.Unit!>, androidx.compose.ui.Modifier?, boolean, boolean, androidx.compose.ui.text.TextStyle?, androidx.compose.foundation.text.KeyboardOptions?, androidx.compose.foundation.text.KeyboardActions?, boolean, int, int, androidx.compose.ui.text.input.VisualTransformation?, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult!,kotlin.Unit!>?, androidx.compose.foundation.interaction.MutableInteractionSource?, androidx.compose.ui.graphics.Brush?, kotlin.jvm.functions.Function3<? super kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>?, androidx.compose.runtime.Composer?, int, int, int);
  }

  public final class BasicTextKt {
    method @KotlinOnly @androidx.compose.runtime.Composable public static void BasicText(androidx.compose.ui.text.AnnotatedString text, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.text.TextStyle style, optional kotlin.jvm.functions.Function1<androidx.compose.ui.text.TextLayoutResult,kotlin.Unit>? onTextLayout, optional androidx.compose.ui.text.style.TextOverflow overflow, optional boolean softWrap, optional int maxLines, optional int minLines, optional java.util.Map<java.lang.String,androidx.compose.foundation.text.InlineTextContent> inlineContent, optional androidx.compose.ui.graphics.ColorProducer? color, optional androidx.compose.foundation.text.TextAutoSize? autoSize);
    method @KotlinOnly @androidx.compose.runtime.Composable public static void BasicText(String text, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.text.TextStyle style, optional kotlin.jvm.functions.Function1<androidx.compose.ui.text.TextLayoutResult,kotlin.Unit>? onTextLayout, optional androidx.compose.ui.text.style.TextOverflow overflow, optional boolean softWrap, optional int maxLines, optional int minLines, optional androidx.compose.ui.graphics.ColorProducer? color, optional androidx.compose.foundation.text.TextAutoSize? autoSize);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void BasicText-4YKlhWE(androidx.compose.ui.text.AnnotatedString!, androidx.compose.ui.Modifier!, androidx.compose.ui.text.TextStyle!, kotlin.jvm.functions.Function1!, int, boolean, int, java.util.Map!, androidx.compose.runtime.Composer!, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void BasicText-4YKlhWE(String!, androidx.compose.ui.Modifier!, androidx.compose.ui.text.TextStyle!, kotlin.jvm.functions.Function1!, int, boolean, int, int, androidx.compose.runtime.Composer!, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void BasicText-BpD7jsM(String!, androidx.compose.ui.Modifier!, androidx.compose.ui.text.TextStyle!, kotlin.jvm.functions.Function1!, int, boolean, int, androidx.compose.runtime.Composer!, int, int);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void BasicText-CL7eQgs(androidx.compose.ui.text.AnnotatedString, androidx.compose.ui.Modifier?, androidx.compose.ui.text.TextStyle?, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult!,kotlin.Unit!>?, int, boolean, int, int, java.util.Map<java.lang.String!,androidx.compose.foundation.text.InlineTextContent!>?, androidx.compose.ui.graphics.ColorProducer?, androidx.compose.foundation.text.TextAutoSize?, androidx.compose.runtime.Composer?, int, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void BasicText-RWo7tUw(androidx.compose.ui.text.AnnotatedString!, androidx.compose.ui.Modifier!, androidx.compose.ui.text.TextStyle!, kotlin.jvm.functions.Function1!, int, boolean, int, int, java.util.Map!, androidx.compose.ui.graphics.ColorProducer!, androidx.compose.runtime.Composer!, int, int);
    method @BytecodeOnly @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void BasicText-RWo7tUw(String, androidx.compose.ui.Modifier?, androidx.compose.ui.text.TextStyle?, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult!,kotlin.Unit!>?, int, boolean, int, int, androidx.compose.ui.graphics.ColorProducer?, androidx.compose.foundation.text.TextAutoSize?, androidx.compose.runtime.Composer?, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void BasicText-VhcvRP8(androidx.compose.ui.text.AnnotatedString!, androidx.compose.ui.Modifier!, androidx.compose.ui.text.TextStyle!, kotlin.jvm.functions.Function1!, int, boolean, int, int, java.util.Map!, androidx.compose.runtime.Composer!, int, int);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void BasicText-VhcvRP8(String!, androidx.compose.ui.Modifier!, androidx.compose.ui.text.TextStyle!, kotlin.jvm.functions.Function1!, int, boolean, int, int, androidx.compose.ui.graphics.ColorProducer!, androidx.compose.runtime.Composer!, int, int);
  }

  public final class BasicText_androidKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<java.util.concurrent.Executor?> getLocalBackgroundTextMeasurementExecutor();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<java.util.concurrent.Executor?> LocalBackgroundTextMeasurementExecutor;
  }

  public final class ClickableTextKt {
    method @KotlinOnly @Deprecated @androidx.compose.runtime.Composable public static void ClickableText(androidx.compose.ui.text.AnnotatedString text, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.text.TextStyle style, optional boolean softWrap, optional androidx.compose.ui.text.style.TextOverflow overflow, optional int maxLines, optional kotlin.jvm.functions.Function1<androidx.compose.ui.text.TextLayoutResult,kotlin.Unit> onTextLayout, kotlin.jvm.functions.Function1<java.lang.Integer,kotlin.Unit> onClick);
    method @BytecodeOnly @Deprecated @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableTarget(applier="androidx.compose.ui.UiComposable") public static void ClickableText-4YKlhWE(androidx.compose.ui.text.AnnotatedString, androidx.compose.ui.Modifier?, androidx.compose.ui.text.TextStyle?, boolean, int, int, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult!,kotlin.Unit!>?, kotlin.jvm.functions.Function1<? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  @androidx.compose.runtime.Immutable public final class InlineTextContent {
    ctor public InlineTextContent(androidx.compose.ui.text.Placeholder placeholder, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> children);
    ctor @BytecodeOnly public InlineTextContent(androidx.compose.ui.text.Placeholder, kotlin.jvm.functions.Function3<? super java.lang.String!,? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>);
    method public kotlin.jvm.functions.Function1<java.lang.String,kotlin.Unit> getChildren();
    method public androidx.compose.ui.text.Placeholder getPlaceholder();
    property public kotlin.jvm.functions.Function1<java.lang.String,kotlin.Unit> children;
    property public androidx.compose.ui.text.Placeholder placeholder;
  }

  public final class InlineTextContentKt {
    method public static void appendInlineContent(androidx.compose.ui.text.AnnotatedString.Builder, String id, optional String alternateText);
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="Internal/Unstable API for use only between foundation modules sharing the same exact version, subject to change without notice.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.CLASS, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.PROPERTY_SETTER}) public @interface InternalFoundationTextApi {
  }

  public interface KeyboardActionScope {
    method @KotlinOnly public void defaultKeyboardAction(androidx.compose.ui.text.input.ImeAction imeAction);
    method @BytecodeOnly public void defaultKeyboardAction-KlQnJC8(int);
  }

  @androidx.compose.runtime.Stable public final class KeyboardActions {
    ctor public KeyboardActions();
    ctor public KeyboardActions(optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? onDone, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? onGo, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? onNext, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? onPrevious, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? onSearch, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? onSend);
    method public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? getOnDone();
    method public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? getOnGo();
    method public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? getOnNext();
    method public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? getOnPrevious();
    method public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? getOnSearch();
    method public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? getOnSend();
    property public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? onDone;
    property public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? onGo;
    property public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? onNext;
    property public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? onPrevious;
    property public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? onSearch;
    property public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit>? onSend;
    field public static final androidx.compose.foundation.text.KeyboardActions.Companion Companion;
  }

  public static final class KeyboardActions.Companion {
    method public androidx.compose.foundation.text.KeyboardActions getDefault();
    property @androidx.compose.runtime.Stable public androidx.compose.foundation.text.KeyboardActions Default;
  }

  public final class KeyboardActionsKt {
    method public static androidx.compose.foundation.text.KeyboardActions KeyboardActions(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.text.KeyboardActionScope,kotlin.Unit> onAny);
  }

  @androidx.compose.runtime.Immutable public final class KeyboardOptions {
    ctor public KeyboardOptions();
    ctor @KotlinOnly @Deprecated public KeyboardOptions(optional androidx.compose.ui.text.input.KeyboardCapitalization capitalization, boolean autoCorrect, optional androidx.compose.ui.text.input.KeyboardType keyboardType, optional androidx.compose.ui.text.input.ImeAction imeAction, optional androidx.compose.ui.text.input.PlatformImeOptions? platformImeOptions, optional Boolean? showKeyboardOnFocus, optional androidx.compose.ui.text.intl.LocaleList? hintLocales);
    ctor @KotlinOnly public KeyboardOptions(optional androidx.compose.ui.text.input.KeyboardCapitalization capitalization, optional Boolean? autoCorrectEnabled, optional androidx.compose.ui.text.input.KeyboardType keyboardType, optional androidx.compose.ui.text.input.ImeAction imeAction, optional androidx.compose.ui.text.input.PlatformImeOptions? platformImeOptions, optional Boolean? showKeyboardOnFocus, optional androidx.compose.ui.text.intl.LocaleList? hintLocales);
    ctor @BytecodeOnly @Deprecated public KeyboardOptions(int, boolean, int, int, androidx.compose.ui.text.input.PlatformImeOptions!, Boolean!, androidx.compose.ui.text.intl.LocaleList!, kotlin.jvm.internal.DefaultConstructorMarker!);
    ctor @BytecodeOnly @Deprecated public KeyboardOptions(int, boolean, int, int, androidx.compose.ui.text.input.PlatformImeOptions!, kotlin.jvm.internal.DefaultConstructorMarker!);
    ctor @BytecodeOnly @Deprecated public KeyboardOptions(int, boolean, int, int, kotlin.jvm.internal.DefaultConstructorMarker!);
    ctor @BytecodeOnly public KeyboardOptions(int, Boolean!, int, int, androidx.compose.ui.text.input.PlatformImeOptions!, Boolean!, androidx.compose.ui.text.intl.LocaleList!, kotlin.jvm.internal.DefaultConstructorMarker!);
    method @KotlinOnly public androidx.compose.foundation.text.KeyboardOptions copy(optional androidx.compose.ui.text.input.KeyboardCapitalization capitalization, optional Boolean? autoCorrectEnabled, optional androidx.compose.ui.text.input.KeyboardType keyboardType, optional androidx.compose.ui.text.input.ImeAction imeAction, optional androidx.compose.ui.text.input.PlatformImeOptions? platformImeOptions, optional Boolean? showKeyboardOnFocus, optional androidx.compose.ui.text.intl.LocaleList? hintLocales);
    method @BytecodeOnly @Deprecated public androidx.compose.foundation.text.KeyboardOptions! copy-3m2b7yw(int, boolean, int, int);
    method @BytecodeOnly @Deprecated public androidx.compose.foundation.text.KeyboardOptions! copy-INvB4aQ(int, boolean, int, int, androidx.compose.ui.text.input.PlatformImeOptions!, Boolean!, androidx.compose.ui.text.intl.LocaleList!);
    method @BytecodeOnly public androidx.compose.foundation.text.KeyboardOptions copy-INvB4aQ(int, Boolean?, int, int, androidx.compose.ui.text.input.PlatformImeOptions?, Boolean?, androidx.compose.ui.text.intl.LocaleList?);
    method @BytecodeOnly @Deprecated public androidx.compose.foundation.text.KeyboardOptions! copy-ij11fho(int, boolean, int, int, androidx.compose.ui.text.input.PlatformImeOptions!);
    method @Deprecated public boolean getAutoCorrect();
    method public Boolean? getAutoCorrectEnabled();
    method @BytecodeOnly public int getCapitalization-IUNYP9k();
    method public androidx.compose.ui.text.intl.LocaleList? getHintLocales();
    method @BytecodeOnly public int getImeAction-eUduSuo();
    method @BytecodeOnly public int getKeyboardType-PjHm6EE();
    method public androidx.compose.ui.text.input.PlatformImeOptions? getPlatformImeOptions();
    method @BytecodeOnly @Deprecated public boolean getShouldShowKeyboardOnFocus();
    method public Boolean? getShowKeyboardOnFocus();
    method public androidx.compose.foundation.text.KeyboardOptions merge(androidx.compose.foundation.text.KeyboardOptions? other);
    property @Deprecated public boolean autoCorrect;
    property public Boolean? autoCorrectEnabled;
    property public androidx.compose.ui.text.input.KeyboardCapitalization capitalization;
    property public androidx.compose.ui.text.intl.LocaleList? hintLocales;
    property public androidx.compose.ui.text.input.ImeAction imeAction;
    property public androidx.compose.ui.text.input.KeyboardType keyboardType;
    property public androidx.compose.ui.text.input.PlatformImeOptions? platformImeOptions;
    property public Boolean? showKeyboardOnFocus;
    field public static final androidx.compose.foundation.text.KeyboardOptions.Companion Companion;
  }

  public static final class KeyboardOptions.Companion {
    method public androidx.compose.foundation.text.KeyboardOptions getDefault();
    property @androidx.compose.runtime.Stable public androidx.compose.foundation.text.KeyboardOptions Default;
  }

  public interface TextAutoSize {
    method public boolean equals(Object? other);
    method @KotlinOnly public androidx.compose.ui.unit.TextUnit getFontSize(androidx.compose.foundation.text.modifiers.TextAutoSizeLayoutScope, androidx.compose.ui.unit.Constraints constraints, androidx.compose.ui.text.AnnotatedString text);
    method @BytecodeOnly public long getFontSize-Ci0_558(androidx.compose.foundation.text.modifiers.TextAutoSizeLayoutScope, long, androidx.compose.ui.text.AnnotatedString);
    method public int hashCode();
    field public static final androidx.compose.foundation.text.TextAutoSize.Companion Companion;
  }

  public static final class TextAutoSize.Companion {
    method @KotlinOnly public androidx.compose.foundation.text.TextAutoSize StepBased(optional androidx.compose.ui.unit.TextUnit minFontSize, optional androidx.compose.ui.unit.TextUnit maxFontSize, optional androidx.compose.ui.unit.TextUnit stepSize);
    method @BytecodeOnly public androidx.compose.foundation.text.TextAutoSize StepBased-vU-0ePk(long, long, long);
  }

  public final class TextAutoSizeDefaults {
    method @BytecodeOnly public long getMaxFontSize-XSAIIZE();
    method @BytecodeOnly public long getMinFontSize-XSAIIZE();
    property public androidx.compose.ui.unit.TextUnit MaxFontSize;
    property public androidx.compose.ui.unit.TextUnit MinFontSize;
    field public static final androidx.compose.foundation.text.TextAutoSizeDefaults INSTANCE;
  }

}

package androidx.compose.foundation.text.contextmenu.builder {

  public final class TextContextMenuBuilderScope {
    method public void separator();
  }

  public final class TextContextMenuBuilderScope_androidKt {
    method public static void item(androidx.compose.foundation.text.contextmenu.builder.TextContextMenuBuilderScope, Object key, String label, optional @DrawableRes int leadingIcon, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.text.contextmenu.data.TextContextMenuSession,kotlin.Unit> onClick);
  }

}

package androidx.compose.foundation.text.contextmenu.data {

  public final class ProcessTextKey {
    method public int getId();
    property public int id;
  }

  public abstract class TextContextMenuComponent {
    method public final Object getKey();
    property public final Object key;
  }

  public final class TextContextMenuData {
    ctor public TextContextMenuData(java.util.List<? extends androidx.compose.foundation.text.contextmenu.data.TextContextMenuComponent> components);
    method public java.util.List<androidx.compose.foundation.text.contextmenu.data.TextContextMenuComponent> getComponents();
    property public java.util.List<androidx.compose.foundation.text.contextmenu.data.TextContextMenuComponent> components;
    field public static final androidx.compose.foundation.text.contextmenu.data.TextContextMenuData.Companion Companion;
  }

  public static final class TextContextMenuData.Companion {
    method public androidx.compose.foundation.text.contextmenu.data.TextContextMenuData getEmpty();
    property public androidx.compose.foundation.text.contextmenu.data.TextContextMenuData Empty;
  }

  public final class TextContextMenuItem extends androidx.compose.foundation.text.contextmenu.data.TextContextMenuComponent {
    ctor public TextContextMenuItem(Object key, String label, optional int leadingIcon, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.text.contextmenu.data.TextContextMenuSession,kotlin.Unit> onClick);
    method public String getLabel();
    method public int getLeadingIcon();
    method public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.contextmenu.data.TextContextMenuSession,kotlin.Unit> getOnClick();
    property public String label;
    property public int leadingIcon;
    property public kotlin.jvm.functions.Function1<androidx.compose.foundation.text.contextmenu.data.TextContextMenuSession,kotlin.Unit> onClick;
  }

  public final class TextContextMenuKeys {
    method public Object getAutofillKey();
    method public Object getCopyKey();
    method public Object getCutKey();
    method public Object getPasteKey();
    method public Object getSelectAllKey();
    property public Object AutofillKey;
    property public Object CopyKey;
    property public Object CutKey;
    property public Object PasteKey;
    property public Object SelectAllKey;
    field public static final androidx.compose.foundation.text.contextmenu.data.TextContextMenuKeys INSTANCE;
  }

  public final class TextContextMenuSeparator extends androidx.compose.foundation.text.contextmenu.data.TextContextMenuComponent {
    field public static final androidx.compose.foundation.text.contextmenu.data.TextContextMenuSeparator INSTANCE;
  }

  public interface TextContextMenuSession {
    method public void close();
  }

}

package androidx.compose.foundation.text.contextmenu.modifier {

  public final class TextContextMenuModifierKt {
    method public static androidx.compose.ui.Modifier appendTextContextMenuComponents(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.text.contextmenu.builder.TextContextMenuBuilderScope,kotlin.Unit> builder);
    method public static androidx.compose.ui.Modifier filterTextContextMenuComponents(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.text.contextmenu.data.TextContextMenuComponent,java.lang.Boolean> filter);
  }

}

package androidx.compose.foundation.text.contextmenu.provider {

  public interface TextContextMenuDataProvider {
    method public androidx.compose.ui.geometry.Rect contentBounds(androidx.compose.ui.layout.LayoutCoordinates destinationCoordinates);
    method public androidx.compose.foundation.text.contextmenu.data.TextContextMenuData data();
    method @KotlinOnly public androidx.compose.ui.geometry.Offset position(androidx.compose.ui.layout.LayoutCoordinates destinationCoordinates);
    method @BytecodeOnly public long position-tuRUvjQ(androidx.compose.ui.layout.LayoutCoordinates);
  }

  public interface TextContextMenuProvider {
    method public suspend Object? showTextContextMenu(androidx.compose.foundation.text.contextmenu.provider.TextContextMenuDataProvider dataProvider, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public final class TextContextMenuProviderKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.text.contextmenu.provider.TextContextMenuProvider?> getLocalTextContextMenuDropdownProvider();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.text.contextmenu.provider.TextContextMenuProvider?> getLocalTextContextMenuToolbarProvider();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.text.contextmenu.provider.TextContextMenuProvider?> LocalTextContextMenuDropdownProvider;
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.text.contextmenu.provider.TextContextMenuProvider?> LocalTextContextMenuToolbarProvider;
  }

}

package androidx.compose.foundation.text.handwriting {

  public final class HandwritingDetector_androidKt {
    method public static androidx.compose.ui.Modifier handwritingDetector(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function0<kotlin.Unit> callback);
  }

  public final class HandwritingHandler_androidKt {
    method public static androidx.compose.ui.Modifier handwritingHandler(androidx.compose.ui.Modifier);
  }

}

package androidx.compose.foundation.text.input {

  @androidx.compose.runtime.Stable public fun interface InputTransformation {
    method public default void applySemantics(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public default androidx.compose.foundation.text.KeyboardOptions? getKeyboardOptions();
    method public void transformInput(androidx.compose.foundation.text.input.TextFieldBuffer);
    property public default androidx.compose.foundation.text.KeyboardOptions? keyboardOptions;
    field public static final androidx.compose.foundation.text.input.InputTransformation.Companion Companion;
  }

  public static final class InputTransformation.Companion implements androidx.compose.foundation.text.input.InputTransformation {
    method public void transformInput(androidx.compose.foundation.text.input.TextFieldBuffer);
  }

  public final class InputTransformationKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.text.input.InputTransformation allCaps(androidx.compose.foundation.text.input.InputTransformation, androidx.compose.ui.text.intl.Locale locale);
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.text.input.InputTransformation byValue(androidx.compose.foundation.text.input.InputTransformation, kotlin.jvm.functions.Function2<? super java.lang.CharSequence,? super java.lang.CharSequence,? extends java.lang.CharSequence> transformation);
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.text.input.InputTransformation maxLength(androidx.compose.foundation.text.input.InputTransformation, int maxLength);
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.text.input.InputTransformation then(androidx.compose.foundation.text.input.InputTransformation, androidx.compose.foundation.text.input.InputTransformation next);
  }

  @androidx.compose.runtime.Stable public fun interface KeyboardActionHandler {
    method public void onKeyboardAction(kotlin.jvm.functions.Function0<kotlin.Unit> performDefaultAction);
  }

  @androidx.compose.runtime.Stable public fun interface OutputTransformation {
    method public void transformOutput(androidx.compose.foundation.text.input.TextFieldBuffer);
  }

  public final class TextFieldBuffer implements java.lang.Appendable {
    method public void addStyle(androidx.compose.ui.text.ParagraphStyle paragraphStyle, int start, int end);
    method public void addStyle(androidx.compose.ui.text.SpanStyle spanStyle, int start, int end);
    method public Appendable append(char char);
    method public Appendable append(CharSequence? text);
    method public Appendable append(CharSequence? text, int start, int end);
    method public CharSequence asCharSequence();
    method public char charAt(int index);
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public androidx.compose.foundation.text.input.TextFieldBuffer.ChangeList getChanges();
    method public int getLength();
    method @BytecodeOnly public long getOriginalSelection-d9O1mEE();
    method public CharSequence getOriginalText();
    method @BytecodeOnly public long getSelection-d9O1mEE();
    method public boolean hasSelection();
    method public void placeCursorAfterCharAt(int index);
    method public void placeCursorBeforeCharAt(int index);
    method public void replace(int start, int end, CharSequence text);
    method public void revertAllChanges();
    method @BytecodeOnly public void setSelection-5zc-tL8(long);
    property @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public androidx.compose.foundation.text.input.TextFieldBuffer.ChangeList changes;
    property public boolean hasSelection;
    property public int length;
    property public androidx.compose.ui.text.TextRange originalSelection;
    property public CharSequence originalText;
    property public androidx.compose.ui.text.TextRange selection;
  }

  public static interface TextFieldBuffer.ChangeList {
    method public int getChangeCount();
    method @KotlinOnly public androidx.compose.ui.text.TextRange getOriginalRange(int changeIndex);
    method @BytecodeOnly public long getOriginalRange--jx7JFs(int);
    method @KotlinOnly public androidx.compose.ui.text.TextRange getRange(int changeIndex);
    method @BytecodeOnly public long getRange--jx7JFs(int);
    property public abstract int changeCount;
  }

  public final class TextFieldBufferKt {
    method public static void delete(androidx.compose.foundation.text.input.TextFieldBuffer, int start, int end);
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static inline void forEachChange(androidx.compose.foundation.text.input.TextFieldBuffer.ChangeList, kotlin.jvm.functions.Function2<? super androidx.compose.ui.text.TextRange,? super androidx.compose.ui.text.TextRange,kotlin.Unit> block);
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public static inline void forEachChangeReversed(androidx.compose.foundation.text.input.TextFieldBuffer.ChangeList, kotlin.jvm.functions.Function2<? super androidx.compose.ui.text.TextRange,? super androidx.compose.ui.text.TextRange,kotlin.Unit> block);
    method public static void insert(androidx.compose.foundation.text.input.TextFieldBuffer, int index, String text);
    method public static void placeCursorAtEnd(androidx.compose.foundation.text.input.TextFieldBuffer);
    method public static void selectAll(androidx.compose.foundation.text.input.TextFieldBuffer);
  }

  public fun interface TextFieldDecorator {
    method @androidx.compose.runtime.Composable public void Decoration(kotlin.jvm.functions.Function0<kotlin.Unit> innerTextField);
    method @BytecodeOnly @androidx.compose.runtime.Composable public void Decoration(kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int);
  }

  @androidx.compose.runtime.Stable public sealed interface TextFieldLineLimits {
    field public static final androidx.compose.foundation.text.input.TextFieldLineLimits.Companion Companion;
  }

  public static final class TextFieldLineLimits.Companion {
    method public androidx.compose.foundation.text.input.TextFieldLineLimits getDefault();
    property public androidx.compose.foundation.text.input.TextFieldLineLimits Default;
  }

  @androidx.compose.runtime.Immutable public static final class TextFieldLineLimits.MultiLine implements androidx.compose.foundation.text.input.TextFieldLineLimits {
    ctor public TextFieldLineLimits.MultiLine();
    ctor public TextFieldLineLimits.MultiLine(optional int minHeightInLines, optional int maxHeightInLines);
    method public int getMaxHeightInLines();
    method public int getMinHeightInLines();
    property public int maxHeightInLines;
    property public int minHeightInLines;
  }

  public static final class TextFieldLineLimits.SingleLine implements androidx.compose.foundation.text.input.TextFieldLineLimits {
    field public static final androidx.compose.foundation.text.input.TextFieldLineLimits.SingleLine INSTANCE;
  }

  @androidx.compose.runtime.Stable public final class TextFieldState {
    ctor @KotlinOnly @androidx.compose.runtime.annotation.RememberInComposition public TextFieldState(optional String initialText, optional androidx.compose.ui.text.TextRange initialSelection);
    ctor @BytecodeOnly @androidx.compose.runtime.annotation.RememberInComposition public TextFieldState(String!, long, kotlin.jvm.internal.DefaultConstructorMarker!);
    method @kotlin.PublishedApi internal void commitEdit(androidx.compose.foundation.text.input.TextFieldBuffer newValue);
    method public inline void edit(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.text.input.TextFieldBuffer,kotlin.Unit> block);
    method @kotlin.PublishedApi internal void finishEditing();
    method @BytecodeOnly public androidx.compose.ui.text.TextRange? getComposition-MzsxiRA();
    method @BytecodeOnly public long getSelection-d9O1mEE();
    method public CharSequence getText();
    method @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public androidx.compose.foundation.text.input.UndoState getUndoState();
    method @kotlin.PublishedApi internal androidx.compose.foundation.text.input.TextFieldBuffer startEdit();
    property public androidx.compose.ui.text.TextRange? composition;
    property public androidx.compose.ui.text.TextRange selection;
    property public CharSequence text;
    property @SuppressCompatibility @androidx.compose.foundation.ExperimentalFoundationApi public androidx.compose.foundation.text.input.UndoState undoState;
  }

  public static final class TextFieldState.Saver implements androidx.compose.runtime.saveable.Saver<androidx.compose.foundation.text.input.TextFieldState,java.lang.Object> {
    method public androidx.compose.foundation.text.input.TextFieldState? restore(Object value);
    method public Object? save(androidx.compose.runtime.saveable.SaverScope, androidx.compose.foundation.text.input.TextFieldState value);
    field public static final androidx.compose.foundation.text.input.TextFieldState.Saver INSTANCE;
  }

  public final class TextFieldStateKt {
    method public static void clearText(androidx.compose.foundation.text.input.TextFieldState);
    method @KotlinOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.text.input.TextFieldState rememberTextFieldState(optional String initialText, optional androidx.compose.ui.text.TextRange initialSelection);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static androidx.compose.foundation.text.input.TextFieldState rememberTextFieldState-Le-punE(String?, long, androidx.compose.runtime.Composer?, int, int);
    method public static void setTextAndPlaceCursorAtEnd(androidx.compose.foundation.text.input.TextFieldState, String text);
    method public static void setTextAndSelectAll(androidx.compose.foundation.text.input.TextFieldState, String text);
    method public static androidx.compose.foundation.text.input.TextFieldBuffer toTextFieldBuffer(androidx.compose.foundation.text.input.TextFieldState);
  }

  @kotlin.jvm.JvmInline public final value class TextObfuscationMode {
    method @BytecodeOnly public static androidx.compose.foundation.text.input.TextObfuscationMode! box-impl(int);
    method public int getValue();
    method @BytecodeOnly public int unbox-impl();
    property public int value;
    field public static final androidx.compose.foundation.text.input.TextObfuscationMode.Companion Companion;
  }

  public static final class TextObfuscationMode.Companion {
    method @BytecodeOnly public int getHidden-vTwcZD0();
    method @BytecodeOnly public int getRevealLastTyped-vTwcZD0();
    method @BytecodeOnly public int getVisible-vTwcZD0();
    property public androidx.compose.foundation.text.input.TextObfuscationMode Hidden;
    property public androidx.compose.foundation.text.input.TextObfuscationMode RevealLastTyped;
    property public androidx.compose.foundation.text.input.TextObfuscationMode Visible;
  }

  public final class UndoState {
    method public void clearHistory();
    method public boolean getCanRedo();
    method public boolean getCanUndo();
    method public void redo();
    method public void undo();
    property public boolean canRedo;
    property public boolean canUndo;
  }

}

package androidx.compose.foundation.text.modifiers {

  public sealed interface TextAutoSizeLayoutScope extends androidx.compose.ui.unit.Density {
    method @KotlinOnly public androidx.compose.ui.text.TextLayoutResult performLayout(androidx.compose.ui.unit.Constraints constraints, androidx.compose.ui.text.AnnotatedString text, androidx.compose.ui.unit.TextUnit fontSize);
    method @BytecodeOnly public androidx.compose.ui.text.TextLayoutResult performLayout-5ZSfY2I(long, androidx.compose.ui.text.AnnotatedString, long);
  }

}

package androidx.compose.foundation.text.selection {

  public final class PlatformSelectionBehaviors_androidKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<kotlin.coroutines.CoroutineContext> getLocalTextClassifierCoroutineContext();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<kotlin.coroutines.CoroutineContext> LocalTextClassifierCoroutineContext;
  }

  public final class SelectionContainerKt {
    method @androidx.compose.runtime.Composable public static void DisableSelection(kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void DisableSelection(kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int);
    method @androidx.compose.runtime.Composable public static void SelectionContainer(optional androidx.compose.ui.Modifier modifier, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @BytecodeOnly @androidx.compose.runtime.Composable public static void SelectionContainer(androidx.compose.ui.Modifier?, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.Composer!,? super java.lang.Integer!,kotlin.Unit!>, androidx.compose.runtime.Composer?, int, int);
  }

  @androidx.compose.runtime.Immutable public final class TextSelectionColors {
    ctor @KotlinOnly public TextSelectionColors(androidx.compose.ui.graphics.Color handleColor, androidx.compose.ui.graphics.Color backgroundColor);
    ctor @BytecodeOnly public TextSelectionColors(long, long, kotlin.jvm.internal.DefaultConstructorMarker!);
    method @BytecodeOnly public long getBackgroundColor-0d7_KjU();
    method @BytecodeOnly public long getHandleColor-0d7_KjU();
    property public androidx.compose.ui.graphics.Color backgroundColor;
    property public androidx.compose.ui.graphics.Color handleColor;
  }

  public final class TextSelectionColorsKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.text.selection.TextSelectionColors> getLocalTextSelectionColors();
    property public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.compose.foundation.text.selection.TextSelectionColors> LocalTextSelectionColors;
  }

}

