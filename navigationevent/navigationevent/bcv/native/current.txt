// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <androidx.navigationevent:navigationevent>
abstract interface androidx.navigationevent/NavigationEventDispatcherOwner { // androidx.navigationevent/NavigationEventDispatcherOwner|null[0]
    abstract val navigationEventDispatcher // androidx.navigationevent/NavigationEventDispatcherOwner.navigationEventDispatcher|{}navigationEventDispatcher[0]
        abstract fun <get-navigationEventDispatcher>(): androidx.navigationevent/NavigationEventDispatcher // androidx.navigationevent/NavigationEventDispatcherOwner.navigationEventDispatcher.<get-navigationEventDispatcher>|<get-navigationEventDispatcher>(){}[0]
}

abstract interface androidx.navigationevent/NavigationEventInfo { // androidx.navigationevent/NavigationEventInfo|null[0]
    final object NotProvided : androidx.navigationevent/NavigationEventInfo // androidx.navigationevent/NavigationEventInfo.NotProvided|null[0]
}

abstract class <#A: androidx.navigationevent/NavigationEventInfo> androidx.navigationevent/NavigationEventCallback { // androidx.navigationevent/NavigationEventCallback|null[0]
    constructor <init>(kotlin/Boolean) // androidx.navigationevent/NavigationEventCallback.<init>|<init>(kotlin.Boolean){}[0]

    final var isEnabled // androidx.navigationevent/NavigationEventCallback.isEnabled|{}isEnabled[0]
        final fun <get-isEnabled>(): kotlin/Boolean // androidx.navigationevent/NavigationEventCallback.isEnabled.<get-isEnabled>|<get-isEnabled>(){}[0]
        final fun <set-isEnabled>(kotlin/Boolean) // androidx.navigationevent/NavigationEventCallback.isEnabled.<set-isEnabled>|<set-isEnabled>(kotlin.Boolean){}[0]

    final fun remove() // androidx.navigationevent/NavigationEventCallback.remove|remove(){}[0]
    final fun setInfo(#A, #A?) // androidx.navigationevent/NavigationEventCallback.setInfo|setInfo(1:0;1:0?){}[0]
    open fun onEventCancelled() // androidx.navigationevent/NavigationEventCallback.onEventCancelled|onEventCancelled(){}[0]
    open fun onEventCompleted() // androidx.navigationevent/NavigationEventCallback.onEventCompleted|onEventCompleted(){}[0]
    open fun onEventProgressed(androidx.navigationevent/NavigationEvent) // androidx.navigationevent/NavigationEventCallback.onEventProgressed|onEventProgressed(androidx.navigationevent.NavigationEvent){}[0]
    open fun onEventStarted(androidx.navigationevent/NavigationEvent) // androidx.navigationevent/NavigationEventCallback.onEventStarted|onEventStarted(androidx.navigationevent.NavigationEvent){}[0]
}

abstract class androidx.navigationevent/NavigationEventInputHandler { // androidx.navigationevent/NavigationEventInputHandler|null[0]
    constructor <init>(androidx.navigationevent/NavigationEventDispatcher) // androidx.navigationevent/NavigationEventInputHandler.<init>|<init>(androidx.navigationevent.NavigationEventDispatcher){}[0]

    final fun addOnHasEnabledCallbacksChangedCallback(kotlin/Function1<kotlin/Boolean, kotlin/Unit>) // androidx.navigationevent/NavigationEventInputHandler.addOnHasEnabledCallbacksChangedCallback|addOnHasEnabledCallbacksChangedCallback(kotlin.Function1<kotlin.Boolean,kotlin.Unit>){}[0]
    final fun dispatchOnCancelled() // androidx.navigationevent/NavigationEventInputHandler.dispatchOnCancelled|dispatchOnCancelled(){}[0]
    final fun dispatchOnCompleted() // androidx.navigationevent/NavigationEventInputHandler.dispatchOnCompleted|dispatchOnCompleted(){}[0]
    final fun dispatchOnProgressed(androidx.navigationevent/NavigationEvent) // androidx.navigationevent/NavigationEventInputHandler.dispatchOnProgressed|dispatchOnProgressed(androidx.navigationevent.NavigationEvent){}[0]
    final fun dispatchOnStarted(androidx.navigationevent/NavigationEvent) // androidx.navigationevent/NavigationEventInputHandler.dispatchOnStarted|dispatchOnStarted(androidx.navigationevent.NavigationEvent){}[0]
}

final class androidx.navigationevent/DirectNavigationEventInputHandler : androidx.navigationevent/NavigationEventInputHandler { // androidx.navigationevent/DirectNavigationEventInputHandler|null[0]
    constructor <init>(androidx.navigationevent/NavigationEventDispatcher) // androidx.navigationevent/DirectNavigationEventInputHandler.<init>|<init>(androidx.navigationevent.NavigationEventDispatcher){}[0]

    final fun handleOnCancelled() // androidx.navigationevent/DirectNavigationEventInputHandler.handleOnCancelled|handleOnCancelled(){}[0]
    final fun handleOnCompleted() // androidx.navigationevent/DirectNavigationEventInputHandler.handleOnCompleted|handleOnCompleted(){}[0]
    final fun handleOnProgressed(androidx.navigationevent/NavigationEvent) // androidx.navigationevent/DirectNavigationEventInputHandler.handleOnProgressed|handleOnProgressed(androidx.navigationevent.NavigationEvent){}[0]
    final fun handleOnStarted(androidx.navigationevent/NavigationEvent) // androidx.navigationevent/DirectNavigationEventInputHandler.handleOnStarted|handleOnStarted(androidx.navigationevent.NavigationEvent){}[0]
}

final class androidx.navigationevent/NavigationEvent { // androidx.navigationevent/NavigationEvent|null[0]
    constructor <init>(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Int = ..., kotlin/Long = ...) // androidx.navigationevent/NavigationEvent.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Int;kotlin.Long){}[0]

    final val frameTimeMillis // androidx.navigationevent/NavigationEvent.frameTimeMillis|{}frameTimeMillis[0]
        final fun <get-frameTimeMillis>(): kotlin/Long // androidx.navigationevent/NavigationEvent.frameTimeMillis.<get-frameTimeMillis>|<get-frameTimeMillis>(){}[0]
    final val progress // androidx.navigationevent/NavigationEvent.progress|{}progress[0]
        final fun <get-progress>(): kotlin/Float // androidx.navigationevent/NavigationEvent.progress.<get-progress>|<get-progress>(){}[0]
    final val swipeEdge // androidx.navigationevent/NavigationEvent.swipeEdge|{}swipeEdge[0]
        final fun <get-swipeEdge>(): kotlin/Int // androidx.navigationevent/NavigationEvent.swipeEdge.<get-swipeEdge>|<get-swipeEdge>(){}[0]
    final val touchX // androidx.navigationevent/NavigationEvent.touchX|{}touchX[0]
        final fun <get-touchX>(): kotlin/Float // androidx.navigationevent/NavigationEvent.touchX.<get-touchX>|<get-touchX>(){}[0]
    final val touchY // androidx.navigationevent/NavigationEvent.touchY|{}touchY[0]
        final fun <get-touchY>(): kotlin/Float // androidx.navigationevent/NavigationEvent.touchY.<get-touchY>|<get-touchY>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.navigationevent/NavigationEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.navigationevent/NavigationEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.navigationevent/NavigationEvent.toString|toString(){}[0]

    open annotation class SwipeEdge : kotlin/Annotation { // androidx.navigationevent/NavigationEvent.SwipeEdge|null[0]
        constructor <init>() // androidx.navigationevent/NavigationEvent.SwipeEdge.<init>|<init>(){}[0]
    }

    final object Companion { // androidx.navigationevent/NavigationEvent.Companion|null[0]
        final const val EDGE_LEFT // androidx.navigationevent/NavigationEvent.Companion.EDGE_LEFT|{}EDGE_LEFT[0]
            final fun <get-EDGE_LEFT>(): kotlin/Int // androidx.navigationevent/NavigationEvent.Companion.EDGE_LEFT.<get-EDGE_LEFT>|<get-EDGE_LEFT>(){}[0]
        final const val EDGE_NONE // androidx.navigationevent/NavigationEvent.Companion.EDGE_NONE|{}EDGE_NONE[0]
            final fun <get-EDGE_NONE>(): kotlin/Int // androidx.navigationevent/NavigationEvent.Companion.EDGE_NONE.<get-EDGE_NONE>|<get-EDGE_NONE>(){}[0]
        final const val EDGE_RIGHT // androidx.navigationevent/NavigationEvent.Companion.EDGE_RIGHT|{}EDGE_RIGHT[0]
            final fun <get-EDGE_RIGHT>(): kotlin/Int // androidx.navigationevent/NavigationEvent.Companion.EDGE_RIGHT.<get-EDGE_RIGHT>|<get-EDGE_RIGHT>(){}[0]
    }
}

final class androidx.navigationevent/NavigationEventDispatcher { // androidx.navigationevent/NavigationEventDispatcher|null[0]
    constructor <init>(androidx.navigationevent/NavigationEventDispatcher) // androidx.navigationevent/NavigationEventDispatcher.<init>|<init>(androidx.navigationevent.NavigationEventDispatcher){}[0]
    constructor <init>(kotlin/Function0<kotlin/Unit>? = ..., kotlin/Function1<kotlin/Boolean, kotlin/Unit>? = ...) // androidx.navigationevent/NavigationEventDispatcher.<init>|<init>(kotlin.Function0<kotlin.Unit>?;kotlin.Function1<kotlin.Boolean,kotlin.Unit>?){}[0]

    final val state // androidx.navigationevent/NavigationEventDispatcher.state|{}state[0]
        final fun <get-state>(): kotlinx.coroutines.flow/StateFlow<androidx.navigationevent/NavigationEventState<androidx.navigationevent/NavigationEventInfo>> // androidx.navigationevent/NavigationEventDispatcher.state.<get-state>|<get-state>(){}[0]

    final var isEnabled // androidx.navigationevent/NavigationEventDispatcher.isEnabled|{}isEnabled[0]
        final fun <get-isEnabled>(): kotlin/Boolean // androidx.navigationevent/NavigationEventDispatcher.isEnabled.<get-isEnabled>|<get-isEnabled>(){}[0]
        final fun <set-isEnabled>(kotlin/Boolean) // androidx.navigationevent/NavigationEventDispatcher.isEnabled.<set-isEnabled>|<set-isEnabled>(kotlin.Boolean){}[0]

    final fun addCallback(androidx.navigationevent/NavigationEventCallback<*>, androidx.navigationevent/NavigationEventPriority = ...) // androidx.navigationevent/NavigationEventDispatcher.addCallback|addCallback(androidx.navigationevent.NavigationEventCallback<*>;androidx.navigationevent.NavigationEventPriority){}[0]
    final fun addInputHandler(androidx.navigationevent/NavigationEventInputHandler) // androidx.navigationevent/NavigationEventDispatcher.addInputHandler|addInputHandler(androidx.navigationevent.NavigationEventInputHandler){}[0]
    final fun dispose() // androidx.navigationevent/NavigationEventDispatcher.dispose|dispose(){}[0]
    final fun hasEnabledCallbacks(): kotlin/Boolean // androidx.navigationevent/NavigationEventDispatcher.hasEnabledCallbacks|hasEnabledCallbacks(){}[0]
    final fun removeInputHandler(androidx.navigationevent/NavigationEventInputHandler) // androidx.navigationevent/NavigationEventDispatcher.removeInputHandler|removeInputHandler(androidx.navigationevent.NavigationEventInputHandler){}[0]
    final inline fun <#A1: reified androidx.navigationevent/NavigationEventInfo> getState(kotlinx.coroutines/CoroutineScope, #A1): kotlinx.coroutines.flow/StateFlow<androidx.navigationevent/NavigationEventState<#A1>> // androidx.navigationevent/NavigationEventDispatcher.getState|getState(kotlinx.coroutines.CoroutineScope;0:0){0§<androidx.navigationevent.NavigationEventInfo>}[0]
}

final value class androidx.navigationevent/NavigationEventPriority { // androidx.navigationevent/NavigationEventPriority|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.navigationevent/NavigationEventPriority.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.navigationevent/NavigationEventPriority.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.navigationevent/NavigationEventPriority.toString|toString(){}[0]

    final object Companion { // androidx.navigationevent/NavigationEventPriority.Companion|null[0]
        final val Default // androidx.navigationevent/NavigationEventPriority.Companion.Default|{}Default[0]
            final fun <get-Default>(): androidx.navigationevent/NavigationEventPriority // androidx.navigationevent/NavigationEventPriority.Companion.Default.<get-Default>|<get-Default>(){}[0]
        final val Overlay // androidx.navigationevent/NavigationEventPriority.Companion.Overlay|{}Overlay[0]
            final fun <get-Overlay>(): androidx.navigationevent/NavigationEventPriority // androidx.navigationevent/NavigationEventPriority.Companion.Overlay.<get-Overlay>|<get-Overlay>(){}[0]
    }
}

sealed class <#A: out androidx.navigationevent/NavigationEventInfo> androidx.navigationevent/NavigationEventState { // androidx.navigationevent/NavigationEventState|null[0]
    abstract val currentInfo // androidx.navigationevent/NavigationEventState.currentInfo|{}currentInfo[0]
        abstract fun <get-currentInfo>(): #A // androidx.navigationevent/NavigationEventState.currentInfo.<get-currentInfo>|<get-currentInfo>(){}[0]
    final val progress // androidx.navigationevent/NavigationEventState.progress|{}progress[0]
        final fun <get-progress>(): kotlin/Float // androidx.navigationevent/NavigationEventState.progress.<get-progress>|<get-progress>(){}[0]

    final class <#A1: out androidx.navigationevent/NavigationEventInfo> Idle : androidx.navigationevent/NavigationEventState<#A1> { // androidx.navigationevent/NavigationEventState.Idle|null[0]
        constructor <init>(#A1) // androidx.navigationevent/NavigationEventState.Idle.<init>|<init>(1:0){}[0]

        final val currentInfo // androidx.navigationevent/NavigationEventState.Idle.currentInfo|{}currentInfo[0]
            final fun <get-currentInfo>(): #A1 // androidx.navigationevent/NavigationEventState.Idle.currentInfo.<get-currentInfo>|<get-currentInfo>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.navigationevent/NavigationEventState.Idle.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.navigationevent/NavigationEventState.Idle.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.navigationevent/NavigationEventState.Idle.toString|toString(){}[0]
    }

    final class <#A1: out androidx.navigationevent/NavigationEventInfo> InProgress : androidx.navigationevent/NavigationEventState<#A1> { // androidx.navigationevent/NavigationEventState.InProgress|null[0]
        constructor <init>(#A1, #A1?, androidx.navigationevent/NavigationEvent) // androidx.navigationevent/NavigationEventState.InProgress.<init>|<init>(1:0;1:0?;androidx.navigationevent.NavigationEvent){}[0]

        final val currentInfo // androidx.navigationevent/NavigationEventState.InProgress.currentInfo|{}currentInfo[0]
            final fun <get-currentInfo>(): #A1 // androidx.navigationevent/NavigationEventState.InProgress.currentInfo.<get-currentInfo>|<get-currentInfo>(){}[0]
        final val latestEvent // androidx.navigationevent/NavigationEventState.InProgress.latestEvent|{}latestEvent[0]
            final fun <get-latestEvent>(): androidx.navigationevent/NavigationEvent // androidx.navigationevent/NavigationEventState.InProgress.latestEvent.<get-latestEvent>|<get-latestEvent>(){}[0]
        final val previousInfo // androidx.navigationevent/NavigationEventState.InProgress.previousInfo|{}previousInfo[0]
            final fun <get-previousInfo>(): #A1? // androidx.navigationevent/NavigationEventState.InProgress.previousInfo.<get-previousInfo>|<get-previousInfo>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.navigationevent/NavigationEventState.InProgress.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.navigationevent/NavigationEventState.InProgress.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.navigationevent/NavigationEventState.InProgress.toString|toString(){}[0]
    }
}
