// Signature format: 4.0
package androidx.navigationevent {

  public final class DirectNavigationEventInput extends androidx.navigationevent.NavigationEventInput {
    ctor public DirectNavigationEventInput();
    method @MainThread public void backCancelled();
    method @MainThread public void backCompleted();
    method @MainThread public void backProgressed(androidx.navigationevent.NavigationEvent event);
    method @MainThread public void backStarted(androidx.navigationevent.NavigationEvent event);
    method @MainThread public void forwardCancelled();
    method @MainThread public void forwardCompleted();
    method @MainThread public void forwardProgressed(androidx.navigationevent.NavigationEvent event);
    method @MainThread public void forwardStarted(androidx.navigationevent.NavigationEvent event);
  }

  public final class NavigationEvent {
    ctor public NavigationEvent();
    ctor @KotlinOnly public NavigationEvent(optional @FloatRange(from=0.0) float touchX, optional @FloatRange(from=0.0) float touchY, optional @FloatRange(from=0.0, to=1.0) float progress, optional androidx.navigationevent.NavigationEventSwipeEdge swipeEdge, optional long frameTimeMillis);
    ctor @BytecodeOnly public NavigationEvent(@FloatRange(from=0.0) float, @FloatRange(from=0.0) float, @FloatRange(from=0.0, to=1.0) float, int, long, kotlin.jvm.internal.DefaultConstructorMarker!);
    method public long getFrameTimeMillis();
    method public float getProgress();
    method public int getSwipeEdge();
    method public float getTouchX();
    method public float getTouchY();
    property public long frameTimeMillis;
    property public float progress;
    property public androidx.navigationevent.NavigationEventSwipeEdge swipeEdge;
    property public float touchX;
    property public float touchY;
  }

  public abstract class NavigationEventCallback<T extends androidx.navigationevent.NavigationEventInfo> {
    ctor public NavigationEventCallback();
    ctor public NavigationEventCallback(optional boolean isBackEnabled, optional boolean isForwardEnabled);
    method public final boolean isBackEnabled();
    method public final boolean isForwardEnabled();
    method @EmptySuper protected void onBackCancelled();
    method @EmptySuper protected void onBackCompleted();
    method @EmptySuper protected void onBackProgressed(androidx.navigationevent.NavigationEvent event);
    method @EmptySuper protected void onBackStarted(androidx.navigationevent.NavigationEvent event);
    method @EmptySuper protected void onForwardCancelled();
    method @EmptySuper protected void onForwardCompleted();
    method @EmptySuper protected void onForwardProgressed(androidx.navigationevent.NavigationEvent event);
    method @EmptySuper protected void onForwardStarted(androidx.navigationevent.NavigationEvent event);
    method public final void remove();
    method public final void setBackEnabled(boolean);
    method public final void setForwardEnabled(boolean);
    method public final void setInfo(T currentInfo, T? previousInfo);
    property public final boolean isBackEnabled;
    property public final boolean isForwardEnabled;
  }

  public final class NavigationEventDispatcher {
    ctor public NavigationEventDispatcher(androidx.navigationevent.NavigationEventDispatcher parentDispatcher);
    ctor public NavigationEventDispatcher(optional kotlin.jvm.functions.Function0<kotlin.Unit>? fallbackOnBackPressed);
    method @KotlinOnly @MainThread public void addCallback(androidx.navigationevent.NavigationEventCallback<? extends java.lang.Object?> callback, optional androidx.navigationevent.NavigationEventPriority priority);
    method @MainThread public void addCallback(androidx.navigationevent.NavigationEventCallback<? extends java.lang.Object?> callback, optional int priority);
    method @MainThread public void addInput(androidx.navigationevent.NavigationEventInput input);
    method @MainThread public void dispose();
    method public kotlinx.coroutines.flow.StateFlow<androidx.navigationevent.NavigationEventState<androidx.navigationevent.NavigationEventInfo>> getState();
    method @KotlinOnly public inline <reified T extends androidx.navigationevent.NavigationEventInfo> kotlinx.coroutines.flow.StateFlow<androidx.navigationevent.NavigationEventState<T>> getState(kotlinx.coroutines.CoroutineScope scope, T initialInfo);
    method public boolean hasEnabledCallbacks();
    method public boolean isEnabled();
    method @MainThread public void removeInput(androidx.navigationevent.NavigationEventInput input);
    method public void setEnabled(boolean);
    property public boolean isEnabled;
    property public kotlinx.coroutines.flow.StateFlow<androidx.navigationevent.NavigationEventState<androidx.navigationevent.NavigationEventInfo>> state;
  }

  public interface NavigationEventDispatcherOwner {
    method public androidx.navigationevent.NavigationEventDispatcher getNavigationEventDispatcher();
    property public abstract androidx.navigationevent.NavigationEventDispatcher navigationEventDispatcher;
  }

  public interface NavigationEventInfo {
  }

  public static final class NavigationEventInfo.NotProvided implements androidx.navigationevent.NavigationEventInfo {
    field public static final androidx.navigationevent.NavigationEventInfo.NotProvided INSTANCE;
  }

  public abstract class NavigationEventInput {
    ctor public NavigationEventInput();
    method @MainThread protected final void dispatchOnBackCancelled();
    method @MainThread protected final void dispatchOnBackCompleted();
    method @MainThread protected final void dispatchOnBackProgressed(androidx.navigationevent.NavigationEvent event);
    method @MainThread protected final void dispatchOnBackStarted(androidx.navigationevent.NavigationEvent event);
    method @MainThread protected final void dispatchOnForwardCancelled();
    method @MainThread protected final void dispatchOnForwardCompleted();
    method @MainThread protected final void dispatchOnForwardProgressed(androidx.navigationevent.NavigationEvent event);
    method @MainThread protected final void dispatchOnForwardStarted(androidx.navigationevent.NavigationEvent event);
    method @EmptySuper @MainThread protected void onAdded(androidx.navigationevent.NavigationEventDispatcher dispatcher);
    method @EmptySuper @MainThread protected void onHasEnabledCallbacksChanged(boolean hasEnabledCallbacks);
    method @EmptySuper @MainThread protected void onRemoved();
  }

  @kotlin.jvm.JvmInline public final value class NavigationEventPriority {
    method @BytecodeOnly public static androidx.navigationevent.NavigationEventPriority! box-impl(int);
    method @BytecodeOnly public int unbox-impl();
    field public static final androidx.navigationevent.NavigationEventPriority.Companion Companion;
  }

  public static final class NavigationEventPriority.Companion {
    method public int getDefault();
    method public int getOverlay();
    property public androidx.navigationevent.NavigationEventPriority Default;
    property public androidx.navigationevent.NavigationEventPriority Overlay;
  }

  public abstract sealed class NavigationEventState<T extends androidx.navigationevent.NavigationEventInfo> {
    method public abstract T getCurrentInfo();
    method public final float getProgress();
    property public abstract T currentInfo;
    property public final float progress;
  }

  public static final class NavigationEventState.Idle<T extends androidx.navigationevent.NavigationEventInfo> extends androidx.navigationevent.NavigationEventState<T> {
    ctor @kotlin.PublishedApi internal NavigationEventState.Idle(T currentInfo);
    method public T getCurrentInfo();
    property public T currentInfo;
  }

  public static final class NavigationEventState.InProgress<T extends androidx.navigationevent.NavigationEventInfo> extends androidx.navigationevent.NavigationEventState<T> {
    method public T getCurrentInfo();
    method public androidx.navigationevent.NavigationEvent getLatestEvent();
    method public T? getPreviousInfo();
    property public T currentInfo;
    property public androidx.navigationevent.NavigationEvent latestEvent;
    property public T? previousInfo;
  }

  @kotlin.jvm.JvmInline public final value class NavigationEventSwipeEdge {
    method @BytecodeOnly public static androidx.navigationevent.NavigationEventSwipeEdge! box-impl(int);
    method @BytecodeOnly public int unbox-impl();
    field public static final androidx.navigationevent.NavigationEventSwipeEdge.Companion Companion;
  }

  public static final class NavigationEventSwipeEdge.Companion {
    method public int getLeft();
    method public int getNone();
    method public int getRight();
    property public androidx.navigationevent.NavigationEventSwipeEdge Left;
    property public androidx.navigationevent.NavigationEventSwipeEdge None;
    property public androidx.navigationevent.NavigationEventSwipeEdge Right;
  }

  @RequiresApi(33) public final class OnBackInvokedInput extends androidx.navigationevent.NavigationEventInput {
    ctor public OnBackInvokedInput(android.window.OnBackInvokedDispatcher onBackInvokedDispatcher);
  }

  public final class ViewTreeNavigationEventDispatcherOwner {
    method public static androidx.navigationevent.NavigationEventDispatcherOwner? get(android.view.View);
    method public static void set(android.view.View, androidx.navigationevent.NavigationEventDispatcherOwner navigationEventDispatcherOwner);
  }

}

