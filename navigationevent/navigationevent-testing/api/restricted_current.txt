// Signature format: 4.0
package androidx.navigationevent.testing {

  public final class TestNavigationEventCallback extends androidx.navigationevent.NavigationEventCallback {
    ctor public TestNavigationEventCallback();
    ctor public TestNavigationEventCallback(optional boolean isEnabled, optional kotlin.jvm.functions.Function2<? super androidx.navigationevent.testing.TestNavigationEventCallback,? super androidx.navigationevent.NavigationEvent,kotlin.Unit> onEventStarted, optional kotlin.jvm.functions.Function2<? super androidx.navigationevent.testing.TestNavigationEventCallback,? super androidx.navigationevent.NavigationEvent,kotlin.Unit> onEventProgressed, optional kotlin.jvm.functions.Function1<? super androidx.navigationevent.testing.TestNavigationEventCallback,kotlin.Unit> onEventCancelled, optional kotlin.jvm.functions.Function1<? super androidx.navigationevent.testing.TestNavigationEventCallback,kotlin.Unit> onEventCompleted);
    method public int getCancelledInvocations();
    method public int getCompletedInvocations();
    method public java.util.List<androidx.navigationevent.NavigationEvent> getProgressedEvents();
    method public int getProgressedInvocations();
    method public java.util.List<androidx.navigationevent.NavigationEvent> getStartedEvents();
    method public int getStartedInvocations();
    property public int cancelledInvocations;
    property public int completedInvocations;
    property public java.util.List<androidx.navigationevent.NavigationEvent> progressedEvents;
    property public int progressedInvocations;
    property public java.util.List<androidx.navigationevent.NavigationEvent> startedEvents;
    property public int startedInvocations;
  }

  public final class TestNavigationEventDispatcherOwner implements androidx.navigationevent.NavigationEventDispatcherOwner {
    ctor public TestNavigationEventDispatcherOwner();
    ctor public TestNavigationEventDispatcherOwner(optional kotlin.jvm.functions.Function1<? super androidx.navigationevent.testing.TestNavigationEventDispatcherOwner,kotlin.Unit> fallbackOnBackPressed, optional kotlin.jvm.functions.Function1<? super androidx.navigationevent.testing.TestNavigationEventDispatcherOwner,kotlin.Unit> onHasEnabledCallbacksChanged);
    method public int getFallbackOnBackPressedInvocations();
    method public androidx.navigationevent.NavigationEventDispatcher getNavigationEventDispatcher();
    method public int getOnHasEnabledCallbacksChangedInvocations();
    property public int fallbackOnBackPressedInvocations;
    property public androidx.navigationevent.NavigationEventDispatcher navigationEventDispatcher;
    property public int onHasEnabledCallbacksChangedInvocations;
  }

  public final class TestNavigationEventKt {
    method public static androidx.navigationevent.NavigationEvent TestNavigationEvent(optional @FloatRange(from=0.0) float touchX, optional @FloatRange(from=0.0) float touchY, optional @FloatRange(from=0.0, to=1.0) float progress, optional int swipeEdge, optional long frameTimeMillis);
  }

}

