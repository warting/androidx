// Signature format: 4.0
package androidx.health.connect.client {

  @kotlin.jvm.JvmDefaultWithCompatibility public interface HealthConnectClient {
    method public suspend Object? aggregate(androidx.health.connect.client.request.AggregateRequest request, kotlin.coroutines.Continuation<? super androidx.health.connect.client.aggregate.AggregationResult>);
    method public suspend Object? aggregateGroupByDuration(androidx.health.connect.client.request.AggregateGroupByDurationRequest request, kotlin.coroutines.Continuation<? super java.util.List<androidx.health.connect.client.aggregate.AggregationResultGroupedByDuration>>);
    method public suspend Object? aggregateGroupByPeriod(androidx.health.connect.client.request.AggregateGroupByPeriodRequest request, kotlin.coroutines.Continuation<? super java.util.List<androidx.health.connect.client.aggregate.AggregationResultGroupedByPeriod>>);
    method @SuppressCompatibility @RequiresPermission("android.permission.health.WRITE_MEDICAL_DATA") @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public default suspend Object? createMedicalDataSource(androidx.health.connect.client.request.CreateMedicalDataSourceRequest request, kotlin.coroutines.Continuation<? super androidx.health.connect.client.records.MedicalDataSource>);
    method @SuppressCompatibility @RequiresPermission("android.permission.health.WRITE_MEDICAL_DATA") @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public default suspend Object? deleteMedicalDataSourceWithData(String id, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @SuppressCompatibility @RequiresPermission("android.permission.health.WRITE_MEDICAL_DATA") @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public default suspend Object? deleteMedicalResources(androidx.health.connect.client.request.DeleteMedicalResourcesRequest request, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @SuppressCompatibility @RequiresPermission("android.permission.health.WRITE_MEDICAL_DATA") @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public default suspend Object? deleteMedicalResources(java.util.List<androidx.health.connect.client.records.MedicalResourceId> ids, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? deleteRecords(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? deleteRecords(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType, java.util.List<java.lang.String> recordIdsList, java.util.List<java.lang.String> clientRecordIdsList, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? getChanges(String changesToken, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.ChangesResponse>);
    method public suspend Object? getChangesToken(androidx.health.connect.client.request.ChangesTokenRequest request, kotlin.coroutines.Continuation<? super java.lang.String>);
    method public default androidx.health.connect.client.HealthConnectFeatures getFeatures();
    method public static android.content.Intent getHealthConnectManageDataIntent(android.content.Context context);
    method public static android.content.Intent getHealthConnectManageDataIntent(android.content.Context context, optional String providerPackageName);
    method public static String getHealthConnectSettingsAction();
    method @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public default suspend Object? getMedicalDataSources(androidx.health.connect.client.request.GetMedicalDataSourcesRequest request, kotlin.coroutines.Continuation<? super java.util.List<androidx.health.connect.client.records.MedicalDataSource>>);
    method @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public default suspend Object? getMedicalDataSources(java.util.List<java.lang.String> ids, kotlin.coroutines.Continuation<? super java.util.List<androidx.health.connect.client.records.MedicalDataSource>>);
    method public static androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context);
    method public static androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context, optional String providerPackageName);
    method public androidx.health.connect.client.PermissionController getPermissionController();
    method public static int getSdkStatus(android.content.Context context);
    method public static int getSdkStatus(android.content.Context context, optional String providerPackageName);
    method public suspend Object? insertRecords(java.util.List<? extends androidx.health.connect.client.records.Record> records, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.InsertRecordsResponse>);
    method @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public default suspend Object? readMedicalResources(androidx.health.connect.client.request.ReadMedicalResourcesRequest request, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.ReadMedicalResourcesResponse>);
    method @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public default suspend Object? readMedicalResources(java.util.List<androidx.health.connect.client.records.MedicalResourceId> ids, kotlin.coroutines.Continuation<? super java.util.List<androidx.health.connect.client.records.MedicalResource>>);
    method public suspend <T extends androidx.health.connect.client.records.Record> Object? readRecord(kotlin.reflect.KClass<T> recordType, String recordId, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.ReadRecordResponse<T>>);
    method public suspend <T extends androidx.health.connect.client.records.Record> Object? readRecords(androidx.health.connect.client.request.ReadRecordsRequest<T> request, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.ReadRecordsResponse<T>>);
    method public suspend Object? updateRecords(java.util.List<? extends androidx.health.connect.client.records.Record> records, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @SuppressCompatibility @RequiresPermission("android.permission.health.WRITE_MEDICAL_DATA") @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public default suspend Object? upsertMedicalResources(java.util.List<androidx.health.connect.client.request.UpsertMedicalResourceRequest> requests, kotlin.coroutines.Continuation<? super java.util.List<androidx.health.connect.client.records.MedicalResource>>);
    property public default androidx.health.connect.client.HealthConnectFeatures features;
    property public abstract androidx.health.connect.client.PermissionController permissionController;
    field public static final androidx.health.connect.client.HealthConnectClient.Companion Companion;
    field public static final int SDK_AVAILABLE = 3; // 0x3
    field public static final int SDK_UNAVAILABLE = 1; // 0x1
    field public static final int SDK_UNAVAILABLE_PROVIDER_UPDATE_REQUIRED = 2; // 0x2
  }

  public static final class HealthConnectClient.Companion {
    method public android.content.Intent getHealthConnectManageDataIntent(android.content.Context context);
    method public android.content.Intent getHealthConnectManageDataIntent(android.content.Context context, optional String providerPackageName);
    method public String getHealthConnectSettingsAction();
    method public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context);
    method public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context, optional String providerPackageName);
    method public int getSdkStatus(android.content.Context context);
    method public int getSdkStatus(android.content.Context context, optional String providerPackageName);
    property public static String ACTION_HEALTH_CONNECT_SETTINGS;
    property public static int SDK_AVAILABLE;
    property public static int SDK_UNAVAILABLE;
    property public static int SDK_UNAVAILABLE_PROVIDER_UPDATE_REQUIRED;
    field public static final int SDK_AVAILABLE = 3; // 0x3
    field public static final int SDK_UNAVAILABLE = 1; // 0x1
    field public static final int SDK_UNAVAILABLE_PROVIDER_UPDATE_REQUIRED = 2; // 0x2
  }

  public final class HealthConnectClientExt {
    method public static suspend inline <reified T extends androidx.health.connect.client.records.Record> Object? deleteRecords(androidx.health.connect.client.HealthConnectClient, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public static suspend inline <reified T extends androidx.health.connect.client.records.Record> Object? deleteRecords(androidx.health.connect.client.HealthConnectClient, java.util.List<java.lang.String> recordIdsList, java.util.List<java.lang.String> clientRecordIdsList, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public static suspend inline <reified T extends androidx.health.connect.client.records.Record> Object? readRecord(androidx.health.connect.client.HealthConnectClient, String recordId, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.ReadRecordResponse<T>>);
  }

  public interface HealthConnectFeatures {
    method public int getFeatureStatus(int feature);
    field public static final androidx.health.connect.client.HealthConnectFeatures.Companion Companion;
    field public static final int FEATURE_MINDFULNESS_SESSION = 5; // 0x5
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final int FEATURE_PERSONAL_HEALTH_RECORD = 6; // 0x6
    field public static final int FEATURE_PLANNED_EXERCISE = 3; // 0x3
    field public static final int FEATURE_READ_HEALTH_DATA_HISTORY = 4; // 0x4
    field public static final int FEATURE_READ_HEALTH_DATA_IN_BACKGROUND = 1; // 0x1
    field public static final int FEATURE_SKIN_TEMPERATURE = 2; // 0x2
    field public static final int FEATURE_STATUS_AVAILABLE = 2; // 0x2
    field public static final int FEATURE_STATUS_UNAVAILABLE = 1; // 0x1
  }

  public static final class HealthConnectFeatures.Companion {
    property public static int FEATURE_MINDFULNESS_SESSION;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static int FEATURE_PERSONAL_HEALTH_RECORD;
    property public static int FEATURE_PLANNED_EXERCISE;
    property public static int FEATURE_READ_HEALTH_DATA_HISTORY;
    property public static int FEATURE_READ_HEALTH_DATA_IN_BACKGROUND;
    property public static int FEATURE_SKIN_TEMPERATURE;
    property public static int FEATURE_STATUS_AVAILABLE;
    property public static int FEATURE_STATUS_UNAVAILABLE;
    field public static final int FEATURE_MINDFULNESS_SESSION = 5; // 0x5
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final int FEATURE_PERSONAL_HEALTH_RECORD = 6; // 0x6
    field public static final int FEATURE_PLANNED_EXERCISE = 3; // 0x3
    field public static final int FEATURE_READ_HEALTH_DATA_HISTORY = 4; // 0x4
    field public static final int FEATURE_READ_HEALTH_DATA_IN_BACKGROUND = 1; // 0x1
    field public static final int FEATURE_SKIN_TEMPERATURE = 2; // 0x2
    field public static final int FEATURE_STATUS_AVAILABLE = 2; // 0x2
    field public static final int FEATURE_STATUS_UNAVAILABLE = 1; // 0x1
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface PermissionController {
    method public static androidx.activity.result.contract.ActivityResultContract<java.util.Set<java.lang.String>,java.util.Set<java.lang.String>> createRequestPermissionResultContract();
    method public static androidx.activity.result.contract.ActivityResultContract<java.util.Set<java.lang.String>,java.util.Set<java.lang.String>> createRequestPermissionResultContract(optional String providerPackageName);
    method public suspend Object? getGrantedPermissions(kotlin.coroutines.Continuation<? super java.util.Set<java.lang.String>>);
    method public suspend Object? revokeAllPermissions(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field public static final androidx.health.connect.client.PermissionController.Companion Companion;
  }

  public static final class PermissionController.Companion {
    method public androidx.activity.result.contract.ActivityResultContract<java.util.Set<java.lang.String>,java.util.Set<java.lang.String>> createRequestPermissionResultContract();
    method public androidx.activity.result.contract.ActivityResultContract<java.util.Set<java.lang.String>,java.util.Set<java.lang.String>> createRequestPermissionResultContract(optional String providerPackageName);
  }

}

package androidx.health.connect.client.aggregate {

  public final class AggregateMetric<T> {
  }

  public final class AggregationResult {
    method public operator boolean contains(androidx.health.connect.client.aggregate.AggregateMetric<? extends java.lang.Object?> metric);
    method public operator <T> T? get(androidx.health.connect.client.aggregate.AggregateMetric<? extends T> metric);
    method public java.util.Set<androidx.health.connect.client.records.metadata.DataOrigin> getDataOrigins();
    property public java.util.Set<androidx.health.connect.client.records.metadata.DataOrigin> dataOrigins;
  }

  public final class AggregationResultGroupedByDuration {
    method public java.time.Instant getEndTime();
    method public androidx.health.connect.client.aggregate.AggregationResult getResult();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset getZoneOffset();
    property public java.time.Instant endTime;
    property public androidx.health.connect.client.aggregate.AggregationResult result;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset zoneOffset;
  }

  public final class AggregationResultGroupedByPeriod {
    method public java.time.LocalDateTime getEndTime();
    method public androidx.health.connect.client.aggregate.AggregationResult getResult();
    method public java.time.LocalDateTime getStartTime();
    property public java.time.LocalDateTime endTime;
    property public androidx.health.connect.client.aggregate.AggregationResult result;
    property public java.time.LocalDateTime startTime;
  }

}

package androidx.health.connect.client.changes {

  public interface Change {
  }

  public final class DeletionChange implements androidx.health.connect.client.changes.Change {
    method public String getRecordId();
    property public String recordId;
  }

  public final class UpsertionChange implements androidx.health.connect.client.changes.Change {
    method public androidx.health.connect.client.records.Record getRecord();
    property public androidx.health.connect.client.records.Record record;
  }

}

package androidx.health.connect.client.contracts {

  public final class ExerciseRouteRequestContract extends androidx.activity.result.contract.ActivityResultContract<java.lang.String,androidx.health.connect.client.records.ExerciseRoute?> {
    ctor public ExerciseRouteRequestContract();
    method public android.content.Intent createIntent(android.content.Context context, String input);
    method public androidx.health.connect.client.records.ExerciseRoute? parseResult(int resultCode, android.content.Intent? intent);
  }

  public final class HealthPermissionsRequestContract extends androidx.activity.result.contract.ActivityResultContract<java.util.Set<? extends java.lang.String>,java.util.Set<? extends java.lang.String>> {
    ctor public HealthPermissionsRequestContract();
    ctor public HealthPermissionsRequestContract(optional String providerPackageName);
    method public android.content.Intent createIntent(android.content.Context context, java.util.Set<java.lang.String> input);
    method public java.util.Set<java.lang.String> parseResult(int resultCode, android.content.Intent? intent);
  }

}

package androidx.health.connect.client.feature {

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This is a part of the Personal Health Record experimental Health Connect APIs and could change in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalPersonalHealthRecordApi {
  }

}

package androidx.health.connect.client.permission {

  public final class HealthPermission {
    method public static String getReadPermission(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType);
    method public static String getWritePermission(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType);
    field public static final androidx.health.connect.client.permission.HealthPermission.Companion Companion;
    field public static final String PERMISSION_READ_EXERCISE_ROUTES = "android.permission.health.READ_EXERCISE_ROUTES";
    field public static final String PERMISSION_READ_HEALTH_DATA_HISTORY = "android.permission.health.READ_HEALTH_DATA_HISTORY";
    field public static final String PERMISSION_READ_HEALTH_DATA_IN_BACKGROUND = "android.permission.health.READ_HEALTH_DATA_IN_BACKGROUND";
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final String PERMISSION_READ_MEDICAL_DATA_ALLERGIES_INTOLERANCES = "android.permission.health.READ_MEDICAL_DATA_ALLERGIES_INTOLERANCES";
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final String PERMISSION_READ_MEDICAL_DATA_CONDITIONS = "android.permission.health.READ_MEDICAL_DATA_CONDITIONS";
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final String PERMISSION_READ_MEDICAL_DATA_LABORATORY_RESULTS = "android.permission.health.READ_MEDICAL_DATA_LABORATORY_RESULTS";
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final String PERMISSION_READ_MEDICAL_DATA_MEDICATIONS = "android.permission.health.READ_MEDICAL_DATA_MEDICATIONS";
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final String PERMISSION_READ_MEDICAL_DATA_PERSONAL_DETAILS = "android.permission.health.READ_MEDICAL_DATA_PERSONAL_DETAILS";
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final String PERMISSION_READ_MEDICAL_DATA_PRACTITIONER_DETAILS = "android.permission.health.READ_MEDICAL_DATA_PRACTITIONER_DETAILS";
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final String PERMISSION_READ_MEDICAL_DATA_PREGNANCY = "android.permission.health.READ_MEDICAL_DATA_PREGNANCY";
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final String PERMISSION_READ_MEDICAL_DATA_PROCEDURES = "android.permission.health.READ_MEDICAL_DATA_PROCEDURES";
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final String PERMISSION_READ_MEDICAL_DATA_SOCIAL_HISTORY = "android.permission.health.READ_MEDICAL_DATA_SOCIAL_HISTORY";
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final String PERMISSION_READ_MEDICAL_DATA_VACCINES = "android.permission.health.READ_MEDICAL_DATA_VACCINES";
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final String PERMISSION_READ_MEDICAL_DATA_VISITS = "android.permission.health.READ_MEDICAL_DATA_VISITS";
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final String PERMISSION_READ_MEDICAL_DATA_VITAL_SIGNS = "android.permission.health.READ_MEDICAL_DATA_VITAL_SIGNS";
    field public static final String PERMISSION_WRITE_EXERCISE_ROUTE = "android.permission.health.WRITE_EXERCISE_ROUTE";
    field @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static final String PERMISSION_WRITE_MEDICAL_DATA = "android.permission.health.WRITE_MEDICAL_DATA";
  }

  public static final class HealthPermission.Companion {
    method public inline <reified T extends androidx.health.connect.client.records.Record> String getReadPermission();
    method public String getReadPermission(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType);
    method public inline <reified T extends androidx.health.connect.client.records.Record> String getWritePermission();
    method public String getWritePermission(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType);
    property public static String PERMISSION_READ_EXERCISE_ROUTES;
    property public static String PERMISSION_READ_HEALTH_DATA_HISTORY;
    property public static String PERMISSION_READ_HEALTH_DATA_IN_BACKGROUND;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static String PERMISSION_READ_MEDICAL_DATA_ALLERGIES_INTOLERANCES;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static String PERMISSION_READ_MEDICAL_DATA_CONDITIONS;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static String PERMISSION_READ_MEDICAL_DATA_LABORATORY_RESULTS;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static String PERMISSION_READ_MEDICAL_DATA_MEDICATIONS;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static String PERMISSION_READ_MEDICAL_DATA_PERSONAL_DETAILS;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static String PERMISSION_READ_MEDICAL_DATA_PRACTITIONER_DETAILS;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static String PERMISSION_READ_MEDICAL_DATA_PREGNANCY;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static String PERMISSION_READ_MEDICAL_DATA_PROCEDURES;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static String PERMISSION_READ_MEDICAL_DATA_SOCIAL_HISTORY;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static String PERMISSION_READ_MEDICAL_DATA_VACCINES;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static String PERMISSION_READ_MEDICAL_DATA_VISITS;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static String PERMISSION_READ_MEDICAL_DATA_VITAL_SIGNS;
    property public static String PERMISSION_WRITE_EXERCISE_ROUTE;
    property @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public static String PERMISSION_WRITE_MEDICAL_DATA;
  }

}

package androidx.health.connect.client.records {

  public final class ActiveCaloriesBurnedRecord implements androidx.health.connect.client.records.Record {
    ctor public ActiveCaloriesBurnedRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.units.Energy energy, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.units.Energy getEnergy();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.units.Energy energy;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Energy> ACTIVE_CALORIES_TOTAL;
    field public static final androidx.health.connect.client.records.ActiveCaloriesBurnedRecord.Companion Companion;
  }

  public static final class ActiveCaloriesBurnedRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Energy> ACTIVE_CALORIES_TOTAL;
  }

  public final class BasalBodyTemperatureRecord implements androidx.health.connect.client.records.Record {
    ctor public BasalBodyTemperatureRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, androidx.health.connect.client.units.Temperature temperature, optional int measurementLocation);
    method public int getMeasurementLocation();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public androidx.health.connect.client.units.Temperature getTemperature();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public int measurementLocation;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public androidx.health.connect.client.units.Temperature temperature;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
  }

  public final class BasalMetabolicRateRecord implements androidx.health.connect.client.records.Record {
    ctor public BasalMetabolicRateRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.units.Power basalMetabolicRate, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public androidx.health.connect.client.units.Power getBasalMetabolicRate();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.units.Power basalMetabolicRate;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Energy> BASAL_CALORIES_TOTAL;
    field public static final androidx.health.connect.client.records.BasalMetabolicRateRecord.Companion Companion;
  }

  public static final class BasalMetabolicRateRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Energy> BASAL_CALORIES_TOTAL;
  }

  public final class BloodGlucoseRecord implements androidx.health.connect.client.records.Record {
    ctor public BloodGlucoseRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, androidx.health.connect.client.units.BloodGlucose level, optional int specimenSource, optional int mealType, optional int relationToMeal);
    method public androidx.health.connect.client.units.BloodGlucose getLevel();
    method public int getMealType();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public int getRelationToMeal();
    method public int getSpecimenSource();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.units.BloodGlucose level;
    property public int mealType;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public int relationToMeal;
    property public int specimenSource;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final androidx.health.connect.client.records.BloodGlucoseRecord.Companion Companion;
    field public static final int RELATION_TO_MEAL_AFTER_MEAL = 4; // 0x4
    field public static final int RELATION_TO_MEAL_BEFORE_MEAL = 3; // 0x3
    field public static final int RELATION_TO_MEAL_FASTING = 2; // 0x2
    field public static final int RELATION_TO_MEAL_GENERAL = 1; // 0x1
    field public static final int RELATION_TO_MEAL_UNKNOWN = 0; // 0x0
    field public static final int SPECIMEN_SOURCE_CAPILLARY_BLOOD = 2; // 0x2
    field public static final int SPECIMEN_SOURCE_INTERSTITIAL_FLUID = 1; // 0x1
    field public static final int SPECIMEN_SOURCE_PLASMA = 3; // 0x3
    field public static final int SPECIMEN_SOURCE_SERUM = 4; // 0x4
    field public static final int SPECIMEN_SOURCE_TEARS = 5; // 0x5
    field public static final int SPECIMEN_SOURCE_UNKNOWN = 0; // 0x0
    field public static final int SPECIMEN_SOURCE_WHOLE_BLOOD = 6; // 0x6
  }

  public static final class BloodGlucoseRecord.Companion {
    property public static int RELATION_TO_MEAL_AFTER_MEAL;
    property public static int RELATION_TO_MEAL_BEFORE_MEAL;
    property public static int RELATION_TO_MEAL_FASTING;
    property public static int RELATION_TO_MEAL_GENERAL;
    property public static int RELATION_TO_MEAL_UNKNOWN;
    property public static int SPECIMEN_SOURCE_CAPILLARY_BLOOD;
    property public static int SPECIMEN_SOURCE_INTERSTITIAL_FLUID;
    property public static int SPECIMEN_SOURCE_PLASMA;
    property public static int SPECIMEN_SOURCE_SERUM;
    property public static int SPECIMEN_SOURCE_TEARS;
    property public static int SPECIMEN_SOURCE_UNKNOWN;
    property public static int SPECIMEN_SOURCE_WHOLE_BLOOD;
  }

  public final class BloodPressureRecord implements androidx.health.connect.client.records.Record {
    ctor public BloodPressureRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, androidx.health.connect.client.units.Pressure systolic, androidx.health.connect.client.units.Pressure diastolic, optional int bodyPosition, optional int measurementLocation);
    method public int getBodyPosition();
    method public androidx.health.connect.client.units.Pressure getDiastolic();
    method public int getMeasurementLocation();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public androidx.health.connect.client.units.Pressure getSystolic();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public int bodyPosition;
    property public androidx.health.connect.client.units.Pressure diastolic;
    property public int measurementLocation;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public androidx.health.connect.client.units.Pressure systolic;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final int BODY_POSITION_LYING_DOWN = 3; // 0x3
    field public static final int BODY_POSITION_RECLINING = 4; // 0x4
    field public static final int BODY_POSITION_SITTING_DOWN = 2; // 0x2
    field public static final int BODY_POSITION_STANDING_UP = 1; // 0x1
    field public static final int BODY_POSITION_UNKNOWN = 0; // 0x0
    field public static final androidx.health.connect.client.records.BloodPressureRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Pressure> DIASTOLIC_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Pressure> DIASTOLIC_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Pressure> DIASTOLIC_MIN;
    field public static final int MEASUREMENT_LOCATION_LEFT_UPPER_ARM = 3; // 0x3
    field public static final int MEASUREMENT_LOCATION_LEFT_WRIST = 1; // 0x1
    field public static final int MEASUREMENT_LOCATION_RIGHT_UPPER_ARM = 4; // 0x4
    field public static final int MEASUREMENT_LOCATION_RIGHT_WRIST = 2; // 0x2
    field public static final int MEASUREMENT_LOCATION_UNKNOWN = 0; // 0x0
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Pressure> SYSTOLIC_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Pressure> SYSTOLIC_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Pressure> SYSTOLIC_MIN;
  }

  public static final class BloodPressureRecord.Companion {
    property public static int BODY_POSITION_LYING_DOWN;
    property public static int BODY_POSITION_RECLINING;
    property public static int BODY_POSITION_SITTING_DOWN;
    property public static int BODY_POSITION_STANDING_UP;
    property public static int BODY_POSITION_UNKNOWN;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Pressure> DIASTOLIC_AVG;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Pressure> DIASTOLIC_MAX;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Pressure> DIASTOLIC_MIN;
    property public static int MEASUREMENT_LOCATION_LEFT_UPPER_ARM;
    property public static int MEASUREMENT_LOCATION_LEFT_WRIST;
    property public static int MEASUREMENT_LOCATION_RIGHT_UPPER_ARM;
    property public static int MEASUREMENT_LOCATION_RIGHT_WRIST;
    property public static int MEASUREMENT_LOCATION_UNKNOWN;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Pressure> SYSTOLIC_AVG;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Pressure> SYSTOLIC_MAX;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Pressure> SYSTOLIC_MIN;
  }

  public final class BodyFatRecord implements androidx.health.connect.client.records.Record {
    ctor public BodyFatRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.units.Percentage percentage, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public androidx.health.connect.client.units.Percentage getPercentage();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public androidx.health.connect.client.units.Percentage percentage;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
  }

  public final class BodyTemperatureMeasurementLocation {
    property public static int MEASUREMENT_LOCATION_ARMPIT;
    property public static int MEASUREMENT_LOCATION_EAR;
    property public static int MEASUREMENT_LOCATION_FINGER;
    property public static int MEASUREMENT_LOCATION_FOREHEAD;
    property public static int MEASUREMENT_LOCATION_MOUTH;
    property public static int MEASUREMENT_LOCATION_RECTUM;
    property public static int MEASUREMENT_LOCATION_TEMPORAL_ARTERY;
    property public static int MEASUREMENT_LOCATION_TOE;
    property public static int MEASUREMENT_LOCATION_UNKNOWN;
    property public static int MEASUREMENT_LOCATION_VAGINA;
    property public static int MEASUREMENT_LOCATION_WRIST;
    field public static final androidx.health.connect.client.records.BodyTemperatureMeasurementLocation INSTANCE;
    field public static final int MEASUREMENT_LOCATION_ARMPIT = 1; // 0x1
    field public static final int MEASUREMENT_LOCATION_EAR = 8; // 0x8
    field public static final int MEASUREMENT_LOCATION_FINGER = 2; // 0x2
    field public static final int MEASUREMENT_LOCATION_FOREHEAD = 3; // 0x3
    field public static final int MEASUREMENT_LOCATION_MOUTH = 4; // 0x4
    field public static final int MEASUREMENT_LOCATION_RECTUM = 5; // 0x5
    field public static final int MEASUREMENT_LOCATION_TEMPORAL_ARTERY = 6; // 0x6
    field public static final int MEASUREMENT_LOCATION_TOE = 7; // 0x7
    field public static final int MEASUREMENT_LOCATION_UNKNOWN = 0; // 0x0
    field public static final int MEASUREMENT_LOCATION_VAGINA = 10; // 0xa
    field public static final int MEASUREMENT_LOCATION_WRIST = 9; // 0x9
  }

  public final class BodyTemperatureRecord implements androidx.health.connect.client.records.Record {
    ctor public BodyTemperatureRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, androidx.health.connect.client.units.Temperature temperature, optional int measurementLocation);
    method public int getMeasurementLocation();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public androidx.health.connect.client.units.Temperature getTemperature();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public int measurementLocation;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public androidx.health.connect.client.units.Temperature temperature;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
  }

  public final class BodyWaterMassRecord implements androidx.health.connect.client.records.Record {
    ctor public BodyWaterMassRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.units.Mass mass, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public androidx.health.connect.client.units.Mass getMass();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.units.Mass mass;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
  }

  public final class BoneMassRecord implements androidx.health.connect.client.records.Record {
    ctor public BoneMassRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.units.Mass mass, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public androidx.health.connect.client.units.Mass getMass();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.units.Mass mass;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
  }

  public final class CervicalMucusRecord implements androidx.health.connect.client.records.Record {
    ctor public CervicalMucusRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, optional int appearance, optional int sensation);
    method public int getAppearance();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public int getSensation();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public int appearance;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public int sensation;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final int APPEARANCE_CREAMY = 3; // 0x3
    field public static final int APPEARANCE_DRY = 1; // 0x1
    field public static final int APPEARANCE_EGG_WHITE = 5; // 0x5
    field public static final int APPEARANCE_STICKY = 2; // 0x2
    field public static final int APPEARANCE_UNKNOWN = 0; // 0x0
    field public static final int APPEARANCE_UNUSUAL = 6; // 0x6
    field public static final int APPEARANCE_WATERY = 4; // 0x4
    field public static final androidx.health.connect.client.records.CervicalMucusRecord.Companion Companion;
    field public static final int SENSATION_HEAVY = 3; // 0x3
    field public static final int SENSATION_LIGHT = 1; // 0x1
    field public static final int SENSATION_MEDIUM = 2; // 0x2
    field public static final int SENSATION_UNKNOWN = 0; // 0x0
  }

  public static final class CervicalMucusRecord.Companion {
    property public static int APPEARANCE_CREAMY;
    property public static int APPEARANCE_DRY;
    property public static int APPEARANCE_EGG_WHITE;
    property public static int APPEARANCE_STICKY;
    property public static int APPEARANCE_UNKNOWN;
    property public static int APPEARANCE_UNUSUAL;
    property public static int APPEARANCE_WATERY;
    property public static int SENSATION_HEAVY;
    property public static int SENSATION_LIGHT;
    property public static int SENSATION_MEDIUM;
    property public static int SENSATION_UNKNOWN;
  }

  public final class CyclingPedalingCadenceRecord implements androidx.health.connect.client.records.Record {
    ctor public CyclingPedalingCadenceRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, java.util.List<androidx.health.connect.client.records.CyclingPedalingCadenceRecord.Sample> samples, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.util.List<androidx.health.connect.client.records.CyclingPedalingCadenceRecord.Sample> getSamples();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.util.List<androidx.health.connect.client.records.CyclingPedalingCadenceRecord.Sample> samples;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.CyclingPedalingCadenceRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RPM_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RPM_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RPM_MIN;
  }

  public static final class CyclingPedalingCadenceRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RPM_AVG;
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RPM_MAX;
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RPM_MIN;
  }

  public static final class CyclingPedalingCadenceRecord.Sample {
    ctor public CyclingPedalingCadenceRecord.Sample(java.time.Instant time, @FloatRange(from=0.0, to=10000.0) double revolutionsPerMinute);
    method public double getRevolutionsPerMinute();
    method public java.time.Instant getTime();
    property @FloatRange(from=0.0, to=10000.0) public double revolutionsPerMinute;
    property public java.time.Instant time;
  }

  public final class DistanceRecord implements androidx.health.connect.client.records.Record {
    ctor public DistanceRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.units.Length distance, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public androidx.health.connect.client.units.Length getDistance();
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public androidx.health.connect.client.units.Length distance;
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.DistanceRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Length> DISTANCE_TOTAL;
  }

  public static final class DistanceRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Length> DISTANCE_TOTAL;
  }

  public final class ElevationGainedRecord implements androidx.health.connect.client.records.Record {
    ctor public ElevationGainedRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.units.Length elevation, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public androidx.health.connect.client.units.Length getElevation();
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public androidx.health.connect.client.units.Length elevation;
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.ElevationGainedRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Length> ELEVATION_GAINED_TOTAL;
  }

  public static final class ElevationGainedRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Length> ELEVATION_GAINED_TOTAL;
  }

  public abstract class ExerciseCompletionGoal {
  }

  public static final class ExerciseCompletionGoal.ActiveCaloriesBurnedGoal extends androidx.health.connect.client.records.ExerciseCompletionGoal {
    ctor public ExerciseCompletionGoal.ActiveCaloriesBurnedGoal(androidx.health.connect.client.units.Energy activeCalories);
    method public androidx.health.connect.client.units.Energy getActiveCalories();
    property public androidx.health.connect.client.units.Energy activeCalories;
  }

  public static final class ExerciseCompletionGoal.DistanceAndDurationGoal extends androidx.health.connect.client.records.ExerciseCompletionGoal {
    ctor public ExerciseCompletionGoal.DistanceAndDurationGoal(androidx.health.connect.client.units.Length distance, java.time.Duration duration);
    method public androidx.health.connect.client.units.Length getDistance();
    method public java.time.Duration getDuration();
    property public androidx.health.connect.client.units.Length distance;
    property public java.time.Duration duration;
  }

  public static final class ExerciseCompletionGoal.DistanceGoal extends androidx.health.connect.client.records.ExerciseCompletionGoal {
    ctor public ExerciseCompletionGoal.DistanceGoal(androidx.health.connect.client.units.Length distance);
    method public androidx.health.connect.client.units.Length getDistance();
    property public androidx.health.connect.client.units.Length distance;
  }

  public static final class ExerciseCompletionGoal.DurationGoal extends androidx.health.connect.client.records.ExerciseCompletionGoal {
    ctor public ExerciseCompletionGoal.DurationGoal(java.time.Duration duration);
    method public java.time.Duration getDuration();
    property public java.time.Duration duration;
  }

  public static final class ExerciseCompletionGoal.ManualCompletion extends androidx.health.connect.client.records.ExerciseCompletionGoal {
    field public static final androidx.health.connect.client.records.ExerciseCompletionGoal.ManualCompletion INSTANCE;
  }

  public static final class ExerciseCompletionGoal.RepetitionsGoal extends androidx.health.connect.client.records.ExerciseCompletionGoal {
    ctor public ExerciseCompletionGoal.RepetitionsGoal(int repetitions);
    method public int getRepetitions();
    property public int repetitions;
  }

  public static final class ExerciseCompletionGoal.StepsGoal extends androidx.health.connect.client.records.ExerciseCompletionGoal {
    ctor public ExerciseCompletionGoal.StepsGoal(int steps);
    method public int getSteps();
    property public int steps;
  }

  public static final class ExerciseCompletionGoal.TotalCaloriesBurnedGoal extends androidx.health.connect.client.records.ExerciseCompletionGoal {
    ctor public ExerciseCompletionGoal.TotalCaloriesBurnedGoal(androidx.health.connect.client.units.Energy totalCalories);
    method public androidx.health.connect.client.units.Energy getTotalCalories();
    property public androidx.health.connect.client.units.Energy totalCalories;
  }

  public static final class ExerciseCompletionGoal.UnknownGoal extends androidx.health.connect.client.records.ExerciseCompletionGoal {
    field public static final androidx.health.connect.client.records.ExerciseCompletionGoal.UnknownGoal INSTANCE;
  }

  public final class ExerciseLap {
    ctor public ExerciseLap(java.time.Instant startTime, java.time.Instant endTime, optional androidx.health.connect.client.units.Length? length);
    method public java.time.Instant getEndTime();
    method public androidx.health.connect.client.units.Length? getLength();
    method public java.time.Instant getStartTime();
    property public java.time.Instant endTime;
    property public androidx.health.connect.client.units.Length? length;
    property public java.time.Instant startTime;
  }

  public abstract class ExercisePerformanceTarget {
  }

  public static final class ExercisePerformanceTarget.AmrapTarget extends androidx.health.connect.client.records.ExercisePerformanceTarget {
    field public static final androidx.health.connect.client.records.ExercisePerformanceTarget.AmrapTarget INSTANCE;
  }

  public static final class ExercisePerformanceTarget.CadenceTarget extends androidx.health.connect.client.records.ExercisePerformanceTarget {
    ctor public ExercisePerformanceTarget.CadenceTarget(double minCadence, double maxCadence);
    method public double getMaxCadence();
    method public double getMinCadence();
    property public double maxCadence;
    property public double minCadence;
  }

  public static final class ExercisePerformanceTarget.HeartRateTarget extends androidx.health.connect.client.records.ExercisePerformanceTarget {
    ctor public ExercisePerformanceTarget.HeartRateTarget(double minHeartRate, double maxHeartRate);
    method public double getMaxHeartRate();
    method public double getMinHeartRate();
    property public double maxHeartRate;
    property public double minHeartRate;
  }

  public static final class ExercisePerformanceTarget.PowerTarget extends androidx.health.connect.client.records.ExercisePerformanceTarget {
    ctor public ExercisePerformanceTarget.PowerTarget(androidx.health.connect.client.units.Power minPower, androidx.health.connect.client.units.Power maxPower);
    method public androidx.health.connect.client.units.Power getMaxPower();
    method public androidx.health.connect.client.units.Power getMinPower();
    property public androidx.health.connect.client.units.Power maxPower;
    property public androidx.health.connect.client.units.Power minPower;
  }

  public static final class ExercisePerformanceTarget.RateOfPerceivedExertionTarget extends androidx.health.connect.client.records.ExercisePerformanceTarget {
    ctor public ExercisePerformanceTarget.RateOfPerceivedExertionTarget(int rpe);
    method public int getRpe();
    property public int rpe;
  }

  public static final class ExercisePerformanceTarget.SpeedTarget extends androidx.health.connect.client.records.ExercisePerformanceTarget {
    ctor public ExercisePerformanceTarget.SpeedTarget(androidx.health.connect.client.units.Velocity minSpeed, androidx.health.connect.client.units.Velocity maxSpeed);
    method public androidx.health.connect.client.units.Velocity getMaxSpeed();
    method public androidx.health.connect.client.units.Velocity getMinSpeed();
    property public androidx.health.connect.client.units.Velocity maxSpeed;
    property public androidx.health.connect.client.units.Velocity minSpeed;
  }

  public static final class ExercisePerformanceTarget.UnknownTarget extends androidx.health.connect.client.records.ExercisePerformanceTarget {
    field public static final androidx.health.connect.client.records.ExercisePerformanceTarget.UnknownTarget INSTANCE;
  }

  public static final class ExercisePerformanceTarget.WeightTarget extends androidx.health.connect.client.records.ExercisePerformanceTarget {
    ctor public ExercisePerformanceTarget.WeightTarget(androidx.health.connect.client.units.Mass mass);
    method public androidx.health.connect.client.units.Mass getMass();
    property public androidx.health.connect.client.units.Mass mass;
  }

  public final class ExerciseRoute {
    ctor public ExerciseRoute(java.util.List<androidx.health.connect.client.records.ExerciseRoute.Location> route);
    method public java.util.List<androidx.health.connect.client.records.ExerciseRoute.Location> getRoute();
    property public java.util.List<androidx.health.connect.client.records.ExerciseRoute.Location> route;
  }

  public static final class ExerciseRoute.Location {
    ctor public ExerciseRoute.Location(java.time.Instant time, double latitude, double longitude, optional androidx.health.connect.client.units.Length? horizontalAccuracy, optional androidx.health.connect.client.units.Length? verticalAccuracy, optional androidx.health.connect.client.units.Length? altitude);
    method public androidx.health.connect.client.units.Length? getAltitude();
    method public androidx.health.connect.client.units.Length? getHorizontalAccuracy();
    method public double getLatitude();
    method public double getLongitude();
    method public java.time.Instant getTime();
    method public androidx.health.connect.client.units.Length? getVerticalAccuracy();
    property public androidx.health.connect.client.units.Length? altitude;
    property public androidx.health.connect.client.units.Length? horizontalAccuracy;
    property public double latitude;
    property public double longitude;
    property public java.time.Instant time;
    property public androidx.health.connect.client.units.Length? verticalAccuracy;
    field public static final androidx.health.connect.client.records.ExerciseRoute.Location.Companion Companion;
  }

  public static final class ExerciseRoute.Location.Companion {
  }

  public abstract class ExerciseRouteResult {
  }

  public static final class ExerciseRouteResult.ConsentRequired extends androidx.health.connect.client.records.ExerciseRouteResult {
    ctor public ExerciseRouteResult.ConsentRequired();
  }

  public static final class ExerciseRouteResult.Data extends androidx.health.connect.client.records.ExerciseRouteResult {
    ctor public ExerciseRouteResult.Data(androidx.health.connect.client.records.ExerciseRoute exerciseRoute);
    method public androidx.health.connect.client.records.ExerciseRoute getExerciseRoute();
    property public androidx.health.connect.client.records.ExerciseRoute exerciseRoute;
  }

  public static final class ExerciseRouteResult.NoData extends androidx.health.connect.client.records.ExerciseRouteResult {
    ctor public ExerciseRouteResult.NoData();
  }

  public final class ExerciseSegment {
    ctor public ExerciseSegment(java.time.Instant startTime, java.time.Instant endTime, int segmentType, optional int repetitions);
    method public java.time.Instant getEndTime();
    method public int getRepetitions();
    method public int getSegmentType();
    method public java.time.Instant getStartTime();
    method public static boolean isSegmentTypeCompatibleWithSessionType(int segmentType, int sessionType);
    property public java.time.Instant endTime;
    property public int repetitions;
    property public int segmentType;
    property public java.time.Instant startTime;
    field public static final androidx.health.connect.client.records.ExerciseSegment.Companion Companion;
    field public static final int EXERCISE_SEGMENT_TYPE_ARM_CURL = 1; // 0x1
    field public static final int EXERCISE_SEGMENT_TYPE_BACK_EXTENSION = 2; // 0x2
    field public static final int EXERCISE_SEGMENT_TYPE_BALL_SLAM = 3; // 0x3
    field public static final int EXERCISE_SEGMENT_TYPE_BARBELL_SHOULDER_PRESS = 4; // 0x4
    field public static final int EXERCISE_SEGMENT_TYPE_BENCH_PRESS = 5; // 0x5
    field public static final int EXERCISE_SEGMENT_TYPE_BENCH_SIT_UP = 6; // 0x6
    field public static final int EXERCISE_SEGMENT_TYPE_BIKING = 7; // 0x7
    field public static final int EXERCISE_SEGMENT_TYPE_BIKING_STATIONARY = 8; // 0x8
    field public static final int EXERCISE_SEGMENT_TYPE_BURPEE = 9; // 0x9
    field public static final int EXERCISE_SEGMENT_TYPE_CRUNCH = 10; // 0xa
    field public static final int EXERCISE_SEGMENT_TYPE_DEADLIFT = 11; // 0xb
    field public static final int EXERCISE_SEGMENT_TYPE_DOUBLE_ARM_TRICEPS_EXTENSION = 12; // 0xc
    field public static final int EXERCISE_SEGMENT_TYPE_DUMBBELL_CURL_LEFT_ARM = 13; // 0xd
    field public static final int EXERCISE_SEGMENT_TYPE_DUMBBELL_CURL_RIGHT_ARM = 14; // 0xe
    field public static final int EXERCISE_SEGMENT_TYPE_DUMBBELL_FRONT_RAISE = 15; // 0xf
    field public static final int EXERCISE_SEGMENT_TYPE_DUMBBELL_LATERAL_RAISE = 16; // 0x10
    field public static final int EXERCISE_SEGMENT_TYPE_DUMBBELL_ROW = 17; // 0x11
    field public static final int EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_LEFT_ARM = 18; // 0x12
    field public static final int EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_RIGHT_ARM = 19; // 0x13
    field public static final int EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_TWO_ARM = 20; // 0x14
    field public static final int EXERCISE_SEGMENT_TYPE_ELLIPTICAL = 21; // 0x15
    field public static final int EXERCISE_SEGMENT_TYPE_FORWARD_TWIST = 22; // 0x16
    field public static final int EXERCISE_SEGMENT_TYPE_FRONT_RAISE = 23; // 0x17
    field public static final int EXERCISE_SEGMENT_TYPE_HIGH_INTENSITY_INTERVAL_TRAINING = 24; // 0x18
    field public static final int EXERCISE_SEGMENT_TYPE_HIP_THRUST = 25; // 0x19
    field public static final int EXERCISE_SEGMENT_TYPE_HULA_HOOP = 26; // 0x1a
    field public static final int EXERCISE_SEGMENT_TYPE_JUMPING_JACK = 27; // 0x1b
    field public static final int EXERCISE_SEGMENT_TYPE_JUMP_ROPE = 28; // 0x1c
    field public static final int EXERCISE_SEGMENT_TYPE_KETTLEBELL_SWING = 29; // 0x1d
    field public static final int EXERCISE_SEGMENT_TYPE_LATERAL_RAISE = 30; // 0x1e
    field public static final int EXERCISE_SEGMENT_TYPE_LAT_PULL_DOWN = 31; // 0x1f
    field public static final int EXERCISE_SEGMENT_TYPE_LEG_CURL = 32; // 0x20
    field public static final int EXERCISE_SEGMENT_TYPE_LEG_EXTENSION = 33; // 0x21
    field public static final int EXERCISE_SEGMENT_TYPE_LEG_PRESS = 34; // 0x22
    field public static final int EXERCISE_SEGMENT_TYPE_LEG_RAISE = 35; // 0x23
    field public static final int EXERCISE_SEGMENT_TYPE_LUNGE = 36; // 0x24
    field public static final int EXERCISE_SEGMENT_TYPE_MOUNTAIN_CLIMBER = 37; // 0x25
    field public static final int EXERCISE_SEGMENT_TYPE_OTHER_WORKOUT = 38; // 0x26
    field public static final int EXERCISE_SEGMENT_TYPE_PAUSE = 39; // 0x27
    field public static final int EXERCISE_SEGMENT_TYPE_PILATES = 40; // 0x28
    field public static final int EXERCISE_SEGMENT_TYPE_PLANK = 41; // 0x29
    field public static final int EXERCISE_SEGMENT_TYPE_PULL_UP = 42; // 0x2a
    field public static final int EXERCISE_SEGMENT_TYPE_PUNCH = 43; // 0x2b
    field public static final int EXERCISE_SEGMENT_TYPE_REST = 44; // 0x2c
    field public static final int EXERCISE_SEGMENT_TYPE_ROWING_MACHINE = 45; // 0x2d
    field public static final int EXERCISE_SEGMENT_TYPE_RUNNING = 46; // 0x2e
    field public static final int EXERCISE_SEGMENT_TYPE_RUNNING_TREADMILL = 47; // 0x2f
    field public static final int EXERCISE_SEGMENT_TYPE_SHOULDER_PRESS = 48; // 0x30
    field public static final int EXERCISE_SEGMENT_TYPE_SINGLE_ARM_TRICEPS_EXTENSION = 49; // 0x31
    field public static final int EXERCISE_SEGMENT_TYPE_SIT_UP = 50; // 0x32
    field public static final int EXERCISE_SEGMENT_TYPE_SQUAT = 51; // 0x33
    field public static final int EXERCISE_SEGMENT_TYPE_STAIR_CLIMBING = 52; // 0x34
    field public static final int EXERCISE_SEGMENT_TYPE_STAIR_CLIMBING_MACHINE = 53; // 0x35
    field public static final int EXERCISE_SEGMENT_TYPE_STRETCHING = 54; // 0x36
    field public static final int EXERCISE_SEGMENT_TYPE_SWIMMING_BACKSTROKE = 55; // 0x37
    field public static final int EXERCISE_SEGMENT_TYPE_SWIMMING_BREASTSTROKE = 56; // 0x38
    field public static final int EXERCISE_SEGMENT_TYPE_SWIMMING_BUTTERFLY = 57; // 0x39
    field public static final int EXERCISE_SEGMENT_TYPE_SWIMMING_FREESTYLE = 58; // 0x3a
    field public static final int EXERCISE_SEGMENT_TYPE_SWIMMING_MIXED = 59; // 0x3b
    field public static final int EXERCISE_SEGMENT_TYPE_SWIMMING_OPEN_WATER = 60; // 0x3c
    field public static final int EXERCISE_SEGMENT_TYPE_SWIMMING_OTHER = 61; // 0x3d
    field public static final int EXERCISE_SEGMENT_TYPE_SWIMMING_POOL = 62; // 0x3e
    field public static final int EXERCISE_SEGMENT_TYPE_UNKNOWN = 0; // 0x0
    field public static final int EXERCISE_SEGMENT_TYPE_UPPER_TWIST = 63; // 0x3f
    field public static final int EXERCISE_SEGMENT_TYPE_WALKING = 64; // 0x40
    field public static final int EXERCISE_SEGMENT_TYPE_WEIGHTLIFTING = 65; // 0x41
    field public static final int EXERCISE_SEGMENT_TYPE_WHEELCHAIR = 66; // 0x42
    field public static final int EXERCISE_SEGMENT_TYPE_YOGA = 67; // 0x43
  }

  public static final class ExerciseSegment.Companion {
    method public boolean isSegmentTypeCompatibleWithSessionType(int segmentType, int sessionType);
    property public static int EXERCISE_SEGMENT_TYPE_ARM_CURL;
    property public static int EXERCISE_SEGMENT_TYPE_BACK_EXTENSION;
    property public static int EXERCISE_SEGMENT_TYPE_BALL_SLAM;
    property public static int EXERCISE_SEGMENT_TYPE_BARBELL_SHOULDER_PRESS;
    property public static int EXERCISE_SEGMENT_TYPE_BENCH_PRESS;
    property public static int EXERCISE_SEGMENT_TYPE_BENCH_SIT_UP;
    property public static int EXERCISE_SEGMENT_TYPE_BIKING;
    property public static int EXERCISE_SEGMENT_TYPE_BIKING_STATIONARY;
    property public static int EXERCISE_SEGMENT_TYPE_BURPEE;
    property public static int EXERCISE_SEGMENT_TYPE_CRUNCH;
    property public static int EXERCISE_SEGMENT_TYPE_DEADLIFT;
    property public static int EXERCISE_SEGMENT_TYPE_DOUBLE_ARM_TRICEPS_EXTENSION;
    property public static int EXERCISE_SEGMENT_TYPE_DUMBBELL_CURL_LEFT_ARM;
    property public static int EXERCISE_SEGMENT_TYPE_DUMBBELL_CURL_RIGHT_ARM;
    property public static int EXERCISE_SEGMENT_TYPE_DUMBBELL_FRONT_RAISE;
    property public static int EXERCISE_SEGMENT_TYPE_DUMBBELL_LATERAL_RAISE;
    property public static int EXERCISE_SEGMENT_TYPE_DUMBBELL_ROW;
    property public static int EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_LEFT_ARM;
    property public static int EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_RIGHT_ARM;
    property public static int EXERCISE_SEGMENT_TYPE_DUMBBELL_TRICEPS_EXTENSION_TWO_ARM;
    property public static int EXERCISE_SEGMENT_TYPE_ELLIPTICAL;
    property public static int EXERCISE_SEGMENT_TYPE_FORWARD_TWIST;
    property public static int EXERCISE_SEGMENT_TYPE_FRONT_RAISE;
    property public static int EXERCISE_SEGMENT_TYPE_HIGH_INTENSITY_INTERVAL_TRAINING;
    property public static int EXERCISE_SEGMENT_TYPE_HIP_THRUST;
    property public static int EXERCISE_SEGMENT_TYPE_HULA_HOOP;
    property public static int EXERCISE_SEGMENT_TYPE_JUMPING_JACK;
    property public static int EXERCISE_SEGMENT_TYPE_JUMP_ROPE;
    property public static int EXERCISE_SEGMENT_TYPE_KETTLEBELL_SWING;
    property public static int EXERCISE_SEGMENT_TYPE_LATERAL_RAISE;
    property public static int EXERCISE_SEGMENT_TYPE_LAT_PULL_DOWN;
    property public static int EXERCISE_SEGMENT_TYPE_LEG_CURL;
    property public static int EXERCISE_SEGMENT_TYPE_LEG_EXTENSION;
    property public static int EXERCISE_SEGMENT_TYPE_LEG_PRESS;
    property public static int EXERCISE_SEGMENT_TYPE_LEG_RAISE;
    property public static int EXERCISE_SEGMENT_TYPE_LUNGE;
    property public static int EXERCISE_SEGMENT_TYPE_MOUNTAIN_CLIMBER;
    property public static int EXERCISE_SEGMENT_TYPE_OTHER_WORKOUT;
    property public static int EXERCISE_SEGMENT_TYPE_PAUSE;
    property public static int EXERCISE_SEGMENT_TYPE_PILATES;
    property public static int EXERCISE_SEGMENT_TYPE_PLANK;
    property public static int EXERCISE_SEGMENT_TYPE_PULL_UP;
    property public static int EXERCISE_SEGMENT_TYPE_PUNCH;
    property public static int EXERCISE_SEGMENT_TYPE_REST;
    property public static int EXERCISE_SEGMENT_TYPE_ROWING_MACHINE;
    property public static int EXERCISE_SEGMENT_TYPE_RUNNING;
    property public static int EXERCISE_SEGMENT_TYPE_RUNNING_TREADMILL;
    property public static int EXERCISE_SEGMENT_TYPE_SHOULDER_PRESS;
    property public static int EXERCISE_SEGMENT_TYPE_SINGLE_ARM_TRICEPS_EXTENSION;
    property public static int EXERCISE_SEGMENT_TYPE_SIT_UP;
    property public static int EXERCISE_SEGMENT_TYPE_SQUAT;
    property public static int EXERCISE_SEGMENT_TYPE_STAIR_CLIMBING;
    property public static int EXERCISE_SEGMENT_TYPE_STAIR_CLIMBING_MACHINE;
    property public static int EXERCISE_SEGMENT_TYPE_STRETCHING;
    property public static int EXERCISE_SEGMENT_TYPE_SWIMMING_BACKSTROKE;
    property public static int EXERCISE_SEGMENT_TYPE_SWIMMING_BREASTSTROKE;
    property public static int EXERCISE_SEGMENT_TYPE_SWIMMING_BUTTERFLY;
    property public static int EXERCISE_SEGMENT_TYPE_SWIMMING_FREESTYLE;
    property public static int EXERCISE_SEGMENT_TYPE_SWIMMING_MIXED;
    property public static int EXERCISE_SEGMENT_TYPE_SWIMMING_OPEN_WATER;
    property public static int EXERCISE_SEGMENT_TYPE_SWIMMING_OTHER;
    property public static int EXERCISE_SEGMENT_TYPE_SWIMMING_POOL;
    property public static int EXERCISE_SEGMENT_TYPE_UNKNOWN;
    property public static int EXERCISE_SEGMENT_TYPE_UPPER_TWIST;
    property public static int EXERCISE_SEGMENT_TYPE_WALKING;
    property public static int EXERCISE_SEGMENT_TYPE_WEIGHTLIFTING;
    property public static int EXERCISE_SEGMENT_TYPE_WHEELCHAIR;
    property public static int EXERCISE_SEGMENT_TYPE_YOGA;
  }

  public final class ExerciseSessionRecord implements androidx.health.connect.client.records.Record {
    ctor public ExerciseSessionRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, int exerciseType);
    ctor public ExerciseSessionRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, int exerciseType, optional String? title);
    ctor public ExerciseSessionRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, int exerciseType, optional String? title, optional String? notes);
    ctor public ExerciseSessionRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, int exerciseType, optional String? title, optional String? notes, optional java.util.List<androidx.health.connect.client.records.ExerciseSegment> segments);
    ctor public ExerciseSessionRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, int exerciseType, optional String? title, optional String? notes, optional java.util.List<androidx.health.connect.client.records.ExerciseSegment> segments, optional java.util.List<androidx.health.connect.client.records.ExerciseLap> laps);
    ctor public ExerciseSessionRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, int exerciseType, optional String? title, optional String? notes, optional java.util.List<androidx.health.connect.client.records.ExerciseSegment> segments, optional java.util.List<androidx.health.connect.client.records.ExerciseLap> laps, optional androidx.health.connect.client.records.ExerciseRoute? exerciseRoute);
    ctor public ExerciseSessionRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, int exerciseType, optional String? title, optional String? notes, optional java.util.List<androidx.health.connect.client.records.ExerciseSegment> segments, optional java.util.List<androidx.health.connect.client.records.ExerciseLap> laps, optional androidx.health.connect.client.records.ExerciseRoute? exerciseRoute, optional String? plannedExerciseSessionId);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.ExerciseRouteResult getExerciseRouteResult();
    method public int getExerciseType();
    method public java.util.List<androidx.health.connect.client.records.ExerciseLap> getLaps();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public String? getNotes();
    method public String? getPlannedExerciseSessionId();
    method public java.util.List<androidx.health.connect.client.records.ExerciseSegment> getSegments();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    method public String? getTitle();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.ExerciseRouteResult exerciseRouteResult;
    property public int exerciseType;
    property public java.util.List<androidx.health.connect.client.records.ExerciseLap> laps;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public String? notes;
    property public String? plannedExerciseSessionId;
    property public java.util.List<androidx.health.connect.client.records.ExerciseSegment> segments;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    property public String? title;
    field public static final androidx.health.connect.client.records.ExerciseSessionRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.time.Duration> EXERCISE_DURATION_TOTAL;
    field public static final int EXERCISE_TYPE_BADMINTON = 2; // 0x2
    field public static final int EXERCISE_TYPE_BASEBALL = 4; // 0x4
    field public static final int EXERCISE_TYPE_BASKETBALL = 5; // 0x5
    field public static final int EXERCISE_TYPE_BIKING = 8; // 0x8
    field public static final int EXERCISE_TYPE_BIKING_STATIONARY = 9; // 0x9
    field public static final int EXERCISE_TYPE_BOOT_CAMP = 10; // 0xa
    field public static final int EXERCISE_TYPE_BOXING = 11; // 0xb
    field public static final int EXERCISE_TYPE_CALISTHENICS = 13; // 0xd
    field public static final int EXERCISE_TYPE_CRICKET = 14; // 0xe
    field public static final int EXERCISE_TYPE_DANCING = 16; // 0x10
    field public static final int EXERCISE_TYPE_ELLIPTICAL = 25; // 0x19
    field public static final int EXERCISE_TYPE_EXERCISE_CLASS = 26; // 0x1a
    field public static final int EXERCISE_TYPE_FENCING = 27; // 0x1b
    field public static final int EXERCISE_TYPE_FOOTBALL_AMERICAN = 28; // 0x1c
    field public static final int EXERCISE_TYPE_FOOTBALL_AUSTRALIAN = 29; // 0x1d
    field public static final int EXERCISE_TYPE_FRISBEE_DISC = 31; // 0x1f
    field public static final int EXERCISE_TYPE_GOLF = 32; // 0x20
    field public static final int EXERCISE_TYPE_GUIDED_BREATHING = 33; // 0x21
    field public static final int EXERCISE_TYPE_GYMNASTICS = 34; // 0x22
    field public static final int EXERCISE_TYPE_HANDBALL = 35; // 0x23
    field public static final int EXERCISE_TYPE_HIGH_INTENSITY_INTERVAL_TRAINING = 36; // 0x24
    field public static final int EXERCISE_TYPE_HIKING = 37; // 0x25
    field public static final int EXERCISE_TYPE_ICE_HOCKEY = 38; // 0x26
    field public static final int EXERCISE_TYPE_ICE_SKATING = 39; // 0x27
    field public static final int EXERCISE_TYPE_MARTIAL_ARTS = 44; // 0x2c
    field public static final int EXERCISE_TYPE_OTHER_WORKOUT = 0; // 0x0
    field public static final int EXERCISE_TYPE_PADDLING = 46; // 0x2e
    field public static final int EXERCISE_TYPE_PARAGLIDING = 47; // 0x2f
    field public static final int EXERCISE_TYPE_PILATES = 48; // 0x30
    field public static final int EXERCISE_TYPE_RACQUETBALL = 50; // 0x32
    field public static final int EXERCISE_TYPE_ROCK_CLIMBING = 51; // 0x33
    field public static final int EXERCISE_TYPE_ROLLER_HOCKEY = 52; // 0x34
    field public static final int EXERCISE_TYPE_ROWING = 53; // 0x35
    field public static final int EXERCISE_TYPE_ROWING_MACHINE = 54; // 0x36
    field public static final int EXERCISE_TYPE_RUGBY = 55; // 0x37
    field public static final int EXERCISE_TYPE_RUNNING = 56; // 0x38
    field public static final int EXERCISE_TYPE_RUNNING_TREADMILL = 57; // 0x39
    field public static final int EXERCISE_TYPE_SAILING = 58; // 0x3a
    field public static final int EXERCISE_TYPE_SCUBA_DIVING = 59; // 0x3b
    field public static final int EXERCISE_TYPE_SKATING = 60; // 0x3c
    field public static final int EXERCISE_TYPE_SKIING = 61; // 0x3d
    field public static final int EXERCISE_TYPE_SNOWBOARDING = 62; // 0x3e
    field public static final int EXERCISE_TYPE_SNOWSHOEING = 63; // 0x3f
    field public static final int EXERCISE_TYPE_SOCCER = 64; // 0x40
    field public static final int EXERCISE_TYPE_SOFTBALL = 65; // 0x41
    field public static final int EXERCISE_TYPE_SQUASH = 66; // 0x42
    field public static final int EXERCISE_TYPE_STAIR_CLIMBING = 68; // 0x44
    field public static final int EXERCISE_TYPE_STAIR_CLIMBING_MACHINE = 69; // 0x45
    field public static final int EXERCISE_TYPE_STRENGTH_TRAINING = 70; // 0x46
    field public static final int EXERCISE_TYPE_STRETCHING = 71; // 0x47
    field public static final int EXERCISE_TYPE_SURFING = 72; // 0x48
    field public static final int EXERCISE_TYPE_SWIMMING_OPEN_WATER = 73; // 0x49
    field public static final int EXERCISE_TYPE_SWIMMING_POOL = 74; // 0x4a
    field public static final int EXERCISE_TYPE_TABLE_TENNIS = 75; // 0x4b
    field public static final int EXERCISE_TYPE_TENNIS = 76; // 0x4c
    field public static final int EXERCISE_TYPE_VOLLEYBALL = 78; // 0x4e
    field public static final int EXERCISE_TYPE_WALKING = 79; // 0x4f
    field public static final int EXERCISE_TYPE_WATER_POLO = 80; // 0x50
    field public static final int EXERCISE_TYPE_WEIGHTLIFTING = 81; // 0x51
    field public static final int EXERCISE_TYPE_WHEELCHAIR = 82; // 0x52
    field public static final int EXERCISE_TYPE_YOGA = 83; // 0x53
  }

  public static final class ExerciseSessionRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.time.Duration> EXERCISE_DURATION_TOTAL;
    property public static int EXERCISE_TYPE_BADMINTON;
    property public static int EXERCISE_TYPE_BASEBALL;
    property public static int EXERCISE_TYPE_BASKETBALL;
    property public static int EXERCISE_TYPE_BIKING;
    property public static int EXERCISE_TYPE_BIKING_STATIONARY;
    property public static int EXERCISE_TYPE_BOOT_CAMP;
    property public static int EXERCISE_TYPE_BOXING;
    property public static int EXERCISE_TYPE_CALISTHENICS;
    property public static int EXERCISE_TYPE_CRICKET;
    property public static int EXERCISE_TYPE_DANCING;
    property public static int EXERCISE_TYPE_ELLIPTICAL;
    property public static int EXERCISE_TYPE_EXERCISE_CLASS;
    property public static int EXERCISE_TYPE_FENCING;
    property public static int EXERCISE_TYPE_FOOTBALL_AMERICAN;
    property public static int EXERCISE_TYPE_FOOTBALL_AUSTRALIAN;
    property public static int EXERCISE_TYPE_FRISBEE_DISC;
    property public static int EXERCISE_TYPE_GOLF;
    property public static int EXERCISE_TYPE_GUIDED_BREATHING;
    property public static int EXERCISE_TYPE_GYMNASTICS;
    property public static int EXERCISE_TYPE_HANDBALL;
    property public static int EXERCISE_TYPE_HIGH_INTENSITY_INTERVAL_TRAINING;
    property public static int EXERCISE_TYPE_HIKING;
    property public static int EXERCISE_TYPE_ICE_HOCKEY;
    property public static int EXERCISE_TYPE_ICE_SKATING;
    property public static int EXERCISE_TYPE_MARTIAL_ARTS;
    property public static int EXERCISE_TYPE_OTHER_WORKOUT;
    property public static int EXERCISE_TYPE_PADDLING;
    property public static int EXERCISE_TYPE_PARAGLIDING;
    property public static int EXERCISE_TYPE_PILATES;
    property public static int EXERCISE_TYPE_RACQUETBALL;
    property public static int EXERCISE_TYPE_ROCK_CLIMBING;
    property public static int EXERCISE_TYPE_ROLLER_HOCKEY;
    property public static int EXERCISE_TYPE_ROWING;
    property public static int EXERCISE_TYPE_ROWING_MACHINE;
    property public static int EXERCISE_TYPE_RUGBY;
    property public static int EXERCISE_TYPE_RUNNING;
    property public static int EXERCISE_TYPE_RUNNING_TREADMILL;
    property public static int EXERCISE_TYPE_SAILING;
    property public static int EXERCISE_TYPE_SCUBA_DIVING;
    property public static int EXERCISE_TYPE_SKATING;
    property public static int EXERCISE_TYPE_SKIING;
    property public static int EXERCISE_TYPE_SNOWBOARDING;
    property public static int EXERCISE_TYPE_SNOWSHOEING;
    property public static int EXERCISE_TYPE_SOCCER;
    property public static int EXERCISE_TYPE_SOFTBALL;
    property public static int EXERCISE_TYPE_SQUASH;
    property public static int EXERCISE_TYPE_STAIR_CLIMBING;
    property public static int EXERCISE_TYPE_STAIR_CLIMBING_MACHINE;
    property public static int EXERCISE_TYPE_STRENGTH_TRAINING;
    property public static int EXERCISE_TYPE_STRETCHING;
    property public static int EXERCISE_TYPE_SURFING;
    property public static int EXERCISE_TYPE_SWIMMING_OPEN_WATER;
    property public static int EXERCISE_TYPE_SWIMMING_POOL;
    property public static int EXERCISE_TYPE_TABLE_TENNIS;
    property public static int EXERCISE_TYPE_TENNIS;
    property public static int EXERCISE_TYPE_VOLLEYBALL;
    property public static int EXERCISE_TYPE_WALKING;
    property public static int EXERCISE_TYPE_WATER_POLO;
    property public static int EXERCISE_TYPE_WEIGHTLIFTING;
    property public static int EXERCISE_TYPE_WHEELCHAIR;
    property public static int EXERCISE_TYPE_YOGA;
  }

  @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public final class FhirResource {
    ctor public FhirResource(int type, String id, String data);
    method public String getData();
    method public String getId();
    method public int getType();
    property public String data;
    property public String id;
    property public int type;
    field public static final androidx.health.connect.client.records.FhirResource.Companion Companion;
    field public static final int FHIR_RESOURCE_TYPE_ALLERGY_INTOLERANCE = 2; // 0x2
    field public static final int FHIR_RESOURCE_TYPE_CONDITION = 4; // 0x4
    field public static final int FHIR_RESOURCE_TYPE_ENCOUNTER = 12; // 0xc
    field public static final int FHIR_RESOURCE_TYPE_IMMUNIZATION = 1; // 0x1
    field public static final int FHIR_RESOURCE_TYPE_LOCATION = 13; // 0xd
    field public static final int FHIR_RESOURCE_TYPE_MEDICATION = 6; // 0x6
    field public static final int FHIR_RESOURCE_TYPE_MEDICATION_REQUEST = 7; // 0x7
    field public static final int FHIR_RESOURCE_TYPE_MEDICATION_STATEMENT = 8; // 0x8
    field public static final int FHIR_RESOURCE_TYPE_OBSERVATION = 3; // 0x3
    field public static final int FHIR_RESOURCE_TYPE_ORGANIZATION = 14; // 0xe
    field public static final int FHIR_RESOURCE_TYPE_PATIENT = 9; // 0x9
    field public static final int FHIR_RESOURCE_TYPE_PRACTITIONER = 10; // 0xa
    field public static final int FHIR_RESOURCE_TYPE_PRACTITIONER_ROLE = 11; // 0xb
    field public static final int FHIR_RESOURCE_TYPE_PROCEDURE = 5; // 0x5
  }

  public static final class FhirResource.Companion {
    property public static int FHIR_RESOURCE_TYPE_ALLERGY_INTOLERANCE;
    property public static int FHIR_RESOURCE_TYPE_CONDITION;
    property public static int FHIR_RESOURCE_TYPE_ENCOUNTER;
    property public static int FHIR_RESOURCE_TYPE_IMMUNIZATION;
    property public static int FHIR_RESOURCE_TYPE_LOCATION;
    property public static int FHIR_RESOURCE_TYPE_MEDICATION;
    property public static int FHIR_RESOURCE_TYPE_MEDICATION_REQUEST;
    property public static int FHIR_RESOURCE_TYPE_MEDICATION_STATEMENT;
    property public static int FHIR_RESOURCE_TYPE_OBSERVATION;
    property public static int FHIR_RESOURCE_TYPE_ORGANIZATION;
    property public static int FHIR_RESOURCE_TYPE_PATIENT;
    property public static int FHIR_RESOURCE_TYPE_PRACTITIONER;
    property public static int FHIR_RESOURCE_TYPE_PRACTITIONER_ROLE;
    property public static int FHIR_RESOURCE_TYPE_PROCEDURE;
  }

  @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public final class FhirVersion implements java.lang.Comparable<androidx.health.connect.client.records.FhirVersion> {
    ctor public FhirVersion(int major, int minor, int patch);
    method public int compareTo(androidx.health.connect.client.records.FhirVersion other);
    method public int getMajor();
    method public int getMinor();
    method public int getPatch();
    method public boolean isSupportedFhirVersion();
    method public static androidx.health.connect.client.records.FhirVersion parseFhirVersion(String fhirVersionString);
    property public int major;
    property public int minor;
    property public int patch;
    field public static final androidx.health.connect.client.records.FhirVersion.Companion Companion;
  }

  public static final class FhirVersion.Companion {
    method public androidx.health.connect.client.records.FhirVersion parseFhirVersion(String fhirVersionString);
  }

  public final class FloorsClimbedRecord implements androidx.health.connect.client.records.Record {
    ctor public FloorsClimbedRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, double floors, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public double getFloors();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public double floors;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.FloorsClimbedRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> FLOORS_CLIMBED_TOTAL;
  }

  public static final class FloorsClimbedRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> FLOORS_CLIMBED_TOTAL;
  }

  public final class HeartRateRecord implements androidx.health.connect.client.records.Record {
    ctor public HeartRateRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, java.util.List<androidx.health.connect.client.records.HeartRateRecord.Sample> samples, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.util.List<androidx.health.connect.client.records.HeartRateRecord.Sample> getSamples();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.util.List<androidx.health.connect.client.records.HeartRateRecord.Sample> samples;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_MIN;
    field public static final androidx.health.connect.client.records.HeartRateRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> MEASUREMENTS_COUNT;
  }

  public static final class HeartRateRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_AVG;
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_MAX;
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_MIN;
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> MEASUREMENTS_COUNT;
  }

  public static final class HeartRateRecord.Sample {
    ctor public HeartRateRecord.Sample(java.time.Instant time, @IntRange(from=1L, to=300L) long beatsPerMinute);
    method public long getBeatsPerMinute();
    method public java.time.Instant getTime();
    property @IntRange(from=1L, to=300L) public long beatsPerMinute;
    property public java.time.Instant time;
  }

  public final class HeartRateVariabilityRmssdRecord implements androidx.health.connect.client.records.Record {
    ctor public HeartRateVariabilityRmssdRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, double heartRateVariabilityMillis, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public double getHeartRateVariabilityMillis();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public double heartRateVariabilityMillis;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
  }

  public final class HeightRecord implements androidx.health.connect.client.records.Record {
    ctor public HeightRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.units.Length height, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public androidx.health.connect.client.units.Length getHeight();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.units.Length height;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final androidx.health.connect.client.records.HeightRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Length> HEIGHT_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Length> HEIGHT_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Length> HEIGHT_MIN;
  }

  public static final class HeightRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Length> HEIGHT_AVG;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Length> HEIGHT_MAX;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Length> HEIGHT_MIN;
  }

  public final class HydrationRecord implements androidx.health.connect.client.records.Record {
    ctor public HydrationRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.units.Volume volume, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    method public androidx.health.connect.client.units.Volume getVolume();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    property public androidx.health.connect.client.units.Volume volume;
    field public static final androidx.health.connect.client.records.HydrationRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Volume> VOLUME_TOTAL;
  }

  public static final class HydrationRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Volume> VOLUME_TOTAL;
  }

  public final class IntermenstrualBleedingRecord implements androidx.health.connect.client.records.Record {
    ctor public IntermenstrualBleedingRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
  }

  public final class LeanBodyMassRecord implements androidx.health.connect.client.records.Record {
    ctor public LeanBodyMassRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.units.Mass mass, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public androidx.health.connect.client.units.Mass getMass();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.units.Mass mass;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
  }

  public final class MealType {
    property public static int MEAL_TYPE_BREAKFAST;
    property public static int MEAL_TYPE_DINNER;
    property public static int MEAL_TYPE_LUNCH;
    property public static int MEAL_TYPE_SNACK;
    property public static int MEAL_TYPE_UNKNOWN;
    field public static final androidx.health.connect.client.records.MealType INSTANCE;
    field public static final int MEAL_TYPE_BREAKFAST = 1; // 0x1
    field public static final int MEAL_TYPE_DINNER = 3; // 0x3
    field public static final int MEAL_TYPE_LUNCH = 2; // 0x2
    field public static final int MEAL_TYPE_SNACK = 4; // 0x4
    field public static final int MEAL_TYPE_UNKNOWN = 0; // 0x0
  }

  @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public final class MedicalDataSource {
    ctor public MedicalDataSource(String id, String packageName, android.net.Uri fhirBaseUri, String displayName, androidx.health.connect.client.records.FhirVersion fhirVersion, java.time.Instant? lastDataUpdateTime);
    method public String getDisplayName();
    method public android.net.Uri getFhirBaseUri();
    method public androidx.health.connect.client.records.FhirVersion getFhirVersion();
    method public String getId();
    method public java.time.Instant? getLastDataUpdateTime();
    method public String getPackageName();
    property public String displayName;
    property public android.net.Uri fhirBaseUri;
    property public androidx.health.connect.client.records.FhirVersion fhirVersion;
    property public String id;
    property public java.time.Instant? lastDataUpdateTime;
    property public String packageName;
  }

  @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public final class MedicalResource {
    ctor public MedicalResource(int type, androidx.health.connect.client.records.MedicalResourceId id, String dataSourceId, androidx.health.connect.client.records.FhirVersion fhirVersion, androidx.health.connect.client.records.FhirResource fhirResource);
    method public String getDataSourceId();
    method public androidx.health.connect.client.records.FhirResource getFhirResource();
    method public androidx.health.connect.client.records.FhirVersion getFhirVersion();
    method public androidx.health.connect.client.records.MedicalResourceId getId();
    method public int getType();
    property public String dataSourceId;
    property public androidx.health.connect.client.records.FhirResource fhirResource;
    property public androidx.health.connect.client.records.FhirVersion fhirVersion;
    property public androidx.health.connect.client.records.MedicalResourceId id;
    property public int type;
    field public static final androidx.health.connect.client.records.MedicalResource.Companion Companion;
    field public static final int MEDICAL_RESOURCE_TYPE_ALLERGIES_INTOLERANCES = 2; // 0x2
    field public static final int MEDICAL_RESOURCE_TYPE_CONDITIONS = 7; // 0x7
    field public static final int MEDICAL_RESOURCE_TYPE_LABORATORY_RESULTS = 6; // 0x6
    field public static final int MEDICAL_RESOURCE_TYPE_MEDICATIONS = 9; // 0x9
    field public static final int MEDICAL_RESOURCE_TYPE_PERSONAL_DETAILS = 10; // 0xa
    field public static final int MEDICAL_RESOURCE_TYPE_PRACTITIONER_DETAILS = 11; // 0xb
    field public static final int MEDICAL_RESOURCE_TYPE_PREGNANCY = 3; // 0x3
    field public static final int MEDICAL_RESOURCE_TYPE_PROCEDURES = 8; // 0x8
    field public static final int MEDICAL_RESOURCE_TYPE_SOCIAL_HISTORY = 4; // 0x4
    field public static final int MEDICAL_RESOURCE_TYPE_VACCINES = 1; // 0x1
    field public static final int MEDICAL_RESOURCE_TYPE_VISITS = 12; // 0xc
    field public static final int MEDICAL_RESOURCE_TYPE_VITAL_SIGNS = 5; // 0x5
  }

  public static final class MedicalResource.Companion {
    property public static int MEDICAL_RESOURCE_TYPE_ALLERGIES_INTOLERANCES;
    property public static int MEDICAL_RESOURCE_TYPE_CONDITIONS;
    property public static int MEDICAL_RESOURCE_TYPE_LABORATORY_RESULTS;
    property public static int MEDICAL_RESOURCE_TYPE_MEDICATIONS;
    property public static int MEDICAL_RESOURCE_TYPE_PERSONAL_DETAILS;
    property public static int MEDICAL_RESOURCE_TYPE_PRACTITIONER_DETAILS;
    property public static int MEDICAL_RESOURCE_TYPE_PREGNANCY;
    property public static int MEDICAL_RESOURCE_TYPE_PROCEDURES;
    property public static int MEDICAL_RESOURCE_TYPE_SOCIAL_HISTORY;
    property public static int MEDICAL_RESOURCE_TYPE_VACCINES;
    property public static int MEDICAL_RESOURCE_TYPE_VISITS;
    property public static int MEDICAL_RESOURCE_TYPE_VITAL_SIGNS;
  }

  @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public final class MedicalResourceId {
    ctor public MedicalResourceId(String dataSourceId, int fhirResourceType, String fhirResourceId);
    method public static androidx.health.connect.client.records.MedicalResourceId fromFhirReference(String dataSourceId, String fhirReference);
    method public String getDataSourceId();
    method public String getFhirResourceId();
    method public int getFhirResourceType();
    property public String dataSourceId;
    property public String fhirResourceId;
    property public int fhirResourceType;
    field public static final androidx.health.connect.client.records.MedicalResourceId.Companion Companion;
  }

  public static final class MedicalResourceId.Companion {
    method public androidx.health.connect.client.records.MedicalResourceId fromFhirReference(String dataSourceId, String fhirReference);
  }

  public final class MenstruationFlowRecord implements androidx.health.connect.client.records.Record {
    ctor public MenstruationFlowRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, optional int flow);
    method public int getFlow();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public int flow;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final androidx.health.connect.client.records.MenstruationFlowRecord.Companion Companion;
    field public static final int FLOW_HEAVY = 3; // 0x3
    field public static final int FLOW_LIGHT = 1; // 0x1
    field public static final int FLOW_MEDIUM = 2; // 0x2
    field public static final int FLOW_UNKNOWN = 0; // 0x0
  }

  public static final class MenstruationFlowRecord.Companion {
    property public static int FLOW_HEAVY;
    property public static int FLOW_LIGHT;
    property public static int FLOW_MEDIUM;
    property public static int FLOW_UNKNOWN;
  }

  public final class MenstruationPeriodRecord implements androidx.health.connect.client.records.Record {
    ctor public MenstruationPeriodRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
  }

  public final class MindfulnessSessionRecord implements androidx.health.connect.client.records.Record {
    ctor public MindfulnessSessionRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, int mindfulnessSessionType, optional String? title, optional String? notes);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public int getMindfulnessSessionType();
    method public String? getNotes();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    method public String? getTitle();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public int mindfulnessSessionType;
    property public String? notes;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    property public String? title;
    field public static final androidx.health.connect.client.records.MindfulnessSessionRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.time.Duration> MINDFULNESS_DURATION_TOTAL;
    field public static final int MINDFULNESS_SESSION_TYPE_BREATHING = 2; // 0x2
    field public static final int MINDFULNESS_SESSION_TYPE_MEDITATION = 1; // 0x1
    field public static final int MINDFULNESS_SESSION_TYPE_MOVEMENT = 4; // 0x4
    field public static final int MINDFULNESS_SESSION_TYPE_MUSIC = 3; // 0x3
    field public static final int MINDFULNESS_SESSION_TYPE_UNGUIDED = 5; // 0x5
    field public static final int MINDFULNESS_SESSION_TYPE_UNKNOWN = 0; // 0x0
  }

  public static final class MindfulnessSessionRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.time.Duration> MINDFULNESS_DURATION_TOTAL;
    property public static int MINDFULNESS_SESSION_TYPE_BREATHING;
    property public static int MINDFULNESS_SESSION_TYPE_MEDITATION;
    property public static int MINDFULNESS_SESSION_TYPE_MOVEMENT;
    property public static int MINDFULNESS_SESSION_TYPE_MUSIC;
    property public static int MINDFULNESS_SESSION_TYPE_UNGUIDED;
    property public static int MINDFULNESS_SESSION_TYPE_UNKNOWN;
  }

  public final class NutritionRecord implements androidx.health.connect.client.records.Record {
    ctor public NutritionRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, optional androidx.health.connect.client.units.Mass? biotin, optional androidx.health.connect.client.units.Mass? caffeine, optional androidx.health.connect.client.units.Mass? calcium, optional androidx.health.connect.client.units.Energy? energy, optional androidx.health.connect.client.units.Energy? energyFromFat, optional androidx.health.connect.client.units.Mass? chloride, optional androidx.health.connect.client.units.Mass? cholesterol, optional androidx.health.connect.client.units.Mass? chromium, optional androidx.health.connect.client.units.Mass? copper, optional androidx.health.connect.client.units.Mass? dietaryFiber, optional androidx.health.connect.client.units.Mass? folate, optional androidx.health.connect.client.units.Mass? folicAcid, optional androidx.health.connect.client.units.Mass? iodine, optional androidx.health.connect.client.units.Mass? iron, optional androidx.health.connect.client.units.Mass? magnesium, optional androidx.health.connect.client.units.Mass? manganese, optional androidx.health.connect.client.units.Mass? molybdenum, optional androidx.health.connect.client.units.Mass? monounsaturatedFat, optional androidx.health.connect.client.units.Mass? niacin, optional androidx.health.connect.client.units.Mass? pantothenicAcid, optional androidx.health.connect.client.units.Mass? phosphorus, optional androidx.health.connect.client.units.Mass? polyunsaturatedFat, optional androidx.health.connect.client.units.Mass? potassium, optional androidx.health.connect.client.units.Mass? protein, optional androidx.health.connect.client.units.Mass? riboflavin, optional androidx.health.connect.client.units.Mass? saturatedFat, optional androidx.health.connect.client.units.Mass? selenium, optional androidx.health.connect.client.units.Mass? sodium, optional androidx.health.connect.client.units.Mass? sugar, optional androidx.health.connect.client.units.Mass? thiamin, optional androidx.health.connect.client.units.Mass? totalCarbohydrate, optional androidx.health.connect.client.units.Mass? totalFat, optional androidx.health.connect.client.units.Mass? transFat, optional androidx.health.connect.client.units.Mass? unsaturatedFat, optional androidx.health.connect.client.units.Mass? vitaminA, optional androidx.health.connect.client.units.Mass? vitaminB12, optional androidx.health.connect.client.units.Mass? vitaminB6, optional androidx.health.connect.client.units.Mass? vitaminC, optional androidx.health.connect.client.units.Mass? vitaminD, optional androidx.health.connect.client.units.Mass? vitaminE, optional androidx.health.connect.client.units.Mass? vitaminK, optional androidx.health.connect.client.units.Mass? zinc, optional String? name, optional int mealType);
    method public androidx.health.connect.client.units.Mass? getBiotin();
    method public androidx.health.connect.client.units.Mass? getCaffeine();
    method public androidx.health.connect.client.units.Mass? getCalcium();
    method public androidx.health.connect.client.units.Mass? getChloride();
    method public androidx.health.connect.client.units.Mass? getCholesterol();
    method public androidx.health.connect.client.units.Mass? getChromium();
    method public androidx.health.connect.client.units.Mass? getCopper();
    method public androidx.health.connect.client.units.Mass? getDietaryFiber();
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.units.Energy? getEnergy();
    method public androidx.health.connect.client.units.Energy? getEnergyFromFat();
    method public androidx.health.connect.client.units.Mass? getFolate();
    method public androidx.health.connect.client.units.Mass? getFolicAcid();
    method public androidx.health.connect.client.units.Mass? getIodine();
    method public androidx.health.connect.client.units.Mass? getIron();
    method public androidx.health.connect.client.units.Mass? getMagnesium();
    method public androidx.health.connect.client.units.Mass? getManganese();
    method public int getMealType();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public androidx.health.connect.client.units.Mass? getMolybdenum();
    method public androidx.health.connect.client.units.Mass? getMonounsaturatedFat();
    method public String? getName();
    method public androidx.health.connect.client.units.Mass? getNiacin();
    method public androidx.health.connect.client.units.Mass? getPantothenicAcid();
    method public androidx.health.connect.client.units.Mass? getPhosphorus();
    method public androidx.health.connect.client.units.Mass? getPolyunsaturatedFat();
    method public androidx.health.connect.client.units.Mass? getPotassium();
    method public androidx.health.connect.client.units.Mass? getProtein();
    method public androidx.health.connect.client.units.Mass? getRiboflavin();
    method public androidx.health.connect.client.units.Mass? getSaturatedFat();
    method public androidx.health.connect.client.units.Mass? getSelenium();
    method public androidx.health.connect.client.units.Mass? getSodium();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    method public androidx.health.connect.client.units.Mass? getSugar();
    method public androidx.health.connect.client.units.Mass? getThiamin();
    method public androidx.health.connect.client.units.Mass? getTotalCarbohydrate();
    method public androidx.health.connect.client.units.Mass? getTotalFat();
    method public androidx.health.connect.client.units.Mass? getTransFat();
    method public androidx.health.connect.client.units.Mass? getUnsaturatedFat();
    method public androidx.health.connect.client.units.Mass? getVitaminA();
    method public androidx.health.connect.client.units.Mass? getVitaminB12();
    method public androidx.health.connect.client.units.Mass? getVitaminB6();
    method public androidx.health.connect.client.units.Mass? getVitaminC();
    method public androidx.health.connect.client.units.Mass? getVitaminD();
    method public androidx.health.connect.client.units.Mass? getVitaminE();
    method public androidx.health.connect.client.units.Mass? getVitaminK();
    method public androidx.health.connect.client.units.Mass? getZinc();
    property public androidx.health.connect.client.units.Mass? biotin;
    property public androidx.health.connect.client.units.Mass? caffeine;
    property public androidx.health.connect.client.units.Mass? calcium;
    property public androidx.health.connect.client.units.Mass? chloride;
    property public androidx.health.connect.client.units.Mass? cholesterol;
    property public androidx.health.connect.client.units.Mass? chromium;
    property public androidx.health.connect.client.units.Mass? copper;
    property public androidx.health.connect.client.units.Mass? dietaryFiber;
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.units.Energy? energy;
    property public androidx.health.connect.client.units.Energy? energyFromFat;
    property public androidx.health.connect.client.units.Mass? folate;
    property public androidx.health.connect.client.units.Mass? folicAcid;
    property public androidx.health.connect.client.units.Mass? iodine;
    property public androidx.health.connect.client.units.Mass? iron;
    property public androidx.health.connect.client.units.Mass? magnesium;
    property public androidx.health.connect.client.units.Mass? manganese;
    property public int mealType;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public androidx.health.connect.client.units.Mass? molybdenum;
    property public androidx.health.connect.client.units.Mass? monounsaturatedFat;
    property public String? name;
    property public androidx.health.connect.client.units.Mass? niacin;
    property public androidx.health.connect.client.units.Mass? pantothenicAcid;
    property public androidx.health.connect.client.units.Mass? phosphorus;
    property public androidx.health.connect.client.units.Mass? polyunsaturatedFat;
    property public androidx.health.connect.client.units.Mass? potassium;
    property public androidx.health.connect.client.units.Mass? protein;
    property public androidx.health.connect.client.units.Mass? riboflavin;
    property public androidx.health.connect.client.units.Mass? saturatedFat;
    property public androidx.health.connect.client.units.Mass? selenium;
    property public androidx.health.connect.client.units.Mass? sodium;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    property public androidx.health.connect.client.units.Mass? sugar;
    property public androidx.health.connect.client.units.Mass? thiamin;
    property public androidx.health.connect.client.units.Mass? totalCarbohydrate;
    property public androidx.health.connect.client.units.Mass? totalFat;
    property public androidx.health.connect.client.units.Mass? transFat;
    property public androidx.health.connect.client.units.Mass? unsaturatedFat;
    property public androidx.health.connect.client.units.Mass? vitaminA;
    property public androidx.health.connect.client.units.Mass? vitaminB12;
    property public androidx.health.connect.client.units.Mass? vitaminB6;
    property public androidx.health.connect.client.units.Mass? vitaminC;
    property public androidx.health.connect.client.units.Mass? vitaminD;
    property public androidx.health.connect.client.units.Mass? vitaminE;
    property public androidx.health.connect.client.units.Mass? vitaminK;
    property public androidx.health.connect.client.units.Mass? zinc;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> BIOTIN_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> CAFFEINE_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> CALCIUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> CHLORIDE_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> CHOLESTEROL_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> CHROMIUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> COPPER_TOTAL;
    field public static final androidx.health.connect.client.records.NutritionRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> DIETARY_FIBER_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Energy> ENERGY_FROM_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Energy> ENERGY_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> FOLATE_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> FOLIC_ACID_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> IODINE_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> IRON_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> MAGNESIUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> MANGANESE_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> MOLYBDENUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> MONOUNSATURATED_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> NIACIN_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> PANTOTHENIC_ACID_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> PHOSPHORUS_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> POLYUNSATURATED_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> POTASSIUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> PROTEIN_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> RIBOFLAVIN_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> SATURATED_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> SELENIUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> SODIUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> SUGAR_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> THIAMIN_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> TOTAL_CARBOHYDRATE_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> TOTAL_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> TRANS_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> UNSATURATED_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_A_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_B12_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_B6_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_C_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_D_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_E_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_K_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> ZINC_TOTAL;
  }

  public static final class NutritionRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> BIOTIN_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> CAFFEINE_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> CALCIUM_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> CHLORIDE_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> CHOLESTEROL_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> CHROMIUM_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> COPPER_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> DIETARY_FIBER_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Energy> ENERGY_FROM_FAT_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Energy> ENERGY_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> FOLATE_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> FOLIC_ACID_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> IODINE_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> IRON_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> MAGNESIUM_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> MANGANESE_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> MOLYBDENUM_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> MONOUNSATURATED_FAT_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> NIACIN_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> PANTOTHENIC_ACID_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> PHOSPHORUS_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> POLYUNSATURATED_FAT_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> POTASSIUM_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> PROTEIN_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> RIBOFLAVIN_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> SATURATED_FAT_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> SELENIUM_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> SODIUM_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> SUGAR_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> THIAMIN_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> TOTAL_CARBOHYDRATE_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> TOTAL_FAT_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> TRANS_FAT_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> UNSATURATED_FAT_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_A_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_B12_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_B6_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_C_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_D_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_E_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> VITAMIN_K_TOTAL;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> ZINC_TOTAL;
  }

  public final class OvulationTestRecord implements androidx.health.connect.client.records.Record {
    ctor public OvulationTestRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, int result, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public int getResult();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public int result;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final androidx.health.connect.client.records.OvulationTestRecord.Companion Companion;
    field public static final int RESULT_HIGH = 2; // 0x2
    field public static final int RESULT_INCONCLUSIVE = 0; // 0x0
    field public static final int RESULT_NEGATIVE = 3; // 0x3
    field public static final int RESULT_POSITIVE = 1; // 0x1
  }

  public static final class OvulationTestRecord.Companion {
    property public static int RESULT_HIGH;
    property public static int RESULT_INCONCLUSIVE;
    property public static int RESULT_NEGATIVE;
    property public static int RESULT_POSITIVE;
  }

  public final class OxygenSaturationRecord implements androidx.health.connect.client.records.Record {
    ctor public OxygenSaturationRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.units.Percentage percentage, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public androidx.health.connect.client.units.Percentage getPercentage();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public androidx.health.connect.client.units.Percentage percentage;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
  }

  public final class PlannedExerciseBlock {
    ctor public PlannedExerciseBlock(int repetitions, java.util.List<androidx.health.connect.client.records.PlannedExerciseStep> steps, optional String? description);
    method public String? getDescription();
    method public int getRepetitions();
    method public java.util.List<androidx.health.connect.client.records.PlannedExerciseStep> getSteps();
    property public String? description;
    property public int repetitions;
    property public java.util.List<androidx.health.connect.client.records.PlannedExerciseStep> steps;
  }

  public final class PlannedExerciseSessionRecord implements androidx.health.connect.client.records.Record {
    ctor public PlannedExerciseSessionRecord(androidx.health.connect.client.records.metadata.Metadata metadata, java.time.LocalDate startDate, java.time.Duration duration, java.util.List<androidx.health.connect.client.records.PlannedExerciseBlock> blocks, int exerciseType);
    ctor public PlannedExerciseSessionRecord(androidx.health.connect.client.records.metadata.Metadata metadata, java.time.LocalDate startDate, java.time.Duration duration, java.util.List<androidx.health.connect.client.records.PlannedExerciseBlock> blocks, int exerciseType, optional String? title);
    ctor public PlannedExerciseSessionRecord(androidx.health.connect.client.records.metadata.Metadata metadata, java.time.LocalDate startDate, java.time.Duration duration, java.util.List<androidx.health.connect.client.records.PlannedExerciseBlock> blocks, int exerciseType, optional String? title, optional String? notes);
    ctor public PlannedExerciseSessionRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, java.util.List<androidx.health.connect.client.records.PlannedExerciseBlock> blocks, int exerciseType);
    ctor public PlannedExerciseSessionRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, java.util.List<androidx.health.connect.client.records.PlannedExerciseBlock> blocks, int exerciseType, optional String? title);
    ctor public PlannedExerciseSessionRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, java.util.List<androidx.health.connect.client.records.PlannedExerciseBlock> blocks, int exerciseType, optional String? title, optional String? notes);
    method public java.util.List<androidx.health.connect.client.records.PlannedExerciseBlock> getBlocks();
    method public String? getCompletedExerciseSessionId();
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public int getExerciseType();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public String? getNotes();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    method public String? getTitle();
    method public boolean hasExplicitTime();
    property public java.util.List<androidx.health.connect.client.records.PlannedExerciseBlock> blocks;
    property public String? completedExerciseSessionId;
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public int exerciseType;
    property public boolean hasExplicitTime;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public String? notes;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    property public String? title;
    field public static final androidx.health.connect.client.records.PlannedExerciseSessionRecord.Companion Companion;
  }

  public static final class PlannedExerciseSessionRecord.Companion {
  }

  public final class PlannedExerciseStep {
    ctor public PlannedExerciseStep(int exerciseType, int exercisePhase, androidx.health.connect.client.records.ExerciseCompletionGoal completionGoal, java.util.List<? extends androidx.health.connect.client.records.ExercisePerformanceTarget> performanceTargets, optional String? description);
    method public androidx.health.connect.client.records.ExerciseCompletionGoal getCompletionGoal();
    method public String? getDescription();
    method public int getExercisePhase();
    method public int getExerciseType();
    method public java.util.List<androidx.health.connect.client.records.ExercisePerformanceTarget> getPerformanceTargets();
    property public androidx.health.connect.client.records.ExerciseCompletionGoal completionGoal;
    property public String? description;
    property public int exercisePhase;
    property public int exerciseType;
    property public java.util.List<androidx.health.connect.client.records.ExercisePerformanceTarget> performanceTargets;
    field public static final androidx.health.connect.client.records.PlannedExerciseStep.Companion Companion;
    field public static final int EXERCISE_PHASE_ACTIVE = 3; // 0x3
    field public static final int EXERCISE_PHASE_COOLDOWN = 4; // 0x4
    field public static final int EXERCISE_PHASE_RECOVERY = 5; // 0x5
    field public static final int EXERCISE_PHASE_REST = 2; // 0x2
    field public static final int EXERCISE_PHASE_UNKNOWN = 0; // 0x0
    field public static final int EXERCISE_PHASE_WARMUP = 1; // 0x1
  }

  public static final class PlannedExerciseStep.Companion {
    property public static int EXERCISE_PHASE_ACTIVE;
    property public static int EXERCISE_PHASE_COOLDOWN;
    property public static int EXERCISE_PHASE_RECOVERY;
    property public static int EXERCISE_PHASE_REST;
    property public static int EXERCISE_PHASE_UNKNOWN;
    property public static int EXERCISE_PHASE_WARMUP;
  }

  public final class PowerRecord implements androidx.health.connect.client.records.Record {
    ctor public PowerRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, java.util.List<androidx.health.connect.client.records.PowerRecord.Sample> samples, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.util.List<androidx.health.connect.client.records.PowerRecord.Sample> getSamples();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.util.List<androidx.health.connect.client.records.PowerRecord.Sample> samples;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.PowerRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Power> POWER_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Power> POWER_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Power> POWER_MIN;
  }

  public static final class PowerRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Power> POWER_AVG;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Power> POWER_MAX;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Power> POWER_MIN;
  }

  public static final class PowerRecord.Sample {
    ctor public PowerRecord.Sample(java.time.Instant time, androidx.health.connect.client.units.Power power);
    method public androidx.health.connect.client.units.Power getPower();
    method public java.time.Instant getTime();
    property public androidx.health.connect.client.units.Power power;
    property public java.time.Instant time;
  }

  public interface Record {
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    property public abstract androidx.health.connect.client.records.metadata.Metadata metadata;
  }

  public final class RespiratoryRateRecord implements androidx.health.connect.client.records.Record {
    ctor public RespiratoryRateRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, double rate, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public double getRate();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public double rate;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
  }

  public final class RestingHeartRateRecord implements androidx.health.connect.client.records.Record {
    ctor public RestingHeartRateRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, long beatsPerMinute, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public long getBeatsPerMinute();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public long beatsPerMinute;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_MIN;
    field public static final androidx.health.connect.client.records.RestingHeartRateRecord.Companion Companion;
  }

  public static final class RestingHeartRateRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_AVG;
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_MAX;
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_MIN;
  }

  public final class SexualActivityRecord implements androidx.health.connect.client.records.Record {
    ctor public SexualActivityRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, optional int protectionUsed);
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public int getProtectionUsed();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public int protectionUsed;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final androidx.health.connect.client.records.SexualActivityRecord.Companion Companion;
    field public static final int PROTECTION_USED_PROTECTED = 1; // 0x1
    field public static final int PROTECTION_USED_UNKNOWN = 0; // 0x0
    field public static final int PROTECTION_USED_UNPROTECTED = 2; // 0x2
  }

  public static final class SexualActivityRecord.Companion {
    property public static int PROTECTION_USED_PROTECTED;
    property public static int PROTECTION_USED_UNKNOWN;
    property public static int PROTECTION_USED_UNPROTECTED;
  }

  public final class SkinTemperatureRecord implements androidx.health.connect.client.records.Record {
    ctor public SkinTemperatureRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, java.util.List<androidx.health.connect.client.records.SkinTemperatureRecord.Delta> deltas, optional androidx.health.connect.client.units.Temperature? baseline, optional int measurementLocation);
    method public androidx.health.connect.client.units.Temperature? getBaseline();
    method public java.util.List<androidx.health.connect.client.records.SkinTemperatureRecord.Delta> getDeltas();
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public int getMeasurementLocation();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public androidx.health.connect.client.units.Temperature? baseline;
    property public java.util.List<androidx.health.connect.client.records.SkinTemperatureRecord.Delta> deltas;
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public int measurementLocation;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.SkinTemperatureRecord.Companion Companion;
    field public static final int MEASUREMENT_LOCATION_FINGER = 1; // 0x1
    field public static final int MEASUREMENT_LOCATION_TOE = 2; // 0x2
    field public static final int MEASUREMENT_LOCATION_UNKNOWN = 0; // 0x0
    field public static final int MEASUREMENT_LOCATION_WRIST = 3; // 0x3
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.TemperatureDelta> TEMPERATURE_DELTA_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.TemperatureDelta> TEMPERATURE_DELTA_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.TemperatureDelta> TEMPERATURE_DELTA_MIN;
  }

  public static final class SkinTemperatureRecord.Companion {
    property public static int MEASUREMENT_LOCATION_FINGER;
    property public static int MEASUREMENT_LOCATION_TOE;
    property public static int MEASUREMENT_LOCATION_UNKNOWN;
    property public static int MEASUREMENT_LOCATION_WRIST;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.TemperatureDelta> TEMPERATURE_DELTA_AVG;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.TemperatureDelta> TEMPERATURE_DELTA_MAX;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.TemperatureDelta> TEMPERATURE_DELTA_MIN;
  }

  public static final class SkinTemperatureRecord.Delta {
    ctor public SkinTemperatureRecord.Delta(java.time.Instant time, androidx.health.connect.client.units.TemperatureDelta delta);
    method public androidx.health.connect.client.units.TemperatureDelta getDelta();
    method public java.time.Instant getTime();
    property public androidx.health.connect.client.units.TemperatureDelta delta;
    property public java.time.Instant time;
  }

  public final class SleepSessionRecord implements androidx.health.connect.client.records.Record {
    ctor public SleepSessionRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, optional String? title, optional String? notes, optional java.util.List<androidx.health.connect.client.records.SleepSessionRecord.Stage> stages);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public String? getNotes();
    method public java.util.List<androidx.health.connect.client.records.SleepSessionRecord.Stage> getStages();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    method public String? getTitle();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public String? notes;
    property public java.util.List<androidx.health.connect.client.records.SleepSessionRecord.Stage> stages;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    property public String? title;
    field public static final androidx.health.connect.client.records.SleepSessionRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.time.Duration> SLEEP_DURATION_TOTAL;
    field public static final int STAGE_TYPE_AWAKE = 1; // 0x1
    field public static final int STAGE_TYPE_AWAKE_IN_BED = 7; // 0x7
    field public static final int STAGE_TYPE_DEEP = 5; // 0x5
    field public static final int STAGE_TYPE_LIGHT = 4; // 0x4
    field public static final int STAGE_TYPE_OUT_OF_BED = 3; // 0x3
    field public static final int STAGE_TYPE_REM = 6; // 0x6
    field public static final int STAGE_TYPE_SLEEPING = 2; // 0x2
    field public static final int STAGE_TYPE_UNKNOWN = 0; // 0x0
  }

  public static final class SleepSessionRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.time.Duration> SLEEP_DURATION_TOTAL;
    property public static int STAGE_TYPE_AWAKE;
    property public static int STAGE_TYPE_AWAKE_IN_BED;
    property public static int STAGE_TYPE_DEEP;
    property public static int STAGE_TYPE_LIGHT;
    property public static int STAGE_TYPE_OUT_OF_BED;
    property public static int STAGE_TYPE_REM;
    property public static int STAGE_TYPE_SLEEPING;
    property public static int STAGE_TYPE_UNKNOWN;
  }

  public static final class SleepSessionRecord.Stage {
    ctor public SleepSessionRecord.Stage(java.time.Instant startTime, java.time.Instant endTime, int stage);
    method public java.time.Instant getEndTime();
    method public int getStage();
    method public java.time.Instant getStartTime();
    property public java.time.Instant endTime;
    property public int stage;
    property public java.time.Instant startTime;
  }

  public final class SpeedRecord implements androidx.health.connect.client.records.Record {
    ctor public SpeedRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, java.util.List<androidx.health.connect.client.records.SpeedRecord.Sample> samples, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.util.List<androidx.health.connect.client.records.SpeedRecord.Sample> getSamples();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.util.List<androidx.health.connect.client.records.SpeedRecord.Sample> samples;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.SpeedRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Velocity> SPEED_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Velocity> SPEED_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Velocity> SPEED_MIN;
  }

  public static final class SpeedRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Velocity> SPEED_AVG;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Velocity> SPEED_MAX;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Velocity> SPEED_MIN;
  }

  public static final class SpeedRecord.Sample {
    ctor public SpeedRecord.Sample(java.time.Instant time, androidx.health.connect.client.units.Velocity speed);
    method public androidx.health.connect.client.units.Velocity getSpeed();
    method public java.time.Instant getTime();
    property public androidx.health.connect.client.units.Velocity speed;
    property public java.time.Instant time;
  }

  public final class StepsCadenceRecord implements androidx.health.connect.client.records.Record {
    ctor public StepsCadenceRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, java.util.List<androidx.health.connect.client.records.StepsCadenceRecord.Sample> samples, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.util.List<androidx.health.connect.client.records.StepsCadenceRecord.Sample> getSamples();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.util.List<androidx.health.connect.client.records.StepsCadenceRecord.Sample> samples;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.StepsCadenceRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RATE_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RATE_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RATE_MIN;
  }

  public static final class StepsCadenceRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RATE_AVG;
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RATE_MAX;
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RATE_MIN;
  }

  public static final class StepsCadenceRecord.Sample {
    ctor public StepsCadenceRecord.Sample(java.time.Instant time, @FloatRange(from=0.0, to=10000.0) double rate);
    method public double getRate();
    method public java.time.Instant getTime();
    property @FloatRange(from=0.0, to=10000.0) public double rate;
    property public java.time.Instant time;
  }

  public final class StepsRecord implements androidx.health.connect.client.records.Record {
    ctor public StepsRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, @IntRange(from=1L, to=1000000L) long count, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public long getCount();
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property @IntRange(from=1L, to=1000000L) public long count;
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> COUNT_TOTAL;
    field public static final androidx.health.connect.client.records.StepsRecord.Companion Companion;
  }

  public static final class StepsRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> COUNT_TOTAL;
  }

  public final class TotalCaloriesBurnedRecord implements androidx.health.connect.client.records.Record {
    ctor public TotalCaloriesBurnedRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, androidx.health.connect.client.units.Energy energy, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.units.Energy getEnergy();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.units.Energy energy;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.TotalCaloriesBurnedRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Energy> ENERGY_TOTAL;
  }

  public static final class TotalCaloriesBurnedRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Energy> ENERGY_TOTAL;
  }

  public final class Vo2MaxRecord implements androidx.health.connect.client.records.Record {
    ctor public Vo2MaxRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, double vo2MillilitersPerMinuteKilogram, optional int measurementMethod);
    method public int getMeasurementMethod();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public double getVo2MillilitersPerMinuteKilogram();
    method public java.time.ZoneOffset? getZoneOffset();
    property public int measurementMethod;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public double vo2MillilitersPerMinuteKilogram;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final androidx.health.connect.client.records.Vo2MaxRecord.Companion Companion;
    field public static final int MEASUREMENT_METHOD_COOPER_TEST = 3; // 0x3
    field public static final int MEASUREMENT_METHOD_HEART_RATE_RATIO = 2; // 0x2
    field public static final int MEASUREMENT_METHOD_METABOLIC_CART = 1; // 0x1
    field public static final int MEASUREMENT_METHOD_MULTISTAGE_FITNESS_TEST = 4; // 0x4
    field public static final int MEASUREMENT_METHOD_OTHER = 0; // 0x0
    field public static final int MEASUREMENT_METHOD_ROCKPORT_FITNESS_TEST = 5; // 0x5
  }

  public static final class Vo2MaxRecord.Companion {
    property public static int MEASUREMENT_METHOD_COOPER_TEST;
    property public static int MEASUREMENT_METHOD_HEART_RATE_RATIO;
    property public static int MEASUREMENT_METHOD_METABOLIC_CART;
    property public static int MEASUREMENT_METHOD_MULTISTAGE_FITNESS_TEST;
    property public static int MEASUREMENT_METHOD_OTHER;
    property public static int MEASUREMENT_METHOD_ROCKPORT_FITNESS_TEST;
  }

  public final class WeightRecord implements androidx.health.connect.client.records.Record {
    ctor public WeightRecord(java.time.Instant time, java.time.ZoneOffset? zoneOffset, androidx.health.connect.client.units.Mass weight, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public androidx.health.connect.client.units.Mass getWeight();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public androidx.health.connect.client.units.Mass weight;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final androidx.health.connect.client.records.WeightRecord.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> WEIGHT_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> WEIGHT_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> WEIGHT_MIN;
  }

  public static final class WeightRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> WEIGHT_AVG;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> WEIGHT_MAX;
    property public androidx.health.connect.client.aggregate.AggregateMetric<androidx.health.connect.client.units.Mass> WEIGHT_MIN;
  }

  public final class WheelchairPushesRecord implements androidx.health.connect.client.records.Record {
    ctor public WheelchairPushesRecord(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, long count, androidx.health.connect.client.records.metadata.Metadata metadata);
    method public long getCount();
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.records.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public long count;
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.records.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> COUNT_TOTAL;
    field public static final androidx.health.connect.client.records.WheelchairPushesRecord.Companion Companion;
  }

  public static final class WheelchairPushesRecord.Companion {
    property public androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> COUNT_TOTAL;
  }

}

package androidx.health.connect.client.records.metadata {

  public final class DataOrigin {
    ctor public DataOrigin(String packageName);
    method public String getPackageName();
    property public String packageName;
  }

  public final class Device {
    ctor public Device(int type, optional String? manufacturer, optional String? model);
    method public String? getManufacturer();
    method public String? getModel();
    method public int getType();
    property public String? manufacturer;
    property public String? model;
    property public int type;
    field public static final androidx.health.connect.client.records.metadata.Device.Companion Companion;
    field public static final int TYPE_CHEST_STRAP = 7; // 0x7
    field public static final int TYPE_FITNESS_BAND = 6; // 0x6
    field public static final int TYPE_HEAD_MOUNTED = 5; // 0x5
    field public static final int TYPE_PHONE = 2; // 0x2
    field public static final int TYPE_RING = 4; // 0x4
    field public static final int TYPE_SCALE = 3; // 0x3
    field public static final int TYPE_SMART_DISPLAY = 8; // 0x8
    field public static final int TYPE_UNKNOWN = 0; // 0x0
    field public static final int TYPE_WATCH = 1; // 0x1
  }

  public static final class Device.Companion {
    property public static int TYPE_CHEST_STRAP;
    property public static int TYPE_FITNESS_BAND;
    property public static int TYPE_HEAD_MOUNTED;
    property public static int TYPE_PHONE;
    property public static int TYPE_RING;
    property public static int TYPE_SCALE;
    property public static int TYPE_SMART_DISPLAY;
    property public static int TYPE_UNKNOWN;
    property public static int TYPE_WATCH;
  }

  public final class Metadata {
    method public static androidx.health.connect.client.records.metadata.Metadata activelyRecorded(androidx.health.connect.client.records.metadata.Device device);
    method public static androidx.health.connect.client.records.metadata.Metadata activelyRecorded(androidx.health.connect.client.records.metadata.Device device, String clientRecordId);
    method public static androidx.health.connect.client.records.metadata.Metadata activelyRecorded(androidx.health.connect.client.records.metadata.Device device, String clientRecordId, optional long clientRecordVersion);
    method public static androidx.health.connect.client.records.metadata.Metadata activelyRecordedWithId(String id, androidx.health.connect.client.records.metadata.Device device);
    method public static androidx.health.connect.client.records.metadata.Metadata autoRecorded(androidx.health.connect.client.records.metadata.Device device);
    method public static androidx.health.connect.client.records.metadata.Metadata autoRecorded(androidx.health.connect.client.records.metadata.Device device, String clientRecordId);
    method public static androidx.health.connect.client.records.metadata.Metadata autoRecorded(androidx.health.connect.client.records.metadata.Device device, String clientRecordId, optional long clientRecordVersion);
    method public static androidx.health.connect.client.records.metadata.Metadata autoRecordedWithId(String id, androidx.health.connect.client.records.metadata.Device device);
    method public String? getClientRecordId();
    method public long getClientRecordVersion();
    method public androidx.health.connect.client.records.metadata.DataOrigin getDataOrigin();
    method public androidx.health.connect.client.records.metadata.Device? getDevice();
    method public String getId();
    method public java.time.Instant getLastModifiedTime();
    method public int getRecordingMethod();
    method public static androidx.health.connect.client.records.metadata.Metadata manualEntry();
    method public static androidx.health.connect.client.records.metadata.Metadata manualEntry(optional androidx.health.connect.client.records.metadata.Device? device);
    method public static androidx.health.connect.client.records.metadata.Metadata manualEntry(String clientRecordId);
    method public static androidx.health.connect.client.records.metadata.Metadata manualEntry(String clientRecordId, optional long clientRecordVersion);
    method public static androidx.health.connect.client.records.metadata.Metadata manualEntry(String clientRecordId, optional long clientRecordVersion, optional androidx.health.connect.client.records.metadata.Device? device);
    method public static androidx.health.connect.client.records.metadata.Metadata manualEntryWithId(String id);
    method public static androidx.health.connect.client.records.metadata.Metadata manualEntryWithId(String id, optional androidx.health.connect.client.records.metadata.Device? device);
    method public static androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod();
    method public static androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(optional androidx.health.connect.client.records.metadata.Device? device);
    method public static androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(String clientRecordId);
    method public static androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(String clientRecordId, optional long clientRecordVersion);
    method public static androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(String clientRecordId, optional long clientRecordVersion, optional androidx.health.connect.client.records.metadata.Device? device);
    method public static androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethodWithId(String id);
    method public static androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethodWithId(String id, optional androidx.health.connect.client.records.metadata.Device? device);
    property public String? clientRecordId;
    property public long clientRecordVersion;
    property public androidx.health.connect.client.records.metadata.DataOrigin dataOrigin;
    property public androidx.health.connect.client.records.metadata.Device? device;
    property public String id;
    property public java.time.Instant lastModifiedTime;
    property public int recordingMethod;
    field public static final androidx.health.connect.client.records.metadata.Metadata.Companion Companion;
    field public static final int RECORDING_METHOD_ACTIVELY_RECORDED = 1; // 0x1
    field public static final int RECORDING_METHOD_AUTOMATICALLY_RECORDED = 2; // 0x2
    field public static final int RECORDING_METHOD_MANUAL_ENTRY = 3; // 0x3
    field public static final int RECORDING_METHOD_UNKNOWN = 0; // 0x0
  }

  public static final class Metadata.Companion {
    method public androidx.health.connect.client.records.metadata.Metadata activelyRecorded(androidx.health.connect.client.records.metadata.Device device);
    method public androidx.health.connect.client.records.metadata.Metadata activelyRecorded(androidx.health.connect.client.records.metadata.Device device, String clientRecordId);
    method public androidx.health.connect.client.records.metadata.Metadata activelyRecorded(androidx.health.connect.client.records.metadata.Device device, String clientRecordId, optional long clientRecordVersion);
    method public androidx.health.connect.client.records.metadata.Metadata activelyRecordedWithId(String id, androidx.health.connect.client.records.metadata.Device device);
    method public androidx.health.connect.client.records.metadata.Metadata autoRecorded(androidx.health.connect.client.records.metadata.Device device);
    method public androidx.health.connect.client.records.metadata.Metadata autoRecorded(androidx.health.connect.client.records.metadata.Device device, String clientRecordId);
    method public androidx.health.connect.client.records.metadata.Metadata autoRecorded(androidx.health.connect.client.records.metadata.Device device, String clientRecordId, optional long clientRecordVersion);
    method public androidx.health.connect.client.records.metadata.Metadata autoRecordedWithId(String id, androidx.health.connect.client.records.metadata.Device device);
    method public androidx.health.connect.client.records.metadata.Metadata manualEntry();
    method public androidx.health.connect.client.records.metadata.Metadata manualEntry(optional androidx.health.connect.client.records.metadata.Device? device);
    method public androidx.health.connect.client.records.metadata.Metadata manualEntry(String clientRecordId);
    method public androidx.health.connect.client.records.metadata.Metadata manualEntry(String clientRecordId, optional long clientRecordVersion);
    method public androidx.health.connect.client.records.metadata.Metadata manualEntry(String clientRecordId, optional long clientRecordVersion, optional androidx.health.connect.client.records.metadata.Device? device);
    method public androidx.health.connect.client.records.metadata.Metadata manualEntryWithId(String id);
    method public androidx.health.connect.client.records.metadata.Metadata manualEntryWithId(String id, optional androidx.health.connect.client.records.metadata.Device? device);
    method public androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod();
    method public androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(optional androidx.health.connect.client.records.metadata.Device? device);
    method public androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(String clientRecordId);
    method public androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(String clientRecordId, optional long clientRecordVersion);
    method public androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(String clientRecordId, optional long clientRecordVersion, optional androidx.health.connect.client.records.metadata.Device? device);
    method public androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethodWithId(String id);
    method public androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethodWithId(String id, optional androidx.health.connect.client.records.metadata.Device? device);
    property public static int RECORDING_METHOD_ACTIVELY_RECORDED;
    property public static int RECORDING_METHOD_AUTOMATICALLY_RECORDED;
    property public static int RECORDING_METHOD_MANUAL_ENTRY;
    property public static int RECORDING_METHOD_UNKNOWN;
  }

}

package androidx.health.connect.client.request {

  public final class AggregateGroupByDurationRequest {
    ctor public AggregateGroupByDurationRequest(java.util.Set<? extends androidx.health.connect.client.aggregate.AggregateMetric<? extends java.lang.Object?>> metrics, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Duration timeRangeSlicer, optional java.util.Set<androidx.health.connect.client.records.metadata.DataOrigin> dataOriginFilter);
  }

  public final class AggregateGroupByPeriodRequest {
    ctor public AggregateGroupByPeriodRequest(java.util.Set<? extends androidx.health.connect.client.aggregate.AggregateMetric<? extends java.lang.Object?>> metrics, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Period timeRangeSlicer, optional java.util.Set<androidx.health.connect.client.records.metadata.DataOrigin> dataOriginFilter);
  }

  public final class AggregateRequest {
    ctor public AggregateRequest(java.util.Set<? extends androidx.health.connect.client.aggregate.AggregateMetric<? extends java.lang.Object?>> metrics, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, optional java.util.Set<androidx.health.connect.client.records.metadata.DataOrigin> dataOriginFilter);
  }

  public final class ChangesTokenRequest {
    ctor public ChangesTokenRequest(java.util.Set<? extends kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record>> recordTypes, optional java.util.Set<androidx.health.connect.client.records.metadata.DataOrigin> dataOriginFilters);
  }

  @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public final class CreateMedicalDataSourceRequest {
    ctor public CreateMedicalDataSourceRequest(android.net.Uri fhirBaseUri, String displayName, androidx.health.connect.client.records.FhirVersion fhirVersion);
    method public String getDisplayName();
    method public android.net.Uri getFhirBaseUri();
    method public androidx.health.connect.client.records.FhirVersion getFhirVersion();
    property public String displayName;
    property public android.net.Uri fhirBaseUri;
    property public androidx.health.connect.client.records.FhirVersion fhirVersion;
  }

  @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public final class DeleteMedicalResourcesRequest {
    ctor public DeleteMedicalResourcesRequest();
    ctor public DeleteMedicalResourcesRequest(optional java.util.Set<java.lang.String> dataSourceIds, optional java.util.Set<java.lang.Integer> medicalResourceTypes);
    method public java.util.Set<java.lang.String> getDataSourceIds();
    method public java.util.Set<java.lang.Integer> getMedicalResourceTypes();
    property public java.util.Set<java.lang.String> dataSourceIds;
    property public java.util.Set<java.lang.Integer> medicalResourceTypes;
  }

  @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public final class GetMedicalDataSourcesRequest {
    ctor public GetMedicalDataSourcesRequest(java.util.List<java.lang.String> packageNames);
    method public java.util.List<java.lang.String> getPackageNames();
    property public java.util.List<java.lang.String> packageNames;
  }

  @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public final class ReadMedicalResourcesInitialRequest extends androidx.health.connect.client.request.ReadMedicalResourcesRequest {
    ctor public ReadMedicalResourcesInitialRequest(int medicalResourceType, java.util.Set<java.lang.String> medicalDataSourceIds, optional int pageSize);
    method public java.util.Set<java.lang.String> getMedicalDataSourceIds();
    method public int getMedicalResourceType();
    property public java.util.Set<java.lang.String> medicalDataSourceIds;
    property public int medicalResourceType;
  }

  @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public final class ReadMedicalResourcesPageRequest extends androidx.health.connect.client.request.ReadMedicalResourcesRequest {
    ctor public ReadMedicalResourcesPageRequest(String pageToken, optional int pageSize);
    method public String getPageToken();
    property public String pageToken;
  }

  @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public abstract class ReadMedicalResourcesRequest {
    method public final int getPageSize();
    property public final int pageSize;
    field public static final androidx.health.connect.client.request.ReadMedicalResourcesRequest.Companion Companion;
    field public static final int DEFAULT_PAGE_SIZE = 1000; // 0x3e8
  }

  public static final class ReadMedicalResourcesRequest.Companion {
    property public static int DEFAULT_PAGE_SIZE;
  }

  public final class ReadRecordsRequest<T extends androidx.health.connect.client.records.Record> {
    ctor public ReadRecordsRequest(kotlin.reflect.KClass<T> recordType, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, optional java.util.Set<androidx.health.connect.client.records.metadata.DataOrigin> dataOriginFilter, optional boolean ascendingOrder, optional int pageSize, optional String? pageToken);
  }

  public final class ReadRecordsRequestKt {
    method public static inline <reified T extends androidx.health.connect.client.records.Record> androidx.health.connect.client.request.ReadRecordsRequest<T> ReadRecordsRequest(androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, optional java.util.Set<androidx.health.connect.client.records.metadata.DataOrigin> dataOriginFilter, optional boolean ascendingOrder, optional int pageSize, optional String? pageToken);
  }

  @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public final class UpsertMedicalResourceRequest {
    ctor public UpsertMedicalResourceRequest(String dataSourceId, androidx.health.connect.client.records.FhirVersion fhirVersion, String data);
    method public String getData();
    method public String getDataSourceId();
    method public androidx.health.connect.client.records.FhirVersion getFhirVersion();
    property public String data;
    property public String dataSourceId;
    property public androidx.health.connect.client.records.FhirVersion fhirVersion;
  }

}

package androidx.health.connect.client.response {

  public final class ChangesResponse {
    method public java.util.List<androidx.health.connect.client.changes.Change> getChanges();
    method public boolean getChangesTokenExpired();
    method public String getNextChangesToken();
    method public boolean hasMore();
    property public java.util.List<androidx.health.connect.client.changes.Change> changes;
    property public boolean changesTokenExpired;
    property public boolean hasMore;
    property public String nextChangesToken;
  }

  public final class InsertRecordsResponse {
    method public java.util.List<java.lang.String> getRecordIdsList();
    property public java.util.List<java.lang.String> recordIdsList;
  }

  @SuppressCompatibility @androidx.health.connect.client.feature.ExperimentalPersonalHealthRecordApi public final class ReadMedicalResourcesResponse {
    ctor public ReadMedicalResourcesResponse(java.util.List<androidx.health.connect.client.records.MedicalResource> medicalResources, String? nextPageToken, int remainingCount);
    method public java.util.List<androidx.health.connect.client.records.MedicalResource> getMedicalResources();
    method public String? getNextPageToken();
    method public int getRemainingCount();
    property public java.util.List<androidx.health.connect.client.records.MedicalResource> medicalResources;
    property public String? nextPageToken;
    property public int remainingCount;
  }

  public final class ReadRecordResponse<T extends androidx.health.connect.client.records.Record> {
    method public T getRecord();
    property public T record;
  }

  public final class ReadRecordsResponse<T extends androidx.health.connect.client.records.Record> {
    method public String? getPageToken();
    method public java.util.List<T> getRecords();
    property public String? pageToken;
    property public java.util.List<T> records;
  }

}

package androidx.health.connect.client.time {

  public final class TimeRangeFilter {
    ctor public TimeRangeFilter();
    method public static androidx.health.connect.client.time.TimeRangeFilter after(java.time.Instant startTime);
    method public static androidx.health.connect.client.time.TimeRangeFilter after(java.time.LocalDateTime startTime);
    method public static androidx.health.connect.client.time.TimeRangeFilter before(java.time.Instant endTime);
    method public static androidx.health.connect.client.time.TimeRangeFilter before(java.time.LocalDateTime endTime);
    method public static androidx.health.connect.client.time.TimeRangeFilter between(java.time.Instant startTime, java.time.Instant endTime);
    method public static androidx.health.connect.client.time.TimeRangeFilter between(java.time.LocalDateTime startTime, java.time.LocalDateTime endTime);
    field public static final androidx.health.connect.client.time.TimeRangeFilter.Companion Companion;
  }

  public static final class TimeRangeFilter.Companion {
    method public androidx.health.connect.client.time.TimeRangeFilter after(java.time.Instant startTime);
    method public androidx.health.connect.client.time.TimeRangeFilter after(java.time.LocalDateTime startTime);
    method public androidx.health.connect.client.time.TimeRangeFilter before(java.time.Instant endTime);
    method public androidx.health.connect.client.time.TimeRangeFilter before(java.time.LocalDateTime endTime);
    method public androidx.health.connect.client.time.TimeRangeFilter between(java.time.Instant startTime, java.time.Instant endTime);
    method public androidx.health.connect.client.time.TimeRangeFilter between(java.time.LocalDateTime startTime, java.time.LocalDateTime endTime);
  }

}

package androidx.health.connect.client.units {

  public final class BloodGlucose implements java.lang.Comparable<androidx.health.connect.client.units.BloodGlucose> {
    method public int compareTo(androidx.health.connect.client.units.BloodGlucose other);
    method public double getMilligramsPerDeciliter();
    method public double getMillimolesPerLiter();
    method public static androidx.health.connect.client.units.BloodGlucose milligramsPerDeciliter(double value);
    method public static androidx.health.connect.client.units.BloodGlucose millimolesPerLiter(double value);
    property public double inMilligramsPerDeciliter;
    property public double inMillimolesPerLiter;
    field public static final androidx.health.connect.client.units.BloodGlucose.Companion Companion;
  }

  public static final class BloodGlucose.Companion {
    method public androidx.health.connect.client.units.BloodGlucose milligramsPerDeciliter(double value);
    method public androidx.health.connect.client.units.BloodGlucose millimolesPerLiter(double value);
  }

  public final class Energy implements java.lang.Comparable<androidx.health.connect.client.units.Energy> {
    method public static androidx.health.connect.client.units.Energy calories(double value);
    method public int compareTo(androidx.health.connect.client.units.Energy other);
    method public double getCalories();
    method public double getJoules();
    method public double getKilocalories();
    method public double getKilojoules();
    method public static androidx.health.connect.client.units.Energy joules(double value);
    method public static androidx.health.connect.client.units.Energy kilocalories(double value);
    method public static androidx.health.connect.client.units.Energy kilojoules(double value);
    property public double inCalories;
    property public double inJoules;
    property public double inKilocalories;
    property public double inKilojoules;
    field public static final androidx.health.connect.client.units.Energy.Companion Companion;
  }

  public static final class Energy.Companion {
    method public androidx.health.connect.client.units.Energy calories(double value);
    method public androidx.health.connect.client.units.Energy joules(double value);
    method public androidx.health.connect.client.units.Energy kilocalories(double value);
    method public androidx.health.connect.client.units.Energy kilojoules(double value);
  }

  public final class EnergyKt {
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getCalories(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getCalories(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getCalories(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getCalories(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getJoules(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getJoules(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getJoules(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getJoules(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getKilocalories(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getKilocalories(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getKilocalories(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getKilocalories(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getKilojoules(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getKilojoules(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getKilojoules(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Energy! getKilojoules(long);
    property public static androidx.health.connect.client.units.Energy double.calories;
    property public static androidx.health.connect.client.units.Energy long.calories;
    property public static androidx.health.connect.client.units.Energy float.calories;
    property public static androidx.health.connect.client.units.Energy int.calories;
    property public static androidx.health.connect.client.units.Energy double.joules;
    property public static androidx.health.connect.client.units.Energy long.joules;
    property public static androidx.health.connect.client.units.Energy float.joules;
    property public static androidx.health.connect.client.units.Energy int.joules;
    property public static androidx.health.connect.client.units.Energy double.kilocalories;
    property public static androidx.health.connect.client.units.Energy long.kilocalories;
    property public static androidx.health.connect.client.units.Energy float.kilocalories;
    property public static androidx.health.connect.client.units.Energy int.kilocalories;
    property public static androidx.health.connect.client.units.Energy double.kilojoules;
    property public static androidx.health.connect.client.units.Energy long.kilojoules;
    property public static androidx.health.connect.client.units.Energy float.kilojoules;
    property public static androidx.health.connect.client.units.Energy int.kilojoules;
  }

  public final class Length implements java.lang.Comparable<androidx.health.connect.client.units.Length> {
    method public int compareTo(androidx.health.connect.client.units.Length other);
    method public static androidx.health.connect.client.units.Length feet(double value);
    method public double getFeet();
    method public double getInches();
    method public double getKilometers();
    method public double getMeters();
    method public double getMiles();
    method public static androidx.health.connect.client.units.Length inches(double value);
    method public static androidx.health.connect.client.units.Length kilometers(double value);
    method public static androidx.health.connect.client.units.Length meters(double value);
    method public static androidx.health.connect.client.units.Length miles(double value);
    property public double inFeet;
    property public double inInches;
    property public double inKilometers;
    property public double inMeters;
    property public double inMiles;
    field public static final androidx.health.connect.client.units.Length.Companion Companion;
  }

  public static final class Length.Companion {
    method public androidx.health.connect.client.units.Length feet(double value);
    method public androidx.health.connect.client.units.Length inches(double value);
    method public androidx.health.connect.client.units.Length kilometers(double value);
    method public androidx.health.connect.client.units.Length meters(double value);
    method public androidx.health.connect.client.units.Length miles(double value);
  }

  public final class LengthKt {
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getFeet(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getFeet(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getFeet(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getFeet(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getInches(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getInches(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getInches(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getInches(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getKilometers(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getKilometers(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getKilometers(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getKilometers(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getMeters(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getMeters(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getMeters(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getMeters(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getMiles(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getMiles(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getMiles(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Length! getMiles(long);
    property public static androidx.health.connect.client.units.Length double.feet;
    property public static androidx.health.connect.client.units.Length float.feet;
    property public static androidx.health.connect.client.units.Length long.feet;
    property public static androidx.health.connect.client.units.Length int.feet;
    property public static androidx.health.connect.client.units.Length double.inches;
    property public static androidx.health.connect.client.units.Length float.inches;
    property public static androidx.health.connect.client.units.Length long.inches;
    property public static androidx.health.connect.client.units.Length int.inches;
    property public static androidx.health.connect.client.units.Length double.kilometers;
    property public static androidx.health.connect.client.units.Length float.kilometers;
    property public static androidx.health.connect.client.units.Length long.kilometers;
    property public static androidx.health.connect.client.units.Length int.kilometers;
    property public static androidx.health.connect.client.units.Length double.meters;
    property public static androidx.health.connect.client.units.Length long.meters;
    property public static androidx.health.connect.client.units.Length float.meters;
    property public static androidx.health.connect.client.units.Length int.meters;
    property public static androidx.health.connect.client.units.Length double.miles;
    property public static androidx.health.connect.client.units.Length float.miles;
    property public static androidx.health.connect.client.units.Length long.miles;
    property public static androidx.health.connect.client.units.Length int.miles;
  }

  public final class Mass implements java.lang.Comparable<androidx.health.connect.client.units.Mass> {
    method public int compareTo(androidx.health.connect.client.units.Mass other);
    method public double getGrams();
    method public double getKilograms();
    method public double getMicrograms();
    method public double getMilligrams();
    method public double getOunces();
    method public double getPounds();
    method public static androidx.health.connect.client.units.Mass grams(double value);
    method public static androidx.health.connect.client.units.Mass kilograms(double value);
    method public static androidx.health.connect.client.units.Mass micrograms(double value);
    method public static androidx.health.connect.client.units.Mass milligrams(double value);
    method public static androidx.health.connect.client.units.Mass ounces(double value);
    method public static androidx.health.connect.client.units.Mass pounds(double value);
    property public double inGrams;
    property public double inKilograms;
    property public double inMicrograms;
    property public double inMilligrams;
    property public double inOunces;
    property public double inPounds;
    field public static final androidx.health.connect.client.units.Mass.Companion Companion;
  }

  public static final class Mass.Companion {
    method public androidx.health.connect.client.units.Mass grams(double value);
    method public androidx.health.connect.client.units.Mass kilograms(double value);
    method public androidx.health.connect.client.units.Mass micrograms(double value);
    method public androidx.health.connect.client.units.Mass milligrams(double value);
    method public androidx.health.connect.client.units.Mass ounces(double value);
    method public androidx.health.connect.client.units.Mass pounds(double value);
  }

  public final class MassKt {
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getGrams(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getGrams(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getGrams(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getGrams(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getKilograms(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getKilograms(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getKilograms(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getKilograms(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getMicrograms(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getMicrograms(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getMicrograms(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getMicrograms(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getMilligrams(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getMilligrams(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getMilligrams(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getMilligrams(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getOunces(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getOunces(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getOunces(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getOunces(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getPounds(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getPounds(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getPounds(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Mass! getPounds(long);
    property public static androidx.health.connect.client.units.Mass double.grams;
    property public static androidx.health.connect.client.units.Mass float.grams;
    property public static androidx.health.connect.client.units.Mass long.grams;
    property public static androidx.health.connect.client.units.Mass int.grams;
    property public static androidx.health.connect.client.units.Mass double.kilograms;
    property public static androidx.health.connect.client.units.Mass float.kilograms;
    property public static androidx.health.connect.client.units.Mass long.kilograms;
    property public static androidx.health.connect.client.units.Mass int.kilograms;
    property public static androidx.health.connect.client.units.Mass double.micrograms;
    property public static androidx.health.connect.client.units.Mass float.micrograms;
    property public static androidx.health.connect.client.units.Mass long.micrograms;
    property public static androidx.health.connect.client.units.Mass int.micrograms;
    property public static androidx.health.connect.client.units.Mass double.milligrams;
    property public static androidx.health.connect.client.units.Mass float.milligrams;
    property public static androidx.health.connect.client.units.Mass long.milligrams;
    property public static androidx.health.connect.client.units.Mass int.milligrams;
    property public static androidx.health.connect.client.units.Mass double.ounces;
    property public static androidx.health.connect.client.units.Mass float.ounces;
    property public static androidx.health.connect.client.units.Mass long.ounces;
    property public static androidx.health.connect.client.units.Mass int.ounces;
    property public static androidx.health.connect.client.units.Mass double.pounds;
    property public static androidx.health.connect.client.units.Mass float.pounds;
    property public static androidx.health.connect.client.units.Mass long.pounds;
    property public static androidx.health.connect.client.units.Mass int.pounds;
  }

  public final class Percentage implements java.lang.Comparable<androidx.health.connect.client.units.Percentage> {
    ctor public Percentage(double value);
    method public int compareTo(androidx.health.connect.client.units.Percentage other);
    method public double getValue();
    property public double value;
  }

  public final class PercentageKt {
    method @BytecodeOnly public static androidx.health.connect.client.units.Percentage! getPercent(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Percentage! getPercent(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Percentage! getPercent(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Percentage! getPercent(long);
    property public static androidx.health.connect.client.units.Percentage double.percent;
    property public static androidx.health.connect.client.units.Percentage long.percent;
    property public static androidx.health.connect.client.units.Percentage float.percent;
    property public static androidx.health.connect.client.units.Percentage int.percent;
  }

  public final class Power implements java.lang.Comparable<androidx.health.connect.client.units.Power> {
    method public int compareTo(androidx.health.connect.client.units.Power other);
    method public double getKilocaloriesPerDay();
    method public double getWatts();
    method public static androidx.health.connect.client.units.Power kilocaloriesPerDay(double value);
    method public static androidx.health.connect.client.units.Power watts(double value);
    property public double inKilocaloriesPerDay;
    property public double inWatts;
    field public static final androidx.health.connect.client.units.Power.Companion Companion;
  }

  public static final class Power.Companion {
    method public androidx.health.connect.client.units.Power kilocaloriesPerDay(double value);
    method public androidx.health.connect.client.units.Power watts(double value);
  }

  public final class PowerKt {
    method @BytecodeOnly public static androidx.health.connect.client.units.Power! getKilocaloriesPerDay(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Power! getKilocaloriesPerDay(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Power! getKilocaloriesPerDay(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Power! getKilocaloriesPerDay(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Power! getWatts(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Power! getWatts(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Power! getWatts(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Power! getWatts(long);
    property public static androidx.health.connect.client.units.Power double.kilocaloriesPerDay;
    property public static androidx.health.connect.client.units.Power long.kilocaloriesPerDay;
    property public static androidx.health.connect.client.units.Power float.kilocaloriesPerDay;
    property public static androidx.health.connect.client.units.Power int.kilocaloriesPerDay;
    property public static androidx.health.connect.client.units.Power double.watts;
    property public static androidx.health.connect.client.units.Power long.watts;
    property public static androidx.health.connect.client.units.Power float.watts;
    property public static androidx.health.connect.client.units.Power int.watts;
  }

  public final class Pressure implements java.lang.Comparable<androidx.health.connect.client.units.Pressure> {
    method public int compareTo(androidx.health.connect.client.units.Pressure other);
    method public double getMillimetersOfMercury();
    method public static androidx.health.connect.client.units.Pressure millimetersOfMercury(double value);
    property public double inMillimetersOfMercury;
    field public static final androidx.health.connect.client.units.Pressure.Companion Companion;
  }

  public static final class Pressure.Companion {
    method public androidx.health.connect.client.units.Pressure millimetersOfMercury(double value);
  }

  public final class PressureKt {
    method @BytecodeOnly public static androidx.health.connect.client.units.Pressure! getMillimetersOfMercury(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Pressure! getMillimetersOfMercury(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Pressure! getMillimetersOfMercury(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Pressure! getMillimetersOfMercury(long);
    property public static androidx.health.connect.client.units.Pressure double.millimetersOfMercury;
    property public static androidx.health.connect.client.units.Pressure long.millimetersOfMercury;
    property public static androidx.health.connect.client.units.Pressure float.millimetersOfMercury;
    property public static androidx.health.connect.client.units.Pressure int.millimetersOfMercury;
  }

  public final class Temperature implements java.lang.Comparable<androidx.health.connect.client.units.Temperature> {
    method public static androidx.health.connect.client.units.Temperature celsius(double value);
    method public int compareTo(androidx.health.connect.client.units.Temperature other);
    method public static androidx.health.connect.client.units.Temperature fahrenheit(double value);
    method public double getCelsius();
    method public double getFahrenheit();
    property public double inCelsius;
    property public double inFahrenheit;
    field public static final androidx.health.connect.client.units.Temperature.Companion Companion;
  }

  public static final class Temperature.Companion {
    method public androidx.health.connect.client.units.Temperature celsius(double value);
    method public androidx.health.connect.client.units.Temperature fahrenheit(double value);
  }

  public final class TemperatureDelta implements java.lang.Comparable<androidx.health.connect.client.units.TemperatureDelta> {
    method public static androidx.health.connect.client.units.TemperatureDelta celsius(double value);
    method public int compareTo(androidx.health.connect.client.units.TemperatureDelta other);
    method public static androidx.health.connect.client.units.TemperatureDelta fahrenheit(double value);
    method public double getCelsius();
    method public double getFahrenheit();
    property public double inCelsius;
    property public double inFahrenheit;
    field public static final androidx.health.connect.client.units.TemperatureDelta.Companion Companion;
  }

  public static final class TemperatureDelta.Companion {
    method public androidx.health.connect.client.units.TemperatureDelta celsius(double value);
    method public androidx.health.connect.client.units.TemperatureDelta fahrenheit(double value);
  }

  public final class TemperatureKt {
    method @BytecodeOnly public static androidx.health.connect.client.units.Temperature! getCelsius(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Temperature! getCelsius(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Temperature! getCelsius(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Temperature! getCelsius(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Temperature! getFahrenheit(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Temperature! getFahrenheit(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Temperature! getFahrenheit(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Temperature! getFahrenheit(long);
    property public static androidx.health.connect.client.units.Temperature double.celsius;
    property public static androidx.health.connect.client.units.Temperature long.celsius;
    property public static androidx.health.connect.client.units.Temperature float.celsius;
    property public static androidx.health.connect.client.units.Temperature int.celsius;
    property public static androidx.health.connect.client.units.Temperature double.fahrenheit;
    property public static androidx.health.connect.client.units.Temperature long.fahrenheit;
    property public static androidx.health.connect.client.units.Temperature float.fahrenheit;
    property public static androidx.health.connect.client.units.Temperature int.fahrenheit;
  }

  public final class Velocity implements java.lang.Comparable<androidx.health.connect.client.units.Velocity> {
    method public int compareTo(androidx.health.connect.client.units.Velocity other);
    method public double getKilometersPerHour();
    method public double getMetersPerSecond();
    method public double getMilesPerHour();
    method public static androidx.health.connect.client.units.Velocity kilometersPerHour(double value);
    method public static androidx.health.connect.client.units.Velocity metersPerSecond(double value);
    method public static androidx.health.connect.client.units.Velocity milesPerHour(double value);
    property public double inKilometersPerHour;
    property public double inMetersPerSecond;
    property public double inMilesPerHour;
    field public static final androidx.health.connect.client.units.Velocity.Companion Companion;
  }

  public static final class Velocity.Companion {
    method public androidx.health.connect.client.units.Velocity kilometersPerHour(double value);
    method public androidx.health.connect.client.units.Velocity metersPerSecond(double value);
    method public androidx.health.connect.client.units.Velocity milesPerHour(double value);
  }

  public final class VelocityKt {
    method @BytecodeOnly public static androidx.health.connect.client.units.Velocity! getKilometersPerHour(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Velocity! getKilometersPerHour(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Velocity! getKilometersPerHour(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Velocity! getKilometersPerHour(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Velocity! getMetersPerSecond(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Velocity! getMetersPerSecond(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Velocity! getMetersPerSecond(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Velocity! getMetersPerSecond(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Velocity! getMilesPerHour(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Velocity! getMilesPerHour(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Velocity! getMilesPerHour(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Velocity! getMilesPerHour(long);
    property public static androidx.health.connect.client.units.Velocity double.kilometersPerHour;
    property public static androidx.health.connect.client.units.Velocity long.kilometersPerHour;
    property public static androidx.health.connect.client.units.Velocity float.kilometersPerHour;
    property public static androidx.health.connect.client.units.Velocity int.kilometersPerHour;
    property public static androidx.health.connect.client.units.Velocity double.metersPerSecond;
    property public static androidx.health.connect.client.units.Velocity long.metersPerSecond;
    property public static androidx.health.connect.client.units.Velocity float.metersPerSecond;
    property public static androidx.health.connect.client.units.Velocity int.metersPerSecond;
    property public static androidx.health.connect.client.units.Velocity double.milesPerHour;
    property public static androidx.health.connect.client.units.Velocity long.milesPerHour;
    property public static androidx.health.connect.client.units.Velocity float.milesPerHour;
    property public static androidx.health.connect.client.units.Velocity int.milesPerHour;
  }

  public final class Volume implements java.lang.Comparable<androidx.health.connect.client.units.Volume> {
    method public int compareTo(androidx.health.connect.client.units.Volume other);
    method public static androidx.health.connect.client.units.Volume fluidOuncesUs(double value);
    method public double getFluidOuncesUs();
    method public double getLiters();
    method public double getMilliliters();
    method public static androidx.health.connect.client.units.Volume liters(double value);
    method public static androidx.health.connect.client.units.Volume milliliters(double value);
    property public double inFluidOuncesUs;
    property public double inLiters;
    property public double inMilliliters;
    field public static final androidx.health.connect.client.units.Volume.Companion Companion;
  }

  public static final class Volume.Companion {
    method public androidx.health.connect.client.units.Volume fluidOuncesUs(double value);
    method public androidx.health.connect.client.units.Volume liters(double value);
    method public androidx.health.connect.client.units.Volume milliliters(double value);
  }

  public final class VolumeKt {
    method @BytecodeOnly public static androidx.health.connect.client.units.Volume! getFluidOuncesUs(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Volume! getFluidOuncesUs(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Volume! getFluidOuncesUs(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Volume! getFluidOuncesUs(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Volume! getLiters(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Volume! getLiters(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Volume! getLiters(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Volume! getLiters(long);
    method @BytecodeOnly public static androidx.health.connect.client.units.Volume! getMilliliters(double);
    method @BytecodeOnly public static androidx.health.connect.client.units.Volume! getMilliliters(float);
    method @BytecodeOnly public static androidx.health.connect.client.units.Volume! getMilliliters(int);
    method @BytecodeOnly public static androidx.health.connect.client.units.Volume! getMilliliters(long);
    property public static androidx.health.connect.client.units.Volume double.fluidOuncesUs;
    property public static androidx.health.connect.client.units.Volume long.fluidOuncesUs;
    property public static androidx.health.connect.client.units.Volume float.fluidOuncesUs;
    property public static androidx.health.connect.client.units.Volume int.fluidOuncesUs;
    property public static androidx.health.connect.client.units.Volume double.liters;
    property public static androidx.health.connect.client.units.Volume long.liters;
    property public static androidx.health.connect.client.units.Volume float.liters;
    property public static androidx.health.connect.client.units.Volume int.liters;
    property public static androidx.health.connect.client.units.Volume double.milliliters;
    property public static androidx.health.connect.client.units.Volume long.milliliters;
    property public static androidx.health.connect.client.units.Volume float.milliliters;
    property public static androidx.health.connect.client.units.Volume int.milliliters;
  }

}

