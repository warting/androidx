// Signature format: 4.0
package androidx.health.connect.client.testing {

  public final class AggregationTestUtils {
    method public static androidx.health.connect.client.aggregate.AggregationResult AggregationResult();
    method public static androidx.health.connect.client.aggregate.AggregationResult AggregationResult(optional java.util.Set<androidx.health.connect.client.records.metadata.DataOrigin> dataOrigins);
    method public static androidx.health.connect.client.aggregate.AggregationResult AggregationResult(optional java.util.Set<androidx.health.connect.client.records.metadata.DataOrigin> dataOrigins, optional java.util.Map<androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Object>,?> metrics);
  }

  public final class FakeHealthConnectClient implements androidx.health.connect.client.HealthConnectClient {
    ctor public FakeHealthConnectClient();
    ctor public FakeHealthConnectClient(optional String packageName, optional java.time.Clock clock, optional androidx.health.connect.client.PermissionController permissionController);
    method public suspend Object? aggregate(androidx.health.connect.client.request.AggregateRequest request, kotlin.coroutines.Continuation<? super androidx.health.connect.client.aggregate.AggregationResult>);
    method public suspend Object? aggregateGroupByDuration(androidx.health.connect.client.request.AggregateGroupByDurationRequest request, kotlin.coroutines.Continuation<? super java.util.List<androidx.health.connect.client.aggregate.AggregationResultGroupedByDuration>>);
    method public suspend Object? aggregateGroupByPeriod(androidx.health.connect.client.request.AggregateGroupByPeriodRequest request, kotlin.coroutines.Continuation<? super java.util.List<androidx.health.connect.client.aggregate.AggregationResultGroupedByPeriod>>);
    method public suspend Object? deleteRecords(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? deleteRecords(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType, java.util.List<java.lang.String> recordIdsList, java.util.List<java.lang.String> clientRecordIdsList, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public void expireToken(String token);
    method public suspend Object? getChanges(String changesToken, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.ChangesResponse>);
    method public suspend Object? getChangesToken(androidx.health.connect.client.request.ChangesTokenRequest request, kotlin.coroutines.Continuation<? super java.lang.String>);
    method public androidx.health.connect.client.testing.FakeHealthConnectClientOverrides getOverrides();
    method public int getPageSizeGetChanges();
    method public androidx.health.connect.client.PermissionController getPermissionController();
    method public suspend Object? insertRecords(java.util.List<? extends androidx.health.connect.client.records.Record> records, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.InsertRecordsResponse>);
    method public suspend <T extends androidx.health.connect.client.records.Record> Object? readRecord(kotlin.reflect.KClass<T> recordType, String recordId, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.ReadRecordResponse<T>>);
    method public suspend <T extends androidx.health.connect.client.records.Record> Object? readRecords(androidx.health.connect.client.request.ReadRecordsRequest<T> request, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.ReadRecordsResponse<T>>);
    method public void setPackageName(String newPackage);
    method public void setPageSizeGetChanges(int);
    method public suspend Object? updateRecords(java.util.List<? extends androidx.health.connect.client.records.Record> records, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public androidx.health.connect.client.HealthConnectFeatures features;
    property public androidx.health.connect.client.testing.FakeHealthConnectClientOverrides overrides;
    property public int pageSizeGetChanges;
    property public androidx.health.connect.client.PermissionController permissionController;
    field public static final androidx.health.connect.client.testing.FakeHealthConnectClient.Companion Companion;
    field public static final String DEFAULT_PACKAGE_NAME = "androidx.health.connect.test";
  }

  public static final class FakeHealthConnectClient.Companion {
    property public static String DEFAULT_PACKAGE_NAME;
  }

  public final class FakeHealthConnectClientOverrides {
    ctor public FakeHealthConnectClientOverrides();
    ctor public FakeHealthConnectClientOverrides(optional androidx.health.connect.client.testing.stubs.Stub<? super java.lang.String,androidx.health.connect.client.response.ChangesResponse>? getChanges, optional androidx.health.connect.client.testing.stubs.Stub<? super androidx.health.connect.client.request.ChangesTokenRequest,java.lang.String>? getChangesToken, optional androidx.health.connect.client.testing.stubs.Stub<? super androidx.health.connect.client.request.ReadRecordsRequest<? extends java.lang.Object?>,? extends androidx.health.connect.client.response.ReadRecordsResponse<? extends java.lang.Object?>>? readRecords, optional androidx.health.connect.client.testing.stubs.Stub<? super java.lang.String,? extends androidx.health.connect.client.response.ReadRecordResponse<? extends java.lang.Object?>>? readRecord, optional androidx.health.connect.client.testing.stubs.Stub<? super java.util.List<? extends java.lang.Object?>,androidx.health.connect.client.response.InsertRecordsResponse>? insertRecords, optional androidx.health.connect.client.testing.stubs.Stub? updateRecords, optional androidx.health.connect.client.testing.stubs.Stub? deleteRecords, optional androidx.health.connect.client.testing.stubs.Stub<? super androidx.health.connect.client.request.AggregateRequest,androidx.health.connect.client.aggregate.AggregationResult>? aggregate, optional androidx.health.connect.client.testing.stubs.Stub<? super androidx.health.connect.client.request.AggregateGroupByDurationRequest,? extends java.util.List<androidx.health.connect.client.aggregate.AggregationResultGroupedByDuration>>? aggregateGroupByDuration, optional androidx.health.connect.client.testing.stubs.Stub<? super androidx.health.connect.client.request.AggregateGroupByPeriodRequest,? extends java.util.List<androidx.health.connect.client.aggregate.AggregationResultGroupedByPeriod>>? aggregateGroupByPeriod);
    method public androidx.health.connect.client.testing.stubs.Stub<androidx.health.connect.client.request.AggregateRequest,androidx.health.connect.client.aggregate.AggregationResult>? getAggregate();
    method public androidx.health.connect.client.testing.stubs.Stub<androidx.health.connect.client.request.AggregateGroupByDurationRequest,java.util.List<androidx.health.connect.client.aggregate.AggregationResultGroupedByDuration>>? getAggregateGroupByDuration();
    method public androidx.health.connect.client.testing.stubs.Stub<androidx.health.connect.client.request.AggregateGroupByPeriodRequest,java.util.List<androidx.health.connect.client.aggregate.AggregationResultGroupedByPeriod>>? getAggregateGroupByPeriod();
    method public androidx.health.connect.client.testing.stubs.Stub? getDeleteRecords();
    method public androidx.health.connect.client.testing.stubs.Stub<java.lang.String,androidx.health.connect.client.response.ChangesResponse>? getGetChanges();
    method public androidx.health.connect.client.testing.stubs.Stub<androidx.health.connect.client.request.ChangesTokenRequest,java.lang.String>? getGetChangesToken();
    method public androidx.health.connect.client.testing.stubs.Stub<java.util.List<? extends java.lang.Object?>,androidx.health.connect.client.response.InsertRecordsResponse>? getInsertRecords();
    method public androidx.health.connect.client.testing.stubs.Stub<java.lang.String,androidx.health.connect.client.response.ReadRecordResponse<? extends java.lang.Object?>>? getReadRecord();
    method public androidx.health.connect.client.testing.stubs.Stub<androidx.health.connect.client.request.ReadRecordsRequest<? extends java.lang.Object?>,androidx.health.connect.client.response.ReadRecordsResponse<? extends java.lang.Object?>>? getReadRecords();
    method public androidx.health.connect.client.testing.stubs.Stub? getUpdateRecords();
    method public void setAggregate(androidx.health.connect.client.testing.stubs.Stub<? super androidx.health.connect.client.request.AggregateRequest,androidx.health.connect.client.aggregate.AggregationResult>?);
    method public void setAggregateGroupByDuration(androidx.health.connect.client.testing.stubs.Stub<? super androidx.health.connect.client.request.AggregateGroupByDurationRequest,? extends java.util.List<androidx.health.connect.client.aggregate.AggregationResultGroupedByDuration>>?);
    method public void setAggregateGroupByPeriod(androidx.health.connect.client.testing.stubs.Stub<? super androidx.health.connect.client.request.AggregateGroupByPeriodRequest,? extends java.util.List<androidx.health.connect.client.aggregate.AggregationResultGroupedByPeriod>>?);
    method public void setDeleteRecords(androidx.health.connect.client.testing.stubs.Stub?);
    method public void setGetChanges(androidx.health.connect.client.testing.stubs.Stub<? super java.lang.String,androidx.health.connect.client.response.ChangesResponse>?);
    method public void setGetChangesToken(androidx.health.connect.client.testing.stubs.Stub<? super androidx.health.connect.client.request.ChangesTokenRequest,java.lang.String>?);
    method public void setInsertRecords(androidx.health.connect.client.testing.stubs.Stub<? super java.util.List<? extends java.lang.Object?>,androidx.health.connect.client.response.InsertRecordsResponse>?);
    method public void setReadRecord(androidx.health.connect.client.testing.stubs.Stub<? super java.lang.String,? extends androidx.health.connect.client.response.ReadRecordResponse<? extends java.lang.Object?>>?);
    method public void setReadRecords(androidx.health.connect.client.testing.stubs.Stub<? super androidx.health.connect.client.request.ReadRecordsRequest<? extends java.lang.Object?>,? extends androidx.health.connect.client.response.ReadRecordsResponse<? extends java.lang.Object?>>?);
    method public void setUpdateRecords(androidx.health.connect.client.testing.stubs.Stub?);
    property public androidx.health.connect.client.testing.stubs.Stub<androidx.health.connect.client.request.AggregateRequest,androidx.health.connect.client.aggregate.AggregationResult>? aggregate;
    property public androidx.health.connect.client.testing.stubs.Stub<androidx.health.connect.client.request.AggregateGroupByDurationRequest,java.util.List<androidx.health.connect.client.aggregate.AggregationResultGroupedByDuration>>? aggregateGroupByDuration;
    property public androidx.health.connect.client.testing.stubs.Stub<androidx.health.connect.client.request.AggregateGroupByPeriodRequest,java.util.List<androidx.health.connect.client.aggregate.AggregationResultGroupedByPeriod>>? aggregateGroupByPeriod;
    property public androidx.health.connect.client.testing.stubs.Stub<java.lang.Object,java.lang.Void>? deleteRecords;
    property public androidx.health.connect.client.testing.stubs.Stub<java.lang.String,androidx.health.connect.client.response.ChangesResponse>? getChanges;
    property public androidx.health.connect.client.testing.stubs.Stub<androidx.health.connect.client.request.ChangesTokenRequest,java.lang.String>? getChangesToken;
    property public androidx.health.connect.client.testing.stubs.Stub<java.util.List<? extends java.lang.Object?>,androidx.health.connect.client.response.InsertRecordsResponse>? insertRecords;
    property public androidx.health.connect.client.testing.stubs.Stub<java.lang.String,androidx.health.connect.client.response.ReadRecordResponse<? extends java.lang.Object?>>? readRecord;
    property public androidx.health.connect.client.testing.stubs.Stub<androidx.health.connect.client.request.ReadRecordsRequest<? extends java.lang.Object?>,androidx.health.connect.client.response.ReadRecordsResponse<? extends java.lang.Object?>>? readRecords;
    property public androidx.health.connect.client.testing.stubs.Stub<java.lang.Object,java.lang.Void>? updateRecords;
  }

  public final class FakePermissionController implements androidx.health.connect.client.PermissionController {
    ctor public FakePermissionController();
    ctor public FakePermissionController(optional boolean grantAll);
    method public suspend Object? getGrantedPermissions(kotlin.coroutines.Continuation<? super java.util.Set<java.lang.String>>);
    method public void grantPermission(String permission);
    method public void grantPermissions(java.util.Set<java.lang.String> permission);
    method public void replaceGrantedPermissions(java.util.Set<java.lang.String> permissions);
    method public suspend Object? revokeAllPermissions(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public void revokePermission(String permission);
  }

  public final class MetadataTestHelper {
    method public static androidx.health.connect.client.records.metadata.Metadata populatedWithTestValues(androidx.health.connect.client.records.metadata.Metadata);
    method public static androidx.health.connect.client.records.metadata.Metadata populatedWithTestValues(androidx.health.connect.client.records.metadata.Metadata, optional String id);
    method public static androidx.health.connect.client.records.metadata.Metadata populatedWithTestValues(androidx.health.connect.client.records.metadata.Metadata, optional String id, optional androidx.health.connect.client.records.metadata.DataOrigin dataOrigin);
    method public static androidx.health.connect.client.records.metadata.Metadata populatedWithTestValues(androidx.health.connect.client.records.metadata.Metadata, optional String id, optional androidx.health.connect.client.records.metadata.DataOrigin dataOrigin, optional java.time.Instant lastModifiedTime);
  }

}

package androidx.health.connect.client.testing.stubs {

  public final class MutableStub<T, R> implements androidx.health.connect.client.testing.stubs.Stub<T,R> {
    ctor public MutableStub();
    ctor public MutableStub(optional kotlin.jvm.functions.Function1<? super T,? extends R?> defaultHandler);
    method public kotlin.jvm.functions.Function1<T,R?> getDefaultHandler();
    method public R? next(T request);
    method public void setDefaultHandler(kotlin.jvm.functions.Function1<? super T,? extends R?>);
    property public kotlin.jvm.functions.Function1<T,R?> defaultHandler;
  }

  public final class MutableStubKt {
    method public static <R> androidx.health.connect.client.testing.stubs.MutableStub<java.lang.Object?,R> MutableStub(Throwable defaultError);
    method public static <R> androidx.health.connect.client.testing.stubs.MutableStub<java.lang.Object?,R> MutableStub(R? defaultResponse);
    method public static inline <T, R> androidx.health.connect.client.testing.stubs.Stub<T,R> buildStub(kotlin.jvm.functions.Function1<? super androidx.health.connect.client.testing.stubs.MutableStub<T,R>,kotlin.Unit> builder);
    method public static <R> void enqueue(androidx.health.connect.client.testing.stubs.MutableStub<? extends java.lang.Object?,R>, Iterable<? extends R> values);
    method public static <R> void enqueue(androidx.health.connect.client.testing.stubs.MutableStub<? extends java.lang.Object?,R>, R... values);
    method public static operator <R> void plusAssign(androidx.health.connect.client.testing.stubs.MutableStub<? extends java.lang.Object?,R>, R value);
  }

  public fun interface Stub<T, R> {
    method public R? next(T request);
  }

  public final class StubKt {
    method public static inline <R> androidx.health.connect.client.testing.stubs.Stub<java.lang.Object?,R> stub();
    method public static inline <R> androidx.health.connect.client.testing.stubs.Stub<java.lang.Object?,R> stub(optional Iterable<? extends R> queue);
    method public static inline <R> androidx.health.connect.client.testing.stubs.Stub<java.lang.Object?,R> stub(optional Iterable<? extends R> queue, optional kotlin.jvm.functions.Function0<? extends R?> defaultHandler);
    method public static <R> androidx.health.connect.client.testing.stubs.Stub<java.lang.Object?,R> stub(R? default);
  }

}

